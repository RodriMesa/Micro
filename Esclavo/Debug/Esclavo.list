
Esclavo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004008  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004190  08004190  00014190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a0  080041a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041a0  080041a0  000141a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041a8  080041a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  080041bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080041bc  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c723  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ca3  00000000  00000000  0002c75f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c10  00000000  00000000  0002e408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b18  00000000  00000000  0002f018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fe7f  00000000  00000000  0002fb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098cf  00000000  00000000  0004f9af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7d03  00000000  00000000  0005927e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120f81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c8  00000000  00000000  00120ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004178 	.word	0x08004178

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004178 	.word	0x08004178

080001c8 <__aeabi_d2iz>:
 80001c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80001cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80001d0:	d215      	bcs.n	80001fe <__aeabi_d2iz+0x36>
 80001d2:	d511      	bpl.n	80001f8 <__aeabi_d2iz+0x30>
 80001d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80001d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80001dc:	d912      	bls.n	8000204 <__aeabi_d2iz+0x3c>
 80001de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80001e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80001e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80001ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ee:	fa23 f002 	lsr.w	r0, r3, r2
 80001f2:	bf18      	it	ne
 80001f4:	4240      	negne	r0, r0
 80001f6:	4770      	bx	lr
 80001f8:	f04f 0000 	mov.w	r0, #0
 80001fc:	4770      	bx	lr
 80001fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000202:	d105      	bne.n	8000210 <__aeabi_d2iz+0x48>
 8000204:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000208:	bf08      	it	eq
 800020a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800020e:	4770      	bx	lr
 8000210:	f04f 0000 	mov.w	r0, #0
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <MX_GPIO_Init+0xc4>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a29      	ldr	r2, [pc, #164]	; (80005dc <MX_GPIO_Init+0xc4>)
 8000538:	f043 0310 	orr.w	r3, r3, #16
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b27      	ldr	r3, [pc, #156]	; (80005dc <MX_GPIO_Init+0xc4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0310 	and.w	r3, r3, #16
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	4b23      	ldr	r3, [pc, #140]	; (80005dc <MX_GPIO_Init+0xc4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a22      	ldr	r2, [pc, #136]	; (80005dc <MX_GPIO_Init+0xc4>)
 8000554:	f043 0304 	orr.w	r3, r3, #4
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b20      	ldr	r3, [pc, #128]	; (80005dc <MX_GPIO_Init+0xc4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0304 	and.w	r3, r3, #4
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <MX_GPIO_Init+0xc4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <MX_GPIO_Init+0xc4>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b19      	ldr	r3, [pc, #100]	; (80005dc <MX_GPIO_Init+0xc4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, dir2_Pin|dir1_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2106      	movs	r1, #6
 8000586:	4816      	ldr	r0, [pc, #88]	; (80005e0 <MX_GPIO_Init+0xc8>)
 8000588:	f001 f8e0 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, out2_Pin|out1_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000592:	4814      	ldr	r0, [pc, #80]	; (80005e4 <MX_GPIO_Init+0xcc>)
 8000594:	f001 f8da 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = dir2_Pin|dir1_Pin;
 8000598:	2306      	movs	r3, #6
 800059a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4619      	mov	r1, r3
 80005ae:	480c      	ldr	r0, [pc, #48]	; (80005e0 <MX_GPIO_Init+0xc8>)
 80005b0:	f000 ff32 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = out2_Pin|out1_Pin;
 80005b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	4619      	mov	r1, r3
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_GPIO_Init+0xcc>)
 80005ce:	f000 ff23 	bl	8001418 <HAL_GPIO_Init>

}
 80005d2:	bf00      	nop
 80005d4:	3720      	adds	r7, #32
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40020800 	.word	0x40020800

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b0ed      	sub	sp, #436	; 0x1b4
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Declarar variables
	int cant = 0, flag_activacion, flag_homing;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	double instrucciones[50] = { };
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	4618      	mov	r0, r3
 80005fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80005fe:	461a      	mov	r2, r3
 8000600:	2100      	movs	r1, #0
 8000602:	f003 fdb1 	bl	8004168 <memset>
	enum Estado {
		Activado, Desactivado, Modo_Homing, Modo_Normal, Error
	};
	// init variables
	enum Estado estado = Desactivado;
 8000606:	2301      	movs	r3, #1
 8000608:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
	int comando;
	flag_activacion = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	flag_homing = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fd58 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f8e6 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f7ff ff7a 	bl	8000518 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000624:	f000 fab0 	bl	8000b88 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000628:	f000 fb04 	bl	8000c34 <MX_TIM3_Init>
  MX_TIM9_Init();
 800062c:	f000 fb56 	bl	8000cdc <MX_TIM9_Init>
  MX_TIM12_Init();
 8000630:	f000 fbb4 	bl	8000d9c <MX_TIM12_Init>
  MX_SPI2_Init();
 8000634:	f000 f97c 	bl	8000930 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	4965      	ldr	r1, [pc, #404]	; (80007d0 <main+0x1e8>)
 800063c:	4865      	ldr	r0, [pc, #404]	; (80007d4 <main+0x1ec>)
 800063e:	f001 fdb3 	bl	80021a8 <HAL_SPI_Receive_IT>
			//flag = 0;
			//flag1 = 0;
			//HAL_SPI_Receive_IT(&hspi2, &dato, 1);
	//	}
		//Generar comando
		if (str[cont_datos_SPI - 1] == ':' && flag_mensaje_completo == 0) {
 8000642:	4b65      	ldr	r3, [pc, #404]	; (80007d8 <main+0x1f0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a64      	ldr	r2, [pc, #400]	; (80007dc <main+0x1f4>)
 800064a:	5cd3      	ldrb	r3, [r2, r3]
 800064c:	2b3a      	cmp	r3, #58	; 0x3a
 800064e:	d101      	bne.n	8000654 <main+0x6c>
 8000650:	4b63      	ldr	r3, [pc, #396]	; (80007e0 <main+0x1f8>)
 8000652:	681b      	ldr	r3, [r3, #0]
			//cant = identificador(str, instrucciones, cont);
			//flag1 = 1;
		}
		// identificar comandos

		if (flag_mensaje_completo == 1) {
 8000654:	4b62      	ldr	r3, [pc, #392]	; (80007e0 <main+0x1f8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	f040 80a6 	bne.w	80007aa <main+0x1c2>
			for (int i = 0; i < cant; i++) {
 800065e:	2300      	movs	r3, #0
 8000660:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000664:	e09a      	b.n	800079c <main+0x1b4>
				comando = (int) instrucciones[i];
 8000666:	f107 0208 	add.w	r2, r7, #8
 800066a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	4413      	add	r3, r2
 8000672:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000676:	4618      	mov	r0, r3
 8000678:	4621      	mov	r1, r4
 800067a:	f7ff fda5 	bl	80001c8 <__aeabi_d2iz>
 800067e:	4603      	mov	r3, r0
 8000680:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
				//fprintf(&uart_io,"%d",comando);
				switch (comando) {
 8000684:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000688:	2b06      	cmp	r3, #6
 800068a:	d87f      	bhi.n	800078c <main+0x1a4>
 800068c:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <main+0xac>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	080006c7 	.word	0x080006c7
 8000698:	080006b1 	.word	0x080006b1
 800069c:	0800078d 	.word	0x0800078d
 80006a0:	080006dd 	.word	0x080006dd
 80006a4:	080006f3 	.word	0x080006f3
 80006a8:	0800070b 	.word	0x0800070b
 80006ac:	0800071f 	.word	0x0800071f
				case Desactivar:
					if (flag_activacion) {
 80006b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d062      	beq.n	800077e <main+0x196>
						//desactivar PWM baja el pin del motor
						//Comunica que desactivo Interrumpe
						estado = Desactivado;
 80006b8:	2301      	movs	r3, #1
 80006ba:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
						flag_activacion = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
					} else {
					}
					break;
 80006c4:	e05b      	b.n	800077e <main+0x196>
				case Activar:
					if (!flag_activacion) {
 80006c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d159      	bne.n	8000782 <main+0x19a>
						//inicializa PWM FRECUENCIA 1 KHZ PWM1 Resolución 7.4 e-4 volts por paso 16000 pasos hasta TOP
						//configurar_prescaler_TIMER1(1000);
						//inicializa PWM FRECUENCIA 1 KHZ PWM2 Resolución 0.048volts por paso 249 pasos hasta TOP
						//configurar_prescaler_TIMER2(1000);
						//seteamos pwms
						estado = Activado;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
						flag_activacion = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
					} else {
					}
					break;
 80006da:	e052      	b.n	8000782 <main+0x19a>
				case Modo_homing:
					if (flag_activacion) {
 80006dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d050      	beq.n	8000786 <main+0x19e>
						//Realizar homming:configurar PWM a vel baja:
						//simular un fin de carrera con un pull y una interrupcion
						flag_homing = 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
						estado = Modo_Homing;
 80006ea:	2302      	movs	r3, #2
 80006ec:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
					}
					break;
 80006f0:	e049      	b.n	8000786 <main+0x19e>
				case Modo_ir:
					if (flag_activacion && flag_homing) {
 80006f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d047      	beq.n	800078a <main+0x1a2>
 80006fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d043      	beq.n	800078a <main+0x1a2>
						// saca vel media con consigna, la pos actual y tiempo
						//calcula el duty cycle segun la vel
						//calcula la cantidad de pulsos del enconder para llegar a esta pos
						estado = Modo_Normal;
 8000702:	2303      	movs	r3, #3
 8000704:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
					}
					break;
 8000708:	e03f      	b.n	800078a <main+0x1a2>
				case error:
					//apagar todo
					flag_homing = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					estado = Desactivado;
 8000710:	2301      	movs	r3, #1
 8000712:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
					flag_activacion = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
					break;
 800071c:	e036      	b.n	800078c <main+0x1a4>
				case Preguntar:
					HAL_SPI_Abort_IT(&hspi2);
 800071e:	482d      	ldr	r0, [pc, #180]	; (80007d4 <main+0x1ec>)
 8000720:	f001 fe6c 	bl	80023fc <HAL_SPI_Abort_IT>
					//Revisa el estado, interuumpe y guarada el estado en el puerto SP
					if (estado == Desactivado) {
 8000724:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8000728:	2b01      	cmp	r3, #1
 800072a:	d107      	bne.n	800073c <main+0x154>
						pTxData = 'D';
 800072c:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <main+0x1fc>)
 800072e:	2244      	movs	r2, #68	; 0x44
 8000730:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	492b      	ldr	r1, [pc, #172]	; (80007e4 <main+0x1fc>)
 8000736:	4827      	ldr	r0, [pc, #156]	; (80007d4 <main+0x1ec>)
 8000738:	f001 fcb4 	bl	80020a4 <HAL_SPI_Transmit_IT>
					} else if (estado == Error) {
						//pTxData = 'E';
						//hspi2.pTxBuffPtr = (uint8_t*) pTxData;

					}
					HAL_GPIO_WritePin(GPIOC, out1_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000742:	4829      	ldr	r0, [pc, #164]	; (80007e8 <main+0x200>)
 8000744:	f001 f802 	bl	800174c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, out1_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074e:	4826      	ldr	r0, [pc, #152]	; (80007e8 <main+0x200>)
 8000750:	f000 fffc 	bl	800174c <HAL_GPIO_WritePin>
					__HAL_SPI_CLEAR_OVRFLAG(&hspi2);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <main+0x1ec>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	68da      	ldr	r2, [r3, #12]
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <main+0x1ec>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	689a      	ldr	r2, [r3, #8]
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	681b      	ldr	r3, [r3, #0]
					HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI,1);
 8000772:	2201      	movs	r2, #1
 8000774:	4916      	ldr	r1, [pc, #88]	; (80007d0 <main+0x1e8>)
 8000776:	4817      	ldr	r0, [pc, #92]	; (80007d4 <main+0x1ec>)
 8000778:	f001 fd16 	bl	80021a8 <HAL_SPI_Receive_IT>
					break;
 800077c:	e006      	b.n	800078c <main+0x1a4>
					break;
 800077e:	bf00      	nop
 8000780:	e004      	b.n	800078c <main+0x1a4>
					break;
 8000782:	bf00      	nop
 8000784:	e002      	b.n	800078c <main+0x1a4>
					break;
 8000786:	bf00      	nop
 8000788:	e000      	b.n	800078c <main+0x1a4>
					break;
 800078a:	bf00      	nop
				case Estados:
					//Revisa el estado, interuumpe y guarada el estado en el puerto SP
					break;
				}
				flag_mensaje_completo = 2;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <main+0x1f8>)
 800078e:	2202      	movs	r2, #2
 8000790:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < cant; i++) {
 8000792:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000796:	3301      	adds	r3, #1
 8000798:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800079c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80007a0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80007a4:	429a      	cmp	r2, r3
 80007a6:	f6ff af5e 	blt.w	8000666 <main+0x7e>
			}
		}
		switch (estado) {
 80007aa:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	f63f af47 	bhi.w	8000642 <main+0x5a>
 80007b4:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <main+0x1d4>)
 80007b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ba:	bf00      	nop
 80007bc:	08000643 	.word	0x08000643
 80007c0:	08000643 	.word	0x08000643
 80007c4:	08000643 	.word	0x08000643
 80007c8:	08000643 	.word	0x08000643
 80007cc:	08000643 	.word	0x08000643
 80007d0:	20000066 	.word	0x20000066
 80007d4:	20000068 	.word	0x20000068
 80007d8:	2000002c 	.word	0x2000002c
 80007dc:	20000034 	.word	0x20000034
 80007e0:	20000030 	.word	0x20000030
 80007e4:	20000028 	.word	0x20000028
 80007e8:	40020800 	.word	0x40020800

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	; 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0320 	add.w	r3, r7, #32
 80007f6:	2230      	movs	r2, #48	; 0x30
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fcb4 	bl	8004168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <SystemClock_Config+0xcc>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	4a27      	ldr	r2, [pc, #156]	; (80008b8 <SystemClock_Config+0xcc>)
 800081a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081e:	6413      	str	r3, [r2, #64]	; 0x40
 8000820:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <SystemClock_Config+0xcc>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <SystemClock_Config+0xd0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a21      	ldr	r2, [pc, #132]	; (80008bc <SystemClock_Config+0xd0>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <SystemClock_Config+0xd0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000850:	2310      	movs	r3, #16
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000854:	2302      	movs	r3, #2
 8000856:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000858:	2300      	movs	r3, #0
 800085a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800085c:	2308      	movs	r3, #8
 800085e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000860:	23a8      	movs	r3, #168	; 0xa8
 8000862:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000864:	2302      	movs	r3, #2
 8000866:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000868:	2307      	movs	r3, #7
 800086a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 0320 	add.w	r3, r7, #32
 8000870:	4618      	mov	r0, r3
 8000872:	f000 ff85 	bl	8001780 <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800087c:	f000 f850 	bl	8000920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	230f      	movs	r3, #15
 8000882:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000884:	2302      	movs	r3, #2
 8000886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800088c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000890:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000892:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000896:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2105      	movs	r1, #5
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 f9de 	bl	8001c60 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008aa:	f000 f839 	bl	8000920 <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3750      	adds	r7, #80	; 0x50
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000

080008c0 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	cont_datos_SPI++;
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_SPI_RxCpltCallback+0x4c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <HAL_SPI_RxCpltCallback+0x4c>)
 80008d0:	6013      	str	r3, [r2, #0]
	str[cont_datos_SPI - 1] = dato_recepcion_SPI;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_SPI_RxCpltCallback+0x4c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <HAL_SPI_RxCpltCallback+0x50>)
 80008da:	7811      	ldrb	r1, [r2, #0]
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <HAL_SPI_RxCpltCallback+0x54>)
 80008de:	54d1      	strb	r1, [r2, r3]
	if(str[cont_datos_SPI - 1]==':'){
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_SPI_RxCpltCallback+0x4c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <HAL_SPI_RxCpltCallback+0x54>)
 80008e8:	5cd3      	ldrb	r3, [r2, r3]
 80008ea:	2b3a      	cmp	r3, #58	; 0x3a
 80008ec:	d105      	bne.n	80008fa <HAL_SPI_RxCpltCallback+0x3a>
		flag_mensaje_completo = 0;
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_SPI_RxCpltCallback+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
		cont_datos_SPI=0;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_SPI_RxCpltCallback+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
	}
	HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 80008fa:	2201      	movs	r2, #1
 80008fc:	4904      	ldr	r1, [pc, #16]	; (8000910 <HAL_SPI_RxCpltCallback+0x50>)
 80008fe:	4807      	ldr	r0, [pc, #28]	; (800091c <HAL_SPI_RxCpltCallback+0x5c>)
 8000900:	f001 fc52 	bl	80021a8 <HAL_SPI_Receive_IT>

}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000002c 	.word	0x2000002c
 8000910:	20000066 	.word	0x20000066
 8000914:	20000034 	.word	0x20000034
 8000918:	20000030 	.word	0x20000030
 800091c:	20000068 	.word	0x20000068

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_SPI2_Init+0x5c>)
 8000936:	4a16      	ldr	r2, [pc, #88]	; (8000990 <MX_SPI2_Init+0x60>)
 8000938:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_SPI2_Init+0x5c>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_SPI2_Init+0x5c>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_SPI2_Init+0x5c>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_SPI2_Init+0x5c>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_SPI2_Init+0x5c>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_SPI2_Init+0x5c>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_SPI2_Init+0x5c>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_SPI2_Init+0x5c>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_SPI2_Init+0x5c>)
 800096c:	2200      	movs	r2, #0
 800096e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_SPI2_Init+0x5c>)
 8000972:	220a      	movs	r2, #10
 8000974:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_SPI2_Init+0x5c>)
 8000978:	f001 fb30 	bl	8001fdc <HAL_SPI_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8000982:	f7ff ffcd 	bl	8000920 <Error_Handler>
  }

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000068 	.word	0x20000068
 8000990:	40003800 	.word	0x40003800

08000994 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a2c      	ldr	r2, [pc, #176]	; (8000a64 <HAL_SPI_MspInit+0xd0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d152      	bne.n	8000a5c <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <HAL_SPI_MspInit+0xd4>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a2a      	ldr	r2, [pc, #168]	; (8000a68 <HAL_SPI_MspInit+0xd4>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <HAL_SPI_MspInit+0xd4>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <HAL_SPI_MspInit+0xd4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <HAL_SPI_MspInit+0xd4>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <HAL_SPI_MspInit+0xd4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_SPI_MspInit+0xd4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <HAL_SPI_MspInit+0xd4>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_SPI_MspInit+0xd4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4811      	ldr	r0, [pc, #68]	; (8000a6c <HAL_SPI_MspInit+0xd8>)
 8000a26:	f000 fcf7 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <HAL_SPI_MspInit+0xdc>)
 8000a48:	f000 fce6 	bl	8001418 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2024      	movs	r0, #36	; 0x24
 8000a52:	f000 fc88 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000a56:	2024      	movs	r0, #36	; 0x24
 8000a58:	f000 fca1 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40003800 	.word	0x40003800
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	40020400 	.word	0x40020400

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 fb2a 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <TIM1_CC_IRQHandler+0x10>)
 8000b26:	f002 fc68 	bl	80033fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000100 	.word	0x20000100

08000b34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <TIM3_IRQHandler+0x10>)
 8000b3a:	f002 fc5e 	bl	80033fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000c0 	.word	0x200000c0

08000b48 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <SPI2_IRQHandler+0x10>)
 8000b4e:	f001 fd4f 	bl	80025f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000068 	.word	0x20000068

08000b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <SystemInit+0x28>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b66:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <SystemInit+0x28>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SystemInit+0x28>)
 8000b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b76:	609a      	str	r2, [r3, #8]
#endif
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	2224      	movs	r2, #36	; 0x24
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 fae6 	bl	8004168 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MX_TIM1_Init+0xa4>)
 8000ba6:	4a22      	ldr	r2, [pc, #136]	; (8000c30 <MX_TIM1_Init+0xa8>)
 8000ba8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <MX_TIM1_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_TIM1_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <MX_TIM1_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <MX_TIM1_Init+0xa4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_TIM1_Init+0xa4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_TIM1_Init+0xa4>)
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be6:	2301      	movs	r3, #1
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 8000bea:	2304      	movs	r3, #4
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <MX_TIM1_Init+0xa4>)
 8000bfa:	f002 fb6c 	bl	80032d6 <HAL_TIM_Encoder_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000c04:	f7ff fe8c 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8000c08:	2340      	movs	r3, #64	; 0x40
 8000c0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_TIM1_Init+0xa4>)
 8000c16:	f003 f9f3 	bl	8004000 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000c20:	f7ff fe7e 	bl	8000920 <Error_Handler>
  }

}
 8000c24:	bf00      	nop
 8000c26:	3730      	adds	r7, #48	; 0x30
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000100 	.word	0x20000100
 8000c30:	40010000 	.word	0x40010000

08000c34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	2224      	movs	r2, #36	; 0x24
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fa90 	bl	8004168 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8000c50:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MX_TIM3_Init+0xa0>)
 8000c52:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <MX_TIM3_Init+0xa4>)
 8000c54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_TIM3_Init+0xa0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_TIM3_Init+0xa0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_TIM3_Init+0xa0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_TIM3_Init+0xa0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_TIM3_Init+0xa0>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 8000c80:	2304      	movs	r3, #4
 8000c82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 8000c90:	2304      	movs	r3, #4
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_TIM3_Init+0xa0>)
 8000ca0:	f002 fb19 	bl	80032d6 <HAL_TIM_Encoder_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000caa:	f7ff fe39 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000cae:	2350      	movs	r3, #80	; 0x50
 8000cb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_TIM3_Init+0xa0>)
 8000cbc:	f003 f9a0 	bl	8004000 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000cc6:	f7ff fe2b 	bl	8000920 <Error_Handler>
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3730      	adds	r7, #48	; 0x30
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000c0 	.word	0x200000c0
 8000cd8:	40000400 	.word	0x40000400

08000cdc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	; 0x30
 8000ce0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	615a      	str	r2, [r3, #20]
 8000d00:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <MX_TIM9_Init+0xb8>)
 8000d04:	4a24      	ldr	r2, [pc, #144]	; (8000d98 <MX_TIM9_Init+0xbc>)
 8000d06:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1;
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <MX_TIM9_Init+0xb8>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <MX_TIM9_Init+0xb8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4199;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <MX_TIM9_Init+0xb8>)
 8000d16:	f241 0267 	movw	r2, #4199	; 0x1067
 8000d1a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_TIM9_Init+0xb8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_TIM9_Init+0xb8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000d28:	481a      	ldr	r0, [pc, #104]	; (8000d94 <MX_TIM9_Init+0xb8>)
 8000d2a:	f002 fa3f 	bl	80031ac <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f7ff fdf4 	bl	8000920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0320 	add.w	r3, r7, #32
 8000d42:	4619      	mov	r1, r3
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <MX_TIM9_Init+0xb8>)
 8000d46:	f002 fd87 	bl	8003858 <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000d50:	f7ff fde6 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8000d54:	480f      	ldr	r0, [pc, #60]	; (8000d94 <MX_TIM9_Init+0xb8>)
 8000d56:	f002 fa54 	bl	8003202 <HAL_TIM_OC_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000d60:	f7ff fdde 	bl	8000920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_TIM9_Init+0xb8>)
 8000d7c:	f002 fc46 	bl	800360c <HAL_TIM_OC_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8000d86:	f7ff fdcb 	bl	8000920 <Error_Handler>
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3730      	adds	r7, #48	; 0x30
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000140 	.word	0x20000140
 8000d98:	40014000 	.word	0x40014000

08000d9c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
 8000dbe:	615a      	str	r2, [r3, #20]
 8000dc0:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <MX_TIM12_Init+0xd4>)
 8000dc4:	4a2b      	ldr	r2, [pc, #172]	; (8000e74 <MX_TIM12_Init+0xd8>)
 8000dc6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8000dc8:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <MX_TIM12_Init+0xd4>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <MX_TIM12_Init+0xd4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2799;
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <MX_TIM12_Init+0xd4>)
 8000dd6:	f640 22ef 	movw	r2, #2799	; 0xaef
 8000dda:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <MX_TIM12_Init+0xd4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de2:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <MX_TIM12_Init+0xd4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000de8:	4821      	ldr	r0, [pc, #132]	; (8000e70 <MX_TIM12_Init+0xd4>)
 8000dea:	f002 f9df 	bl	80031ac <HAL_TIM_Base_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8000df4:	f7ff fd94 	bl	8000920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	4619      	mov	r1, r3
 8000e04:	481a      	ldr	r0, [pc, #104]	; (8000e70 <MX_TIM12_Init+0xd4>)
 8000e06:	f002 fd27 	bl	8003858 <HAL_TIM_ConfigClockSource>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8000e10:	f7ff fd86 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000e14:	4816      	ldr	r0, [pc, #88]	; (8000e70 <MX_TIM12_Init+0xd4>)
 8000e16:	f002 fa29 	bl	800326c <HAL_TIM_PWM_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8000e20:	f7ff fd7e 	bl	8000920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e24:	2360      	movs	r3, #96	; 0x60
 8000e26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2200      	movs	r2, #0
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_TIM12_Init+0xd4>)
 8000e3c:	f002 fc46 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8000e46:	f7ff fd6b 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4807      	ldr	r0, [pc, #28]	; (8000e70 <MX_TIM12_Init+0xd4>)
 8000e52:	f002 fc3b 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8000e5c:	f7ff fd60 	bl	8000920 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8000e60:	4803      	ldr	r0, [pc, #12]	; (8000e70 <MX_TIM12_Init+0xd4>)
 8000e62:	f000 f8cf 	bl	8001004 <HAL_TIM_MspPostInit>

}
 8000e66:	bf00      	nop
 8000e68:	3730      	adds	r7, #48	; 0x30
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000180 	.word	0x20000180
 8000e74:	40001800 	.word	0x40001800

08000e78 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	; 0x30
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a3a      	ldr	r2, [pc, #232]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x108>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d135      	bne.n	8000f06 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x10c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a38      	ldr	r2, [pc, #224]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x10c>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x10c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
 8000eb4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	4b32      	ldr	r3, [pc, #200]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x10c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a31      	ldr	r2, [pc, #196]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x10c>)
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b2f      	ldr	r3, [pc, #188]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x10c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000ed2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4826      	ldr	r0, [pc, #152]	; (8000f88 <HAL_TIM_Encoder_MspInit+0x110>)
 8000ef0:	f000 fa92 	bl	8001418 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	201b      	movs	r0, #27
 8000efa:	f000 fa34 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000efe:	201b      	movs	r0, #27
 8000f00:	f000 fa4d 	bl	800139e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f04:	e038      	b.n	8000f78 <HAL_TIM_Encoder_MspInit+0x100>
  else if(tim_encoderHandle->Instance==TIM3)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a20      	ldr	r2, [pc, #128]	; (8000f8c <HAL_TIM_Encoder_MspInit+0x114>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d133      	bne.n	8000f78 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x10c>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x10c>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x10c>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x10c>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x10c>)
 8000f36:	f043 0304 	orr.w	r3, r3, #4
 8000f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x10c>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f48:	23c0      	movs	r3, #192	; 0xc0
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f54:	2302      	movs	r3, #2
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	480b      	ldr	r0, [pc, #44]	; (8000f90 <HAL_TIM_Encoder_MspInit+0x118>)
 8000f64:	f000 fa58 	bl	8001418 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	201d      	movs	r0, #29
 8000f6e:	f000 f9fa 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f72:	201d      	movs	r0, #29
 8000f74:	f000 fa13 	bl	800139e <HAL_NVIC_EnableIRQ>
}
 8000f78:	bf00      	nop
 8000f7a:	3730      	adds	r7, #48	; 0x30
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40010000 	.word	0x40010000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40000400 	.word	0x40000400
 8000f90:	40020800 	.word	0x40020800

08000f94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <HAL_TIM_Base_MspInit+0x64>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d10e      	bne.n	8000fc4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_TIM_Base_MspInit+0x68>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <HAL_TIM_Base_MspInit+0x68>)
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_TIM_Base_MspInit+0x68>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8000fc2:	e012      	b.n	8000fea <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM12)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <HAL_TIM_Base_MspInit+0x6c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10d      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_TIM_Base_MspInit+0x68>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <HAL_TIM_Base_MspInit+0x68>)
 8000fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_TIM_Base_MspInit+0x68>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40014000 	.word	0x40014000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40001800 	.word	0x40001800

08001004 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a12      	ldr	r2, [pc, #72]	; (800106c <HAL_TIM_MspPostInit+0x68>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d11e      	bne.n	8001064 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_TIM_MspPostInit+0x6c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_TIM_MspPostInit+0x6c>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_TIM_MspPostInit+0x6c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration    
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001042:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001046:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001054:	2309      	movs	r3, #9
 8001056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4619      	mov	r1, r3
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_TIM_MspPostInit+0x70>)
 8001060:	f000 f9da 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40001800 	.word	0x40001800
 8001070:	40023800 	.word	0x40023800
 8001074:	40020400 	.word	0x40020400

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800107c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800107e:	e003      	b.n	8001088 <LoopCopyDataInit>

08001080 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001082:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001084:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001086:	3104      	adds	r1, #4

08001088 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001088:	480b      	ldr	r0, [pc, #44]	; (80010b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800108c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800108e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001090:	d3f6      	bcc.n	8001080 <CopyDataInit>
  ldr  r2, =_sbss
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001094:	e002      	b.n	800109c <LoopFillZerobss>

08001096 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001096:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001098:	f842 3b04 	str.w	r3, [r2], #4

0800109c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800109e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010a0:	d3f9      	bcc.n	8001096 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010a2:	f7ff fd5b 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f003 f83b 	bl	8004120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fa9d 	bl	80005e8 <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010b4:	080041b0 	.word	0x080041b0
  ldr  r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010bc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80010c0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80010c4:	200001c4 	.word	0x200001c4

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>
	...

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <HAL_Init+0x40>)
 80010d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <HAL_Init+0x40>)
 80010e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_Init+0x40>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f92b 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f808 	bl	8001110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fcb8 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023c00 	.word	0x40023c00

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x54>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x58>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f943 	bl	80013ba <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 f90b 	bl	8001366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_InitTick+0x5c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	20000008 	.word	0x20000008
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	200001c0 	.word	0x200001c0

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200001c0 	.word	0x200001c0

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <__NVIC_EnableIRQ+0x38>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff29 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff3e 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff8e 	bl	80012a4 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5d 	bl	8001250 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff31 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffa2 	bl	800130c <SysTick_Config>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d004      	beq.n	80013f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e00c      	b.n	800140a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2205      	movs	r2, #5
 80013f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e16b      	b.n	800170c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 815a 	bne.w	8001706 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d00b      	beq.n	8001472 <HAL_GPIO_Init+0x5a>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d007      	beq.n	8001472 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001466:	2b11      	cmp	r3, #17
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b12      	cmp	r3, #18
 8001470:	d130      	bne.n	80014d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a8:	2201      	movs	r2, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	f003 0201 	and.w	r2, r3, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0xfc>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b12      	cmp	r3, #18
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80b4 	beq.w	8001706 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b5f      	ldr	r3, [pc, #380]	; (8001720 <HAL_GPIO_Init+0x308>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a5e      	ldr	r2, [pc, #376]	; (8001720 <HAL_GPIO_Init+0x308>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b5c      	ldr	r3, [pc, #368]	; (8001720 <HAL_GPIO_Init+0x308>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ba:	4a5a      	ldr	r2, [pc, #360]	; (8001724 <HAL_GPIO_Init+0x30c>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a51      	ldr	r2, [pc, #324]	; (8001728 <HAL_GPIO_Init+0x310>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d02b      	beq.n	800163e <HAL_GPIO_Init+0x226>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a50      	ldr	r2, [pc, #320]	; (800172c <HAL_GPIO_Init+0x314>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d025      	beq.n	800163a <HAL_GPIO_Init+0x222>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4f      	ldr	r2, [pc, #316]	; (8001730 <HAL_GPIO_Init+0x318>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01f      	beq.n	8001636 <HAL_GPIO_Init+0x21e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4e      	ldr	r2, [pc, #312]	; (8001734 <HAL_GPIO_Init+0x31c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d019      	beq.n	8001632 <HAL_GPIO_Init+0x21a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4d      	ldr	r2, [pc, #308]	; (8001738 <HAL_GPIO_Init+0x320>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d013      	beq.n	800162e <HAL_GPIO_Init+0x216>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4c      	ldr	r2, [pc, #304]	; (800173c <HAL_GPIO_Init+0x324>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00d      	beq.n	800162a <HAL_GPIO_Init+0x212>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4b      	ldr	r2, [pc, #300]	; (8001740 <HAL_GPIO_Init+0x328>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d007      	beq.n	8001626 <HAL_GPIO_Init+0x20e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4a      	ldr	r2, [pc, #296]	; (8001744 <HAL_GPIO_Init+0x32c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_GPIO_Init+0x20a>
 800161e:	2307      	movs	r3, #7
 8001620:	e00e      	b.n	8001640 <HAL_GPIO_Init+0x228>
 8001622:	2308      	movs	r3, #8
 8001624:	e00c      	b.n	8001640 <HAL_GPIO_Init+0x228>
 8001626:	2306      	movs	r3, #6
 8001628:	e00a      	b.n	8001640 <HAL_GPIO_Init+0x228>
 800162a:	2305      	movs	r3, #5
 800162c:	e008      	b.n	8001640 <HAL_GPIO_Init+0x228>
 800162e:	2304      	movs	r3, #4
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x228>
 8001632:	2303      	movs	r3, #3
 8001634:	e004      	b.n	8001640 <HAL_GPIO_Init+0x228>
 8001636:	2302      	movs	r3, #2
 8001638:	e002      	b.n	8001640 <HAL_GPIO_Init+0x228>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_GPIO_Init+0x228>
 800163e:	2300      	movs	r3, #0
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	f002 0203 	and.w	r2, r2, #3
 8001646:	0092      	lsls	r2, r2, #2
 8001648:	4093      	lsls	r3, r2
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001650:	4934      	ldr	r1, [pc, #208]	; (8001724 <HAL_GPIO_Init+0x30c>)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800165e:	4b3a      	ldr	r3, [pc, #232]	; (8001748 <HAL_GPIO_Init+0x330>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001682:	4a31      	ldr	r2, [pc, #196]	; (8001748 <HAL_GPIO_Init+0x330>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <HAL_GPIO_Init+0x330>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ac:	4a26      	ldr	r2, [pc, #152]	; (8001748 <HAL_GPIO_Init+0x330>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b2:	4b25      	ldr	r3, [pc, #148]	; (8001748 <HAL_GPIO_Init+0x330>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016d6:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <HAL_GPIO_Init+0x330>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_GPIO_Init+0x330>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001700:	4a11      	ldr	r2, [pc, #68]	; (8001748 <HAL_GPIO_Init+0x330>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3301      	adds	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	2b0f      	cmp	r3, #15
 8001710:	f67f ae90 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001714:	bf00      	nop
 8001716:	3724      	adds	r7, #36	; 0x24
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40023800 	.word	0x40023800
 8001724:	40013800 	.word	0x40013800
 8001728:	40020000 	.word	0x40020000
 800172c:	40020400 	.word	0x40020400
 8001730:	40020800 	.word	0x40020800
 8001734:	40020c00 	.word	0x40020c00
 8001738:	40021000 	.word	0x40021000
 800173c:	40021400 	.word	0x40021400
 8001740:	40021800 	.word	0x40021800
 8001744:	40021c00 	.word	0x40021c00
 8001748:	40013c00 	.word	0x40013c00

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001768:	e003      	b.n	8001772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	041a      	lsls	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	619a      	str	r2, [r3, #24]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e25b      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d075      	beq.n	800188a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800179e:	4ba3      	ldr	r3, [pc, #652]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d00c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017aa:	4ba0      	ldr	r3, [pc, #640]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d112      	bne.n	80017dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b6:	4b9d      	ldr	r3, [pc, #628]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017c2:	d10b      	bne.n	80017dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	4b99      	ldr	r3, [pc, #612]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d05b      	beq.n	8001888 <HAL_RCC_OscConfig+0x108>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d157      	bne.n	8001888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e236      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e4:	d106      	bne.n	80017f4 <HAL_RCC_OscConfig+0x74>
 80017e6:	4b91      	ldr	r3, [pc, #580]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a90      	ldr	r2, [pc, #576]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e01d      	b.n	8001830 <HAL_RCC_OscConfig+0xb0>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0x98>
 80017fe:	4b8b      	ldr	r3, [pc, #556]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a8a      	ldr	r2, [pc, #552]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 8001804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b88      	ldr	r3, [pc, #544]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a87      	ldr	r2, [pc, #540]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e00b      	b.n	8001830 <HAL_RCC_OscConfig+0xb0>
 8001818:	4b84      	ldr	r3, [pc, #528]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a83      	ldr	r2, [pc, #524]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 800181e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b81      	ldr	r3, [pc, #516]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a80      	ldr	r2, [pc, #512]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 800182a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fcae 	bl	8001198 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fcaa 	bl	8001198 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1fb      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0xc0>
 800185e:	e014      	b.n	800188a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fc9a 	bl	8001198 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fc96 	bl	8001198 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e1e7      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187a:	4b6c      	ldr	r3, [pc, #432]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0xe8>
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d063      	beq.n	800195e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001896:	4b65      	ldr	r3, [pc, #404]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00b      	beq.n	80018ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a2:	4b62      	ldr	r3, [pc, #392]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d11c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ae:	4b5f      	ldr	r3, [pc, #380]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d116      	bne.n	80018e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ba:	4b5c      	ldr	r3, [pc, #368]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d005      	beq.n	80018d2 <HAL_RCC_OscConfig+0x152>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e1bb      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d2:	4b56      	ldr	r3, [pc, #344]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4952      	ldr	r1, [pc, #328]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	e03a      	b.n	800195e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d020      	beq.n	8001932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f0:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <HAL_RCC_OscConfig+0x2b0>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff fc4f 	bl	8001198 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018fe:	f7ff fc4b 	bl	8001198 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e19c      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001910:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191c:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4940      	ldr	r1, [pc, #256]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]
 8001930:	e015      	b.n	800195e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <HAL_RCC_OscConfig+0x2b0>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fc2e 	bl	8001198 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001940:	f7ff fc2a 	bl	8001198 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e17b      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001952:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d030      	beq.n	80019cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d016      	beq.n	80019a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <HAL_RCC_OscConfig+0x2b4>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7ff fc0e 	bl	8001198 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001980:	f7ff fc0a 	bl	8001198 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e15b      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 8001994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x200>
 800199e:	e015      	b.n	80019cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a0:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_RCC_OscConfig+0x2b4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a6:	f7ff fbf7 	bl	8001198 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ae:	f7ff fbf3 	bl	8001198 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e144      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80019c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f0      	bne.n	80019ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80a0 	beq.w	8001b1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10f      	bne.n	8001a0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_OscConfig+0x2b8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d121      	bne.n	8001a5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_RCC_OscConfig+0x2b8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <HAL_RCC_OscConfig+0x2b8>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fbb9 	bl	8001198 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	e011      	b.n	8001a4e <HAL_RCC_OscConfig+0x2ce>
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	42470000 	.word	0x42470000
 8001a34:	42470e80 	.word	0x42470e80
 8001a38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3c:	f7ff fbac 	bl	8001198 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0fd      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4e:	4b81      	ldr	r3, [pc, #516]	; (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d106      	bne.n	8001a70 <HAL_RCC_OscConfig+0x2f0>
 8001a62:	4b7d      	ldr	r3, [pc, #500]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	4a7c      	ldr	r2, [pc, #496]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a6e:	e01c      	b.n	8001aaa <HAL_RCC_OscConfig+0x32a>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d10c      	bne.n	8001a92 <HAL_RCC_OscConfig+0x312>
 8001a78:	4b77      	ldr	r3, [pc, #476]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	4a76      	ldr	r2, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	6713      	str	r3, [r2, #112]	; 0x70
 8001a84:	4b74      	ldr	r3, [pc, #464]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	4a73      	ldr	r2, [pc, #460]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a90:	e00b      	b.n	8001aaa <HAL_RCC_OscConfig+0x32a>
 8001a92:	4b71      	ldr	r3, [pc, #452]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	4a70      	ldr	r2, [pc, #448]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9e:	4b6e      	ldr	r3, [pc, #440]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa2:	4a6d      	ldr	r2, [pc, #436]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d015      	beq.n	8001ade <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fb71 	bl	8001198 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7ff fb6d 	bl	8001198 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e0bc      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad0:	4b61      	ldr	r3, [pc, #388]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0ee      	beq.n	8001aba <HAL_RCC_OscConfig+0x33a>
 8001adc:	e014      	b.n	8001b08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fb5b 	bl	8001198 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff fb57 	bl	8001198 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0a6      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afc:	4b56      	ldr	r3, [pc, #344]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1ee      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d105      	bne.n	8001b1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b0e:	4b52      	ldr	r3, [pc, #328]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8092 	beq.w	8001c48 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b24:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d05c      	beq.n	8001bea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d141      	bne.n	8001bbc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <HAL_RCC_OscConfig+0x4dc>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fb2b 	bl	8001198 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff fb27 	bl	8001198 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e078      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b58:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	019b      	lsls	r3, r3, #6
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	041b      	lsls	r3, r3, #16
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	061b      	lsls	r3, r3, #24
 8001b88:	4933      	ldr	r1, [pc, #204]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b8e:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <HAL_RCC_OscConfig+0x4dc>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fb00 	bl	8001198 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff fafc 	bl	8001198 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e04d      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x41c>
 8001bba:	e045      	b.n	8001c48 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_RCC_OscConfig+0x4dc>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff fae9 	bl	8001198 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bca:	f7ff fae5 	bl	8001198 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e036      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x44a>
 8001be8:	e02e      	b.n	8001c48 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e029      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d11c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d115      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c1e:	4013      	ands	r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d10d      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d106      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40007000 	.word	0x40007000
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	42470060 	.word	0x42470060

08001c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0cc      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d90c      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b65      	ldr	r3, [pc, #404]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b63      	ldr	r3, [pc, #396]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0b8      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b50      	ldr	r3, [pc, #320]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	494d      	ldr	r1, [pc, #308]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d044      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d119      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e07f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1e:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e06f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2e:	4b3b      	ldr	r3, [pc, #236]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e067      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f023 0203 	bic.w	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4934      	ldr	r1, [pc, #208]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d50:	f7ff fa22 	bl	8001198 <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d58:	f7ff fa1e 	bl	8001198 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e04f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 020c 	and.w	r2, r3, #12
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d1eb      	bne.n	8001d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d20c      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e032      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4916      	ldr	r1, [pc, #88]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	490e      	ldr	r1, [pc, #56]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001de6:	f000 f821 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001dea:	4601      	mov	r1, r0
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	5cd3      	ldrb	r3, [r2, r3]
 8001dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8001dfe:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_ClockConfig+0x1c8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f982 	bl	8001110 <HAL_InitTick>

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023c00 	.word	0x40023c00
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	08004190 	.word	0x08004190
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e42:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d007      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x32>
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d008      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x38>
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 80b4 	bne.w	8001fc0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b5e      	ldr	r3, [pc, #376]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e5a:	60bb      	str	r3, [r7, #8]
       break;
 8001e5c:	e0b3      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e5e:	4b5e      	ldr	r3, [pc, #376]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001e60:	60bb      	str	r3, [r7, #8]
      break;
 8001e62:	e0b0      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e64:	4b5a      	ldr	r3, [pc, #360]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e6e:	4b58      	ldr	r3, [pc, #352]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d04a      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7a:	4b55      	ldr	r3, [pc, #340]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	f04f 0400 	mov.w	r4, #0
 8001e84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	ea03 0501 	and.w	r5, r3, r1
 8001e90:	ea04 0602 	and.w	r6, r4, r2
 8001e94:	4629      	mov	r1, r5
 8001e96:	4632      	mov	r2, r6
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	f04f 0400 	mov.w	r4, #0
 8001ea0:	0154      	lsls	r4, r2, #5
 8001ea2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ea6:	014b      	lsls	r3, r1, #5
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4622      	mov	r2, r4
 8001eac:	1b49      	subs	r1, r1, r5
 8001eae:	eb62 0206 	sbc.w	r2, r2, r6
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	f04f 0400 	mov.w	r4, #0
 8001eba:	0194      	lsls	r4, r2, #6
 8001ebc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ec0:	018b      	lsls	r3, r1, #6
 8001ec2:	1a5b      	subs	r3, r3, r1
 8001ec4:	eb64 0402 	sbc.w	r4, r4, r2
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	00e2      	lsls	r2, r4, #3
 8001ed2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ed6:	00d9      	lsls	r1, r3, #3
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4614      	mov	r4, r2
 8001edc:	195b      	adds	r3, r3, r5
 8001ede:	eb44 0406 	adc.w	r4, r4, r6
 8001ee2:	f04f 0100 	mov.w	r1, #0
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	0262      	lsls	r2, r4, #9
 8001eec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ef0:	0259      	lsls	r1, r3, #9
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4614      	mov	r4, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	4621      	mov	r1, r4
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f04f 0400 	mov.w	r4, #0
 8001f00:	461a      	mov	r2, r3
 8001f02:	4623      	mov	r3, r4
 8001f04:	f7fe f988 	bl	8000218 <__aeabi_uldivmod>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e049      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f10:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	f04f 0400 	mov.w	r4, #0
 8001f1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	ea03 0501 	and.w	r5, r3, r1
 8001f26:	ea04 0602 	and.w	r6, r4, r2
 8001f2a:	4629      	mov	r1, r5
 8001f2c:	4632      	mov	r2, r6
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	f04f 0400 	mov.w	r4, #0
 8001f36:	0154      	lsls	r4, r2, #5
 8001f38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f3c:	014b      	lsls	r3, r1, #5
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4622      	mov	r2, r4
 8001f42:	1b49      	subs	r1, r1, r5
 8001f44:	eb62 0206 	sbc.w	r2, r2, r6
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	f04f 0400 	mov.w	r4, #0
 8001f50:	0194      	lsls	r4, r2, #6
 8001f52:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f56:	018b      	lsls	r3, r1, #6
 8001f58:	1a5b      	subs	r3, r3, r1
 8001f5a:	eb64 0402 	sbc.w	r4, r4, r2
 8001f5e:	f04f 0100 	mov.w	r1, #0
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	00e2      	lsls	r2, r4, #3
 8001f68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f6c:	00d9      	lsls	r1, r3, #3
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4614      	mov	r4, r2
 8001f72:	195b      	adds	r3, r3, r5
 8001f74:	eb44 0406 	adc.w	r4, r4, r6
 8001f78:	f04f 0100 	mov.w	r1, #0
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	02a2      	lsls	r2, r4, #10
 8001f82:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f86:	0299      	lsls	r1, r3, #10
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4614      	mov	r4, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	4621      	mov	r1, r4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f04f 0400 	mov.w	r4, #0
 8001f96:	461a      	mov	r2, r3
 8001f98:	4623      	mov	r3, r4
 8001f9a:	f7fe f93d 	bl	8000218 <__aeabi_uldivmod>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	60bb      	str	r3, [r7, #8]
      break;
 8001fbe:	e002      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fc2:	60bb      	str	r3, [r7, #8]
      break;
 8001fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	007a1200 	.word	0x007a1200

08001fdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e056      	b.n	800209c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d106      	bne.n	800200e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7fe fcc3 	bl	8000994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002024:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	ea42 0103 	orr.w	r1, r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	0c1b      	lsrs	r3, r3, #16
 800206c:	f003 0104 	and.w	r1, r3, #4
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	4613      	mov	r3, r2
 80020b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_SPI_Transmit_IT+0x20>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e067      	b.n	8002194 <HAL_SPI_Transmit_IT+0xf0>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_SPI_Transmit_IT+0x34>
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020dc:	e055      	b.n	800218a <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d002      	beq.n	80020f0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
 80020ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020ee:	e04c      	b.n	800218a <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2203      	movs	r2, #3
 80020f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	88fa      	ldrh	r2, [r7, #6]
 8002108:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	88fa      	ldrh	r2, [r7, #6]
 800210e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_SPI_Transmit_IT+0xfc>)
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
 8002136:	e002      	b.n	800213e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <HAL_SPI_Transmit_IT+0x100>)
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002146:	d107      	bne.n	8002158 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002156:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002166:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	2b40      	cmp	r3, #64	; 0x40
 8002174:	d008      	beq.n	8002188 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e000      	b.n	800218a <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8002188:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002192:	7dfb      	ldrb	r3, [r7, #23]
}
 8002194:	4618      	mov	r0, r3
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	08002c55 	.word	0x08002c55
 80021a4:	08002c0f 	.word	0x08002c0f

080021a8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d110      	bne.n	80021e4 <HAL_SPI_Receive_IT+0x3c>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ca:	d10b      	bne.n	80021e4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2204      	movs	r2, #4
 80021d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f87a 	bl	80022d4 <HAL_SPI_TransmitReceive_IT>
 80021e0:	4603      	mov	r3, r0
 80021e2:	e06e      	b.n	80022c2 <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_SPI_Receive_IT+0x4a>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e067      	b.n	80022c2 <HAL_SPI_Receive_IT+0x11a>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d002      	beq.n	800220c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002206:	2302      	movs	r3, #2
 8002208:	75fb      	strb	r3, [r7, #23]
    goto error;
 800220a:	e055      	b.n	80022b8 <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <HAL_SPI_Receive_IT+0x70>
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800221c:	e04c      	b.n	80022b8 <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2204      	movs	r2, #4
 8002222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	88fa      	ldrh	r2, [r7, #6]
 8002236:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	88fa      	ldrh	r2, [r7, #6]
 800223c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4a1a      	ldr	r2, [pc, #104]	; (80022cc <HAL_SPI_Receive_IT+0x124>)
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
 8002264:	e002      	b.n	800226c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <HAL_SPI_Receive_IT+0x128>)
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002274:	d107      	bne.n	8002286 <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002284:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002294:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	2b40      	cmp	r3, #64	; 0x40
 80022a2:	d008      	beq.n	80022b6 <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e000      	b.n	80022b8 <HAL_SPI_Receive_IT+0x110>
  }

error :
 80022b6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	08002bc9 	.word	0x08002bc9
 80022d0:	08002b7f 	.word	0x08002b7f

080022d4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_SPI_TransmitReceive_IT+0x20>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e075      	b.n	80023e0 <HAL_SPI_TransmitReceive_IT+0x10c>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002302:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800230a:	7dbb      	ldrb	r3, [r7, #22]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d00d      	beq.n	800232c <HAL_SPI_TransmitReceive_IT+0x58>
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002316:	d106      	bne.n	8002326 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <HAL_SPI_TransmitReceive_IT+0x52>
 8002320:	7dbb      	ldrb	r3, [r7, #22]
 8002322:	2b04      	cmp	r3, #4
 8002324:	d002      	beq.n	800232c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002326:	2302      	movs	r3, #2
 8002328:	75fb      	strb	r3, [r7, #23]
    goto error;
 800232a:	e054      	b.n	80023d6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_SPI_TransmitReceive_IT+0x6a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_SPI_TransmitReceive_IT+0x6a>
 8002338:	887b      	ldrh	r3, [r7, #2]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002342:	e048      	b.n	80023d6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b04      	cmp	r3, #4
 800234e:	d003      	beq.n	8002358 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2205      	movs	r2, #5
 8002354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	887a      	ldrh	r2, [r7, #2]
 800236e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	887a      	ldrh	r2, [r7, #2]
 800237a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d006      	beq.n	8002398 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4a17      	ldr	r2, [pc, #92]	; (80023ec <HAL_SPI_TransmitReceive_IT+0x118>)
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002394:	645a      	str	r2, [r3, #68]	; 0x44
 8002396:	e005      	b.n	80023a4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a16      	ldr	r2, [pc, #88]	; (80023f4 <HAL_SPI_TransmitReceive_IT+0x120>)
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <HAL_SPI_TransmitReceive_IT+0x124>)
 80023a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80023b2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023be:	2b40      	cmp	r3, #64	; 0x40
 80023c0:	d008      	beq.n	80023d4 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	e000      	b.n	80023d6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80023d4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023de:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	08002ac1 	.word	0x08002ac1
 80023f0:	08002b21 	.word	0x08002b21
 80023f4:	080029fd 	.word	0x080029fd
 80023f8:	08002a61 	.word	0x08002a61

080023fc <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8002408:	2301      	movs	r3, #1
 800240a:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800240c:	4b72      	ldr	r3, [pc, #456]	; (80025d8 <HAL_SPI_Abort_IT+0x1dc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a72      	ldr	r2, [pc, #456]	; (80025dc <HAL_SPI_Abort_IT+0x1e0>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0a5b      	lsrs	r3, r3, #9
 8002418:	2264      	movs	r2, #100	; 0x64
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0220 	bic.w	r2, r2, #32
 8002432:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	2b80      	cmp	r3, #128	; 0x80
 8002440:	d117      	bne.n	8002472 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a66      	ldr	r2, [pc, #408]	; (80025e0 <HAL_SPI_Abort_IT+0x1e4>)
 8002446:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800245a:	e008      	b.n	800246e <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3b01      	subs	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b07      	cmp	r3, #7
 800246c:	d1ec      	bne.n	8002448 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247c:	2b40      	cmp	r3, #64	; 0x40
 800247e:	d117      	bne.n	80024b0 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a58      	ldr	r2, [pc, #352]	; (80025e4 <HAL_SPI_Abort_IT+0x1e8>)
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d106      	bne.n	800249a <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8002498:	e008      	b.n	80024ac <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	3b01      	subs	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b07      	cmp	r3, #7
 80024aa:	d1ec      	bne.n	8002486 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00f      	beq.n	80024d8 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d104      	bne.n	80024d0 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ca:	4a47      	ldr	r2, [pc, #284]	; (80025e8 <HAL_SPI_Abort_IT+0x1ec>)
 80024cc:	651a      	str	r2, [r3, #80]	; 0x50
 80024ce:	e003      	b.n	80024d8 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d4:	2200      	movs	r2, #0
 80024d6:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00f      	beq.n	8002500 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d104      	bne.n	80024f8 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	4a3e      	ldr	r2, [pc, #248]	; (80025ec <HAL_SPI_Abort_IT+0x1f0>)
 80024f4:	651a      	str	r2, [r3, #80]	; 0x50
 80024f6:	e003      	b.n	8002500 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fc:	2200      	movs	r2, #0
 80024fe:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b02      	cmp	r3, #2
 800250c:	d115      	bne.n	800253a <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002512:	2b00      	cmp	r3, #0
 8002514:	d011      	beq.n	800253a <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe ff59 	bl	80013d2 <HAL_DMA_Abort_IT>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252a:	2200      	movs	r2, #0
 800252c:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2240      	movs	r2, #64	; 0x40
 8002532:	655a      	str	r2, [r3, #84]	; 0x54
 8002534:	e001      	b.n	800253a <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d115      	bne.n	8002574 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254c:	2b00      	cmp	r3, #0
 800254e:	d011      	beq.n	8002574 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe ff3c 	bl	80013d2 <HAL_DMA_Abort_IT>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002564:	2200      	movs	r2, #0
 8002566:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2240      	movs	r2, #64	; 0x40
 800256c:	655a      	str	r2, [r3, #84]	; 0x54
 800256e:	e001      	b.n	8002574 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d128      	bne.n	80025cc <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	2b40      	cmp	r3, #64	; 0x40
 800258c:	d102      	bne.n	8002594 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	77fb      	strb	r3, [r7, #31]
 8002592:	e002      	b.n	800259a <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f930 	bl	800282c <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 80025cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000000 	.word	0x20000000
 80025dc:	057619f1 	.word	0x057619f1
 80025e0:	08003171 	.word	0x08003171
 80025e4:	080030e9 	.word	0x080030e9
 80025e8:	08002869 	.word	0x08002869
 80025ec:	0800293d 	.word	0x0800293d

080025f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
    return;
 8002632:	e0d8      	b.n	80027e6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_SPI_IRQHandler+0x66>
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	09db      	lsrs	r3, r3, #7
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d004      	beq.n	8002656 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
    return;
 8002654:	e0c7      	b.n	80027e6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10c      	bne.n	800267c <HAL_SPI_IRQHandler+0x8c>
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	099b      	lsrs	r3, r3, #6
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80b5 	beq.w	80027e6 <HAL_SPI_IRQHandler+0x1f6>
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80ae 	beq.w	80027e6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d023      	beq.n	80026de <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d011      	beq.n	80026c6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	f043 0204 	orr.w	r2, r3, #4
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	e00b      	b.n	80026de <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	693b      	ldr	r3, [r7, #16]
        return;
 80026dc:	e083      	b.n	80027e6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d014      	beq.n	8002714 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00c      	beq.n	800273a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f043 0208 	orr.w	r2, r3, #8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	2b00      	cmp	r3, #0
 8002740:	d050      	beq.n	80027e4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002750:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d104      	bne.n	800276e <HAL_SPI_IRQHandler+0x17e>
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d034      	beq.n	80027d8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0203 	bic.w	r2, r2, #3
 800277c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d011      	beq.n	80027aa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	4a18      	ldr	r2, [pc, #96]	; (80027ec <HAL_SPI_IRQHandler+0x1fc>)
 800278c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fe1d 	bl	80013d2 <HAL_DMA_Abort_IT>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d016      	beq.n	80027e0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b6:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <HAL_SPI_IRQHandler+0x1fc>)
 80027b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fe07 	bl	80013d2 <HAL_DMA_Abort_IT>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80027d6:	e003      	b.n	80027e0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f81d 	bl	8002818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80027de:	e000      	b.n	80027e2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80027e0:	bf00      	nop
    return;
 80027e2:	bf00      	nop
 80027e4:	bf00      	nop
  }
}
 80027e6:	3720      	adds	r7, #32
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	08002841 	.word	0x08002841

080027f0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f7ff ffdc 	bl	8002818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287a:	2200      	movs	r2, #0
 800287c:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800287e:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <SPI_DMATxAbortCallback+0xcc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a2d      	ldr	r2, [pc, #180]	; (8002938 <SPI_DMATxAbortCallback+0xd0>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	0a5b      	lsrs	r3, r3, #9
 800288a:	2264      	movs	r2, #100	; 0x64
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0202 	bic.w	r2, r2, #2
 80028a0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028b4:	e009      	b.n	80028ca <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0eb      	beq.n	80028a2 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d126      	bne.n	800292a <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2200      	movs	r2, #0
 80028e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2200      	movs	r2, #0
 80028e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	d002      	beq.n	80028f6 <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2200      	movs	r2, #0
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f7ff ff82 	bl	800282c <HAL_SPI_AbortCpltCallback>
 8002928:	e000      	b.n	800292c <SPI_DMATxAbortCallback+0xc4>
      return;
 800292a:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000000 	.word	0x20000000
 8002938:	057619f1 	.word	0x057619f1

0800293c <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002958:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	2200      	movs	r2, #0
 8002960:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002972:	f7fe fc11 	bl	8001198 <HAL_GetTick>
 8002976:	4603      	mov	r3, r0
 8002978:	461a      	mov	r2, r3
 800297a:	2164      	movs	r1, #100	; 0x64
 800297c:	6978      	ldr	r0, [r7, #20]
 800297e:	f000 fa5b 	bl	8002e38 <SPI_EndRxTxTransaction>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002998:	2b00      	cmp	r3, #0
 800299a:	d004      	beq.n	80029a6 <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d126      	bne.n	80029f4 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2200      	movs	r2, #0
 80029aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2200      	movs	r2, #0
 80029b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d002      	beq.n	80029c0 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2200      	movs	r2, #0
 80029be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 80029ec:	6978      	ldr	r0, [r7, #20]
 80029ee:	f7ff ff1d 	bl	800282c <HAL_SPI_AbortCpltCallback>
 80029f2:	e000      	b.n	80029f6 <SPI_DMARxAbortCallback+0xba>
      return;
 80029f4:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f103 020c 	add.w	r2, r3, #12
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	7812      	ldrb	r2, [r2, #0]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10f      	bne.n	8002a58 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a46:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa32 	bl	8002ebc <SPI_CloseRxTx_ISR>
    }
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	330c      	adds	r3, #12
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10f      	bne.n	8002ab8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aa6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fa02 	bl	8002ebc <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	b292      	uxth	r2, r2
 8002ad4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	1c9a      	adds	r2, r3, #2
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10f      	bne.n	8002b18 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b06:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d102      	bne.n	8002b18 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f9d2 	bl	8002ebc <SPI_CloseRxTx_ISR>
    }
  }
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	881a      	ldrh	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	1c9a      	adds	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10f      	bne.n	8002b76 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b64:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f9a3 	bl	8002ebc <SPI_CloseRxTx_ISR>
    }
  }
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f103 020c 	add.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	7812      	ldrb	r2, [r2, #0]
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d102      	bne.n	8002bc0 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f9f2 	bl	8002fa4 <SPI_CloseRx_ISR>
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	b292      	uxth	r2, r2
 8002bdc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	1c9a      	adds	r2, r3, #2
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f9cf 	bl	8002fa4 <SPI_CloseRx_ISR>
  }
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	330c      	adds	r3, #12
 8002c20:	7812      	ldrb	r2, [r2, #0]
 8002c22:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f9ec 	bl	8003024 <SPI_CloseTx_ISR>
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	881a      	ldrh	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	1c9a      	adds	r2, r3, #2
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9ca 	bl	8003024 <SPI_CloseTx_ISR>
  }
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ca8:	e04c      	b.n	8002d44 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d048      	beq.n	8002d44 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002cb2:	f7fe fa71 	bl	8001198 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d902      	bls.n	8002cc8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d13d      	bne.n	8002d44 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce0:	d111      	bne.n	8002d06 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cea:	d004      	beq.n	8002cf6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf4:	d107      	bne.n	8002d06 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0e:	d10f      	bne.n	8002d30 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e00f      	b.n	8002d64 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d1a3      	bne.n	8002caa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d80:	d111      	bne.n	8002da6 <SPI_EndRxTransaction+0x3a>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d8a:	d004      	beq.n	8002d96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d94:	d107      	bne.n	8002da6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dae:	d12a      	bne.n	8002e06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db8:	d012      	beq.n	8002de0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2180      	movs	r1, #128	; 0x80
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f7ff ff67 	bl	8002c98 <SPI_WaitFlagStateUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d02d      	beq.n	8002e2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e026      	b.n	8002e2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2200      	movs	r2, #0
 8002de8:	2101      	movs	r1, #1
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f7ff ff54 	bl	8002c98 <SPI_WaitFlagStateUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01a      	beq.n	8002e2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	f043 0220 	orr.w	r2, r3, #32
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e013      	b.n	8002e2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2101      	movs	r1, #1
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7ff ff41 	bl	8002c98 <SPI_WaitFlagStateUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <SPI_EndRxTxTransaction+0x7c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <SPI_EndRxTxTransaction+0x80>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	0d5b      	lsrs	r3, r3, #21
 8002e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e54:	fb02 f303 	mul.w	r3, r2, r3
 8002e58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e62:	d112      	bne.n	8002e8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7ff ff12 	bl	8002c98 <SPI_WaitFlagStateUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d016      	beq.n	8002ea8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	f043 0220 	orr.w	r2, r3, #32
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e00f      	b.n	8002eaa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea0:	2b80      	cmp	r3, #128	; 0x80
 8002ea2:	d0f2      	beq.n	8002e8a <SPI_EndRxTxTransaction+0x52>
 8002ea4:	e000      	b.n	8002ea8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ea6:	bf00      	nop
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	165e9f81 	.word	0x165e9f81

08002ebc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002ec4:	4b35      	ldr	r3, [pc, #212]	; (8002f9c <SPI_CloseRxTx_ISR+0xe0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a35      	ldr	r2, [pc, #212]	; (8002fa0 <SPI_CloseRxTx_ISR+0xe4>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0a5b      	lsrs	r3, r3, #9
 8002ed0:	2264      	movs	r2, #100	; 0x64
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ed8:	f7fe f95e 	bl	8001198 <HAL_GetTick>
 8002edc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0220 	bic.w	r2, r2, #32
 8002eec:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d106      	bne.n	8002f02 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f00:	e009      	b.n	8002f16 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0eb      	beq.n	8002eee <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	2164      	movs	r1, #100	; 0x64
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ff8c 	bl	8002e38 <SPI_EndRxTxTransaction>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	f043 0220 	orr.w	r2, r3, #32
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d115      	bne.n	8002f84 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d107      	bne.n	8002f74 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7fd fca7 	bl	80008c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002f72:	e00e      	b.n	8002f92 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff fc41 	bl	8002804 <HAL_SPI_TxRxCpltCallback>
}
 8002f82:	e006      	b.n	8002f92 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff fc43 	bl	8002818 <HAL_SPI_ErrorCallback>
}
 8002f92:	bf00      	nop
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	057619f1 	.word	0x057619f1

08002fa4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fba:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002fbc:	f7fe f8ec 	bl	8001198 <HAL_GetTick>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2164      	movs	r1, #100	; 0x64
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff fed0 	bl	8002d6c <SPI_EndRxTransaction>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003008:	2b00      	cmp	r3, #0
 800300a:	d103      	bne.n	8003014 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7fd fc57 	bl	80008c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003012:	e002      	b.n	800301a <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fbff 	bl	8002818 <HAL_SPI_ErrorCallback>
}
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800302c:	4b2c      	ldr	r3, [pc, #176]	; (80030e0 <SPI_CloseTx_ISR+0xbc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2c      	ldr	r2, [pc, #176]	; (80030e4 <SPI_CloseTx_ISR+0xc0>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	0a5b      	lsrs	r3, r3, #9
 8003038:	2264      	movs	r2, #100	; 0x64
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003040:	f7fe f8aa 	bl	8001198 <HAL_GetTick>
 8003044:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d106      	bne.n	800305a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003058:	e009      	b.n	800306e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	3b01      	subs	r3, #1
 800305e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0eb      	beq.n	8003046 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800307c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	2164      	movs	r1, #100	; 0x64
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff fed8 	bl	8002e38 <SPI_EndRxTxTransaction>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	f043 0220 	orr.w	r2, r3, #32
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff fba5 	bl	8002818 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80030ce:	e002      	b.n	80030d6 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff fb8d 	bl	80027f0 <HAL_SPI_TxCpltCallback>
}
 80030d6:	bf00      	nop
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000000 	.word	0x20000000
 80030e4:	057619f1 	.word	0x057619f1

080030e8 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80030f0:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <SPI_AbortRx_ISR+0x80>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1d      	ldr	r2, [pc, #116]	; (800316c <SPI_AbortRx_ISR+0x84>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	0a5b      	lsrs	r3, r3, #9
 80030fc:	2264      	movs	r2, #100	; 0x64
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003116:	e009      	b.n	800312c <SPI_AbortRx_ISR+0x44>
    }
    count--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3b01      	subs	r3, #1
 800311c:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0eb      	beq.n	8003104 <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313a:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800314a:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2207      	movs	r2, #7
 8003156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000000 	.word	0x20000000
 800316c:	057619f1 	.word	0x057619f1

08003170 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003186:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003196:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2207      	movs	r2, #7
 800319c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e01d      	b.n	80031fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fd fede 	bl	8000f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f000 fc1e 	bl	8003a2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e01d      	b.n	8003250 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d106      	bne.n	800322e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f815 	bl	8003258 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2202      	movs	r2, #2
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3304      	adds	r3, #4
 800323e:	4619      	mov	r1, r3
 8003240:	4610      	mov	r0, r2
 8003242:	f000 fbf3 	bl	8003a2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e01d      	b.n	80032ba <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f815 	bl	80032c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f000 fbbe 	bl	8003a2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e083      	b.n	80033f2 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fd fdba 	bl	8000e78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800331a:	f023 0307 	bic.w	r3, r3, #7
 800331e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f000 fb7e 	bl	8003a2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003358:	f023 0303 	bic.w	r3, r3, #3
 800335c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	4313      	orrs	r3, r2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003376:	f023 030c 	bic.w	r3, r3, #12
 800337a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	4313      	orrs	r3, r2
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	011a      	lsls	r2, r3, #4
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	031b      	lsls	r3, r3, #12
 80033a6:	4313      	orrs	r3, r2
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80033b4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80033bc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	4313      	orrs	r3, r2
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b02      	cmp	r3, #2
 800340e:	d122      	bne.n	8003456 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	d11b      	bne.n	8003456 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f06f 0202 	mvn.w	r2, #2
 8003426:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fad6 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 8003442:	e005      	b.n	8003450 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fac8 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fad9 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b04      	cmp	r3, #4
 8003462:	d122      	bne.n	80034aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b04      	cmp	r3, #4
 8003470:	d11b      	bne.n	80034aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f06f 0204 	mvn.w	r2, #4
 800347a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 faac 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 8003496:	e005      	b.n	80034a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fa9e 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 faaf 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d122      	bne.n	80034fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d11b      	bne.n	80034fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f06f 0208 	mvn.w	r2, #8
 80034ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2204      	movs	r2, #4
 80034d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fa82 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 80034ea:	e005      	b.n	80034f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fa74 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa85 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b10      	cmp	r3, #16
 800350a:	d122      	bne.n	8003552 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b10      	cmp	r3, #16
 8003518:	d11b      	bne.n	8003552 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f06f 0210 	mvn.w	r2, #16
 8003522:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2208      	movs	r2, #8
 8003528:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fa58 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 800353e:	e005      	b.n	800354c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fa4a 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fa5b 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d10e      	bne.n	800357e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f06f 0201 	mvn.w	r2, #1
 8003576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fa24 	bl	80039c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b80      	cmp	r3, #128	; 0x80
 800358a:	d10e      	bne.n	80035aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003596:	2b80      	cmp	r3, #128	; 0x80
 8003598:	d107      	bne.n	80035aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fdb1 	bl	800410c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d10e      	bne.n	80035d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d107      	bne.n	80035d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fa20 	bl	8003a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d10e      	bne.n	8003602 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d107      	bne.n	8003602 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f06f 0220 	mvn.w	r2, #32
 80035fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fd7b 	bl	80040f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003622:	2302      	movs	r3, #2
 8003624:	e04e      	b.n	80036c4 <HAL_TIM_OC_ConfigChannel+0xb8>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b0c      	cmp	r3, #12
 800363a:	d839      	bhi.n	80036b0 <HAL_TIM_OC_ConfigChannel+0xa4>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <HAL_TIM_OC_ConfigChannel+0x38>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003679 	.word	0x08003679
 8003648:	080036b1 	.word	0x080036b1
 800364c:	080036b1 	.word	0x080036b1
 8003650:	080036b1 	.word	0x080036b1
 8003654:	08003687 	.word	0x08003687
 8003658:	080036b1 	.word	0x080036b1
 800365c:	080036b1 	.word	0x080036b1
 8003660:	080036b1 	.word	0x080036b1
 8003664:	08003695 	.word	0x08003695
 8003668:	080036b1 	.word	0x080036b1
 800366c:	080036b1 	.word	0x080036b1
 8003670:	080036b1 	.word	0x080036b1
 8003674:	080036a3 	.word	0x080036a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fa74 	bl	8003b6c <TIM_OC1_SetConfig>
      break;
 8003684:	e015      	b.n	80036b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fadd 	bl	8003c4c <TIM_OC2_SetConfig>
      break;
 8003692:	e00e      	b.n	80036b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fb4c 	bl	8003d38 <TIM_OC3_SetConfig>
      break;
 80036a0:	e007      	b.n	80036b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fbb9 	bl	8003e20 <TIM_OC4_SetConfig>
      break;
 80036ae:	e000      	b.n	80036b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80036b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e0b4      	b.n	8003850 <HAL_TIM_PWM_ConfigChannel+0x184>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2202      	movs	r2, #2
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	f200 809f 	bhi.w	800383c <HAL_TIM_PWM_ConfigChannel+0x170>
 80036fe:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003739 	.word	0x08003739
 8003708:	0800383d 	.word	0x0800383d
 800370c:	0800383d 	.word	0x0800383d
 8003710:	0800383d 	.word	0x0800383d
 8003714:	08003779 	.word	0x08003779
 8003718:	0800383d 	.word	0x0800383d
 800371c:	0800383d 	.word	0x0800383d
 8003720:	0800383d 	.word	0x0800383d
 8003724:	080037bb 	.word	0x080037bb
 8003728:	0800383d 	.word	0x0800383d
 800372c:	0800383d 	.word	0x0800383d
 8003730:	0800383d 	.word	0x0800383d
 8003734:	080037fb 	.word	0x080037fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fa14 	bl	8003b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0208 	orr.w	r2, r2, #8
 8003752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0204 	bic.w	r2, r2, #4
 8003762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6999      	ldr	r1, [r3, #24]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	619a      	str	r2, [r3, #24]
      break;
 8003776:	e062      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fa64 	bl	8003c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6999      	ldr	r1, [r3, #24]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	021a      	lsls	r2, r3, #8
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	619a      	str	r2, [r3, #24]
      break;
 80037b8:	e041      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fab9 	bl	8003d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0208 	orr.w	r2, r2, #8
 80037d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0204 	bic.w	r2, r2, #4
 80037e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69d9      	ldr	r1, [r3, #28]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	61da      	str	r2, [r3, #28]
      break;
 80037f8:	e021      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fb0d 	bl	8003e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69d9      	ldr	r1, [r3, #28]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	021a      	lsls	r2, r3, #8
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	61da      	str	r2, [r3, #28]
      break;
 800383a:	e000      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800383c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_TIM_ConfigClockSource+0x18>
 800386c:	2302      	movs	r3, #2
 800386e:	e0a6      	b.n	80039be <HAL_TIM_ConfigClockSource+0x166>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800388e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003896:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d067      	beq.n	8003978 <HAL_TIM_ConfigClockSource+0x120>
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d80b      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x6c>
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d073      	beq.n	8003998 <HAL_TIM_ConfigClockSource+0x140>
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d802      	bhi.n	80038ba <HAL_TIM_ConfigClockSource+0x62>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d06f      	beq.n	8003998 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80038b8:	e078      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d06c      	beq.n	8003998 <HAL_TIM_ConfigClockSource+0x140>
 80038be:	2b30      	cmp	r3, #48	; 0x30
 80038c0:	d06a      	beq.n	8003998 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80038c2:	e073      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038c4:	2b70      	cmp	r3, #112	; 0x70
 80038c6:	d00d      	beq.n	80038e4 <HAL_TIM_ConfigClockSource+0x8c>
 80038c8:	2b70      	cmp	r3, #112	; 0x70
 80038ca:	d804      	bhi.n	80038d6 <HAL_TIM_ConfigClockSource+0x7e>
 80038cc:	2b50      	cmp	r3, #80	; 0x50
 80038ce:	d033      	beq.n	8003938 <HAL_TIM_ConfigClockSource+0xe0>
 80038d0:	2b60      	cmp	r3, #96	; 0x60
 80038d2:	d041      	beq.n	8003958 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80038d4:	e06a      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038da:	d066      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x152>
 80038dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e0:	d017      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80038e2:	e063      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	6899      	ldr	r1, [r3, #8]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f000 fb64 	bl	8003fc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003906:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	609a      	str	r2, [r3, #8]
      break;
 8003910:	e04c      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6899      	ldr	r1, [r3, #8]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f000 fb4d 	bl	8003fc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003934:	609a      	str	r2, [r3, #8]
      break;
 8003936:	e039      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	461a      	mov	r2, r3
 8003946:	f000 fac1 	bl	8003ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2150      	movs	r1, #80	; 0x50
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fb1a 	bl	8003f8a <TIM_ITRx_SetConfig>
      break;
 8003956:	e029      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	461a      	mov	r2, r3
 8003966:	f000 fae0 	bl	8003f2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2160      	movs	r1, #96	; 0x60
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fb0a 	bl	8003f8a <TIM_ITRx_SetConfig>
      break;
 8003976:	e019      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	461a      	mov	r2, r3
 8003986:	f000 faa1 	bl	8003ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2140      	movs	r1, #64	; 0x40
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fafa 	bl	8003f8a <TIM_ITRx_SetConfig>
      break;
 8003996:	e009      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f000 faf1 	bl	8003f8a <TIM_ITRx_SetConfig>
      break;
 80039a8:	e000      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80039aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a40      	ldr	r2, [pc, #256]	; (8003b40 <TIM_Base_SetConfig+0x114>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4a:	d00f      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a3d      	ldr	r2, [pc, #244]	; (8003b44 <TIM_Base_SetConfig+0x118>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3c      	ldr	r2, [pc, #240]	; (8003b48 <TIM_Base_SetConfig+0x11c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a3b      	ldr	r2, [pc, #236]	; (8003b4c <TIM_Base_SetConfig+0x120>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a3a      	ldr	r2, [pc, #232]	; (8003b50 <TIM_Base_SetConfig+0x124>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2f      	ldr	r2, [pc, #188]	; (8003b40 <TIM_Base_SetConfig+0x114>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02b      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8c:	d027      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2c      	ldr	r2, [pc, #176]	; (8003b44 <TIM_Base_SetConfig+0x118>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d023      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2b      	ldr	r2, [pc, #172]	; (8003b48 <TIM_Base_SetConfig+0x11c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01f      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <TIM_Base_SetConfig+0x120>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01b      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a29      	ldr	r2, [pc, #164]	; (8003b50 <TIM_Base_SetConfig+0x124>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d017      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a28      	ldr	r2, [pc, #160]	; (8003b54 <TIM_Base_SetConfig+0x128>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <TIM_Base_SetConfig+0x12c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00f      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <TIM_Base_SetConfig+0x130>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a25      	ldr	r2, [pc, #148]	; (8003b60 <TIM_Base_SetConfig+0x134>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a24      	ldr	r2, [pc, #144]	; (8003b64 <TIM_Base_SetConfig+0x138>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a23      	ldr	r2, [pc, #140]	; (8003b68 <TIM_Base_SetConfig+0x13c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d108      	bne.n	8003af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <TIM_Base_SetConfig+0x114>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <TIM_Base_SetConfig+0xf8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a0c      	ldr	r2, [pc, #48]	; (8003b50 <TIM_Base_SetConfig+0x124>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d103      	bne.n	8003b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	615a      	str	r2, [r3, #20]
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	40010400 	.word	0x40010400
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800
 8003b60:	40001800 	.word	0x40001800
 8003b64:	40001c00 	.word	0x40001c00
 8003b68:	40002000 	.word	0x40002000

08003b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f023 0201 	bic.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f023 0302 	bic.w	r3, r3, #2
 8003bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a20      	ldr	r2, [pc, #128]	; (8003c44 <TIM_OC1_SetConfig+0xd8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_OC1_SetConfig+0x64>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a1f      	ldr	r2, [pc, #124]	; (8003c48 <TIM_OC1_SetConfig+0xdc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d10c      	bne.n	8003bea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0308 	bic.w	r3, r3, #8
 8003bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <TIM_OC1_SetConfig+0xd8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_OC1_SetConfig+0x8e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <TIM_OC1_SetConfig+0xdc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d111      	bne.n	8003c1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	621a      	str	r2, [r3, #32]
}
 8003c38:	bf00      	nop
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	40010000 	.word	0x40010000
 8003c48:	40010400 	.word	0x40010400

08003c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f023 0210 	bic.w	r2, r3, #16
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f023 0320 	bic.w	r3, r3, #32
 8003c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a22      	ldr	r2, [pc, #136]	; (8003d30 <TIM_OC2_SetConfig+0xe4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <TIM_OC2_SetConfig+0x68>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a21      	ldr	r2, [pc, #132]	; (8003d34 <TIM_OC2_SetConfig+0xe8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d10d      	bne.n	8003cd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <TIM_OC2_SetConfig+0xe4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <TIM_OC2_SetConfig+0x94>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <TIM_OC2_SetConfig+0xe8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d113      	bne.n	8003d08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40010400 	.word	0x40010400

08003d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <TIM_OC3_SetConfig+0xe0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d003      	beq.n	8003d9e <TIM_OC3_SetConfig+0x66>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a20      	ldr	r2, [pc, #128]	; (8003e1c <TIM_OC3_SetConfig+0xe4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d10d      	bne.n	8003dba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a16      	ldr	r2, [pc, #88]	; (8003e18 <TIM_OC3_SetConfig+0xe0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_OC3_SetConfig+0x92>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a15      	ldr	r2, [pc, #84]	; (8003e1c <TIM_OC3_SetConfig+0xe4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d113      	bne.n	8003df2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	621a      	str	r2, [r3, #32]
}
 8003e0c:	bf00      	nop
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40010400 	.word	0x40010400

08003e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	031b      	lsls	r3, r3, #12
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <TIM_OC4_SetConfig+0xa4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <TIM_OC4_SetConfig+0x68>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a11      	ldr	r2, [pc, #68]	; (8003ec8 <TIM_OC4_SetConfig+0xa8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d109      	bne.n	8003e9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	019b      	lsls	r3, r3, #6
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	621a      	str	r2, [r3, #32]
}
 8003eb6:	bf00      	nop
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40010400 	.word	0x40010400

08003ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f023 0201 	bic.w	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f023 030a 	bic.w	r3, r3, #10
 8003f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b087      	sub	sp, #28
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f023 0210 	bic.w	r2, r3, #16
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	031b      	lsls	r3, r3, #12
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b085      	sub	sp, #20
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f043 0307 	orr.w	r3, r3, #7
 8003fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	609a      	str	r2, [r3, #8]
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	021a      	lsls	r2, r3, #8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004014:	2302      	movs	r3, #2
 8004016:	e05a      	b.n	80040ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a21      	ldr	r2, [pc, #132]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d022      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004064:	d01d      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d018      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00e      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a18      	ldr	r2, [pc, #96]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d009      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10c      	bne.n	80040bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40010400 	.word	0x40010400
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40001800 	.word	0x40001800

080040f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <__libc_init_array>:
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	4e0d      	ldr	r6, [pc, #52]	; (8004158 <__libc_init_array+0x38>)
 8004124:	4c0d      	ldr	r4, [pc, #52]	; (800415c <__libc_init_array+0x3c>)
 8004126:	1ba4      	subs	r4, r4, r6
 8004128:	10a4      	asrs	r4, r4, #2
 800412a:	2500      	movs	r5, #0
 800412c:	42a5      	cmp	r5, r4
 800412e:	d109      	bne.n	8004144 <__libc_init_array+0x24>
 8004130:	4e0b      	ldr	r6, [pc, #44]	; (8004160 <__libc_init_array+0x40>)
 8004132:	4c0c      	ldr	r4, [pc, #48]	; (8004164 <__libc_init_array+0x44>)
 8004134:	f000 f820 	bl	8004178 <_init>
 8004138:	1ba4      	subs	r4, r4, r6
 800413a:	10a4      	asrs	r4, r4, #2
 800413c:	2500      	movs	r5, #0
 800413e:	42a5      	cmp	r5, r4
 8004140:	d105      	bne.n	800414e <__libc_init_array+0x2e>
 8004142:	bd70      	pop	{r4, r5, r6, pc}
 8004144:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004148:	4798      	blx	r3
 800414a:	3501      	adds	r5, #1
 800414c:	e7ee      	b.n	800412c <__libc_init_array+0xc>
 800414e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004152:	4798      	blx	r3
 8004154:	3501      	adds	r5, #1
 8004156:	e7f2      	b.n	800413e <__libc_init_array+0x1e>
 8004158:	080041a8 	.word	0x080041a8
 800415c:	080041a8 	.word	0x080041a8
 8004160:	080041a8 	.word	0x080041a8
 8004164:	080041ac 	.word	0x080041ac

08004168 <memset>:
 8004168:	4402      	add	r2, r0
 800416a:	4603      	mov	r3, r0
 800416c:	4293      	cmp	r3, r2
 800416e:	d100      	bne.n	8004172 <memset+0xa>
 8004170:	4770      	bx	lr
 8004172:	f803 1b01 	strb.w	r1, [r3], #1
 8004176:	e7f9      	b.n	800416c <memset+0x4>

08004178 <_init>:
 8004178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417a:	bf00      	nop
 800417c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417e:	bc08      	pop	{r3}
 8004180:	469e      	mov	lr, r3
 8004182:	4770      	bx	lr

08004184 <_fini>:
 8004184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004186:	bf00      	nop
 8004188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418a:	bc08      	pop	{r3}
 800418c:	469e      	mov	lr, r3
 800418e:	4770      	bx	lr
