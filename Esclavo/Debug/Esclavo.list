
Esclavo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000718c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08007318  08007318  00017318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007598  08007598  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007598  08007598  00017598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075a0  080075a0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075a0  080075a0  000175a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075a4  080075a4  000175a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080075a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d6ec  200001e4  0800778c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001d8d0  0800778c  0002d8d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111f7  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000254d  00000000  00000000  0003140b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  00033958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  000345e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021f13  00000000  00000000  00035140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b31b  00000000  00000000  00057053  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9e16  00000000  00000000  0006236e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c184  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c14  00000000  00000000  0012c200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080072fc 	.word	0x080072fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	080072fc 	.word	0x080072fc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b972 	b.w	8000eb0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9e08      	ldr	r6, [sp, #32]
 8000bea:	4604      	mov	r4, r0
 8000bec:	4688      	mov	r8, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d14b      	bne.n	8000c8a <__udivmoddi4+0xa6>
 8000bf2:	428a      	cmp	r2, r1
 8000bf4:	4615      	mov	r5, r2
 8000bf6:	d967      	bls.n	8000cc8 <__udivmoddi4+0xe4>
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0720 	rsb	r7, r2, #32
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0a:	4095      	lsls	r5, r2
 8000c0c:	ea47 0803 	orr.w	r8, r7, r3
 8000c10:	4094      	lsls	r4, r2
 8000c12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c16:	0c23      	lsrs	r3, r4, #16
 8000c18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c1c:	fa1f fc85 	uxth.w	ip, r5
 8000c20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c28:	fb07 f10c 	mul.w	r1, r7, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x60>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c36:	f080 811b 	bcs.w	8000e70 <__udivmoddi4+0x28c>
 8000c3a:	4299      	cmp	r1, r3
 8000c3c:	f240 8118 	bls.w	8000e70 <__udivmoddi4+0x28c>
 8000c40:	3f02      	subs	r7, #2
 8000c42:	442b      	add	r3, r5
 8000c44:	1a5b      	subs	r3, r3, r1
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c58:	45a4      	cmp	ip, r4
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x8c>
 8000c5c:	192c      	adds	r4, r5, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	f080 8107 	bcs.w	8000e74 <__udivmoddi4+0x290>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	f240 8104 	bls.w	8000e74 <__udivmoddi4+0x290>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	442c      	add	r4, r5
 8000c70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c74:	eba4 040c 	sub.w	r4, r4, ip
 8000c78:	2700      	movs	r7, #0
 8000c7a:	b11e      	cbz	r6, 8000c84 <__udivmoddi4+0xa0>
 8000c7c:	40d4      	lsrs	r4, r2
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e9c6 4300 	strd	r4, r3, [r6]
 8000c84:	4639      	mov	r1, r7
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d909      	bls.n	8000ca2 <__udivmoddi4+0xbe>
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	f000 80eb 	beq.w	8000e6a <__udivmoddi4+0x286>
 8000c94:	2700      	movs	r7, #0
 8000c96:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9a:	4638      	mov	r0, r7
 8000c9c:	4639      	mov	r1, r7
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	fab3 f783 	clz	r7, r3
 8000ca6:	2f00      	cmp	r7, #0
 8000ca8:	d147      	bne.n	8000d3a <__udivmoddi4+0x156>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xd0>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 80fa 	bhi.w	8000ea8 <__udivmoddi4+0x2c4>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4698      	mov	r8, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d0e0      	beq.n	8000c84 <__udivmoddi4+0xa0>
 8000cc2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cc6:	e7dd      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000cc8:	b902      	cbnz	r2, 8000ccc <__udivmoddi4+0xe8>
 8000cca:	deff      	udf	#255	; 0xff
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	f040 808f 	bne.w	8000df4 <__udivmoddi4+0x210>
 8000cd6:	1b49      	subs	r1, r1, r5
 8000cd8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cdc:	fa1f f885 	uxth.w	r8, r5
 8000ce0:	2701      	movs	r7, #1
 8000ce2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ce6:	0c23      	lsrs	r3, r4, #16
 8000ce8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf0:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x124>
 8000cf8:	18eb      	adds	r3, r5, r3
 8000cfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x122>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	f200 80cd 	bhi.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d06:	4684      	mov	ip, r0
 8000d08:	1a59      	subs	r1, r3, r1
 8000d0a:	b2a3      	uxth	r3, r4
 8000d0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d18:	fb08 f800 	mul.w	r8, r8, r0
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x14c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x14a>
 8000d28:	45a0      	cmp	r8, r4
 8000d2a:	f200 80b6 	bhi.w	8000e9a <__udivmoddi4+0x2b6>
 8000d2e:	4618      	mov	r0, r3
 8000d30:	eba4 0408 	sub.w	r4, r4, r8
 8000d34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d38:	e79f      	b.n	8000c7a <__udivmoddi4+0x96>
 8000d3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000d3e:	40bb      	lsls	r3, r7
 8000d40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d48:	fa01 f407 	lsl.w	r4, r1, r7
 8000d4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d58:	4325      	orrs	r5, r4
 8000d5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d5e:	0c2c      	lsrs	r4, r5, #16
 8000d60:	fb08 3319 	mls	r3, r8, r9, r3
 8000d64:	fa1f fa8e 	uxth.w	sl, lr
 8000d68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d70:	429c      	cmp	r4, r3
 8000d72:	fa02 f207 	lsl.w	r2, r2, r7
 8000d76:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b0>
 8000d7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d84:	f080 8087 	bcs.w	8000e96 <__udivmoddi4+0x2b2>
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	f240 8084 	bls.w	8000e96 <__udivmoddi4+0x2b2>
 8000d8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d92:	4473      	add	r3, lr
 8000d94:	1b1b      	subs	r3, r3, r4
 8000d96:	b2ad      	uxth	r5, r5
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da8:	45a2      	cmp	sl, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1da>
 8000dac:	eb1e 0404 	adds.w	r4, lr, r4
 8000db0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db4:	d26b      	bcs.n	8000e8e <__udivmoddi4+0x2aa>
 8000db6:	45a2      	cmp	sl, r4
 8000db8:	d969      	bls.n	8000e8e <__udivmoddi4+0x2aa>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4474      	add	r4, lr
 8000dbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	eba4 040a 	sub.w	r4, r4, sl
 8000dca:	454c      	cmp	r4, r9
 8000dcc:	46c2      	mov	sl, r8
 8000dce:	464b      	mov	r3, r9
 8000dd0:	d354      	bcc.n	8000e7c <__udivmoddi4+0x298>
 8000dd2:	d051      	beq.n	8000e78 <__udivmoddi4+0x294>
 8000dd4:	2e00      	cmp	r6, #0
 8000dd6:	d069      	beq.n	8000eac <__udivmoddi4+0x2c8>
 8000dd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000ddc:	eb64 0403 	sbc.w	r4, r4, r3
 8000de0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de4:	40fd      	lsrs	r5, r7
 8000de6:	40fc      	lsrs	r4, r7
 8000de8:	ea4c 0505 	orr.w	r5, ip, r5
 8000dec:	e9c6 5400 	strd	r5, r4, [r6]
 8000df0:	2700      	movs	r7, #0
 8000df2:	e747      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000df4:	f1c2 0320 	rsb	r3, r2, #32
 8000df8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dfc:	4095      	lsls	r5, r2
 8000dfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000e02:	fa21 f303 	lsr.w	r3, r1, r3
 8000e06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0a:	4338      	orrs	r0, r7
 8000e0c:	0c01      	lsrs	r1, r0, #16
 8000e0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e12:	fa1f f885 	uxth.w	r8, r5
 8000e16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1e:	fb07 f308 	mul.w	r3, r7, r8
 8000e22:	428b      	cmp	r3, r1
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x256>
 8000e2a:	1869      	adds	r1, r5, r1
 8000e2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e30:	d22f      	bcs.n	8000e92 <__udivmoddi4+0x2ae>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d92d      	bls.n	8000e92 <__udivmoddi4+0x2ae>
 8000e36:	3f02      	subs	r7, #2
 8000e38:	4429      	add	r1, r5
 8000e3a:	1acb      	subs	r3, r1, r3
 8000e3c:	b281      	uxth	r1, r0
 8000e3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb00 f308 	mul.w	r3, r0, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x27e>
 8000e52:	1869      	adds	r1, r5, r1
 8000e54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e58:	d217      	bcs.n	8000e8a <__udivmoddi4+0x2a6>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d915      	bls.n	8000e8a <__udivmoddi4+0x2a6>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4429      	add	r1, r5
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e68:	e73b      	b.n	8000ce2 <__udivmoddi4+0xfe>
 8000e6a:	4637      	mov	r7, r6
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e709      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000e70:	4607      	mov	r7, r0
 8000e72:	e6e7      	b.n	8000c44 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fb      	b.n	8000c70 <__udivmoddi4+0x8c>
 8000e78:	4541      	cmp	r1, r8
 8000e7a:	d2ab      	bcs.n	8000dd4 <__udivmoddi4+0x1f0>
 8000e7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e80:	eb69 020e 	sbc.w	r2, r9, lr
 8000e84:	3801      	subs	r0, #1
 8000e86:	4613      	mov	r3, r2
 8000e88:	e7a4      	b.n	8000dd4 <__udivmoddi4+0x1f0>
 8000e8a:	4660      	mov	r0, ip
 8000e8c:	e7e9      	b.n	8000e62 <__udivmoddi4+0x27e>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	e795      	b.n	8000dbe <__udivmoddi4+0x1da>
 8000e92:	4667      	mov	r7, ip
 8000e94:	e7d1      	b.n	8000e3a <__udivmoddi4+0x256>
 8000e96:	4681      	mov	r9, r0
 8000e98:	e77c      	b.n	8000d94 <__udivmoddi4+0x1b0>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	442c      	add	r4, r5
 8000e9e:	e747      	b.n	8000d30 <__udivmoddi4+0x14c>
 8000ea0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea4:	442b      	add	r3, r5
 8000ea6:	e72f      	b.n	8000d08 <__udivmoddi4+0x124>
 8000ea8:	4638      	mov	r0, r7
 8000eaa:	e708      	b.n	8000cbe <__udivmoddi4+0xda>
 8000eac:	4637      	mov	r7, r6
 8000eae:	e6e9      	b.n	8000c84 <__udivmoddi4+0xa0>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <identificador>:
 *
 * Created: 11/12/2019 18:47:43
 *  Author: Rodrigo Goñi
 */
#include "identificador.h"
int identificador(char *str, double *instrucciones, int cont) {
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b0c5      	sub	sp, #276	; 0x114
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	6018      	str	r0, [r3, #0]
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	6019      	str	r1, [r3, #0]
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	601a      	str	r2, [r3, #0]
	char tmp[50] = { 0 };
 8000eca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ece:	2232      	movs	r2, #50	; 0x32
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f004 fc00 	bl	80056d8 <memset>
	double vec[20];
	char *puntero;
	int i = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	int j = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	int k = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	int l = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	int cont1 = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	double numero;
	while (i < cont) {
 8000ef6:	e240      	b.n	800137a <identificador+0x4c6>
		switch (str[i]) {
 8000ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000efc:	f107 020c 	add.w	r2, r7, #12
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	3b41      	subs	r3, #65	; 0x41
 8000f08:	2b31      	cmp	r3, #49	; 0x31
 8000f0a:	f200 8231 	bhi.w	8001370 <identificador+0x4bc>
 8000f0e:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <identificador+0x60>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08001035 	.word	0x08001035
 8000f18:	08001371 	.word	0x08001371
 8000f1c:	08001371 	.word	0x08001371
 8000f20:	0800108d 	.word	0x0800108d
 8000f24:	08001139 	.word	0x08001139
 8000f28:	08001371 	.word	0x08001371
 8000f2c:	08001371 	.word	0x08001371
 8000f30:	080010e3 	.word	0x080010e3
 8000f34:	080011e5 	.word	0x080011e5
 8000f38:	08001371 	.word	0x08001371
 8000f3c:	08001371 	.word	0x08001371
 8000f40:	08001371 	.word	0x08001371
 8000f44:	08001371 	.word	0x08001371
 8000f48:	08001371 	.word	0x08001371
 8000f4c:	08001371 	.word	0x08001371
 8000f50:	0800118f 	.word	0x0800118f
 8000f54:	08001371 	.word	0x08001371
 8000f58:	08000fdd 	.word	0x08000fdd
 8000f5c:	08001371 	.word	0x08001371
 8000f60:	08001371 	.word	0x08001371
 8000f64:	08001371 	.word	0x08001371
 8000f68:	08001371 	.word	0x08001371
 8000f6c:	08001371 	.word	0x08001371
 8000f70:	08001371 	.word	0x08001371
 8000f74:	08001371 	.word	0x08001371
 8000f78:	08001371 	.word	0x08001371
 8000f7c:	08001371 	.word	0x08001371
 8000f80:	08001371 	.word	0x08001371
 8000f84:	08001371 	.word	0x08001371
 8000f88:	08001371 	.word	0x08001371
 8000f8c:	08001371 	.word	0x08001371
 8000f90:	08001371 	.word	0x08001371
 8000f94:	08001035 	.word	0x08001035
 8000f98:	08001371 	.word	0x08001371
 8000f9c:	08001371 	.word	0x08001371
 8000fa0:	0800108d 	.word	0x0800108d
 8000fa4:	08001139 	.word	0x08001139
 8000fa8:	08001371 	.word	0x08001371
 8000fac:	08001371 	.word	0x08001371
 8000fb0:	080010e3 	.word	0x080010e3
 8000fb4:	080011e5 	.word	0x080011e5
 8000fb8:	08001371 	.word	0x08001371
 8000fbc:	08001371 	.word	0x08001371
 8000fc0:	08001371 	.word	0x08001371
 8000fc4:	08001371 	.word	0x08001371
 8000fc8:	08001371 	.word	0x08001371
 8000fcc:	08001371 	.word	0x08001371
 8000fd0:	0800118f 	.word	0x0800118f
 8000fd4:	08001371 	.word	0x08001371
 8000fd8:	08000fdd 	.word	0x08000fdd
		case 'r':
		case 'R':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 8000fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	f107 020c 	add.w	r2, r7, #12
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b2d      	cmp	r3, #45	; 0x2d
 8000fee:	d009      	beq.n	8001004 <identificador+0x150>
 8000ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	f107 020c 	add.w	r2, r7, #12
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b3a      	cmp	r3, #58	; 0x3a
 8001002:	d111      	bne.n	8001028 <identificador+0x174>
				instrucciones[j] = Estados;
 8001004:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	f107 0208 	add.w	r2, r7, #8
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	441a      	add	r2, r3
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800101a:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 800101e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001022:	3301      	adds	r3, #1
 8001024:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 8001028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800102c:	3301      	adds	r3, #1
 800102e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8001032:	e1a2      	b.n	800137a <identificador+0x4c6>
		case 'a':
		case 'A':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 8001034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001038:	3301      	adds	r3, #1
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b2d      	cmp	r3, #45	; 0x2d
 8001046:	d009      	beq.n	800105c <identificador+0x1a8>
 8001048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800104c:	3301      	adds	r3, #1
 800104e:	f107 020c 	add.w	r2, r7, #12
 8001052:	6812      	ldr	r2, [r2, #0]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b3a      	cmp	r3, #58	; 0x3a
 800105a:	d111      	bne.n	8001080 <identificador+0x1cc>
				instrucciones[j] = Activar;
 800105c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	f107 0208 	add.w	r2, r7, #8
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	441a      	add	r2, r3
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	f04f 0400 	mov.w	r4, #0
 8001072:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 8001076:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800107a:	3301      	adds	r3, #1
 800107c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 8001080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001084:	3301      	adds	r3, #1
 8001086:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 800108a:	e176      	b.n	800137a <identificador+0x4c6>
		case 'd':
		case 'D':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 800108c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001090:	3301      	adds	r3, #1
 8001092:	f107 020c 	add.w	r2, r7, #12
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b2d      	cmp	r3, #45	; 0x2d
 800109e:	d009      	beq.n	80010b4 <identificador+0x200>
 80010a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010a4:	3301      	adds	r3, #1
 80010a6:	f107 020c 	add.w	r2, r7, #12
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b3a      	cmp	r3, #58	; 0x3a
 80010b2:	d110      	bne.n	80010d6 <identificador+0x222>
				instrucciones[j] = Desactivar;
 80010b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	f107 0208 	add.w	r2, r7, #8
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	441a      	add	r2, r3
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	4cb4      	ldr	r4, [pc, #720]	; (8001398 <identificador+0x4e4>)
 80010c8:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 80010cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80010d0:	3301      	adds	r3, #1
 80010d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 80010d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010da:	3301      	adds	r3, #1
 80010dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 80010e0:	e14b      	b.n	800137a <identificador+0x4c6>
		case 'h':
		case 'H':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 80010e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010e6:	3301      	adds	r3, #1
 80010e8:	f107 020c 	add.w	r2, r7, #12
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b2d      	cmp	r3, #45	; 0x2d
 80010f4:	d009      	beq.n	800110a <identificador+0x256>
 80010f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010fa:	3301      	adds	r3, #1
 80010fc:	f107 020c 	add.w	r2, r7, #12
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b3a      	cmp	r3, #58	; 0x3a
 8001108:	d110      	bne.n	800112c <identificador+0x278>
				instrucciones[j] = Modo_homing;
 800110a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	f107 0208 	add.w	r2, r7, #8
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	441a      	add	r2, r3
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	4c9f      	ldr	r4, [pc, #636]	; (800139c <identificador+0x4e8>)
 800111e:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 8001122:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001126:	3301      	adds	r3, #1
 8001128:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 800112c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001130:	3301      	adds	r3, #1
 8001132:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8001136:	e120      	b.n	800137a <identificador+0x4c6>
		case 'e':
		case 'E':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 8001138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800113c:	3301      	adds	r3, #1
 800113e:	f107 020c 	add.w	r2, r7, #12
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b2d      	cmp	r3, #45	; 0x2d
 800114a:	d009      	beq.n	8001160 <identificador+0x2ac>
 800114c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001150:	3301      	adds	r3, #1
 8001152:	f107 020c 	add.w	r2, r7, #12
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b3a      	cmp	r3, #58	; 0x3a
 800115e:	d110      	bne.n	8001182 <identificador+0x2ce>
				instrucciones[j] = error;
 8001160:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	441a      	add	r2, r3
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	4c8b      	ldr	r4, [pc, #556]	; (80013a0 <identificador+0x4ec>)
 8001174:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 8001178:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800117c:	3301      	adds	r3, #1
 800117e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 8001182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001186:	3301      	adds	r3, #1
 8001188:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 800118c:	e0f5      	b.n	800137a <identificador+0x4c6>
		case 'p':
		case 'P':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 800118e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001192:	3301      	adds	r3, #1
 8001194:	f107 020c 	add.w	r2, r7, #12
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b2d      	cmp	r3, #45	; 0x2d
 80011a0:	d009      	beq.n	80011b6 <identificador+0x302>
 80011a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011a6:	3301      	adds	r3, #1
 80011a8:	f107 020c 	add.w	r2, r7, #12
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b3a      	cmp	r3, #58	; 0x3a
 80011b4:	d110      	bne.n	80011d8 <identificador+0x324>
				instrucciones[j] = Preguntar;
 80011b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	f107 0208 	add.w	r2, r7, #8
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	441a      	add	r2, r3
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	4c76      	ldr	r4, [pc, #472]	; (80013a4 <identificador+0x4f0>)
 80011ca:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 80011ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011d2:	3301      	adds	r3, #1
 80011d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 80011d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011dc:	3301      	adds	r3, #1
 80011de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 80011e2:	e0ca      	b.n	800137a <identificador+0x4c6>
		case 'i':
		case 'I':
			i++;
 80011e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011e8:	3301      	adds	r3, #1
 80011ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			while ((str[i] != '-') && (i < cont)) {
 80011ee:	e070      	b.n	80012d2 <identificador+0x41e>
				k = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
				if (str[i] == '_') {
 80011f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011fa:	f107 020c 	add.w	r2, r7, #12
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	4413      	add	r3, r2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b5f      	cmp	r3, #95	; 0x5f
 8001206:	d11d      	bne.n	8001244 <identificador+0x390>
					i++;
 8001208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800120c:	3301      	adds	r3, #1
 800120e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				}
				while ((str[i] != '_') && (i < cont) && (str[i] != '-')) {
 8001212:	e017      	b.n	8001244 <identificador+0x390>
					tmp[k] = str[i];
 8001214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001218:	f107 020c 	add.w	r2, r7, #12
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	4413      	add	r3, r2
 8001220:	7819      	ldrb	r1, [r3, #0]
 8001222:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800122a:	4413      	add	r3, r2
 800122c:	460a      	mov	r2, r1
 800122e:	701a      	strb	r2, [r3, #0]
					k++;
 8001230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001234:	3301      	adds	r3, #1
 8001236:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
					i++;
 800123a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800123e:	3301      	adds	r3, #1
 8001240:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				while ((str[i] != '_') && (i < cont) && (str[i] != '-')) {
 8001244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001248:	f107 020c 	add.w	r2, r7, #12
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b5f      	cmp	r3, #95	; 0x5f
 8001254:	d00e      	beq.n	8001274 <identificador+0x3c0>
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	da08      	bge.n	8001274 <identificador+0x3c0>
 8001262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001266:	f107 020c 	add.w	r2, r7, #12
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b2d      	cmp	r3, #45	; 0x2d
 8001272:	d1cf      	bne.n	8001214 <identificador+0x360>
				}
				numero = strtod(tmp, &puntero);
 8001274:	f107 0214 	add.w	r2, r7, #20
 8001278:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800127c:	4611      	mov	r1, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f005 f842 	bl	8006308 <strtod>
 8001284:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
				vec[cont1] = numero;
 8001288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001292:	4413      	add	r3, r2
 8001294:	f1a3 02f8 	sub.w	r2, r3, #248	; 0xf8
 8001298:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800129c:	e9c2 3400 	strd	r3, r4, [r2]
				cont1++;
 80012a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012a4:	3301      	adds	r3, #1
 80012a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
				for (int m = 0; m <= 50; m++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80012b0:	e00b      	b.n	80012ca <identificador+0x416>
					tmp[m] = 0;
 80012b2:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80012b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012ba:	4413      	add	r3, r2
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
				for (int m = 0; m <= 50; m++) {
 80012c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012c4:	3301      	adds	r3, #1
 80012c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80012ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012ce:	2b32      	cmp	r3, #50	; 0x32
 80012d0:	ddef      	ble.n	80012b2 <identificador+0x3fe>
			while ((str[i] != '-') && (i < cont)) {
 80012d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012d6:	f107 020c 	add.w	r2, r7, #12
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b2d      	cmp	r3, #45	; 0x2d
 80012e2:	d006      	beq.n	80012f2 <identificador+0x43e>
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f6ff af7f 	blt.w	80011f0 <identificador+0x33c>
				}
			}
			if (cont1 == 3) {
 80012f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d136      	bne.n	8001368 <identificador+0x4b4>
				instrucciones[j] = Modo_ir;
 80012fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	f107 0208 	add.w	r2, r7, #8
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	441a      	add	r2, r3
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	4c26      	ldr	r4, [pc, #152]	; (80013a8 <identificador+0x4f4>)
 800130e:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 8001312:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001316:	3301      	adds	r3, #1
 8001318:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				for (l = 0; l < cont1; l++) {
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001322:	e01b      	b.n	800135c <identificador+0x4a8>
					instrucciones[j] = vec[l];
 8001324:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	f107 0208 	add.w	r2, r7, #8
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	441a      	add	r2, r3
 8001332:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800133c:	440b      	add	r3, r1
 800133e:	3bf8      	subs	r3, #248	; 0xf8
 8001340:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001344:	e9c2 3400 	strd	r3, r4, [r2]
					j++;
 8001348:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800134c:	3301      	adds	r3, #1
 800134e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				for (l = 0; l < cont1; l++) {
 8001352:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001356:	3301      	adds	r3, #1
 8001358:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800135c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001364:	429a      	cmp	r2, r3
 8001366:	dbdd      	blt.n	8001324 <identificador+0x470>
				}
			}
			cont1 = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
			break;
 800136e:	e004      	b.n	800137a <identificador+0x4c6>
		default:
			i++;
 8001370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001374:	3301      	adds	r3, #1
 8001376:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	while (i < cont) {
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	f6ff adb8 	blt.w	8000ef8 <identificador+0x44>
		}
	}
	return j;
 8001388:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
}
 800138c:	4618      	mov	r0, r3
 800138e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001392:	46bd      	mov	sp, r7
 8001394:	bd90      	pop	{r4, r7, pc}
 8001396:	bf00      	nop
 8001398:	3ff00000 	.word	0x3ff00000
 800139c:	40080000 	.word	0x40080000
 80013a0:	40140000 	.word	0x40140000
 80013a4:	40180000 	.word	0x40180000
 80013a8:	40100000 	.word	0x40100000
 80013ac:	00000000 	.word	0x00000000

080013b0 <interpolador_vel>:
							- acel_nes / 2 * pow((TIEMPO_SAMP * i), 2));
		}
	}
}
int interpolador_vel(double pos_init, double pos_fin, double tiempo,
		float *q_vec) {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b099      	sub	sp, #100	; 0x64
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	ed87 0b06 	vstr	d0, [r7, #24]
 80013ba:	ed87 1b04 	vstr	d1, [r7, #16]
 80013be:	ed87 2b02 	vstr	d2, [r7, #8]
 80013c2:	6078      	str	r0, [r7, #4]
	double acel_nes, tau, pend;
	int cant_pun_tot, cant_pun_tau;
	cant_pun_tot = tiempo / TIEMPO_SAMP;
 80013c4:	a3c8      	add	r3, pc, #800	; (adr r3, 80016e8 <interpolador_vel+0x338>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ce:	f7ff f9e9 	bl	80007a4 <__aeabi_ddiv>
 80013d2:	4603      	mov	r3, r0
 80013d4:	460c      	mov	r4, r1
 80013d6:	4618      	mov	r0, r3
 80013d8:	4621      	mov	r1, r4
 80013da:	f7ff fb53 	bl	8000a84 <__aeabi_d2iz>
 80013de:	4603      	mov	r3, r0
 80013e0:	647b      	str	r3, [r7, #68]	; 0x44
	if (pos_fin - pos_init > 0) {
 80013e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013ea:	f7fe fef9 	bl	80001e0 <__aeabi_dsub>
 80013ee:	4603      	mov	r3, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	4618      	mov	r0, r3
 80013f4:	4621      	mov	r1, r4
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	f7ff fb37 	bl	8000a70 <__aeabi_dcmpgt>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80b6 	beq.w	8001576 <interpolador_vel+0x1c6>
		acel_nes = (VEL_MAX / (tiempo - (pos_fin - pos_init) / VEL_MAX));
 800140a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800140e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001412:	f7fe fee5 	bl	80001e0 <__aeabi_dsub>
 8001416:	4603      	mov	r3, r0
 8001418:	460c      	mov	r4, r1
 800141a:	4618      	mov	r0, r3
 800141c:	4621      	mov	r1, r4
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	4bb3      	ldr	r3, [pc, #716]	; (80016f0 <interpolador_vel+0x340>)
 8001424:	f7ff f9be 	bl	80007a4 <__aeabi_ddiv>
 8001428:	4603      	mov	r3, r0
 800142a:	460c      	mov	r4, r1
 800142c:	461a      	mov	r2, r3
 800142e:	4623      	mov	r3, r4
 8001430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001434:	f7fe fed4 	bl	80001e0 <__aeabi_dsub>
 8001438:	4603      	mov	r3, r0
 800143a:	460c      	mov	r4, r1
 800143c:	461a      	mov	r2, r3
 800143e:	4623      	mov	r3, r4
 8001440:	f04f 0000 	mov.w	r0, #0
 8001444:	49aa      	ldr	r1, [pc, #680]	; (80016f0 <interpolador_vel+0x340>)
 8001446:	f7ff f9ad 	bl	80007a4 <__aeabi_ddiv>
 800144a:	4603      	mov	r3, r0
 800144c:	460c      	mov	r4, r1
 800144e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		tau = VEL_MAX / acel_nes;
 8001452:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001456:	f04f 0000 	mov.w	r0, #0
 800145a:	49a5      	ldr	r1, [pc, #660]	; (80016f0 <interpolador_vel+0x340>)
 800145c:	f7ff f9a2 	bl	80007a4 <__aeabi_ddiv>
 8001460:	4603      	mov	r3, r0
 8001462:	460c      	mov	r4, r1
 8001464:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		cant_pun_tau = tau / TIEMPO_SAMP;
 8001468:	a39f      	add	r3, pc, #636	; (adr r3, 80016e8 <interpolador_vel+0x338>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001472:	f7ff f997 	bl	80007a4 <__aeabi_ddiv>
 8001476:	4603      	mov	r3, r0
 8001478:	460c      	mov	r4, r1
 800147a:	4618      	mov	r0, r3
 800147c:	4621      	mov	r1, r4
 800147e:	f7ff fb01 	bl	8000a84 <__aeabi_d2iz>
 8001482:	4603      	mov	r3, r0
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
		pend = VEL_MAX / tau;
 8001486:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800148a:	f04f 0000 	mov.w	r0, #0
 800148e:	4998      	ldr	r1, [pc, #608]	; (80016f0 <interpolador_vel+0x340>)
 8001490:	f7ff f988 	bl	80007a4 <__aeabi_ddiv>
 8001494:	4603      	mov	r3, r0
 8001496:	460c      	mov	r4, r1
 8001498:	e9c7 3408 	strd	r3, r4, [r7, #32]
		for (int i = 0; i <= cant_pun_tau; i++) {
 800149c:	2300      	movs	r3, #0
 800149e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014a0:	e01e      	b.n	80014e0 <interpolador_vel+0x130>
			q_vec[i] = TIEMPO_SAMP * i * pend;
 80014a2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80014a4:	f7fe ffea 	bl	800047c <__aeabi_i2d>
 80014a8:	a38f      	add	r3, pc, #572	; (adr r3, 80016e8 <interpolador_vel+0x338>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff f84f 	bl	8000550 <__aeabi_dmul>
 80014b2:	4603      	mov	r3, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	4618      	mov	r0, r3
 80014b8:	4621      	mov	r1, r4
 80014ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014be:	f7ff f847 	bl	8000550 <__aeabi_dmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	4618      	mov	r0, r3
 80014c8:	4621      	mov	r1, r4
 80014ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	18d4      	adds	r4, r2, r3
 80014d2:	f7ff fb1f 	bl	8000b14 <__aeabi_d2f>
 80014d6:	4603      	mov	r3, r0
 80014d8:	6023      	str	r3, [r4, #0]
		for (int i = 0; i <= cant_pun_tau; i++) {
 80014da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014dc:	3301      	adds	r3, #1
 80014de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dddc      	ble.n	80014a2 <interpolador_vel+0xf2>
		}

		for (int i = cant_pun_tau + 1; i <= (cant_pun_tot - cant_pun_tau);
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	3301      	adds	r3, #1
 80014ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80014ee:	e008      	b.n	8001502 <interpolador_vel+0x152>
				i++) {
			q_vec[i] = VEL_MAX;
 80014f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a7e      	ldr	r2, [pc, #504]	; (80016f4 <interpolador_vel+0x344>)
 80014fa:	601a      	str	r2, [r3, #0]
				i++) {
 80014fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014fe:	3301      	adds	r3, #1
 8001500:	65bb      	str	r3, [r7, #88]	; 0x58
		for (int i = cant_pun_tau + 1; i <= (cant_pun_tot - cant_pun_tau);
 8001502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800150a:	429a      	cmp	r2, r3
 800150c:	ddf0      	ble.n	80014f0 <interpolador_vel+0x140>
		}
		for (int i = (cant_pun_tot - cant_pun_tau) + 1; i < cant_pun_tot; i++) {
 800150e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	3301      	adds	r3, #1
 8001516:	657b      	str	r3, [r7, #84]	; 0x54
 8001518:	e027      	b.n	800156a <interpolador_vel+0x1ba>
			q_vec[i] = VEL_MAX - TIEMPO_SAMP * i * pend;
 800151a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800151c:	f7fe ffae 	bl	800047c <__aeabi_i2d>
 8001520:	a371      	add	r3, pc, #452	; (adr r3, 80016e8 <interpolador_vel+0x338>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7ff f813 	bl	8000550 <__aeabi_dmul>
 800152a:	4603      	mov	r3, r0
 800152c:	460c      	mov	r4, r1
 800152e:	4618      	mov	r0, r3
 8001530:	4621      	mov	r1, r4
 8001532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001536:	f7ff f80b 	bl	8000550 <__aeabi_dmul>
 800153a:	4603      	mov	r3, r0
 800153c:	460c      	mov	r4, r1
 800153e:	461a      	mov	r2, r3
 8001540:	4623      	mov	r3, r4
 8001542:	f04f 0000 	mov.w	r0, #0
 8001546:	496a      	ldr	r1, [pc, #424]	; (80016f0 <interpolador_vel+0x340>)
 8001548:	f7fe fe4a 	bl	80001e0 <__aeabi_dsub>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4618      	mov	r0, r3
 8001552:	4621      	mov	r1, r4
 8001554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	18d4      	adds	r4, r2, r3
 800155c:	f7ff fada 	bl	8000b14 <__aeabi_d2f>
 8001560:	4603      	mov	r3, r0
 8001562:	6023      	str	r3, [r4, #0]
		for (int i = (cant_pun_tot - cant_pun_tau) + 1; i < cant_pun_tot; i++) {
 8001564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001566:	3301      	adds	r3, #1
 8001568:	657b      	str	r3, [r7, #84]	; 0x54
 800156a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800156c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800156e:	429a      	cmp	r2, r3
 8001570:	dbd3      	blt.n	800151a <interpolador_vel+0x16a>
		}
		return 1;
 8001572:	2301      	movs	r3, #1
 8001574:	e0b4      	b.n	80016e0 <interpolador_vel+0x330>
	} else {
		acel_nes = (VEL_MAX / (tiempo + (pos_fin - pos_init) / VEL_MAX));
 8001576:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800157a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800157e:	f7fe fe2f 	bl	80001e0 <__aeabi_dsub>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	4618      	mov	r0, r3
 8001588:	4621      	mov	r1, r4
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b58      	ldr	r3, [pc, #352]	; (80016f0 <interpolador_vel+0x340>)
 8001590:	f7ff f908 	bl	80007a4 <__aeabi_ddiv>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	4618      	mov	r0, r3
 800159a:	4621      	mov	r1, r4
 800159c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015a0:	f7fe fe20 	bl	80001e4 <__adddf3>
 80015a4:	4603      	mov	r3, r0
 80015a6:	460c      	mov	r4, r1
 80015a8:	461a      	mov	r2, r3
 80015aa:	4623      	mov	r3, r4
 80015ac:	f04f 0000 	mov.w	r0, #0
 80015b0:	494f      	ldr	r1, [pc, #316]	; (80016f0 <interpolador_vel+0x340>)
 80015b2:	f7ff f8f7 	bl	80007a4 <__aeabi_ddiv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	460c      	mov	r4, r1
 80015ba:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		tau = VEL_MAX / acel_nes;
 80015be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015c2:	f04f 0000 	mov.w	r0, #0
 80015c6:	494a      	ldr	r1, [pc, #296]	; (80016f0 <interpolador_vel+0x340>)
 80015c8:	f7ff f8ec 	bl	80007a4 <__aeabi_ddiv>
 80015cc:	4603      	mov	r3, r0
 80015ce:	460c      	mov	r4, r1
 80015d0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		cant_pun_tau = tau / TIEMPO_SAMP;
 80015d4:	a344      	add	r3, pc, #272	; (adr r3, 80016e8 <interpolador_vel+0x338>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015de:	f7ff f8e1 	bl	80007a4 <__aeabi_ddiv>
 80015e2:	4603      	mov	r3, r0
 80015e4:	460c      	mov	r4, r1
 80015e6:	4618      	mov	r0, r3
 80015e8:	4621      	mov	r1, r4
 80015ea:	f7ff fa4b 	bl	8000a84 <__aeabi_d2iz>
 80015ee:	4603      	mov	r3, r0
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		pend = VEL_MAX / tau;
 80015f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015f6:	f04f 0000 	mov.w	r0, #0
 80015fa:	493d      	ldr	r1, [pc, #244]	; (80016f0 <interpolador_vel+0x340>)
 80015fc:	f7ff f8d2 	bl	80007a4 <__aeabi_ddiv>
 8001600:	4603      	mov	r3, r0
 8001602:	460c      	mov	r4, r1
 8001604:	e9c7 3408 	strd	r3, r4, [r7, #32]
		for (int i = 0; i <= cant_pun_tau; i++) {
 8001608:	2300      	movs	r3, #0
 800160a:	653b      	str	r3, [r7, #80]	; 0x50
 800160c:	e01e      	b.n	800164c <interpolador_vel+0x29c>
			q_vec[i] = TIEMPO_SAMP * i * pend;
 800160e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001610:	f7fe ff34 	bl	800047c <__aeabi_i2d>
 8001614:	a334      	add	r3, pc, #208	; (adr r3, 80016e8 <interpolador_vel+0x338>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7fe ff99 	bl	8000550 <__aeabi_dmul>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	4618      	mov	r0, r3
 8001624:	4621      	mov	r1, r4
 8001626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800162a:	f7fe ff91 	bl	8000550 <__aeabi_dmul>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	4618      	mov	r0, r3
 8001634:	4621      	mov	r1, r4
 8001636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	18d4      	adds	r4, r2, r3
 800163e:	f7ff fa69 	bl	8000b14 <__aeabi_d2f>
 8001642:	4603      	mov	r3, r0
 8001644:	6023      	str	r3, [r4, #0]
		for (int i = 0; i <= cant_pun_tau; i++) {
 8001646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001648:	3301      	adds	r3, #1
 800164a:	653b      	str	r3, [r7, #80]	; 0x50
 800164c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001650:	429a      	cmp	r2, r3
 8001652:	dddc      	ble.n	800160e <interpolador_vel+0x25e>
		}

		for (int i = cant_pun_tau + 1; i <= (cant_pun_tot - cant_pun_tau);
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	3301      	adds	r3, #1
 8001658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800165a:	e008      	b.n	800166e <interpolador_vel+0x2be>
				i++) {
			q_vec[i] = VEL_MAX;
 800165c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	4a23      	ldr	r2, [pc, #140]	; (80016f4 <interpolador_vel+0x344>)
 8001666:	601a      	str	r2, [r3, #0]
				i++) {
 8001668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800166a:	3301      	adds	r3, #1
 800166c:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (int i = cant_pun_tau + 1; i <= (cant_pun_tot - cant_pun_tau);
 800166e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001676:	429a      	cmp	r2, r3
 8001678:	ddf0      	ble.n	800165c <interpolador_vel+0x2ac>
		}
		for (int i = (cant_pun_tot - cant_pun_tau) + 1; i < cant_pun_tot; i++) {
 800167a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	3301      	adds	r3, #1
 8001682:	64bb      	str	r3, [r7, #72]	; 0x48
 8001684:	e027      	b.n	80016d6 <interpolador_vel+0x326>
			q_vec[i] = VEL_MAX - TIEMPO_SAMP * i * pend;
 8001686:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001688:	f7fe fef8 	bl	800047c <__aeabi_i2d>
 800168c:	a316      	add	r3, pc, #88	; (adr r3, 80016e8 <interpolador_vel+0x338>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7fe ff5d 	bl	8000550 <__aeabi_dmul>
 8001696:	4603      	mov	r3, r0
 8001698:	460c      	mov	r4, r1
 800169a:	4618      	mov	r0, r3
 800169c:	4621      	mov	r1, r4
 800169e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016a2:	f7fe ff55 	bl	8000550 <__aeabi_dmul>
 80016a6:	4603      	mov	r3, r0
 80016a8:	460c      	mov	r4, r1
 80016aa:	461a      	mov	r2, r3
 80016ac:	4623      	mov	r3, r4
 80016ae:	f04f 0000 	mov.w	r0, #0
 80016b2:	490f      	ldr	r1, [pc, #60]	; (80016f0 <interpolador_vel+0x340>)
 80016b4:	f7fe fd94 	bl	80001e0 <__aeabi_dsub>
 80016b8:	4603      	mov	r3, r0
 80016ba:	460c      	mov	r4, r1
 80016bc:	4618      	mov	r0, r3
 80016be:	4621      	mov	r1, r4
 80016c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	18d4      	adds	r4, r2, r3
 80016c8:	f7ff fa24 	bl	8000b14 <__aeabi_d2f>
 80016cc:	4603      	mov	r3, r0
 80016ce:	6023      	str	r3, [r4, #0]
		for (int i = (cant_pun_tot - cant_pun_tau) + 1; i < cant_pun_tot; i++) {
 80016d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016d2:	3301      	adds	r3, #1
 80016d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80016d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016da:	429a      	cmp	r2, r3
 80016dc:	dbd3      	blt.n	8001686 <interpolador_vel+0x2d6>
		}
		return 0;
 80016de:	2300      	movs	r3, #0
	}

}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3764      	adds	r7, #100	; 0x64
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd90      	pop	{r4, r7, pc}
 80016e8:	eb1c432d 	.word	0xeb1c432d
 80016ec:	3f2a36e2 	.word	0x3f2a36e2
 80016f0:	40588000 	.word	0x40588000
 80016f4:	42c40000 	.word	0x42c40000

080016f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <MX_GPIO_Init+0xc4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a29      	ldr	r2, [pc, #164]	; (80017bc <MX_GPIO_Init+0xc4>)
 8001718:	f043 0310 	orr.w	r3, r3, #16
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b27      	ldr	r3, [pc, #156]	; (80017bc <MX_GPIO_Init+0xc4>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b23      	ldr	r3, [pc, #140]	; (80017bc <MX_GPIO_Init+0xc4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a22      	ldr	r2, [pc, #136]	; (80017bc <MX_GPIO_Init+0xc4>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <MX_GPIO_Init+0xc4>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_GPIO_Init+0xc4>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <MX_GPIO_Init+0xc4>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_GPIO_Init+0xc4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, dir2_Pin|L298_ON_Pin|dir1_Pin, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	210e      	movs	r1, #14
 8001766:	4816      	ldr	r0, [pc, #88]	; (80017c0 <MX_GPIO_Init+0xc8>)
 8001768:	f001 fa24 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, out2_Pin|int1_M_cpt_t_Pin, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001772:	4814      	ldr	r0, [pc, #80]	; (80017c4 <MX_GPIO_Init+0xcc>)
 8001774:	f001 fa1e 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = dir2_Pin|L298_ON_Pin|dir1_Pin;
 8001778:	230e      	movs	r3, #14
 800177a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4619      	mov	r1, r3
 800178e:	480c      	ldr	r0, [pc, #48]	; (80017c0 <MX_GPIO_Init+0xc8>)
 8001790:	f001 f876 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = out2_Pin|int1_M_cpt_t_Pin;
 8001794:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_GPIO_Init+0xcc>)
 80017ae:	f001 f867 	bl	8002880 <HAL_GPIO_Init>

}
 80017b2:	bf00      	nop
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40020800 	.word	0x40020800

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b0ed      	sub	sp, #436	; 0x1b4
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Declarar variables
	int cant = 0, flag_activacion, flag_homing;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	double instrucciones[50] = { };
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	4618      	mov	r0, r3
 80017da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80017de:	461a      	mov	r2, r3
 80017e0:	2100      	movs	r1, #0
 80017e2:	f003 ff79 	bl	80056d8 <memset>
	// init variables
	enum Estado estado = Desactivado;
 80017e6:	2301      	movs	r3, #1
 80017e8:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
	int comando;
	flag_activacion = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	flag_homing = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f8:	f000 fe9c 	bl	8002534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017fc:	f000 f96e 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001800:	f7ff ff7a 	bl	80016f8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001804:	f000 fbe6 	bl	8001fd4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001808:	f000 fc3a 	bl	8002080 <MX_TIM3_Init>
  MX_TIM9_Init();
 800180c:	f000 fc8c 	bl	8002128 <MX_TIM9_Init>
  MX_TIM12_Init();
 8001810:	f000 fcea 	bl	80021e8 <MX_TIM12_Init>
  MX_SPI2_Init();
 8001814:	f000 fa78 	bl	8001d08 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 8001818:	2201      	movs	r2, #1
 800181a:	49a4      	ldr	r1, [pc, #656]	; (8001aac <main+0x2e4>)
 800181c:	48a4      	ldr	r0, [pc, #656]	; (8001ab0 <main+0x2e8>)
 800181e:	f001 fef7 	bl	8003610 <HAL_SPI_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//Generar comando
		if (flag_mensaje_completo == 0) {
 8001822:	4ba4      	ldr	r3, [pc, #656]	; (8001ab4 <main+0x2ec>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10f      	bne.n	800184a <main+0x82>
			cant = identificador(str, instrucciones, contador_instrucciones);
 800182a:	4ba3      	ldr	r3, [pc, #652]	; (8001ab8 <main+0x2f0>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	4619      	mov	r1, r3
 8001834:	48a1      	ldr	r0, [pc, #644]	; (8001abc <main+0x2f4>)
 8001836:	f7ff fb3d 	bl	8000eb4 <identificador>
 800183a:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
			flag_mensaje_completo = 1;
 800183e:	4b9d      	ldr	r3, [pc, #628]	; (8001ab4 <main+0x2ec>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]
			contador_instrucciones = 0;
 8001844:	4b9c      	ldr	r3, [pc, #624]	; (8001ab8 <main+0x2f0>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
		}
		// identificar comandos
		if (flag_mensaje_completo == 1) {
 800184a:	4b9a      	ldr	r3, [pc, #616]	; (8001ab4 <main+0x2ec>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	f040 80ea 	bne.w	8001a28 <main+0x260>
			for (int i = 0; i < cant; i++) {
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800185a:	e0d8      	b.n	8001a0e <main+0x246>
				comando = (int) instrucciones[i];
 800185c:	f107 0208 	add.w	r2, r7, #8
 8001860:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4413      	add	r3, r2
 8001868:	e9d3 3400 	ldrd	r3, r4, [r3]
 800186c:	4618      	mov	r0, r3
 800186e:	4621      	mov	r1, r4
 8001870:	f7ff f908 	bl	8000a84 <__aeabi_d2iz>
 8001874:	4603      	mov	r3, r0
 8001876:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
				switch (comando) {
 800187a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800187e:	2b06      	cmp	r3, #6
 8001880:	f200 80c0 	bhi.w	8001a04 <main+0x23c>
 8001884:	a201      	add	r2, pc, #4	; (adr r2, 800188c <main+0xc4>)
 8001886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188a:	bf00      	nop
 800188c:	080018c1 	.word	0x080018c1
 8001890:	080018a9 	.word	0x080018a9
 8001894:	08001a05 	.word	0x08001a05
 8001898:	080018d9 	.word	0x080018d9
 800189c:	080018f1 	.word	0x080018f1
 80018a0:	0800191b 	.word	0x0800191b
 80018a4:	0800192f 	.word	0x0800192f
				case Desactivar:
					if (flag_activacion) {
 80018a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80a2 	beq.w	80019f6 <main+0x22e>
						//desactivar PWM baja el pin del motor
						//Comunica que desactivo Interrumpe
						estado = Desactivado;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
						flag_activacion = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					} else {
					}
					break;
 80018be:	e09a      	b.n	80019f6 <main+0x22e>
				case Activar:
					if (!flag_activacion) {
 80018c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f040 8098 	bne.w	80019fa <main+0x232>
						//inicializa PWM FRECUENCIA 1 KHZ PWM1 Resolución 7.4 e-4 volts por paso 16000 pasos hasta TOP
						//configurar_prescaler_TIMER1(1000);
						//inicializa PWM FRECUENCIA 1 KHZ PWM2 Resolución 0.048volts por paso 249 pasos hasta TOP
						//configurar_prescaler_TIMER2(1000);
						//seteamos pwms
						estado = Activado;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
						flag_activacion = 1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					} else {
					}
					break;
 80018d6:	e090      	b.n	80019fa <main+0x232>
				case Modo_homing:
					if (flag_activacion) {
 80018d8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 808e 	beq.w	80019fe <main+0x236>
						//Realizar homming:configurar PWM a vel baja:
						//simular un fin de carrera con un pull y una interrupcion
						flag_homing = 1;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
						estado = Modo_Homing;
 80018e8:	2302      	movs	r3, #2
 80018ea:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
					}
					break;
 80018ee:	e086      	b.n	80019fe <main+0x236>
				case Modo_ir:
					if (flag_activacion && flag_homing) {
 80018f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 8084 	beq.w	8001a02 <main+0x23a>
 80018fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d07f      	beq.n	8001a02 <main+0x23a>
						// saca vel media con consigna, la pos actual y tiempo
						//calcula el duty cycle segun la vel
						//calcula la cantidad de pulsos del enconder para llegar a esta pos
						//aca se hace la interpolacion
						flag_cambio = 1;
 8001902:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <main+0x2f8>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]
						estado = Modo_Normal;
 8001908:	2303      	movs	r3, #3
 800190a:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
						i += 3;
 800190e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001912:	3303      	adds	r3, #3
 8001914:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
					}
					break;
 8001918:	e073      	b.n	8001a02 <main+0x23a>
				case error:
					//apagar todo
					flag_homing = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
					estado = Desactivado;
 8001920:	2301      	movs	r3, #1
 8001922:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
					flag_activacion = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					break;
 800192c:	e06a      	b.n	8001a04 <main+0x23c>
				case Preguntar:
					HAL_SPI_Abort_IT(&hspi2);
 800192e:	4860      	ldr	r0, [pc, #384]	; (8001ab0 <main+0x2e8>)
 8001930:	f001 ff98 	bl	8003864 <HAL_SPI_Abort_IT>
					//Revisa el estado, interuumpe y guarada el estado en el puerto SP
					if (estado == Desactivado) {
 8001934:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d108      	bne.n	800194e <main+0x186>
						pTxData = 'D';
 800193c:	4b61      	ldr	r3, [pc, #388]	; (8001ac4 <main+0x2fc>)
 800193e:	2244      	movs	r2, #68	; 0x44
 8001940:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001942:	2201      	movs	r2, #1
 8001944:	495f      	ldr	r1, [pc, #380]	; (8001ac4 <main+0x2fc>)
 8001946:	485a      	ldr	r0, [pc, #360]	; (8001ab0 <main+0x2e8>)
 8001948:	f001 fde0 	bl	800350c <HAL_SPI_Transmit_IT>
 800194c:	e032      	b.n	80019b4 <main+0x1ec>
					} else if (estado == Activado) {
 800194e:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d108      	bne.n	8001968 <main+0x1a0>
						pTxData = 'A';
 8001956:	4b5b      	ldr	r3, [pc, #364]	; (8001ac4 <main+0x2fc>)
 8001958:	2241      	movs	r2, #65	; 0x41
 800195a:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 800195c:	2201      	movs	r2, #1
 800195e:	4959      	ldr	r1, [pc, #356]	; (8001ac4 <main+0x2fc>)
 8001960:	4853      	ldr	r0, [pc, #332]	; (8001ab0 <main+0x2e8>)
 8001962:	f001 fdd3 	bl	800350c <HAL_SPI_Transmit_IT>
 8001966:	e025      	b.n	80019b4 <main+0x1ec>
					} else if (estado == Modo_Homing) {
 8001968:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d108      	bne.n	8001982 <main+0x1ba>
						pTxData = 'H';
 8001970:	4b54      	ldr	r3, [pc, #336]	; (8001ac4 <main+0x2fc>)
 8001972:	2248      	movs	r2, #72	; 0x48
 8001974:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001976:	2201      	movs	r2, #1
 8001978:	4952      	ldr	r1, [pc, #328]	; (8001ac4 <main+0x2fc>)
 800197a:	484d      	ldr	r0, [pc, #308]	; (8001ab0 <main+0x2e8>)
 800197c:	f001 fdc6 	bl	800350c <HAL_SPI_Transmit_IT>
 8001980:	e018      	b.n	80019b4 <main+0x1ec>
					} else if (estado == Modo_Normal) {
 8001982:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8001986:	2b03      	cmp	r3, #3
 8001988:	d108      	bne.n	800199c <main+0x1d4>
						pTxData = 'N';
 800198a:	4b4e      	ldr	r3, [pc, #312]	; (8001ac4 <main+0x2fc>)
 800198c:	224e      	movs	r2, #78	; 0x4e
 800198e:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001990:	2201      	movs	r2, #1
 8001992:	494c      	ldr	r1, [pc, #304]	; (8001ac4 <main+0x2fc>)
 8001994:	4846      	ldr	r0, [pc, #280]	; (8001ab0 <main+0x2e8>)
 8001996:	f001 fdb9 	bl	800350c <HAL_SPI_Transmit_IT>
 800199a:	e00b      	b.n	80019b4 <main+0x1ec>
					} else if (estado == Error) {
 800199c:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d107      	bne.n	80019b4 <main+0x1ec>
						pTxData = 'E';
 80019a4:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <main+0x2fc>)
 80019a6:	2245      	movs	r2, #69	; 0x45
 80019a8:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 80019aa:	2201      	movs	r2, #1
 80019ac:	4945      	ldr	r1, [pc, #276]	; (8001ac4 <main+0x2fc>)
 80019ae:	4840      	ldr	r0, [pc, #256]	; (8001ab0 <main+0x2e8>)
 80019b0:	f001 fdac 	bl	800350c <HAL_SPI_Transmit_IT>
					}
					HAL_GPIO_WritePin(int1_M_cpt_t_GPIO_Port, int1_M_cpt_t_Pin,
 80019b4:	2201      	movs	r2, #1
 80019b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ba:	4843      	ldr	r0, [pc, #268]	; (8001ac8 <main+0x300>)
 80019bc:	f001 f8fa 	bl	8002bb4 <HAL_GPIO_WritePin>
							GPIO_PIN_SET);
					HAL_GPIO_WritePin(int1_M_cpt_t_GPIO_Port, int1_M_cpt_t_Pin,
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019c6:	4840      	ldr	r0, [pc, #256]	; (8001ac8 <main+0x300>)
 80019c8:	f001 f8f4 	bl	8002bb4 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					__HAL_SPI_CLEAR_OVRFLAG(&hspi2);
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <main+0x2e8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <main+0x2e8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	681b      	ldr	r3, [r3, #0]
					HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 80019ea:	2201      	movs	r2, #1
 80019ec:	492f      	ldr	r1, [pc, #188]	; (8001aac <main+0x2e4>)
 80019ee:	4830      	ldr	r0, [pc, #192]	; (8001ab0 <main+0x2e8>)
 80019f0:	f001 fe0e 	bl	8003610 <HAL_SPI_Receive_IT>
					break;
 80019f4:	e006      	b.n	8001a04 <main+0x23c>
					break;
 80019f6:	bf00      	nop
 80019f8:	e004      	b.n	8001a04 <main+0x23c>
					break;
 80019fa:	bf00      	nop
 80019fc:	e002      	b.n	8001a04 <main+0x23c>
					break;
 80019fe:	bf00      	nop
 8001a00:	e000      	b.n	8001a04 <main+0x23c>
					break;
 8001a02:	bf00      	nop
			for (int i = 0; i < cant; i++) {
 8001a04:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a0e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001a12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a16:	429a      	cmp	r2, r3
 8001a18:	f6ff af20 	blt.w	800185c <main+0x94>
					//Revisa el estado, interuumpe y guarada el estado en el puerto SP
					break;
				}

			}
			flag_mensaje_completo = 2;
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <main+0x2ec>)
 8001a1e:	2202      	movs	r2, #2
 8001a20:	601a      	str	r2, [r3, #0]
			cant = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		}

		switch (estado) {
 8001a28:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	f63f aef8 	bhi.w	8001822 <main+0x5a>
 8001a32:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <main+0x270>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001823 	.word	0x08001823
 8001a3c:	08001823 	.word	0x08001823
 8001a40:	08001823 	.word	0x08001823
 8001a44:	08001a4d 	.word	0x08001a4d
 8001a48:	08001823 	.word	0x08001823
		case Modo_Normal:
			//avisar que estoy listo
			//activar los pwm con el
			//control de pocicion y lectura de encoder
			//manifulacion del efector final
			if (flag_cambio == 1) {
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <main+0x2f8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d129      	bne.n	8001aa8 <main+0x2e0>
				flag_cambio=0;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <main+0x2f8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
				dir=interpolador_vel(instrucciones[2], instrucciones[3], instrucciones[5],motor1.pos_objetivo);
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	ed93 7b04 	vldr	d7, [r3, #16]
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	ed93 6b06 	vldr	d6, [r3, #24]
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8001a72:	4816      	ldr	r0, [pc, #88]	; (8001acc <main+0x304>)
 8001a74:	eeb0 2a45 	vmov.f32	s4, s10
 8001a78:	eef0 2a65 	vmov.f32	s5, s11
 8001a7c:	eeb0 1a46 	vmov.f32	s2, s12
 8001a80:	eef0 1a66 	vmov.f32	s3, s13
 8001a84:	eeb0 0a47 	vmov.f32	s0, s14
 8001a88:	eef0 0a67 	vmov.f32	s1, s15
 8001a8c:	f7ff fc90 	bl	80013b0 <interpolador_vel>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <main+0x308>)
 8001a94:	601a      	str	r2, [r3, #0]
				//aca hay que esperar a que todos los esclavos esten listos
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001a96:	2100      	movs	r1, #0
 8001a98:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <main+0x30c>)
 8001a9a:	f002 fe75 	bl	8004788 <HAL_TIM_PWM_Start>
				HAL_TIM_Base_Start_IT(&htim9);
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <main+0x310>)
 8001aa0:	f002 fde3 	bl	800466a <HAL_TIM_Base_Start_IT>
				if (dir>0){
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <main+0x308>)
 8001aa6:	681b      	ldr	r3, [r3, #0]

				}


			}
			break;
 8001aa8:	bf00      	nop
		if (flag_mensaje_completo == 0) {
 8001aaa:	e6ba      	b.n	8001822 <main+0x5a>
 8001aac:	2001d76c 	.word	0x2001d76c
 8001ab0:	2001d770 	.word	0x2001d770
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000208 	.word	0x20000208
 8001abc:	20000210 	.word	0x20000210
 8001ac0:	2000020c 	.word	0x2000020c
 8001ac4:	20000200 	.word	0x20000200
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	2000ecec 	.word	0x2000ecec
 8001ad0:	2001d768 	.word	0x2001d768
 8001ad4:	2001d888 	.word	0x2001d888
 8001ad8:	2001d848 	.word	0x2001d848

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b094      	sub	sp, #80	; 0x50
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	2230      	movs	r2, #48	; 0x30
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fdf4 	bl	80056d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <SystemClock_Config+0xcc>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	4a27      	ldr	r2, [pc, #156]	; (8001ba8 <SystemClock_Config+0xcc>)
 8001b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <SystemClock_Config+0xcc>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	4b22      	ldr	r3, [pc, #136]	; (8001bac <SystemClock_Config+0xd0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a21      	ldr	r2, [pc, #132]	; (8001bac <SystemClock_Config+0xd0>)
 8001b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <SystemClock_Config+0xd0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b40:	2310      	movs	r3, #16
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b44:	2302      	movs	r3, #2
 8001b46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b50:	23a8      	movs	r3, #168	; 0xa8
 8001b52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b58:	2307      	movs	r3, #7
 8001b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5c:	f107 0320 	add.w	r3, r7, #32
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 f841 	bl	8002be8 <HAL_RCC_OscConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b6c:	f000 f8c4 	bl	8001cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b70:	230f      	movs	r3, #15
 8001b72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b74:	2302      	movs	r3, #2
 8001b76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001b7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001b82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	2105      	movs	r1, #5
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f001 fa9a 	bl	80030c8 <HAL_RCC_ClockConfig>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b9a:	f000 f8ad 	bl	8001cf8 <Error_Handler>
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	3750      	adds	r7, #80	; 0x50
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40007000 	.word	0x40007000

08001bb0 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	cont_datos_SPI++;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_SPI_RxCpltCallback+0x54>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	4a11      	ldr	r2, [pc, #68]	; (8001c04 <HAL_SPI_RxCpltCallback+0x54>)
 8001bc0:	6013      	str	r3, [r2, #0]
	str[cont_datos_SPI - 1] = dato_recepcion_SPI;
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_SPI_RxCpltCallback+0x54>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <HAL_SPI_RxCpltCallback+0x58>)
 8001bca:	7811      	ldrb	r1, [r2, #0]
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	; (8001c0c <HAL_SPI_RxCpltCallback+0x5c>)
 8001bce:	54d1      	strb	r1, [r2, r3]
	if (str[cont_datos_SPI - 1] == ':') {
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_SPI_RxCpltCallback+0x54>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <HAL_SPI_RxCpltCallback+0x5c>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	2b3a      	cmp	r3, #58	; 0x3a
 8001bdc:	d109      	bne.n	8001bf2 <HAL_SPI_RxCpltCallback+0x42>
		flag_mensaje_completo = 0;
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <HAL_SPI_RxCpltCallback+0x60>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
		contador_instrucciones = cont_datos_SPI;
 8001be4:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_SPI_RxCpltCallback+0x54>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_SPI_RxCpltCallback+0x64>)
 8001bea:	6013      	str	r3, [r2, #0]
		cont_datos_SPI = 0;
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_SPI_RxCpltCallback+0x54>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
	}
	HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4904      	ldr	r1, [pc, #16]	; (8001c08 <HAL_SPI_RxCpltCallback+0x58>)
 8001bf6:	4808      	ldr	r0, [pc, #32]	; (8001c18 <HAL_SPI_RxCpltCallback+0x68>)
 8001bf8:	f001 fd0a 	bl	8003610 <HAL_SPI_Receive_IT>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000204 	.word	0x20000204
 8001c08:	2001d76c 	.word	0x2001d76c
 8001c0c:	20000210 	.word	0x20000210
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000208 	.word	0x20000208
 8001c18:	2001d770 	.word	0x2001d770

08001c1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	if (flag_configuracion_PWM == 1) {
 8001c24:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d10e      	bne.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0x2e>
		PWM_config.OCMode = TIM_OCMODE_PWM1;
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001c2e:	2260      	movs	r2, #96	; 0x60
 8001c30:	601a      	str	r2, [r3, #0]
		PWM_config.Pulse = 0;
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
		PWM_config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c38:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
		PWM_config.OCFastMode = TIM_OCFAST_DISABLE;
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
		flag_configuracion_PWM = 0;
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
	}
	if (htim->Instance == TIM1) {
	}
	if (htim->Instance == TIM3) {
	}
	if (htim->Instance == TIM9) {
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d13b      	bne.n	8001ccc <HAL_TIM_PeriodElapsedCallback+0xb0>
		if (motor1.pos_final - motor1.pos_inicial > 0) {
 8001c54:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001c56:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8001c5a:	3364      	adds	r3, #100	; 0x64
 8001c5c:	ed93 7a00 	vldr	s14, [r3]
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001c62:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8001c66:	3368      	adds	r3, #104	; 0x68
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	dd28      	ble.n	8001ccc <HAL_TIM_PeriodElapsedCallback+0xb0>
			valor_PWM = motor1.pos_objetivo[cont_samp] / VEL_MAX * 2799;
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	ed93 7a00 	vldr	s14, [r3]
 8001c88:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001ce8 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8001c8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c90:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001cec <HAL_TIM_PeriodElapsedCallback+0xd0>
 8001c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001c9a:	edc3 7a00 	vstr	s15, [r3]
			PWM_config.Pulse = valor_PWM;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca8:	ee17 2a90 	vmov	r2, s15
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001cae:	605a      	str	r2, [r3, #4]
			TIM_OC2_SetConfig(TIM12, &PWM_config);
 8001cb0:	4909      	ldr	r1, [pc, #36]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001cb2:	4810      	ldr	r0, [pc, #64]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001cb4:	f003 fa56 	bl	8005164 <TIM_OC2_SetConfig>
			TIM12->CCR1 = TIM12->CCR2;
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbe:	6353      	str	r3, [r2, #52]	; 0x34
			cont_samp++;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001cca:	701a      	strb	r2, [r3, #0]
		}
	}
	if (htim->Instance == TIM12) {
	}
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000004 	.word	0x20000004
 8001cd8:	20000244 	.word	0x20000244
 8001cdc:	40014000 	.word	0x40014000
 8001ce0:	2000ecec 	.word	0x2000ecec
 8001ce4:	20000201 	.word	0x20000201
 8001ce8:	42c40000 	.word	0x42c40000
 8001cec:	452ef000 	.word	0x452ef000
 8001cf0:	2000ece8 	.word	0x2000ece8
 8001cf4:	40001800 	.word	0x40001800

08001cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <MX_SPI2_Init+0x5c>)
 8001d0e:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <MX_SPI2_Init+0x60>)
 8001d10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <MX_SPI2_Init+0x5c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_SPI2_Init+0x5c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_SPI2_Init+0x5c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_SPI2_Init+0x5c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_SPI2_Init+0x5c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_SPI2_Init+0x5c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_SPI2_Init+0x5c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_SPI2_Init+0x5c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_SPI2_Init+0x5c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_SPI2_Init+0x5c>)
 8001d4a:	220a      	movs	r2, #10
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_SPI2_Init+0x5c>)
 8001d50:	f001 fb78 	bl	8003444 <HAL_SPI_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8001d5a:	f7ff ffcd 	bl	8001cf8 <Error_Handler>
  }

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2001d770 	.word	0x2001d770
 8001d68:	40003800 	.word	0x40003800

08001d6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a2c      	ldr	r2, [pc, #176]	; (8001e3c <HAL_SPI_MspInit+0xd0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d152      	bne.n	8001e34 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_SPI_MspInit+0xd4>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <HAL_SPI_MspInit+0xd4>)
 8001d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <HAL_SPI_MspInit+0xd4>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_SPI_MspInit+0xd4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a23      	ldr	r2, [pc, #140]	; (8001e40 <HAL_SPI_MspInit+0xd4>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_SPI_MspInit+0xd4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_SPI_MspInit+0xd4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <HAL_SPI_MspInit+0xd4>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_SPI_MspInit+0xd4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001de2:	230c      	movs	r3, #12
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001df2:	2305      	movs	r3, #5
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4811      	ldr	r0, [pc, #68]	; (8001e44 <HAL_SPI_MspInit+0xd8>)
 8001dfe:	f000 fd3f 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001e02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e14:	2305      	movs	r3, #5
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480a      	ldr	r0, [pc, #40]	; (8001e48 <HAL_SPI_MspInit+0xdc>)
 8001e20:	f000 fd2e 	bl	8002880 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	2024      	movs	r0, #36	; 0x24
 8001e2a:	f000 fcd0 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001e2e:	2024      	movs	r0, #36	; 0x24
 8001e30:	f000 fce9 	bl	8002806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001e34:	bf00      	nop
 8001e36:	3728      	adds	r7, #40	; 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40003800 	.word	0x40003800
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020800 	.word	0x40020800
 8001e48:	40020400 	.word	0x40020400

08001e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <BusFault_Handler+0x4>

08001ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <UsageFault_Handler+0x4>

08001ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef0:	f000 fb72 	bl	80025d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001efe:	f002 fd13 	bl	8004928 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001f02:	4803      	ldr	r0, [pc, #12]	; (8001f10 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001f04:	f002 fd10 	bl	8004928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	2001d808 	.word	0x2001d808
 8001f10:	2001d848 	.word	0x2001d848

08001f14 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <TIM1_CC_IRQHandler+0x10>)
 8001f1a:	f002 fd05 	bl	8004928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	2001d808 	.word	0x2001d808

08001f28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <TIM3_IRQHandler+0x10>)
 8001f2e:	f002 fcfb 	bl	8004928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2001d7c8 	.word	0x2001d7c8

08001f3c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <SPI2_IRQHandler+0x10>)
 8001f42:	f001 fd89 	bl	8003a58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2001d770 	.word	0x2001d770

08001f50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <_sbrk+0x50>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <_sbrk+0x16>
		heap_end = &end;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <_sbrk+0x50>)
 8001f62:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <_sbrk+0x54>)
 8001f64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <_sbrk+0x50>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <_sbrk+0x50>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	466a      	mov	r2, sp
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d907      	bls.n	8001f8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f7a:	f003 fb83 	bl	8005684 <__errno>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	230c      	movs	r3, #12
 8001f82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
 8001f88:	e006      	b.n	8001f98 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <_sbrk+0x50>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <_sbrk+0x50>)
 8001f94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000260 	.word	0x20000260
 8001fa4:	2001d8d0 	.word	0x2001d8d0

08001fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <SystemInit+0x28>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <SystemInit+0x28>)
 8001fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <SystemInit+0x28>)
 8001fbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fc2:	609a      	str	r2, [r3, #8]
#endif
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	; 0x30
 8001fd8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fda:	f107 030c 	add.w	r3, r7, #12
 8001fde:	2224      	movs	r2, #36	; 0x24
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 fb78 	bl	80056d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001ff0:	4b21      	ldr	r3, [pc, #132]	; (8002078 <MX_TIM1_Init+0xa4>)
 8001ff2:	4a22      	ldr	r2, [pc, #136]	; (800207c <MX_TIM1_Init+0xa8>)
 8001ff4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ff6:	4b20      	ldr	r3, [pc, #128]	; (8002078 <MX_TIM1_Init+0xa4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <MX_TIM1_Init+0xa4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <MX_TIM1_Init+0xa4>)
 8002004:	2200      	movs	r2, #0
 8002006:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <MX_TIM1_Init+0xa4>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800200e:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <MX_TIM1_Init+0xa4>)
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <MX_TIM1_Init+0xa4>)
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800201a:	2301      	movs	r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002022:	2301      	movs	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 8002026:	2304      	movs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002032:	2301      	movs	r3, #1
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 8002036:	2304      	movs	r3, #4
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800203e:	f107 030c 	add.w	r3, r7, #12
 8002042:	4619      	mov	r1, r3
 8002044:	480c      	ldr	r0, [pc, #48]	; (8002078 <MX_TIM1_Init+0xa4>)
 8002046:	f002 fbdd 	bl	8004804 <HAL_TIM_Encoder_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002050:	f7ff fe52 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8002054:	2340      	movs	r3, #64	; 0x40
 8002056:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_TIM1_Init+0xa4>)
 8002062:	f003 fa7f 	bl	8005564 <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800206c:	f7ff fe44 	bl	8001cf8 <Error_Handler>
  }

}
 8002070:	bf00      	nop
 8002072:	3730      	adds	r7, #48	; 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2001d808 	.word	0x2001d808
 800207c:	40010000 	.word	0x40010000

08002080 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	; 0x30
 8002084:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	2224      	movs	r2, #36	; 0x24
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f003 fb22 	bl	80056d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800209c:	4b20      	ldr	r3, [pc, #128]	; (8002120 <MX_TIM3_Init+0xa0>)
 800209e:	4a21      	ldr	r2, [pc, #132]	; (8002124 <MX_TIM3_Init+0xa4>)
 80020a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020a2:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <MX_TIM3_Init+0xa0>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <MX_TIM3_Init+0xa0>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <MX_TIM3_Init+0xa0>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <MX_TIM3_Init+0xa0>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020ba:	4b19      	ldr	r3, [pc, #100]	; (8002120 <MX_TIM3_Init+0xa0>)
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020c0:	2301      	movs	r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020c8:	2301      	movs	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 80020cc:	2304      	movs	r3, #4
 80020ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020d8:	2301      	movs	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 80020dc:	2304      	movs	r3, #4
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	4619      	mov	r1, r3
 80020ea:	480d      	ldr	r0, [pc, #52]	; (8002120 <MX_TIM3_Init+0xa0>)
 80020ec:	f002 fb8a 	bl	8004804 <HAL_TIM_Encoder_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80020f6:	f7ff fdff 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80020fa:	2350      	movs	r3, #80	; 0x50
 80020fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4806      	ldr	r0, [pc, #24]	; (8002120 <MX_TIM3_Init+0xa0>)
 8002108:	f003 fa2c 	bl	8005564 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002112:	f7ff fdf1 	bl	8001cf8 <Error_Handler>
  }

}
 8002116:	bf00      	nop
 8002118:	3730      	adds	r7, #48	; 0x30
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2001d7c8 	.word	0x2001d7c8
 8002124:	40000400 	.word	0x40000400

08002128 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
 800212c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800212e:	f107 0320 	add.w	r3, r7, #32
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	611a      	str	r2, [r3, #16]
 800214a:	615a      	str	r2, [r3, #20]
 800214c:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <MX_TIM9_Init+0xb8>)
 8002150:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <MX_TIM9_Init+0xbc>)
 8002152:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1;
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <MX_TIM9_Init+0xb8>)
 8002156:	2201      	movs	r2, #1
 8002158:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <MX_TIM9_Init+0xb8>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 8399;
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <MX_TIM9_Init+0xb8>)
 8002162:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002166:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <MX_TIM9_Init+0xb8>)
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <MX_TIM9_Init+0xb8>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002174:	481a      	ldr	r0, [pc, #104]	; (80021e0 <MX_TIM9_Init+0xb8>)
 8002176:	f002 fa4d 	bl	8004614 <HAL_TIM_Base_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002180:	f7ff fdba 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002188:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800218a:	f107 0320 	add.w	r3, r7, #32
 800218e:	4619      	mov	r1, r3
 8002190:	4813      	ldr	r0, [pc, #76]	; (80021e0 <MX_TIM9_Init+0xb8>)
 8002192:	f002 fdf7 	bl	8004d84 <HAL_TIM_ConfigClockSource>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800219c:	f7ff fdac 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 80021a0:	480f      	ldr	r0, [pc, #60]	; (80021e0 <MX_TIM9_Init+0xb8>)
 80021a2:	f002 fa86 	bl	80046b2 <HAL_TIM_OC_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80021ac:	f7ff fda4 	bl	8001cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	2200      	movs	r2, #0
 80021c4:	4619      	mov	r1, r3
 80021c6:	4806      	ldr	r0, [pc, #24]	; (80021e0 <MX_TIM9_Init+0xb8>)
 80021c8:	f002 fcb6 	bl	8004b38 <HAL_TIM_OC_ConfigChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80021d2:	f7ff fd91 	bl	8001cf8 <Error_Handler>
  }

}
 80021d6:	bf00      	nop
 80021d8:	3730      	adds	r7, #48	; 0x30
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2001d848 	.word	0x2001d848
 80021e4:	40014000 	.word	0x40014000

080021e8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	; 0x30
 80021ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ee:	f107 0320 	add.w	r3, r7, #32
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	611a      	str	r2, [r3, #16]
 800220a:	615a      	str	r2, [r3, #20]
 800220c:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 800220e:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <MX_TIM12_Init+0xd4>)
 8002210:	4a2b      	ldr	r2, [pc, #172]	; (80022c0 <MX_TIM12_Init+0xd8>)
 8002212:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <MX_TIM12_Init+0xd4>)
 8002216:	2201      	movs	r2, #1
 8002218:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <MX_TIM12_Init+0xd4>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2799;
 8002220:	4b26      	ldr	r3, [pc, #152]	; (80022bc <MX_TIM12_Init+0xd4>)
 8002222:	f640 22ef 	movw	r2, #2799	; 0xaef
 8002226:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002228:	4b24      	ldr	r3, [pc, #144]	; (80022bc <MX_TIM12_Init+0xd4>)
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222e:	4b23      	ldr	r3, [pc, #140]	; (80022bc <MX_TIM12_Init+0xd4>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002234:	4821      	ldr	r0, [pc, #132]	; (80022bc <MX_TIM12_Init+0xd4>)
 8002236:	f002 f9ed 	bl	8004614 <HAL_TIM_Base_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002240:	f7ff fd5a 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002248:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800224a:	f107 0320 	add.w	r3, r7, #32
 800224e:	4619      	mov	r1, r3
 8002250:	481a      	ldr	r0, [pc, #104]	; (80022bc <MX_TIM12_Init+0xd4>)
 8002252:	f002 fd97 	bl	8004d84 <HAL_TIM_ConfigClockSource>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800225c:	f7ff fd4c 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002260:	4816      	ldr	r0, [pc, #88]	; (80022bc <MX_TIM12_Init+0xd4>)
 8002262:	f002 fa5b 	bl	800471c <HAL_TIM_PWM_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800226c:	f7ff fd44 	bl	8001cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002270:	2360      	movs	r3, #96	; 0x60
 8002272:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2200      	movs	r2, #0
 8002284:	4619      	mov	r1, r3
 8002286:	480d      	ldr	r0, [pc, #52]	; (80022bc <MX_TIM12_Init+0xd4>)
 8002288:	f002 fcb6 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002292:	f7ff fd31 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	2204      	movs	r2, #4
 800229a:	4619      	mov	r1, r3
 800229c:	4807      	ldr	r0, [pc, #28]	; (80022bc <MX_TIM12_Init+0xd4>)
 800229e:	f002 fcab 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 80022a8:	f7ff fd26 	bl	8001cf8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 80022ac:	4803      	ldr	r0, [pc, #12]	; (80022bc <MX_TIM12_Init+0xd4>)
 80022ae:	f000 f8dd 	bl	800246c <HAL_TIM_MspPostInit>

}
 80022b2:	bf00      	nop
 80022b4:	3730      	adds	r7, #48	; 0x30
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2001d888 	.word	0x2001d888
 80022c0:	40001800 	.word	0x40001800

080022c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08c      	sub	sp, #48	; 0x30
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 031c 	add.w	r3, r7, #28
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a3e      	ldr	r2, [pc, #248]	; (80023dc <HAL_TIM_Encoder_MspInit+0x118>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d13d      	bne.n	8002362 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x11c>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	4a3c      	ldr	r2, [pc, #240]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x11c>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
 80022f6:	4b3a      	ldr	r3, [pc, #232]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x11c>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a35      	ldr	r2, [pc, #212]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x11c>)
 800230c:	f043 0310 	orr.w	r3, r3, #16
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800231e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002328:	2301      	movs	r3, #1
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232c:	2302      	movs	r3, #2
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002330:	2301      	movs	r3, #1
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	482a      	ldr	r0, [pc, #168]	; (80023e4 <HAL_TIM_Encoder_MspInit+0x120>)
 800233c:	f000 faa0 	bl	8002880 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	2018      	movs	r0, #24
 8002346:	f000 fa42 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800234a:	2018      	movs	r0, #24
 800234c:	f000 fa5b 	bl	8002806 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	201b      	movs	r0, #27
 8002356:	f000 fa3a 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800235a:	201b      	movs	r0, #27
 800235c:	f000 fa53 	bl	8002806 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002360:	e038      	b.n	80023d4 <HAL_TIM_Encoder_MspInit+0x110>
  else if(tim_encoderHandle->Instance==TIM3)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a20      	ldr	r2, [pc, #128]	; (80023e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d133      	bne.n	80023d4 <HAL_TIM_Encoder_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	4a1a      	ldr	r2, [pc, #104]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002376:	f043 0302 	orr.w	r3, r3, #2
 800237a:	6413      	str	r3, [r2, #64]	; 0x40
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x11c>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x11c>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4a13      	ldr	r2, [pc, #76]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6313      	str	r3, [r2, #48]	; 0x30
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x11c>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023a4:	23c0      	movs	r3, #192	; 0xc0
 80023a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ac:	2301      	movs	r3, #1
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b0:	2302      	movs	r3, #2
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023b4:	2302      	movs	r3, #2
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	480b      	ldr	r0, [pc, #44]	; (80023ec <HAL_TIM_Encoder_MspInit+0x128>)
 80023c0:	f000 fa5e 	bl	8002880 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2100      	movs	r1, #0
 80023c8:	201d      	movs	r0, #29
 80023ca:	f000 fa00 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023ce:	201d      	movs	r0, #29
 80023d0:	f000 fa19 	bl	8002806 <HAL_NVIC_EnableIRQ>
}
 80023d4:	bf00      	nop
 80023d6:	3730      	adds	r7, #48	; 0x30
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40010000 	.word	0x40010000
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40000400 	.word	0x40000400
 80023ec:	40020800 	.word	0x40020800

080023f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a18      	ldr	r2, [pc, #96]	; (8002460 <HAL_TIM_Base_MspInit+0x70>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d116      	bne.n	8002430 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_TIM_Base_MspInit+0x74>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	4a16      	ldr	r2, [pc, #88]	; (8002464 <HAL_TIM_Base_MspInit+0x74>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002410:	6453      	str	r3, [r2, #68]	; 0x44
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_TIM_Base_MspInit+0x74>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	2018      	movs	r0, #24
 8002424:	f000 f9d3 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002428:	2018      	movs	r0, #24
 800242a:	f000 f9ec 	bl	8002806 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800242e:	e012      	b.n	8002456 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM12)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <HAL_TIM_Base_MspInit+0x78>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10d      	bne.n	8002456 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_TIM_Base_MspInit+0x74>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a08      	ldr	r2, [pc, #32]	; (8002464 <HAL_TIM_Base_MspInit+0x74>)
 8002444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_TIM_Base_MspInit+0x74>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40014000 	.word	0x40014000
 8002464:	40023800 	.word	0x40023800
 8002468:	40001800 	.word	0x40001800

0800246c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <HAL_TIM_MspPostInit+0x68>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d11e      	bne.n	80024cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_TIM_MspPostInit+0x6c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_TIM_MspPostInit+0x6c>)
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_TIM_MspPostInit+0x6c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration    
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80024bc:	2309      	movs	r3, #9
 80024be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c0:	f107 030c 	add.w	r3, r7, #12
 80024c4:	4619      	mov	r1, r3
 80024c6:	4805      	ldr	r0, [pc, #20]	; (80024dc <HAL_TIM_MspPostInit+0x70>)
 80024c8:	f000 f9da 	bl	8002880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80024cc:	bf00      	nop
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40001800 	.word	0x40001800
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020400 	.word	0x40020400

080024e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002518 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024e6:	e003      	b.n	80024f0 <LoopCopyDataInit>

080024e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024ee:	3104      	adds	r1, #4

080024f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024f0:	480b      	ldr	r0, [pc, #44]	; (8002520 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024f8:	d3f6      	bcc.n	80024e8 <CopyDataInit>
  ldr  r2, =_sbss
 80024fa:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024fc:	e002      	b.n	8002504 <LoopFillZerobss>

080024fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002500:	f842 3b04 	str.w	r3, [r2], #4

08002504 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002506:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002508:	d3f9      	bcc.n	80024fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800250a:	f7ff fd4d 	bl	8001fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800250e:	f003 f8bf 	bl	8005690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002512:	f7ff f959 	bl	80017c8 <main>
  bx  lr    
 8002516:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002518:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800251c:	080075a8 	.word	0x080075a8
  ldr  r0, =_sdata
 8002520:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002524:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002528:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 800252c:	2001d8d0 	.word	0x2001d8d0

08002530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <ADC_IRQHandler>
	...

08002534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002538:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <HAL_Init+0x40>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <HAL_Init+0x40>)
 800253e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_Init+0x40>)
 800254a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800254e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a07      	ldr	r2, [pc, #28]	; (8002574 <HAL_Init+0x40>)
 8002556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255c:	2003      	movs	r0, #3
 800255e:	f000 f92b 	bl	80027b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002562:	2000      	movs	r0, #0
 8002564:	f000 f808 	bl	8002578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002568:	f7ff fc70 	bl	8001e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023c00 	.word	0x40023c00

08002578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_InitTick+0x54>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_InitTick+0x58>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f943 	bl	8002822 <HAL_SYSTICK_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00e      	b.n	80025c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b0f      	cmp	r3, #15
 80025aa:	d80a      	bhi.n	80025c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ac:	2200      	movs	r2, #0
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f000 f90b 	bl	80027ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b8:	4a06      	ldr	r2, [pc, #24]	; (80025d4 <HAL_InitTick+0x5c>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000008 	.word	0x20000008
 80025d0:	20000010 	.word	0x20000010
 80025d4:	2000000c 	.word	0x2000000c

080025d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_IncTick+0x20>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x24>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <HAL_IncTick+0x24>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000010 	.word	0x20000010
 80025fc:	2001d8c8 	.word	0x2001d8c8

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_GetTick+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	2001d8c8 	.word	0x2001d8c8

08002618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <__NVIC_GetPriorityGrouping+0x18>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	f003 0307 	and.w	r3, r3, #7
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	2b00      	cmp	r3, #0
 800268c:	db0b      	blt.n	80026a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	4907      	ldr	r1, [pc, #28]	; (80026b4 <__NVIC_EnableIRQ+0x38>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2001      	movs	r0, #1
 800269e:	fa00 f202 	lsl.w	r2, r0, r2
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000e100 	.word	0xe000e100

080026b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db0a      	blt.n	80026e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	490c      	ldr	r1, [pc, #48]	; (8002704 <__NVIC_SetPriority+0x4c>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e0:	e00a      	b.n	80026f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4908      	ldr	r1, [pc, #32]	; (8002708 <__NVIC_SetPriority+0x50>)
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3b04      	subs	r3, #4
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	761a      	strb	r2, [r3, #24]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f1c3 0307 	rsb	r3, r3, #7
 8002726:	2b04      	cmp	r3, #4
 8002728:	bf28      	it	cs
 800272a:	2304      	movcs	r3, #4
 800272c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3304      	adds	r3, #4
 8002732:	2b06      	cmp	r3, #6
 8002734:	d902      	bls.n	800273c <NVIC_EncodePriority+0x30>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3b03      	subs	r3, #3
 800273a:	e000      	b.n	800273e <NVIC_EncodePriority+0x32>
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	401a      	ands	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43d9      	mvns	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	4313      	orrs	r3, r2
         );
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	; 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002784:	d301      	bcc.n	800278a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002786:	2301      	movs	r3, #1
 8002788:	e00f      	b.n	80027aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <SysTick_Config+0x40>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002792:	210f      	movs	r1, #15
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f7ff ff8e 	bl	80026b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <SysTick_Config+0x40>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a2:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <SysTick_Config+0x40>)
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	e000e010 	.word	0xe000e010

080027b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff29 	bl	8002618 <__NVIC_SetPriorityGrouping>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e0:	f7ff ff3e 	bl	8002660 <__NVIC_GetPriorityGrouping>
 80027e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff8e 	bl	800270c <NVIC_EncodePriority>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff5d 	bl	80026b8 <__NVIC_SetPriority>
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff31 	bl	800267c <__NVIC_EnableIRQ>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ffa2 	bl	8002774 <SysTick_Config>
 8002830:	4603      	mov	r3, r0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d004      	beq.n	8002858 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e00c      	b.n	8002872 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2205      	movs	r2, #5
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	e16b      	b.n	8002b74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800289c:	2201      	movs	r2, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	f040 815a 	bne.w	8002b6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d00b      	beq.n	80028da <HAL_GPIO_Init+0x5a>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d007      	beq.n	80028da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ce:	2b11      	cmp	r3, #17
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b12      	cmp	r3, #18
 80028d8:	d130      	bne.n	800293c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2203      	movs	r2, #3
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002910:	2201      	movs	r2, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 0201 	and.w	r2, r3, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2203      	movs	r2, #3
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0xfc>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b12      	cmp	r3, #18
 800297a:	d123      	bne.n	80029c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	08da      	lsrs	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3208      	adds	r2, #8
 8002984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	220f      	movs	r2, #15
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	08da      	lsrs	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3208      	adds	r2, #8
 80029be:	69b9      	ldr	r1, [r7, #24]
 80029c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2203      	movs	r2, #3
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0203 	and.w	r2, r3, #3
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80b4 	beq.w	8002b6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <HAL_GPIO_Init+0x308>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	4a5e      	ldr	r2, [pc, #376]	; (8002b88 <HAL_GPIO_Init+0x308>)
 8002a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a14:	6453      	str	r3, [r2, #68]	; 0x44
 8002a16:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <HAL_GPIO_Init+0x308>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a22:	4a5a      	ldr	r2, [pc, #360]	; (8002b8c <HAL_GPIO_Init+0x30c>)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	220f      	movs	r2, #15
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a51      	ldr	r2, [pc, #324]	; (8002b90 <HAL_GPIO_Init+0x310>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d02b      	beq.n	8002aa6 <HAL_GPIO_Init+0x226>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a50      	ldr	r2, [pc, #320]	; (8002b94 <HAL_GPIO_Init+0x314>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d025      	beq.n	8002aa2 <HAL_GPIO_Init+0x222>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4f      	ldr	r2, [pc, #316]	; (8002b98 <HAL_GPIO_Init+0x318>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01f      	beq.n	8002a9e <HAL_GPIO_Init+0x21e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4e      	ldr	r2, [pc, #312]	; (8002b9c <HAL_GPIO_Init+0x31c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d019      	beq.n	8002a9a <HAL_GPIO_Init+0x21a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4d      	ldr	r2, [pc, #308]	; (8002ba0 <HAL_GPIO_Init+0x320>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_GPIO_Init+0x216>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4c      	ldr	r2, [pc, #304]	; (8002ba4 <HAL_GPIO_Init+0x324>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00d      	beq.n	8002a92 <HAL_GPIO_Init+0x212>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4b      	ldr	r2, [pc, #300]	; (8002ba8 <HAL_GPIO_Init+0x328>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <HAL_GPIO_Init+0x20e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4a      	ldr	r2, [pc, #296]	; (8002bac <HAL_GPIO_Init+0x32c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_GPIO_Init+0x20a>
 8002a86:	2307      	movs	r3, #7
 8002a88:	e00e      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	e00c      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a8e:	2306      	movs	r3, #6
 8002a90:	e00a      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a92:	2305      	movs	r3, #5
 8002a94:	e008      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e004      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	f002 0203 	and.w	r2, r2, #3
 8002aae:	0092      	lsls	r2, r2, #2
 8002ab0:	4093      	lsls	r3, r2
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab8:	4934      	ldr	r1, [pc, #208]	; (8002b8c <HAL_GPIO_Init+0x30c>)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	3302      	adds	r3, #2
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac6:	4b3a      	ldr	r3, [pc, #232]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aea:	4a31      	ldr	r2, [pc, #196]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002af0:	4b2f      	ldr	r3, [pc, #188]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b14:	4a26      	ldr	r2, [pc, #152]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1a:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3e:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b68:	4a11      	ldr	r2, [pc, #68]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3301      	adds	r3, #1
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2b0f      	cmp	r3, #15
 8002b78:	f67f ae90 	bls.w	800289c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3724      	adds	r7, #36	; 0x24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	40020000 	.word	0x40020000
 8002b94:	40020400 	.word	0x40020400
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020c00 	.word	0x40020c00
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40021400 	.word	0x40021400
 8002ba8:	40021800 	.word	0x40021800
 8002bac:	40021c00 	.word	0x40021c00
 8002bb0:	40013c00 	.word	0x40013c00

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd0:	e003      	b.n	8002bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	041a      	lsls	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	619a      	str	r2, [r3, #24]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e25b      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d075      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c06:	4ba3      	ldr	r3, [pc, #652]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d00c      	beq.n	8002c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c12:	4ba0      	ldr	r3, [pc, #640]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d112      	bne.n	8002c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c1e:	4b9d      	ldr	r3, [pc, #628]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c2a:	d10b      	bne.n	8002c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	4b99      	ldr	r3, [pc, #612]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d05b      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x108>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d157      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e236      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4c:	d106      	bne.n	8002c5c <HAL_RCC_OscConfig+0x74>
 8002c4e:	4b91      	ldr	r3, [pc, #580]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a90      	ldr	r2, [pc, #576]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e01d      	b.n	8002c98 <HAL_RCC_OscConfig+0xb0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x98>
 8002c66:	4b8b      	ldr	r3, [pc, #556]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a8a      	ldr	r2, [pc, #552]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b88      	ldr	r3, [pc, #544]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a87      	ldr	r2, [pc, #540]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0xb0>
 8002c80:	4b84      	ldr	r3, [pc, #528]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a83      	ldr	r2, [pc, #524]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b81      	ldr	r3, [pc, #516]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a80      	ldr	r2, [pc, #512]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7ff fcae 	bl	8002600 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7ff fcaa 	bl	8002600 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e1fb      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	4b76      	ldr	r3, [pc, #472]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xc0>
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7ff fc9a 	bl	8002600 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7ff fc96 	bl	8002600 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e1e7      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce2:	4b6c      	ldr	r3, [pc, #432]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0xe8>
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d063      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cfe:	4b65      	ldr	r3, [pc, #404]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0a:	4b62      	ldr	r3, [pc, #392]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d11c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d16:	4b5f      	ldr	r3, [pc, #380]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d116      	bne.n	8002d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	4b5c      	ldr	r3, [pc, #368]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_RCC_OscConfig+0x152>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e1bb      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3a:	4b56      	ldr	r3, [pc, #344]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4952      	ldr	r1, [pc, #328]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	e03a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d020      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d58:	4b4f      	ldr	r3, [pc, #316]	; (8002e98 <HAL_RCC_OscConfig+0x2b0>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7ff fc4f 	bl	8002600 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d66:	f7ff fc4b 	bl	8002600 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e19c      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	4b46      	ldr	r3, [pc, #280]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d84:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4940      	ldr	r1, [pc, #256]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
 8002d98:	e015      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <HAL_RCC_OscConfig+0x2b0>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7ff fc2e 	bl	8002600 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da8:	f7ff fc2a 	bl	8002600 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e17b      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dba:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d030      	beq.n	8002e34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dda:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <HAL_RCC_OscConfig+0x2b4>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7ff fc0e 	bl	8002600 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de8:	f7ff fc0a 	bl	8002600 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e15b      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfa:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x200>
 8002e06:	e015      	b.n	8002e34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e08:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <HAL_RCC_OscConfig+0x2b4>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7ff fbf7 	bl	8002600 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e16:	f7ff fbf3 	bl	8002600 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e144      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e28:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80a0 	beq.w	8002f82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10f      	bne.n	8002e72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a0e      	ldr	r2, [pc, #56]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e72:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_OscConfig+0x2b8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d121      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7e:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <HAL_RCC_OscConfig+0x2b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <HAL_RCC_OscConfig+0x2b8>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8a:	f7ff fbb9 	bl	8002600 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	e011      	b.n	8002eb6 <HAL_RCC_OscConfig+0x2ce>
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	42470000 	.word	0x42470000
 8002e9c:	42470e80 	.word	0x42470e80
 8002ea0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea4:	f7ff fbac 	bl	8002600 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0fd      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb6:	4b81      	ldr	r3, [pc, #516]	; (80030bc <HAL_RCC_OscConfig+0x4d4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d106      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2f0>
 8002eca:	4b7d      	ldr	r3, [pc, #500]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4a7c      	ldr	r2, [pc, #496]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed6:	e01c      	b.n	8002f12 <HAL_RCC_OscConfig+0x32a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d10c      	bne.n	8002efa <HAL_RCC_OscConfig+0x312>
 8002ee0:	4b77      	ldr	r3, [pc, #476]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a76      	ldr	r2, [pc, #472]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
 8002eec:	4b74      	ldr	r3, [pc, #464]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a73      	ldr	r2, [pc, #460]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	e00b      	b.n	8002f12 <HAL_RCC_OscConfig+0x32a>
 8002efa:	4b71      	ldr	r3, [pc, #452]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a70      	ldr	r2, [pc, #448]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
 8002f06:	4b6e      	ldr	r3, [pc, #440]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a6d      	ldr	r2, [pc, #436]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d015      	beq.n	8002f46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1a:	f7ff fb71 	bl	8002600 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7ff fb6d 	bl	8002600 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0bc      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	4b61      	ldr	r3, [pc, #388]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ee      	beq.n	8002f22 <HAL_RCC_OscConfig+0x33a>
 8002f44:	e014      	b.n	8002f70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f46:	f7ff fb5b 	bl	8002600 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7ff fb57 	bl	8002600 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0a6      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f64:	4b56      	ldr	r3, [pc, #344]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ee      	bne.n	8002f4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d105      	bne.n	8002f82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4b52      	ldr	r3, [pc, #328]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a51      	ldr	r2, [pc, #324]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 8092 	beq.w	80030b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f8c:	4b4c      	ldr	r3, [pc, #304]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d05c      	beq.n	8003052 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d141      	bne.n	8003024 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b48      	ldr	r3, [pc, #288]	; (80030c4 <HAL_RCC_OscConfig+0x4dc>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa6:	f7ff fb2b 	bl	8002600 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fae:	f7ff fb27 	bl	8002600 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e078      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc0:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f0      	bne.n	8002fae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	019b      	lsls	r3, r3, #6
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	041b      	lsls	r3, r3, #16
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	061b      	lsls	r3, r3, #24
 8002ff0:	4933      	ldr	r1, [pc, #204]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff6:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <HAL_RCC_OscConfig+0x4dc>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7ff fb00 	bl	8002600 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003004:	f7ff fafc 	bl	8002600 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e04d      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003016:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x41c>
 8003022:	e045      	b.n	80030b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003024:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <HAL_RCC_OscConfig+0x4dc>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302a:	f7ff fae9 	bl	8002600 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003032:	f7ff fae5 	bl	8002600 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e036      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003044:	4b1e      	ldr	r3, [pc, #120]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f0      	bne.n	8003032 <HAL_RCC_OscConfig+0x44a>
 8003050:	e02e      	b.n	80030b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e029      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800305e:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <HAL_RCC_OscConfig+0x4d8>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	429a      	cmp	r2, r3
 8003070:	d11c      	bne.n	80030ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d115      	bne.n	80030ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003086:	4013      	ands	r3, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800308c:	4293      	cmp	r3, r2
 800308e:	d10d      	bne.n	80030ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d106      	bne.n	80030ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40007000 	.word	0x40007000
 80030c0:	40023800 	.word	0x40023800
 80030c4:	42470060 	.word	0x42470060

080030c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0cc      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b68      	ldr	r3, [pc, #416]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d90c      	bls.n	8003104 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b65      	ldr	r3, [pc, #404]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b63      	ldr	r3, [pc, #396]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0b8      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d020      	beq.n	8003152 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800311c:	4b59      	ldr	r3, [pc, #356]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4a58      	ldr	r2, [pc, #352]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003126:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003134:	4b53      	ldr	r3, [pc, #332]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a52      	ldr	r2, [pc, #328]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800313e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003140:	4b50      	ldr	r3, [pc, #320]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	494d      	ldr	r1, [pc, #308]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d044      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b47      	ldr	r3, [pc, #284]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d119      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e07f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d003      	beq.n	8003186 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003182:	2b03      	cmp	r3, #3
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003196:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e067      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a6:	4b37      	ldr	r3, [pc, #220]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4934      	ldr	r1, [pc, #208]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b8:	f7ff fa22 	bl	8002600 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c0:	f7ff fa1e 	bl	8002600 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e04f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 020c 	and.w	r2, r3, #12
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1eb      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d20c      	bcs.n	8003210 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b22      	ldr	r3, [pc, #136]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e032      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800321c:	4b19      	ldr	r3, [pc, #100]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4916      	ldr	r1, [pc, #88]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	490e      	ldr	r1, [pc, #56]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800324e:	f000 f821 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8003252:	4601      	mov	r1, r0
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 8003260:	5cd3      	ldrb	r3, [r2, r3]
 8003262:	fa21 f303 	lsr.w	r3, r1, r3
 8003266:	4a09      	ldr	r2, [pc, #36]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff f982 	bl	8002578 <HAL_InitTick>

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023c00 	.word	0x40023c00
 8003284:	40023800 	.word	0x40023800
 8003288:	08007318 	.word	0x08007318
 800328c:	20000008 	.word	0x20000008
 8003290:	2000000c 	.word	0x2000000c

08003294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	2300      	movs	r3, #0
 80032a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032aa:	4b63      	ldr	r3, [pc, #396]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d007      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x32>
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d008      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x38>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 80b4 	bne.w	8003428 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b5e      	ldr	r3, [pc, #376]	; (800343c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032c2:	60bb      	str	r3, [r7, #8]
       break;
 80032c4:	e0b3      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c6:	4b5e      	ldr	r3, [pc, #376]	; (8003440 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80032c8:	60bb      	str	r3, [r7, #8]
      break;
 80032ca:	e0b0      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032cc:	4b5a      	ldr	r3, [pc, #360]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d6:	4b58      	ldr	r3, [pc, #352]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d04a      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e2:	4b55      	ldr	r3, [pc, #340]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	f04f 0400 	mov.w	r4, #0
 80032ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	ea03 0501 	and.w	r5, r3, r1
 80032f8:	ea04 0602 	and.w	r6, r4, r2
 80032fc:	4629      	mov	r1, r5
 80032fe:	4632      	mov	r2, r6
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	f04f 0400 	mov.w	r4, #0
 8003308:	0154      	lsls	r4, r2, #5
 800330a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800330e:	014b      	lsls	r3, r1, #5
 8003310:	4619      	mov	r1, r3
 8003312:	4622      	mov	r2, r4
 8003314:	1b49      	subs	r1, r1, r5
 8003316:	eb62 0206 	sbc.w	r2, r2, r6
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	f04f 0400 	mov.w	r4, #0
 8003322:	0194      	lsls	r4, r2, #6
 8003324:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003328:	018b      	lsls	r3, r1, #6
 800332a:	1a5b      	subs	r3, r3, r1
 800332c:	eb64 0402 	sbc.w	r4, r4, r2
 8003330:	f04f 0100 	mov.w	r1, #0
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	00e2      	lsls	r2, r4, #3
 800333a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800333e:	00d9      	lsls	r1, r3, #3
 8003340:	460b      	mov	r3, r1
 8003342:	4614      	mov	r4, r2
 8003344:	195b      	adds	r3, r3, r5
 8003346:	eb44 0406 	adc.w	r4, r4, r6
 800334a:	f04f 0100 	mov.w	r1, #0
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	0262      	lsls	r2, r4, #9
 8003354:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003358:	0259      	lsls	r1, r3, #9
 800335a:	460b      	mov	r3, r1
 800335c:	4614      	mov	r4, r2
 800335e:	4618      	mov	r0, r3
 8003360:	4621      	mov	r1, r4
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f04f 0400 	mov.w	r4, #0
 8003368:	461a      	mov	r2, r3
 800336a:	4623      	mov	r3, r4
 800336c:	f7fd fc22 	bl	8000bb4 <__aeabi_uldivmod>
 8003370:	4603      	mov	r3, r0
 8003372:	460c      	mov	r4, r1
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e049      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003378:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	099b      	lsrs	r3, r3, #6
 800337e:	f04f 0400 	mov.w	r4, #0
 8003382:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	ea03 0501 	and.w	r5, r3, r1
 800338e:	ea04 0602 	and.w	r6, r4, r2
 8003392:	4629      	mov	r1, r5
 8003394:	4632      	mov	r2, r6
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	f04f 0400 	mov.w	r4, #0
 800339e:	0154      	lsls	r4, r2, #5
 80033a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033a4:	014b      	lsls	r3, r1, #5
 80033a6:	4619      	mov	r1, r3
 80033a8:	4622      	mov	r2, r4
 80033aa:	1b49      	subs	r1, r1, r5
 80033ac:	eb62 0206 	sbc.w	r2, r2, r6
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	f04f 0400 	mov.w	r4, #0
 80033b8:	0194      	lsls	r4, r2, #6
 80033ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033be:	018b      	lsls	r3, r1, #6
 80033c0:	1a5b      	subs	r3, r3, r1
 80033c2:	eb64 0402 	sbc.w	r4, r4, r2
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	00e2      	lsls	r2, r4, #3
 80033d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033d4:	00d9      	lsls	r1, r3, #3
 80033d6:	460b      	mov	r3, r1
 80033d8:	4614      	mov	r4, r2
 80033da:	195b      	adds	r3, r3, r5
 80033dc:	eb44 0406 	adc.w	r4, r4, r6
 80033e0:	f04f 0100 	mov.w	r1, #0
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	02a2      	lsls	r2, r4, #10
 80033ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033ee:	0299      	lsls	r1, r3, #10
 80033f0:	460b      	mov	r3, r1
 80033f2:	4614      	mov	r4, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	4621      	mov	r1, r4
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f04f 0400 	mov.w	r4, #0
 80033fe:	461a      	mov	r2, r3
 8003400:	4623      	mov	r3, r4
 8003402:	f7fd fbd7 	bl	8000bb4 <__aeabi_uldivmod>
 8003406:	4603      	mov	r3, r0
 8003408:	460c      	mov	r4, r1
 800340a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	3301      	adds	r3, #1
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	60bb      	str	r3, [r7, #8]
      break;
 8003426:	e002      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800342a:	60bb      	str	r3, [r7, #8]
      break;
 800342c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800342e:	68bb      	ldr	r3, [r7, #8]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003438:	40023800 	.word	0x40023800
 800343c:	00f42400 	.word	0x00f42400
 8003440:	007a1200 	.word	0x007a1200

08003444 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e056      	b.n	8003504 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d106      	bne.n	8003476 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fe fc7b 	bl	8001d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2202      	movs	r2, #2
 800347a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	ea42 0103 	orr.w	r1, r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	0c1b      	lsrs	r3, r3, #16
 80034d4:	f003 0104 	and.w	r1, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_SPI_Transmit_IT+0x20>
 8003528:	2302      	movs	r3, #2
 800352a:	e067      	b.n	80035fc <HAL_SPI_Transmit_IT+0xf0>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_SPI_Transmit_IT+0x34>
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003544:	e055      	b.n	80035f2 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d002      	beq.n	8003558 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8003552:	2302      	movs	r3, #2
 8003554:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003556:	e04c      	b.n	80035f2 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2203      	movs	r2, #3
 800355c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	88fa      	ldrh	r2, [r7, #6]
 8003570:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	88fa      	ldrh	r2, [r7, #6]
 8003576:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4a1b      	ldr	r2, [pc, #108]	; (8003608 <HAL_SPI_Transmit_IT+0xfc>)
 800359c:	645a      	str	r2, [r3, #68]	; 0x44
 800359e:	e002      	b.n	80035a6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4a1a      	ldr	r2, [pc, #104]	; (800360c <HAL_SPI_Transmit_IT+0x100>)
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ae:	d107      	bne.n	80035c0 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80035ce:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d008      	beq.n	80035f0 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e000      	b.n	80035f2 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 80035f0:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	080040bd 	.word	0x080040bd
 800360c:	08004077 	.word	0x08004077

08003610 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	4613      	mov	r3, r2
 800361c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d110      	bne.n	800364c <HAL_SPI_Receive_IT+0x3c>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003632:	d10b      	bne.n	800364c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2204      	movs	r2, #4
 8003638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f87a 	bl	800373c <HAL_SPI_TransmitReceive_IT>
 8003648:	4603      	mov	r3, r0
 800364a:	e06e      	b.n	800372a <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_SPI_Receive_IT+0x4a>
 8003656:	2302      	movs	r3, #2
 8003658:	e067      	b.n	800372a <HAL_SPI_Receive_IT+0x11a>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d002      	beq.n	8003674 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800366e:	2302      	movs	r3, #2
 8003670:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003672:	e055      	b.n	8003720 <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_SPI_Receive_IT+0x70>
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003684:	e04c      	b.n	8003720 <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2204      	movs	r2, #4
 800368a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	88fa      	ldrh	r2, [r7, #6]
 800369e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	88fa      	ldrh	r2, [r7, #6]
 80036a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a1a      	ldr	r2, [pc, #104]	; (8003734 <HAL_SPI_Receive_IT+0x124>)
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
 80036cc:	e002      	b.n	80036d4 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_SPI_Receive_IT+0x128>)
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036dc:	d107      	bne.n	80036ee <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80036fc:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	d008      	beq.n	800371e <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	e000      	b.n	8003720 <HAL_SPI_Receive_IT+0x110>
  }

error :
 800371e:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003728:	7dfb      	ldrb	r3, [r7, #23]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	08004031 	.word	0x08004031
 8003738:	08003fe7 	.word	0x08003fe7

0800373c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_SPI_TransmitReceive_IT+0x20>
 8003758:	2302      	movs	r3, #2
 800375a:	e075      	b.n	8003848 <HAL_SPI_TransmitReceive_IT+0x10c>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800376a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003772:	7dbb      	ldrb	r3, [r7, #22]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d00d      	beq.n	8003794 <HAL_SPI_TransmitReceive_IT+0x58>
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800377e:	d106      	bne.n	800378e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <HAL_SPI_TransmitReceive_IT+0x52>
 8003788:	7dbb      	ldrb	r3, [r7, #22]
 800378a:	2b04      	cmp	r3, #4
 800378c:	d002      	beq.n	8003794 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800378e:	2302      	movs	r3, #2
 8003790:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003792:	e054      	b.n	800383e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_SPI_TransmitReceive_IT+0x6a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80037a0:	887b      	ldrh	r3, [r7, #2]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d102      	bne.n	80037ac <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037aa:	e048      	b.n	800383e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d003      	beq.n	80037c0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2205      	movs	r2, #5
 80037bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	887a      	ldrh	r2, [r7, #2]
 80037d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	887a      	ldrh	r2, [r7, #2]
 80037e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	887a      	ldrh	r2, [r7, #2]
 80037e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d006      	beq.n	8003800 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_SPI_TransmitReceive_IT+0x118>)
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a17      	ldr	r2, [pc, #92]	; (8003858 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80037fc:	645a      	str	r2, [r3, #68]	; 0x44
 80037fe:	e005      	b.n	800380c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a16      	ldr	r2, [pc, #88]	; (800385c <HAL_SPI_TransmitReceive_IT+0x120>)
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a15      	ldr	r2, [pc, #84]	; (8003860 <HAL_SPI_TransmitReceive_IT+0x124>)
 800380a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800381a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d008      	beq.n	800383c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	e000      	b.n	800383e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800383c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003846:	7dfb      	ldrb	r3, [r7, #23]
}
 8003848:	4618      	mov	r0, r3
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	08003f29 	.word	0x08003f29
 8003858:	08003f89 	.word	0x08003f89
 800385c:	08003e65 	.word	0x08003e65
 8003860:	08003ec9 	.word	0x08003ec9

08003864 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8003870:	2301      	movs	r3, #1
 8003872:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003874:	4b72      	ldr	r3, [pc, #456]	; (8003a40 <HAL_SPI_Abort_IT+0x1dc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a72      	ldr	r2, [pc, #456]	; (8003a44 <HAL_SPI_Abort_IT+0x1e0>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0a5b      	lsrs	r3, r3, #9
 8003880:	2264      	movs	r2, #100	; 0x64
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0220 	bic.w	r2, r2, #32
 800389a:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a6:	2b80      	cmp	r3, #128	; 0x80
 80038a8:	d117      	bne.n	80038da <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a66      	ldr	r2, [pc, #408]	; (8003a48 <HAL_SPI_Abort_IT+0x1e4>)
 80038ae:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80038c2:	e008      	b.n	80038d6 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b07      	cmp	r3, #7
 80038d4:	d1ec      	bne.n	80038b0 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d117      	bne.n	8003918 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a58      	ldr	r2, [pc, #352]	; (8003a4c <HAL_SPI_Abort_IT+0x1e8>)
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003900:	e008      	b.n	8003914 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	3b01      	subs	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b07      	cmp	r3, #7
 8003912:	d1ec      	bne.n	80038ee <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00f      	beq.n	8003940 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d104      	bne.n	8003938 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003932:	4a47      	ldr	r2, [pc, #284]	; (8003a50 <HAL_SPI_Abort_IT+0x1ec>)
 8003934:	651a      	str	r2, [r3, #80]	; 0x50
 8003936:	e003      	b.n	8003940 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393c:	2200      	movs	r2, #0
 800393e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00f      	beq.n	8003968 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b01      	cmp	r3, #1
 8003954:	d104      	bne.n	8003960 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	4a3e      	ldr	r2, [pc, #248]	; (8003a54 <HAL_SPI_Abort_IT+0x1f0>)
 800395c:	651a      	str	r2, [r3, #80]	; 0x50
 800395e:	e003      	b.n	8003968 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003964:	2200      	movs	r2, #0
 8003966:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d115      	bne.n	80039a2 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397a:	2b00      	cmp	r3, #0
 800397c:	d011      	beq.n	80039a2 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe ff59 	bl	800283a <HAL_DMA_Abort_IT>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003992:	2200      	movs	r2, #0
 8003994:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2240      	movs	r2, #64	; 0x40
 800399a:	655a      	str	r2, [r3, #84]	; 0x54
 800399c:	e001      	b.n	80039a2 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d115      	bne.n	80039dc <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d011      	beq.n	80039dc <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe ff3c 	bl	800283a <HAL_DMA_Abort_IT>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d007      	beq.n	80039d8 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039cc:	2200      	movs	r2, #0
 80039ce:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2240      	movs	r2, #64	; 0x40
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
 80039d6:	e001      	b.n	80039dc <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d128      	bne.n	8003a34 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d102      	bne.n	80039fc <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e002      	b.n	8003a02 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f930 	bl	8003c94 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8003a34:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000008 	.word	0x20000008
 8003a44:	057619f1 	.word	0x057619f1
 8003a48:	080045d9 	.word	0x080045d9
 8003a4c:	08004551 	.word	0x08004551
 8003a50:	08003cd1 	.word	0x08003cd1
 8003a54:	08003da5 	.word	0x08003da5

08003a58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	099b      	lsrs	r3, r3, #6
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10f      	bne.n	8003a9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
    return;
 8003a9a:	e0d8      	b.n	8003c4e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_SPI_IRQHandler+0x66>
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	09db      	lsrs	r3, r3, #7
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
    return;
 8003abc:	e0c7      	b.n	8003c4e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_SPI_IRQHandler+0x8c>
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80b5 	beq.w	8003c4e <HAL_SPI_IRQHandler+0x1f6>
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80ae 	beq.w	8003c4e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d023      	beq.n	8003b46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d011      	beq.n	8003b2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	f043 0204 	orr.w	r2, r3, #4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	e00b      	b.n	8003b46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	693b      	ldr	r3, [r7, #16]
        return;
 8003b44:	e083      	b.n	8003c4e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d014      	beq.n	8003b7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00c      	beq.n	8003ba2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8c:	f043 0208 	orr.w	r2, r3, #8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d050      	beq.n	8003c4c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bb8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <HAL_SPI_IRQHandler+0x17e>
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d034      	beq.n	8003c40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0203 	bic.w	r2, r2, #3
 8003be4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d011      	beq.n	8003c12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <HAL_SPI_IRQHandler+0x1fc>)
 8003bf4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fe1d 	bl	800283a <HAL_DMA_Abort_IT>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1e:	4a0d      	ldr	r2, [pc, #52]	; (8003c54 <HAL_SPI_IRQHandler+0x1fc>)
 8003c20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fe07 	bl	800283a <HAL_DMA_Abort_IT>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003c3e:	e003      	b.n	8003c48 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f81d 	bl	8003c80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003c46:	e000      	b.n	8003c4a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003c48:	bf00      	nop
    return;
 8003c4a:	bf00      	nop
 8003c4c:	bf00      	nop
  }
}
 8003c4e:	3720      	adds	r7, #32
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	08003ca9 	.word	0x08003ca9

08003c58 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f7ff ffdc 	bl	8003c80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003ce6:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <SPI_DMATxAbortCallback+0xcc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2d      	ldr	r2, [pc, #180]	; (8003da0 <SPI_DMATxAbortCallback+0xd0>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	0a5b      	lsrs	r3, r3, #9
 8003cf2:	2264      	movs	r2, #100	; 0x64
 8003cf4:	fb02 f303 	mul.w	r3, r2, r3
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0202 	bic.w	r2, r2, #2
 8003d08:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d106      	bne.n	8003d1e <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d1c:	e009      	b.n	8003d32 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0eb      	beq.n	8003d0a <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d004      	beq.n	8003d44 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d126      	bne.n	8003d92 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2200      	movs	r2, #0
 8003d48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	d002      	beq.n	8003d5e <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d74:	2300      	movs	r3, #0
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8003d8a:	6978      	ldr	r0, [r7, #20]
 8003d8c:	f7ff ff82 	bl	8003c94 <HAL_SPI_AbortCpltCallback>
 8003d90:	e000      	b.n	8003d94 <SPI_DMATxAbortCallback+0xc4>
      return;
 8003d92:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000008 	.word	0x20000008
 8003da0:	057619f1 	.word	0x057619f1

08003da4 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc0:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003dda:	f7fe fc11 	bl	8002600 <HAL_GetTick>
 8003dde:	4603      	mov	r3, r0
 8003de0:	461a      	mov	r2, r3
 8003de2:	2164      	movs	r1, #100	; 0x64
 8003de4:	6978      	ldr	r0, [r7, #20]
 8003de6:	f000 fa5b 	bl	80042a0 <SPI_EndRxTxTransaction>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d126      	bne.n	8003e5c <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2200      	movs	r2, #0
 8003e12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2200      	movs	r2, #0
 8003e18:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	d002      	beq.n	8003e28 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2200      	movs	r2, #0
 8003e26:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8003e54:	6978      	ldr	r0, [r7, #20]
 8003e56:	f7ff ff1d 	bl	8003c94 <HAL_SPI_AbortCpltCallback>
 8003e5a:	e000      	b.n	8003e5e <SPI_DMARxAbortCallback+0xba>
      return;
 8003e5c:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f103 020c 	add.w	r2, r3, #12
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	7812      	ldrb	r2, [r2, #0]
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10f      	bne.n	8003ec0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003eae:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d102      	bne.n	8003ec0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fa32 	bl	8004324 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	7812      	ldrb	r2, [r2, #0]
 8003edc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10f      	bne.n	8003f20 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f0e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fa02 	bl	8004324 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	b292      	uxth	r2, r2
 8003f3c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	1c9a      	adds	r2, r3, #2
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10f      	bne.n	8003f80 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f6e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f9d2 	bl	8004324 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	881a      	ldrh	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	1c9a      	adds	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10f      	bne.n	8003fde <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fcc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f9a3 	bl	8004324 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f103 020c 	add.w	r2, r3, #12
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	7812      	ldrb	r2, [r2, #0]
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d102      	bne.n	8004028 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f9f2 	bl	800440c <SPI_CloseRx_ISR>
  }
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	b292      	uxth	r2, r2
 8004044:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	1c9a      	adds	r2, r3, #2
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f9cf 	bl	800440c <SPI_CloseRx_ISR>
  }
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	7812      	ldrb	r2, [r2, #0]
 800408a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f9ec 	bl	800448c <SPI_CloseTx_ISR>
  }
}
 80040b4:	bf00      	nop
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	881a      	ldrh	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	1c9a      	adds	r2, r3, #2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f9ca 	bl	800448c <SPI_CloseTx_ISR>
  }
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004110:	e04c      	b.n	80041ac <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d048      	beq.n	80041ac <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800411a:	f7fe fa71 	bl	8002600 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d902      	bls.n	8004130 <SPI_WaitFlagStateUntilTimeout+0x30>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d13d      	bne.n	80041ac <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800413e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004148:	d111      	bne.n	800416e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004152:	d004      	beq.n	800415e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415c:	d107      	bne.n	800416e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800416c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004176:	d10f      	bne.n	8004198 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004196:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e00f      	b.n	80041cc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4013      	ands	r3, r2
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d1a3      	bne.n	8004112 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041e8:	d111      	bne.n	800420e <SPI_EndRxTransaction+0x3a>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f2:	d004      	beq.n	80041fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fc:	d107      	bne.n	800420e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004216:	d12a      	bne.n	800426e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004220:	d012      	beq.n	8004248 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2200      	movs	r2, #0
 800422a:	2180      	movs	r1, #128	; 0x80
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff ff67 	bl	8004100 <SPI_WaitFlagStateUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d02d      	beq.n	8004294 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f043 0220 	orr.w	r2, r3, #32
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e026      	b.n	8004296 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2200      	movs	r2, #0
 8004250:	2101      	movs	r1, #1
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff ff54 	bl	8004100 <SPI_WaitFlagStateUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01a      	beq.n	8004294 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	f043 0220 	orr.w	r2, r3, #32
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e013      	b.n	8004296 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2200      	movs	r2, #0
 8004276:	2101      	movs	r1, #1
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff ff41 	bl	8004100 <SPI_WaitFlagStateUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	f043 0220 	orr.w	r2, r3, #32
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e000      	b.n	8004296 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042ac:	4b1b      	ldr	r3, [pc, #108]	; (800431c <SPI_EndRxTxTransaction+0x7c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <SPI_EndRxTxTransaction+0x80>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	0d5b      	lsrs	r3, r3, #21
 80042b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ca:	d112      	bne.n	80042f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2200      	movs	r2, #0
 80042d4:	2180      	movs	r1, #128	; 0x80
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7ff ff12 	bl	8004100 <SPI_WaitFlagStateUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d016      	beq.n	8004310 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e00f      	b.n	8004312 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004308:	2b80      	cmp	r3, #128	; 0x80
 800430a:	d0f2      	beq.n	80042f2 <SPI_EndRxTxTransaction+0x52>
 800430c:	e000      	b.n	8004310 <SPI_EndRxTxTransaction+0x70>
        break;
 800430e:	bf00      	nop
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000008 	.word	0x20000008
 8004320:	165e9f81 	.word	0x165e9f81

08004324 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <SPI_CloseRxTx_ISR+0xe0>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a35      	ldr	r2, [pc, #212]	; (8004408 <SPI_CloseRxTx_ISR+0xe4>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0a5b      	lsrs	r3, r3, #9
 8004338:	2264      	movs	r2, #100	; 0x64
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004340:	f7fe f95e 	bl	8002600 <HAL_GetTick>
 8004344:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0220 	bic.w	r2, r2, #32
 8004354:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d106      	bne.n	800436a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004368:	e009      	b.n	800437e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3b01      	subs	r3, #1
 800436e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0eb      	beq.n	8004356 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	2164      	movs	r1, #100	; 0x64
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff8c 	bl	80042a0 <SPI_EndRxTxTransaction>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	f043 0220 	orr.w	r2, r3, #32
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d115      	bne.n	80043ec <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d107      	bne.n	80043dc <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7fd fbeb 	bl	8001bb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80043da:	e00e      	b.n	80043fa <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff fc41 	bl	8003c6c <HAL_SPI_TxRxCpltCallback>
}
 80043ea:	e006      	b.n	80043fa <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff fc43 	bl	8003c80 <HAL_SPI_ErrorCallback>
}
 80043fa:	bf00      	nop
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000008 	.word	0x20000008
 8004408:	057619f1 	.word	0x057619f1

0800440c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004422:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004424:	f7fe f8ec 	bl	8002600 <HAL_GetTick>
 8004428:	4603      	mov	r3, r0
 800442a:	461a      	mov	r2, r3
 800442c:	2164      	movs	r1, #100	; 0x64
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff fed0 	bl	80041d4 <SPI_EndRxTransaction>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	f043 0220 	orr.w	r2, r3, #32
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004470:	2b00      	cmp	r3, #0
 8004472:	d103      	bne.n	800447c <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7fd fb9b 	bl	8001bb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800447a:	e002      	b.n	8004482 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff fbff 	bl	8003c80 <HAL_SPI_ErrorCallback>
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004494:	4b2c      	ldr	r3, [pc, #176]	; (8004548 <SPI_CloseTx_ISR+0xbc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2c      	ldr	r2, [pc, #176]	; (800454c <SPI_CloseTx_ISR+0xc0>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	0a5b      	lsrs	r3, r3, #9
 80044a0:	2264      	movs	r2, #100	; 0x64
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044a8:	f7fe f8aa 	bl	8002600 <HAL_GetTick>
 80044ac:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044c0:	e009      	b.n	80044d6 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0eb      	beq.n	80044ae <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044e4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	2164      	movs	r1, #100	; 0x64
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff fed8 	bl	80042a0 <SPI_EndRxTxTransaction>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	f043 0220 	orr.w	r2, r3, #32
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff fba5 	bl	8003c80 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004536:	e002      	b.n	800453e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff fb8d 	bl	8003c58 <HAL_SPI_TxCpltCallback>
}
 800453e:	bf00      	nop
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000008 	.word	0x20000008
 800454c:	057619f1 	.word	0x057619f1

08004550 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004558:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <SPI_AbortRx_ISR+0x80>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <SPI_AbortRx_ISR+0x84>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	0a5b      	lsrs	r3, r3, #9
 8004564:	2264      	movs	r2, #100	; 0x64
 8004566:	fb02 f303 	mul.w	r3, r2, r3
 800456a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800457e:	e009      	b.n	8004594 <SPI_AbortRx_ISR+0x44>
    }
    count--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3b01      	subs	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0eb      	beq.n	800456c <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a2:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045b2:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2207      	movs	r2, #7
 80045be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000008 	.word	0x20000008
 80045d4:	057619f1 	.word	0x057619f1

080045d8 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ee:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fe:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2207      	movs	r2, #7
 8004604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e01d      	b.n	8004662 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fd fed8 	bl	80023f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f000 fc76 	bl	8004f44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b06      	cmp	r3, #6
 8004692:	d007      	beq.n	80046a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e01d      	b.n	8004700 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f815 	bl	8004708 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f000 fc27 	bl	8004f44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e01d      	b.n	800476a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f815 	bl	8004772 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3304      	adds	r3, #4
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f000 fbf2 	bl	8004f44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2201      	movs	r2, #1
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 febc 	bl	8005518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a15      	ldr	r2, [pc, #84]	; (80047fc <HAL_TIM_PWM_Start+0x74>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d004      	beq.n	80047b4 <HAL_TIM_PWM_Start+0x2c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a14      	ldr	r2, [pc, #80]	; (8004800 <HAL_TIM_PWM_Start+0x78>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d101      	bne.n	80047b8 <HAL_TIM_PWM_Start+0x30>
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <HAL_TIM_PWM_Start+0x32>
 80047b8:	2300      	movs	r3, #0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b06      	cmp	r3, #6
 80047de:	d007      	beq.n	80047f0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40010000 	.word	0x40010000
 8004800:	40010400 	.word	0x40010400

08004804 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e083      	b.n	8004920 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d106      	bne.n	8004832 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fd fd49 	bl	80022c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2202      	movs	r2, #2
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004848:	f023 0307 	bic.w	r3, r3, #7
 800484c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3304      	adds	r3, #4
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f000 fb73 	bl	8004f44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	4313      	orrs	r3, r2
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048a4:	f023 030c 	bic.w	r3, r3, #12
 80048a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	4313      	orrs	r3, r2
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	011a      	lsls	r2, r3, #4
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	031b      	lsls	r3, r3, #12
 80048d4:	4313      	orrs	r3, r2
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80048ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	4313      	orrs	r3, r2
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b02      	cmp	r3, #2
 800493c:	d122      	bne.n	8004984 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b02      	cmp	r3, #2
 800494a:	d11b      	bne.n	8004984 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0202 	mvn.w	r2, #2
 8004954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 facb 	bl	8004f06 <HAL_TIM_IC_CaptureCallback>
 8004970:	e005      	b.n	800497e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fabd 	bl	8004ef2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 face 	bl	8004f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b04      	cmp	r3, #4
 8004990:	d122      	bne.n	80049d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b04      	cmp	r3, #4
 800499e:	d11b      	bne.n	80049d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0204 	mvn.w	r2, #4
 80049a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 faa1 	bl	8004f06 <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fa93 	bl	8004ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 faa4 	bl	8004f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0208 	mvn.w	r2, #8
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2204      	movs	r2, #4
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fa77 	bl	8004f06 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa69 	bl	8004ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fa7a 	bl	8004f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b10      	cmp	r3, #16
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0210 	mvn.w	r2, #16
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2208      	movs	r2, #8
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa4d 	bl	8004f06 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa3f 	bl	8004ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fa50 	bl	8004f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d10e      	bne.n	8004aac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d107      	bne.n	8004aac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0201 	mvn.w	r2, #1
 8004aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fd f8b8 	bl	8001c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab6:	2b80      	cmp	r3, #128	; 0x80
 8004ab8:	d10e      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac4:	2b80      	cmp	r3, #128	; 0x80
 8004ac6:	d107      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fdcc 	bl	8005670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d10e      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af0:	2b40      	cmp	r3, #64	; 0x40
 8004af2:	d107      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa15 	bl	8004f2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d10e      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d107      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0220 	mvn.w	r2, #32
 8004b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fd96 	bl	800565c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e04e      	b.n	8004bf0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b0c      	cmp	r3, #12
 8004b66:	d839      	bhi.n	8004bdc <HAL_TIM_OC_ConfigChannel+0xa4>
 8004b68:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <HAL_TIM_OC_ConfigChannel+0x38>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004ba5 	.word	0x08004ba5
 8004b74:	08004bdd 	.word	0x08004bdd
 8004b78:	08004bdd 	.word	0x08004bdd
 8004b7c:	08004bdd 	.word	0x08004bdd
 8004b80:	08004bb3 	.word	0x08004bb3
 8004b84:	08004bdd 	.word	0x08004bdd
 8004b88:	08004bdd 	.word	0x08004bdd
 8004b8c:	08004bdd 	.word	0x08004bdd
 8004b90:	08004bc1 	.word	0x08004bc1
 8004b94:	08004bdd 	.word	0x08004bdd
 8004b98:	08004bdd 	.word	0x08004bdd
 8004b9c:	08004bdd 	.word	0x08004bdd
 8004ba0:	08004bcf 	.word	0x08004bcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fa6a 	bl	8005084 <TIM_OC1_SetConfig>
      break;
 8004bb0:	e015      	b.n	8004bde <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fad3 	bl	8005164 <TIM_OC2_SetConfig>
      break;
 8004bbe:	e00e      	b.n	8004bde <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fb42 	bl	8005250 <TIM_OC3_SetConfig>
      break;
 8004bcc:	e007      	b.n	8004bde <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68b9      	ldr	r1, [r7, #8]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fbaf 	bl	8005338 <TIM_OC4_SetConfig>
      break;
 8004bda:	e000      	b.n	8004bde <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8004bdc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e0b4      	b.n	8004d7c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b0c      	cmp	r3, #12
 8004c26:	f200 809f 	bhi.w	8004d68 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c65 	.word	0x08004c65
 8004c34:	08004d69 	.word	0x08004d69
 8004c38:	08004d69 	.word	0x08004d69
 8004c3c:	08004d69 	.word	0x08004d69
 8004c40:	08004ca5 	.word	0x08004ca5
 8004c44:	08004d69 	.word	0x08004d69
 8004c48:	08004d69 	.word	0x08004d69
 8004c4c:	08004d69 	.word	0x08004d69
 8004c50:	08004ce7 	.word	0x08004ce7
 8004c54:	08004d69 	.word	0x08004d69
 8004c58:	08004d69 	.word	0x08004d69
 8004c5c:	08004d69 	.word	0x08004d69
 8004c60:	08004d27 	.word	0x08004d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fa0a 	bl	8005084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0208 	orr.w	r2, r2, #8
 8004c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0204 	bic.w	r2, r2, #4
 8004c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6999      	ldr	r1, [r3, #24]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	619a      	str	r2, [r3, #24]
      break;
 8004ca2:	e062      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fa5a 	bl	8005164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6999      	ldr	r1, [r3, #24]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	021a      	lsls	r2, r3, #8
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	619a      	str	r2, [r3, #24]
      break;
 8004ce4:	e041      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 faaf 	bl	8005250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0208 	orr.w	r2, r2, #8
 8004d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0204 	bic.w	r2, r2, #4
 8004d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69d9      	ldr	r1, [r3, #28]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	61da      	str	r2, [r3, #28]
      break;
 8004d24:	e021      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fb03 	bl	8005338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69d9      	ldr	r1, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	021a      	lsls	r2, r3, #8
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	61da      	str	r2, [r3, #28]
      break;
 8004d66:	e000      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004d68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_ConfigClockSource+0x18>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e0a6      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x166>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b40      	cmp	r3, #64	; 0x40
 8004dd2:	d067      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x120>
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d80b      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x6c>
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d073      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0x140>
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d802      	bhi.n	8004de6 <HAL_TIM_ConfigClockSource+0x62>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d06f      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004de4:	e078      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d06c      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0x140>
 8004dea:	2b30      	cmp	r3, #48	; 0x30
 8004dec:	d06a      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004dee:	e073      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004df0:	2b70      	cmp	r3, #112	; 0x70
 8004df2:	d00d      	beq.n	8004e10 <HAL_TIM_ConfigClockSource+0x8c>
 8004df4:	2b70      	cmp	r3, #112	; 0x70
 8004df6:	d804      	bhi.n	8004e02 <HAL_TIM_ConfigClockSource+0x7e>
 8004df8:	2b50      	cmp	r3, #80	; 0x50
 8004dfa:	d033      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0xe0>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d041      	beq.n	8004e84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e00:	e06a      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e06:	d066      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x152>
 8004e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0c:	d017      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e0e:	e063      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	6899      	ldr	r1, [r3, #8]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f000 fb5a 	bl	80054d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	609a      	str	r2, [r3, #8]
      break;
 8004e3c:	e04c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f000 fb43 	bl	80054d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e60:	609a      	str	r2, [r3, #8]
      break;
 8004e62:	e039      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	461a      	mov	r2, r3
 8004e72:	f000 fab7 	bl	80053e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2150      	movs	r1, #80	; 0x50
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fb10 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004e82:	e029      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f000 fad6 	bl	8005442 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2160      	movs	r1, #96	; 0x60
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fb00 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004ea2:	e019      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	6859      	ldr	r1, [r3, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	f000 fa97 	bl	80053e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2140      	movs	r1, #64	; 0x40
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 faf0 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004ec2:	e009      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f000 fae7 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e000      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a40      	ldr	r2, [pc, #256]	; (8005058 <TIM_Base_SetConfig+0x114>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f62:	d00f      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a3d      	ldr	r2, [pc, #244]	; (800505c <TIM_Base_SetConfig+0x118>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a3c      	ldr	r2, [pc, #240]	; (8005060 <TIM_Base_SetConfig+0x11c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a3b      	ldr	r2, [pc, #236]	; (8005064 <TIM_Base_SetConfig+0x120>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a3a      	ldr	r2, [pc, #232]	; (8005068 <TIM_Base_SetConfig+0x124>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d108      	bne.n	8004f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2f      	ldr	r2, [pc, #188]	; (8005058 <TIM_Base_SetConfig+0x114>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d02b      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa4:	d027      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2c      	ldr	r2, [pc, #176]	; (800505c <TIM_Base_SetConfig+0x118>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d023      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2b      	ldr	r2, [pc, #172]	; (8005060 <TIM_Base_SetConfig+0x11c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d01f      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2a      	ldr	r2, [pc, #168]	; (8005064 <TIM_Base_SetConfig+0x120>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d01b      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a29      	ldr	r2, [pc, #164]	; (8005068 <TIM_Base_SetConfig+0x124>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d017      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a28      	ldr	r2, [pc, #160]	; (800506c <TIM_Base_SetConfig+0x128>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a27      	ldr	r2, [pc, #156]	; (8005070 <TIM_Base_SetConfig+0x12c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00f      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a26      	ldr	r2, [pc, #152]	; (8005074 <TIM_Base_SetConfig+0x130>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a25      	ldr	r2, [pc, #148]	; (8005078 <TIM_Base_SetConfig+0x134>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a24      	ldr	r2, [pc, #144]	; (800507c <TIM_Base_SetConfig+0x138>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a23      	ldr	r2, [pc, #140]	; (8005080 <TIM_Base_SetConfig+0x13c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d108      	bne.n	8005008 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a0a      	ldr	r2, [pc, #40]	; (8005058 <TIM_Base_SetConfig+0x114>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_Base_SetConfig+0xf8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a0c      	ldr	r2, [pc, #48]	; (8005068 <TIM_Base_SetConfig+0x124>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d103      	bne.n	8005044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	615a      	str	r2, [r3, #20]
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40010000 	.word	0x40010000
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	40010400 	.word	0x40010400
 800506c:	40014000 	.word	0x40014000
 8005070:	40014400 	.word	0x40014400
 8005074:	40014800 	.word	0x40014800
 8005078:	40001800 	.word	0x40001800
 800507c:	40001c00 	.word	0x40001c00
 8005080:	40002000 	.word	0x40002000

08005084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0201 	bic.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f023 0302 	bic.w	r3, r3, #2
 80050cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a20      	ldr	r2, [pc, #128]	; (800515c <TIM_OC1_SetConfig+0xd8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_OC1_SetConfig+0x64>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <TIM_OC1_SetConfig+0xdc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d10c      	bne.n	8005102 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f023 0308 	bic.w	r3, r3, #8
 80050ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f023 0304 	bic.w	r3, r3, #4
 8005100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a15      	ldr	r2, [pc, #84]	; (800515c <TIM_OC1_SetConfig+0xd8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d003      	beq.n	8005112 <TIM_OC1_SetConfig+0x8e>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a14      	ldr	r2, [pc, #80]	; (8005160 <TIM_OC1_SetConfig+0xdc>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d111      	bne.n	8005136 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	621a      	str	r2, [r3, #32]
}
 8005150:	bf00      	nop
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	40010000 	.word	0x40010000
 8005160:	40010400 	.word	0x40010400

08005164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f023 0210 	bic.w	r2, r3, #16
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0320 	bic.w	r3, r3, #32
 80051ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a22      	ldr	r2, [pc, #136]	; (8005248 <TIM_OC2_SetConfig+0xe4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_OC2_SetConfig+0x68>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a21      	ldr	r2, [pc, #132]	; (800524c <TIM_OC2_SetConfig+0xe8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d10d      	bne.n	80051e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a17      	ldr	r2, [pc, #92]	; (8005248 <TIM_OC2_SetConfig+0xe4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_OC2_SetConfig+0x94>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a16      	ldr	r2, [pc, #88]	; (800524c <TIM_OC2_SetConfig+0xe8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d113      	bne.n	8005220 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	621a      	str	r2, [r3, #32]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	40010400 	.word	0x40010400

08005250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a21      	ldr	r2, [pc, #132]	; (8005330 <TIM_OC3_SetConfig+0xe0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <TIM_OC3_SetConfig+0x66>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a20      	ldr	r2, [pc, #128]	; (8005334 <TIM_OC3_SetConfig+0xe4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d10d      	bne.n	80052d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a16      	ldr	r2, [pc, #88]	; (8005330 <TIM_OC3_SetConfig+0xe0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d003      	beq.n	80052e2 <TIM_OC3_SetConfig+0x92>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a15      	ldr	r2, [pc, #84]	; (8005334 <TIM_OC3_SetConfig+0xe4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d113      	bne.n	800530a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	40010000 	.word	0x40010000
 8005334:	40010400 	.word	0x40010400

08005338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	031b      	lsls	r3, r3, #12
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a12      	ldr	r2, [pc, #72]	; (80053dc <TIM_OC4_SetConfig+0xa4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_OC4_SetConfig+0x68>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a11      	ldr	r2, [pc, #68]	; (80053e0 <TIM_OC4_SetConfig+0xa8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d109      	bne.n	80053b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	019b      	lsls	r3, r3, #6
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40010400 	.word	0x40010400

080053e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f023 0201 	bic.w	r2, r3, #1
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800540e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f023 030a 	bic.w	r3, r3, #10
 8005420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	621a      	str	r2, [r3, #32]
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005442:	b480      	push	{r7}
 8005444:	b087      	sub	sp, #28
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f023 0210 	bic.w	r2, r3, #16
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800546c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	031b      	lsls	r3, r3, #12
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800547e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	f043 0307 	orr.w	r3, r3, #7
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	021a      	lsls	r2, r3, #8
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4313      	orrs	r3, r2
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	609a      	str	r2, [r3, #8]
}
 800550c:	bf00      	nop
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	2201      	movs	r2, #1
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a1a      	ldr	r2, [r3, #32]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	43db      	mvns	r3, r3
 800553a:	401a      	ands	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a1a      	ldr	r2, [r3, #32]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	fa01 f303 	lsl.w	r3, r1, r3
 8005550:	431a      	orrs	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	621a      	str	r2, [r3, #32]
}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005578:	2302      	movs	r3, #2
 800557a:	e05a      	b.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a21      	ldr	r2, [pc, #132]	; (8005640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d022      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c8:	d01d      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d018      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1b      	ldr	r2, [pc, #108]	; (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1a      	ldr	r2, [pc, #104]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00e      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a18      	ldr	r2, [pc, #96]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a17      	ldr	r2, [pc, #92]	; (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a15      	ldr	r2, [pc, #84]	; (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d10c      	bne.n	8005620 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800560c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	4313      	orrs	r3, r2
 8005616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40010000 	.word	0x40010000
 8005644:	40000400 	.word	0x40000400
 8005648:	40000800 	.word	0x40000800
 800564c:	40000c00 	.word	0x40000c00
 8005650:	40010400 	.word	0x40010400
 8005654:	40014000 	.word	0x40014000
 8005658:	40001800 	.word	0x40001800

0800565c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <__errno>:
 8005684:	4b01      	ldr	r3, [pc, #4]	; (800568c <__errno+0x8>)
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	20000014 	.word	0x20000014

08005690 <__libc_init_array>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4e0d      	ldr	r6, [pc, #52]	; (80056c8 <__libc_init_array+0x38>)
 8005694:	4c0d      	ldr	r4, [pc, #52]	; (80056cc <__libc_init_array+0x3c>)
 8005696:	1ba4      	subs	r4, r4, r6
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	2500      	movs	r5, #0
 800569c:	42a5      	cmp	r5, r4
 800569e:	d109      	bne.n	80056b4 <__libc_init_array+0x24>
 80056a0:	4e0b      	ldr	r6, [pc, #44]	; (80056d0 <__libc_init_array+0x40>)
 80056a2:	4c0c      	ldr	r4, [pc, #48]	; (80056d4 <__libc_init_array+0x44>)
 80056a4:	f001 fe2a 	bl	80072fc <_init>
 80056a8:	1ba4      	subs	r4, r4, r6
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	2500      	movs	r5, #0
 80056ae:	42a5      	cmp	r5, r4
 80056b0:	d105      	bne.n	80056be <__libc_init_array+0x2e>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056b8:	4798      	blx	r3
 80056ba:	3501      	adds	r5, #1
 80056bc:	e7ee      	b.n	800569c <__libc_init_array+0xc>
 80056be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056c2:	4798      	blx	r3
 80056c4:	3501      	adds	r5, #1
 80056c6:	e7f2      	b.n	80056ae <__libc_init_array+0x1e>
 80056c8:	080075a0 	.word	0x080075a0
 80056cc:	080075a0 	.word	0x080075a0
 80056d0:	080075a0 	.word	0x080075a0
 80056d4:	080075a4 	.word	0x080075a4

080056d8 <memset>:
 80056d8:	4402      	add	r2, r0
 80056da:	4603      	mov	r3, r0
 80056dc:	4293      	cmp	r3, r2
 80056de:	d100      	bne.n	80056e2 <memset+0xa>
 80056e0:	4770      	bx	lr
 80056e2:	f803 1b01 	strb.w	r1, [r3], #1
 80056e6:	e7f9      	b.n	80056dc <memset+0x4>

080056e8 <sulp>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	4604      	mov	r4, r0
 80056ec:	460d      	mov	r5, r1
 80056ee:	ec45 4b10 	vmov	d0, r4, r5
 80056f2:	4616      	mov	r6, r2
 80056f4:	f001 fc2c 	bl	8006f50 <__ulp>
 80056f8:	ec51 0b10 	vmov	r0, r1, d0
 80056fc:	b17e      	cbz	r6, 800571e <sulp+0x36>
 80056fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005702:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005706:	2b00      	cmp	r3, #0
 8005708:	dd09      	ble.n	800571e <sulp+0x36>
 800570a:	051b      	lsls	r3, r3, #20
 800570c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005710:	2400      	movs	r4, #0
 8005712:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005716:	4622      	mov	r2, r4
 8005718:	462b      	mov	r3, r5
 800571a:	f7fa ff19 	bl	8000550 <__aeabi_dmul>
 800571e:	bd70      	pop	{r4, r5, r6, pc}

08005720 <_strtod_l>:
 8005720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005724:	461f      	mov	r7, r3
 8005726:	b0a1      	sub	sp, #132	; 0x84
 8005728:	2300      	movs	r3, #0
 800572a:	4681      	mov	r9, r0
 800572c:	4638      	mov	r0, r7
 800572e:	460e      	mov	r6, r1
 8005730:	9217      	str	r2, [sp, #92]	; 0x5c
 8005732:	931c      	str	r3, [sp, #112]	; 0x70
 8005734:	f001 f922 	bl	800697c <__localeconv_l>
 8005738:	4680      	mov	r8, r0
 800573a:	6800      	ldr	r0, [r0, #0]
 800573c:	f7fa fd44 	bl	80001c8 <strlen>
 8005740:	f04f 0a00 	mov.w	sl, #0
 8005744:	4604      	mov	r4, r0
 8005746:	f04f 0b00 	mov.w	fp, #0
 800574a:	961b      	str	r6, [sp, #108]	; 0x6c
 800574c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800574e:	781a      	ldrb	r2, [r3, #0]
 8005750:	2a0d      	cmp	r2, #13
 8005752:	d832      	bhi.n	80057ba <_strtod_l+0x9a>
 8005754:	2a09      	cmp	r2, #9
 8005756:	d236      	bcs.n	80057c6 <_strtod_l+0xa6>
 8005758:	2a00      	cmp	r2, #0
 800575a:	d03e      	beq.n	80057da <_strtod_l+0xba>
 800575c:	2300      	movs	r3, #0
 800575e:	930d      	str	r3, [sp, #52]	; 0x34
 8005760:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005762:	782b      	ldrb	r3, [r5, #0]
 8005764:	2b30      	cmp	r3, #48	; 0x30
 8005766:	f040 80ac 	bne.w	80058c2 <_strtod_l+0x1a2>
 800576a:	786b      	ldrb	r3, [r5, #1]
 800576c:	2b58      	cmp	r3, #88	; 0x58
 800576e:	d001      	beq.n	8005774 <_strtod_l+0x54>
 8005770:	2b78      	cmp	r3, #120	; 0x78
 8005772:	d167      	bne.n	8005844 <_strtod_l+0x124>
 8005774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005776:	9301      	str	r3, [sp, #4]
 8005778:	ab1c      	add	r3, sp, #112	; 0x70
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	9702      	str	r7, [sp, #8]
 800577e:	ab1d      	add	r3, sp, #116	; 0x74
 8005780:	4a88      	ldr	r2, [pc, #544]	; (80059a4 <_strtod_l+0x284>)
 8005782:	a91b      	add	r1, sp, #108	; 0x6c
 8005784:	4648      	mov	r0, r9
 8005786:	f000 fe22 	bl	80063ce <__gethex>
 800578a:	f010 0407 	ands.w	r4, r0, #7
 800578e:	4606      	mov	r6, r0
 8005790:	d005      	beq.n	800579e <_strtod_l+0x7e>
 8005792:	2c06      	cmp	r4, #6
 8005794:	d12b      	bne.n	80057ee <_strtod_l+0xce>
 8005796:	3501      	adds	r5, #1
 8005798:	2300      	movs	r3, #0
 800579a:	951b      	str	r5, [sp, #108]	; 0x6c
 800579c:	930d      	str	r3, [sp, #52]	; 0x34
 800579e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f040 859a 	bne.w	80062da <_strtod_l+0xbba>
 80057a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057a8:	b1e3      	cbz	r3, 80057e4 <_strtod_l+0xc4>
 80057aa:	4652      	mov	r2, sl
 80057ac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80057b0:	ec43 2b10 	vmov	d0, r2, r3
 80057b4:	b021      	add	sp, #132	; 0x84
 80057b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ba:	2a2b      	cmp	r2, #43	; 0x2b
 80057bc:	d015      	beq.n	80057ea <_strtod_l+0xca>
 80057be:	2a2d      	cmp	r2, #45	; 0x2d
 80057c0:	d004      	beq.n	80057cc <_strtod_l+0xac>
 80057c2:	2a20      	cmp	r2, #32
 80057c4:	d1ca      	bne.n	800575c <_strtod_l+0x3c>
 80057c6:	3301      	adds	r3, #1
 80057c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80057ca:	e7bf      	b.n	800574c <_strtod_l+0x2c>
 80057cc:	2201      	movs	r2, #1
 80057ce:	920d      	str	r2, [sp, #52]	; 0x34
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80057d4:	785b      	ldrb	r3, [r3, #1]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1c2      	bne.n	8005760 <_strtod_l+0x40>
 80057da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057dc:	961b      	str	r6, [sp, #108]	; 0x6c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f040 8579 	bne.w	80062d6 <_strtod_l+0xbb6>
 80057e4:	4652      	mov	r2, sl
 80057e6:	465b      	mov	r3, fp
 80057e8:	e7e2      	b.n	80057b0 <_strtod_l+0x90>
 80057ea:	2200      	movs	r2, #0
 80057ec:	e7ef      	b.n	80057ce <_strtod_l+0xae>
 80057ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80057f0:	b13a      	cbz	r2, 8005802 <_strtod_l+0xe2>
 80057f2:	2135      	movs	r1, #53	; 0x35
 80057f4:	a81e      	add	r0, sp, #120	; 0x78
 80057f6:	f001 fca3 	bl	8007140 <__copybits>
 80057fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80057fc:	4648      	mov	r0, r9
 80057fe:	f001 f910 	bl	8006a22 <_Bfree>
 8005802:	3c01      	subs	r4, #1
 8005804:	2c04      	cmp	r4, #4
 8005806:	d806      	bhi.n	8005816 <_strtod_l+0xf6>
 8005808:	e8df f004 	tbb	[pc, r4]
 800580c:	1714030a 	.word	0x1714030a
 8005810:	0a          	.byte	0x0a
 8005811:	00          	.byte	0x00
 8005812:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005816:	0730      	lsls	r0, r6, #28
 8005818:	d5c1      	bpl.n	800579e <_strtod_l+0x7e>
 800581a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800581e:	e7be      	b.n	800579e <_strtod_l+0x7e>
 8005820:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005824:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005826:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800582a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800582e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005832:	e7f0      	b.n	8005816 <_strtod_l+0xf6>
 8005834:	f8df b170 	ldr.w	fp, [pc, #368]	; 80059a8 <_strtod_l+0x288>
 8005838:	e7ed      	b.n	8005816 <_strtod_l+0xf6>
 800583a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800583e:	f04f 3aff 	mov.w	sl, #4294967295
 8005842:	e7e8      	b.n	8005816 <_strtod_l+0xf6>
 8005844:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	921b      	str	r2, [sp, #108]	; 0x6c
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	2b30      	cmp	r3, #48	; 0x30
 800584e:	d0f9      	beq.n	8005844 <_strtod_l+0x124>
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0a4      	beq.n	800579e <_strtod_l+0x7e>
 8005854:	2301      	movs	r3, #1
 8005856:	2500      	movs	r5, #0
 8005858:	9306      	str	r3, [sp, #24]
 800585a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800585c:	9308      	str	r3, [sp, #32]
 800585e:	9507      	str	r5, [sp, #28]
 8005860:	9505      	str	r5, [sp, #20]
 8005862:	220a      	movs	r2, #10
 8005864:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005866:	7807      	ldrb	r7, [r0, #0]
 8005868:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800586c:	b2d9      	uxtb	r1, r3
 800586e:	2909      	cmp	r1, #9
 8005870:	d929      	bls.n	80058c6 <_strtod_l+0x1a6>
 8005872:	4622      	mov	r2, r4
 8005874:	f8d8 1000 	ldr.w	r1, [r8]
 8005878:	f001 fd16 	bl	80072a8 <strncmp>
 800587c:	2800      	cmp	r0, #0
 800587e:	d031      	beq.n	80058e4 <_strtod_l+0x1c4>
 8005880:	2000      	movs	r0, #0
 8005882:	9c05      	ldr	r4, [sp, #20]
 8005884:	9004      	str	r0, [sp, #16]
 8005886:	463b      	mov	r3, r7
 8005888:	4602      	mov	r2, r0
 800588a:	2b65      	cmp	r3, #101	; 0x65
 800588c:	d001      	beq.n	8005892 <_strtod_l+0x172>
 800588e:	2b45      	cmp	r3, #69	; 0x45
 8005890:	d114      	bne.n	80058bc <_strtod_l+0x19c>
 8005892:	b924      	cbnz	r4, 800589e <_strtod_l+0x17e>
 8005894:	b910      	cbnz	r0, 800589c <_strtod_l+0x17c>
 8005896:	9b06      	ldr	r3, [sp, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d09e      	beq.n	80057da <_strtod_l+0xba>
 800589c:	2400      	movs	r4, #0
 800589e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80058a0:	1c73      	adds	r3, r6, #1
 80058a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80058a4:	7873      	ldrb	r3, [r6, #1]
 80058a6:	2b2b      	cmp	r3, #43	; 0x2b
 80058a8:	d078      	beq.n	800599c <_strtod_l+0x27c>
 80058aa:	2b2d      	cmp	r3, #45	; 0x2d
 80058ac:	d070      	beq.n	8005990 <_strtod_l+0x270>
 80058ae:	f04f 0c00 	mov.w	ip, #0
 80058b2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80058b6:	2f09      	cmp	r7, #9
 80058b8:	d97c      	bls.n	80059b4 <_strtod_l+0x294>
 80058ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80058bc:	f04f 0e00 	mov.w	lr, #0
 80058c0:	e09a      	b.n	80059f8 <_strtod_l+0x2d8>
 80058c2:	2300      	movs	r3, #0
 80058c4:	e7c7      	b.n	8005856 <_strtod_l+0x136>
 80058c6:	9905      	ldr	r1, [sp, #20]
 80058c8:	2908      	cmp	r1, #8
 80058ca:	bfdd      	ittte	le
 80058cc:	9907      	ldrle	r1, [sp, #28]
 80058ce:	fb02 3301 	mlale	r3, r2, r1, r3
 80058d2:	9307      	strle	r3, [sp, #28]
 80058d4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80058d8:	9b05      	ldr	r3, [sp, #20]
 80058da:	3001      	adds	r0, #1
 80058dc:	3301      	adds	r3, #1
 80058de:	9305      	str	r3, [sp, #20]
 80058e0:	901b      	str	r0, [sp, #108]	; 0x6c
 80058e2:	e7bf      	b.n	8005864 <_strtod_l+0x144>
 80058e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058e6:	191a      	adds	r2, r3, r4
 80058e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80058ea:	9a05      	ldr	r2, [sp, #20]
 80058ec:	5d1b      	ldrb	r3, [r3, r4]
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	d037      	beq.n	8005962 <_strtod_l+0x242>
 80058f2:	9c05      	ldr	r4, [sp, #20]
 80058f4:	4602      	mov	r2, r0
 80058f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80058fa:	2909      	cmp	r1, #9
 80058fc:	d913      	bls.n	8005926 <_strtod_l+0x206>
 80058fe:	2101      	movs	r1, #1
 8005900:	9104      	str	r1, [sp, #16]
 8005902:	e7c2      	b.n	800588a <_strtod_l+0x16a>
 8005904:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	921b      	str	r2, [sp, #108]	; 0x6c
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	3001      	adds	r0, #1
 800590e:	2b30      	cmp	r3, #48	; 0x30
 8005910:	d0f8      	beq.n	8005904 <_strtod_l+0x1e4>
 8005912:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005916:	2a08      	cmp	r2, #8
 8005918:	f200 84e4 	bhi.w	80062e4 <_strtod_l+0xbc4>
 800591c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800591e:	9208      	str	r2, [sp, #32]
 8005920:	4602      	mov	r2, r0
 8005922:	2000      	movs	r0, #0
 8005924:	4604      	mov	r4, r0
 8005926:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800592a:	f100 0101 	add.w	r1, r0, #1
 800592e:	d012      	beq.n	8005956 <_strtod_l+0x236>
 8005930:	440a      	add	r2, r1
 8005932:	eb00 0c04 	add.w	ip, r0, r4
 8005936:	4621      	mov	r1, r4
 8005938:	270a      	movs	r7, #10
 800593a:	458c      	cmp	ip, r1
 800593c:	d113      	bne.n	8005966 <_strtod_l+0x246>
 800593e:	1821      	adds	r1, r4, r0
 8005940:	2908      	cmp	r1, #8
 8005942:	f104 0401 	add.w	r4, r4, #1
 8005946:	4404      	add	r4, r0
 8005948:	dc19      	bgt.n	800597e <_strtod_l+0x25e>
 800594a:	9b07      	ldr	r3, [sp, #28]
 800594c:	210a      	movs	r1, #10
 800594e:	fb01 e303 	mla	r3, r1, r3, lr
 8005952:	9307      	str	r3, [sp, #28]
 8005954:	2100      	movs	r1, #0
 8005956:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005958:	1c58      	adds	r0, r3, #1
 800595a:	901b      	str	r0, [sp, #108]	; 0x6c
 800595c:	785b      	ldrb	r3, [r3, #1]
 800595e:	4608      	mov	r0, r1
 8005960:	e7c9      	b.n	80058f6 <_strtod_l+0x1d6>
 8005962:	9805      	ldr	r0, [sp, #20]
 8005964:	e7d3      	b.n	800590e <_strtod_l+0x1ee>
 8005966:	2908      	cmp	r1, #8
 8005968:	f101 0101 	add.w	r1, r1, #1
 800596c:	dc03      	bgt.n	8005976 <_strtod_l+0x256>
 800596e:	9b07      	ldr	r3, [sp, #28]
 8005970:	437b      	muls	r3, r7
 8005972:	9307      	str	r3, [sp, #28]
 8005974:	e7e1      	b.n	800593a <_strtod_l+0x21a>
 8005976:	2910      	cmp	r1, #16
 8005978:	bfd8      	it	le
 800597a:	437d      	mulle	r5, r7
 800597c:	e7dd      	b.n	800593a <_strtod_l+0x21a>
 800597e:	2c10      	cmp	r4, #16
 8005980:	bfdc      	itt	le
 8005982:	210a      	movle	r1, #10
 8005984:	fb01 e505 	mlale	r5, r1, r5, lr
 8005988:	e7e4      	b.n	8005954 <_strtod_l+0x234>
 800598a:	2301      	movs	r3, #1
 800598c:	9304      	str	r3, [sp, #16]
 800598e:	e781      	b.n	8005894 <_strtod_l+0x174>
 8005990:	f04f 0c01 	mov.w	ip, #1
 8005994:	1cb3      	adds	r3, r6, #2
 8005996:	931b      	str	r3, [sp, #108]	; 0x6c
 8005998:	78b3      	ldrb	r3, [r6, #2]
 800599a:	e78a      	b.n	80058b2 <_strtod_l+0x192>
 800599c:	f04f 0c00 	mov.w	ip, #0
 80059a0:	e7f8      	b.n	8005994 <_strtod_l+0x274>
 80059a2:	bf00      	nop
 80059a4:	08007334 	.word	0x08007334
 80059a8:	7ff00000 	.word	0x7ff00000
 80059ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059ae:	1c5f      	adds	r7, r3, #1
 80059b0:	971b      	str	r7, [sp, #108]	; 0x6c
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b30      	cmp	r3, #48	; 0x30
 80059b6:	d0f9      	beq.n	80059ac <_strtod_l+0x28c>
 80059b8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80059bc:	2f08      	cmp	r7, #8
 80059be:	f63f af7d 	bhi.w	80058bc <_strtod_l+0x19c>
 80059c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80059c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059c8:	930a      	str	r3, [sp, #40]	; 0x28
 80059ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059cc:	1c5f      	adds	r7, r3, #1
 80059ce:	971b      	str	r7, [sp, #108]	; 0x6c
 80059d0:	785b      	ldrb	r3, [r3, #1]
 80059d2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80059d6:	f1b8 0f09 	cmp.w	r8, #9
 80059da:	d937      	bls.n	8005a4c <_strtod_l+0x32c>
 80059dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059de:	1a7f      	subs	r7, r7, r1
 80059e0:	2f08      	cmp	r7, #8
 80059e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80059e6:	dc37      	bgt.n	8005a58 <_strtod_l+0x338>
 80059e8:	45be      	cmp	lr, r7
 80059ea:	bfa8      	it	ge
 80059ec:	46be      	movge	lr, r7
 80059ee:	f1bc 0f00 	cmp.w	ip, #0
 80059f2:	d001      	beq.n	80059f8 <_strtod_l+0x2d8>
 80059f4:	f1ce 0e00 	rsb	lr, lr, #0
 80059f8:	2c00      	cmp	r4, #0
 80059fa:	d151      	bne.n	8005aa0 <_strtod_l+0x380>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	f47f aece 	bne.w	800579e <_strtod_l+0x7e>
 8005a02:	9a06      	ldr	r2, [sp, #24]
 8005a04:	2a00      	cmp	r2, #0
 8005a06:	f47f aeca 	bne.w	800579e <_strtod_l+0x7e>
 8005a0a:	9a04      	ldr	r2, [sp, #16]
 8005a0c:	2a00      	cmp	r2, #0
 8005a0e:	f47f aee4 	bne.w	80057da <_strtod_l+0xba>
 8005a12:	2b4e      	cmp	r3, #78	; 0x4e
 8005a14:	d027      	beq.n	8005a66 <_strtod_l+0x346>
 8005a16:	dc21      	bgt.n	8005a5c <_strtod_l+0x33c>
 8005a18:	2b49      	cmp	r3, #73	; 0x49
 8005a1a:	f47f aede 	bne.w	80057da <_strtod_l+0xba>
 8005a1e:	49a0      	ldr	r1, [pc, #640]	; (8005ca0 <_strtod_l+0x580>)
 8005a20:	a81b      	add	r0, sp, #108	; 0x6c
 8005a22:	f000 ff07 	bl	8006834 <__match>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	f43f aed7 	beq.w	80057da <_strtod_l+0xba>
 8005a2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a2e:	499d      	ldr	r1, [pc, #628]	; (8005ca4 <_strtod_l+0x584>)
 8005a30:	3b01      	subs	r3, #1
 8005a32:	a81b      	add	r0, sp, #108	; 0x6c
 8005a34:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a36:	f000 fefd 	bl	8006834 <__match>
 8005a3a:	b910      	cbnz	r0, 8005a42 <_strtod_l+0x322>
 8005a3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a3e:	3301      	adds	r3, #1
 8005a40:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a42:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005cb8 <_strtod_l+0x598>
 8005a46:	f04f 0a00 	mov.w	sl, #0
 8005a4a:	e6a8      	b.n	800579e <_strtod_l+0x7e>
 8005a4c:	210a      	movs	r1, #10
 8005a4e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005a52:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005a56:	e7b8      	b.n	80059ca <_strtod_l+0x2aa>
 8005a58:	46be      	mov	lr, r7
 8005a5a:	e7c8      	b.n	80059ee <_strtod_l+0x2ce>
 8005a5c:	2b69      	cmp	r3, #105	; 0x69
 8005a5e:	d0de      	beq.n	8005a1e <_strtod_l+0x2fe>
 8005a60:	2b6e      	cmp	r3, #110	; 0x6e
 8005a62:	f47f aeba 	bne.w	80057da <_strtod_l+0xba>
 8005a66:	4990      	ldr	r1, [pc, #576]	; (8005ca8 <_strtod_l+0x588>)
 8005a68:	a81b      	add	r0, sp, #108	; 0x6c
 8005a6a:	f000 fee3 	bl	8006834 <__match>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	f43f aeb3 	beq.w	80057da <_strtod_l+0xba>
 8005a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b28      	cmp	r3, #40	; 0x28
 8005a7a:	d10e      	bne.n	8005a9a <_strtod_l+0x37a>
 8005a7c:	aa1e      	add	r2, sp, #120	; 0x78
 8005a7e:	498b      	ldr	r1, [pc, #556]	; (8005cac <_strtod_l+0x58c>)
 8005a80:	a81b      	add	r0, sp, #108	; 0x6c
 8005a82:	f000 feeb 	bl	800685c <__hexnan>
 8005a86:	2805      	cmp	r0, #5
 8005a88:	d107      	bne.n	8005a9a <_strtod_l+0x37a>
 8005a8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a8c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005a90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005a94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005a98:	e681      	b.n	800579e <_strtod_l+0x7e>
 8005a9a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005cc0 <_strtod_l+0x5a0>
 8005a9e:	e7d2      	b.n	8005a46 <_strtod_l+0x326>
 8005aa0:	ebae 0302 	sub.w	r3, lr, r2
 8005aa4:	9306      	str	r3, [sp, #24]
 8005aa6:	9b05      	ldr	r3, [sp, #20]
 8005aa8:	9807      	ldr	r0, [sp, #28]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	bf08      	it	eq
 8005aae:	4623      	moveq	r3, r4
 8005ab0:	2c10      	cmp	r4, #16
 8005ab2:	9305      	str	r3, [sp, #20]
 8005ab4:	46a0      	mov	r8, r4
 8005ab6:	bfa8      	it	ge
 8005ab8:	f04f 0810 	movge.w	r8, #16
 8005abc:	f7fa fcce 	bl	800045c <__aeabi_ui2d>
 8005ac0:	2c09      	cmp	r4, #9
 8005ac2:	4682      	mov	sl, r0
 8005ac4:	468b      	mov	fp, r1
 8005ac6:	dc13      	bgt.n	8005af0 <_strtod_l+0x3d0>
 8005ac8:	9b06      	ldr	r3, [sp, #24]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f43f ae67 	beq.w	800579e <_strtod_l+0x7e>
 8005ad0:	9b06      	ldr	r3, [sp, #24]
 8005ad2:	dd7a      	ble.n	8005bca <_strtod_l+0x4aa>
 8005ad4:	2b16      	cmp	r3, #22
 8005ad6:	dc61      	bgt.n	8005b9c <_strtod_l+0x47c>
 8005ad8:	4a75      	ldr	r2, [pc, #468]	; (8005cb0 <_strtod_l+0x590>)
 8005ada:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005ade:	e9de 0100 	ldrd	r0, r1, [lr]
 8005ae2:	4652      	mov	r2, sl
 8005ae4:	465b      	mov	r3, fp
 8005ae6:	f7fa fd33 	bl	8000550 <__aeabi_dmul>
 8005aea:	4682      	mov	sl, r0
 8005aec:	468b      	mov	fp, r1
 8005aee:	e656      	b.n	800579e <_strtod_l+0x7e>
 8005af0:	4b6f      	ldr	r3, [pc, #444]	; (8005cb0 <_strtod_l+0x590>)
 8005af2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005af6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005afa:	f7fa fd29 	bl	8000550 <__aeabi_dmul>
 8005afe:	4606      	mov	r6, r0
 8005b00:	4628      	mov	r0, r5
 8005b02:	460f      	mov	r7, r1
 8005b04:	f7fa fcaa 	bl	800045c <__aeabi_ui2d>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	4639      	mov	r1, r7
 8005b10:	f7fa fb68 	bl	80001e4 <__adddf3>
 8005b14:	2c0f      	cmp	r4, #15
 8005b16:	4682      	mov	sl, r0
 8005b18:	468b      	mov	fp, r1
 8005b1a:	ddd5      	ble.n	8005ac8 <_strtod_l+0x3a8>
 8005b1c:	9b06      	ldr	r3, [sp, #24]
 8005b1e:	eba4 0808 	sub.w	r8, r4, r8
 8005b22:	4498      	add	r8, r3
 8005b24:	f1b8 0f00 	cmp.w	r8, #0
 8005b28:	f340 8096 	ble.w	8005c58 <_strtod_l+0x538>
 8005b2c:	f018 030f 	ands.w	r3, r8, #15
 8005b30:	d00a      	beq.n	8005b48 <_strtod_l+0x428>
 8005b32:	495f      	ldr	r1, [pc, #380]	; (8005cb0 <_strtod_l+0x590>)
 8005b34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b38:	4652      	mov	r2, sl
 8005b3a:	465b      	mov	r3, fp
 8005b3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b40:	f7fa fd06 	bl	8000550 <__aeabi_dmul>
 8005b44:	4682      	mov	sl, r0
 8005b46:	468b      	mov	fp, r1
 8005b48:	f038 080f 	bics.w	r8, r8, #15
 8005b4c:	d073      	beq.n	8005c36 <_strtod_l+0x516>
 8005b4e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005b52:	dd47      	ble.n	8005be4 <_strtod_l+0x4c4>
 8005b54:	2400      	movs	r4, #0
 8005b56:	46a0      	mov	r8, r4
 8005b58:	9407      	str	r4, [sp, #28]
 8005b5a:	9405      	str	r4, [sp, #20]
 8005b5c:	2322      	movs	r3, #34	; 0x22
 8005b5e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005cb8 <_strtod_l+0x598>
 8005b62:	f8c9 3000 	str.w	r3, [r9]
 8005b66:	f04f 0a00 	mov.w	sl, #0
 8005b6a:	9b07      	ldr	r3, [sp, #28]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f43f ae16 	beq.w	800579e <_strtod_l+0x7e>
 8005b72:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b74:	4648      	mov	r0, r9
 8005b76:	f000 ff54 	bl	8006a22 <_Bfree>
 8005b7a:	9905      	ldr	r1, [sp, #20]
 8005b7c:	4648      	mov	r0, r9
 8005b7e:	f000 ff50 	bl	8006a22 <_Bfree>
 8005b82:	4641      	mov	r1, r8
 8005b84:	4648      	mov	r0, r9
 8005b86:	f000 ff4c 	bl	8006a22 <_Bfree>
 8005b8a:	9907      	ldr	r1, [sp, #28]
 8005b8c:	4648      	mov	r0, r9
 8005b8e:	f000 ff48 	bl	8006a22 <_Bfree>
 8005b92:	4621      	mov	r1, r4
 8005b94:	4648      	mov	r0, r9
 8005b96:	f000 ff44 	bl	8006a22 <_Bfree>
 8005b9a:	e600      	b.n	800579e <_strtod_l+0x7e>
 8005b9c:	9a06      	ldr	r2, [sp, #24]
 8005b9e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	dbba      	blt.n	8005b1c <_strtod_l+0x3fc>
 8005ba6:	4d42      	ldr	r5, [pc, #264]	; (8005cb0 <_strtod_l+0x590>)
 8005ba8:	f1c4 040f 	rsb	r4, r4, #15
 8005bac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005bb0:	4652      	mov	r2, sl
 8005bb2:	465b      	mov	r3, fp
 8005bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bb8:	f7fa fcca 	bl	8000550 <__aeabi_dmul>
 8005bbc:	9b06      	ldr	r3, [sp, #24]
 8005bbe:	1b1c      	subs	r4, r3, r4
 8005bc0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005bc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bc8:	e78d      	b.n	8005ae6 <_strtod_l+0x3c6>
 8005bca:	f113 0f16 	cmn.w	r3, #22
 8005bce:	dba5      	blt.n	8005b1c <_strtod_l+0x3fc>
 8005bd0:	4a37      	ldr	r2, [pc, #220]	; (8005cb0 <_strtod_l+0x590>)
 8005bd2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005bd6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005bda:	4650      	mov	r0, sl
 8005bdc:	4659      	mov	r1, fp
 8005bde:	f7fa fde1 	bl	80007a4 <__aeabi_ddiv>
 8005be2:	e782      	b.n	8005aea <_strtod_l+0x3ca>
 8005be4:	2300      	movs	r3, #0
 8005be6:	4e33      	ldr	r6, [pc, #204]	; (8005cb4 <_strtod_l+0x594>)
 8005be8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005bec:	4650      	mov	r0, sl
 8005bee:	4659      	mov	r1, fp
 8005bf0:	461d      	mov	r5, r3
 8005bf2:	f1b8 0f01 	cmp.w	r8, #1
 8005bf6:	dc21      	bgt.n	8005c3c <_strtod_l+0x51c>
 8005bf8:	b10b      	cbz	r3, 8005bfe <_strtod_l+0x4de>
 8005bfa:	4682      	mov	sl, r0
 8005bfc:	468b      	mov	fp, r1
 8005bfe:	4b2d      	ldr	r3, [pc, #180]	; (8005cb4 <_strtod_l+0x594>)
 8005c00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005c04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005c08:	4652      	mov	r2, sl
 8005c0a:	465b      	mov	r3, fp
 8005c0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005c10:	f7fa fc9e 	bl	8000550 <__aeabi_dmul>
 8005c14:	4b28      	ldr	r3, [pc, #160]	; (8005cb8 <_strtod_l+0x598>)
 8005c16:	460a      	mov	r2, r1
 8005c18:	400b      	ands	r3, r1
 8005c1a:	4928      	ldr	r1, [pc, #160]	; (8005cbc <_strtod_l+0x59c>)
 8005c1c:	428b      	cmp	r3, r1
 8005c1e:	4682      	mov	sl, r0
 8005c20:	d898      	bhi.n	8005b54 <_strtod_l+0x434>
 8005c22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005c26:	428b      	cmp	r3, r1
 8005c28:	bf86      	itte	hi
 8005c2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005cc4 <_strtod_l+0x5a4>
 8005c2e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005c32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005c36:	2300      	movs	r3, #0
 8005c38:	9304      	str	r3, [sp, #16]
 8005c3a:	e077      	b.n	8005d2c <_strtod_l+0x60c>
 8005c3c:	f018 0f01 	tst.w	r8, #1
 8005c40:	d006      	beq.n	8005c50 <_strtod_l+0x530>
 8005c42:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	f7fa fc81 	bl	8000550 <__aeabi_dmul>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	3501      	adds	r5, #1
 8005c52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005c56:	e7cc      	b.n	8005bf2 <_strtod_l+0x4d2>
 8005c58:	d0ed      	beq.n	8005c36 <_strtod_l+0x516>
 8005c5a:	f1c8 0800 	rsb	r8, r8, #0
 8005c5e:	f018 020f 	ands.w	r2, r8, #15
 8005c62:	d00a      	beq.n	8005c7a <_strtod_l+0x55a>
 8005c64:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <_strtod_l+0x590>)
 8005c66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c6a:	4650      	mov	r0, sl
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c72:	f7fa fd97 	bl	80007a4 <__aeabi_ddiv>
 8005c76:	4682      	mov	sl, r0
 8005c78:	468b      	mov	fp, r1
 8005c7a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005c7e:	d0da      	beq.n	8005c36 <_strtod_l+0x516>
 8005c80:	f1b8 0f1f 	cmp.w	r8, #31
 8005c84:	dd20      	ble.n	8005cc8 <_strtod_l+0x5a8>
 8005c86:	2400      	movs	r4, #0
 8005c88:	46a0      	mov	r8, r4
 8005c8a:	9407      	str	r4, [sp, #28]
 8005c8c:	9405      	str	r4, [sp, #20]
 8005c8e:	2322      	movs	r3, #34	; 0x22
 8005c90:	f04f 0a00 	mov.w	sl, #0
 8005c94:	f04f 0b00 	mov.w	fp, #0
 8005c98:	f8c9 3000 	str.w	r3, [r9]
 8005c9c:	e765      	b.n	8005b6a <_strtod_l+0x44a>
 8005c9e:	bf00      	nop
 8005ca0:	08007328 	.word	0x08007328
 8005ca4:	0800732b 	.word	0x0800732b
 8005ca8:	08007331 	.word	0x08007331
 8005cac:	08007348 	.word	0x08007348
 8005cb0:	080073c0 	.word	0x080073c0
 8005cb4:	08007398 	.word	0x08007398
 8005cb8:	7ff00000 	.word	0x7ff00000
 8005cbc:	7ca00000 	.word	0x7ca00000
 8005cc0:	fff80000 	.word	0xfff80000
 8005cc4:	7fefffff 	.word	0x7fefffff
 8005cc8:	f018 0310 	ands.w	r3, r8, #16
 8005ccc:	bf18      	it	ne
 8005cce:	236a      	movne	r3, #106	; 0x6a
 8005cd0:	4da0      	ldr	r5, [pc, #640]	; (8005f54 <_strtod_l+0x834>)
 8005cd2:	9304      	str	r3, [sp, #16]
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	4659      	mov	r1, fp
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f1b8 0f00 	cmp.w	r8, #0
 8005cde:	f300 810a 	bgt.w	8005ef6 <_strtod_l+0x7d6>
 8005ce2:	b10b      	cbz	r3, 8005ce8 <_strtod_l+0x5c8>
 8005ce4:	4682      	mov	sl, r0
 8005ce6:	468b      	mov	fp, r1
 8005ce8:	9b04      	ldr	r3, [sp, #16]
 8005cea:	b1bb      	cbz	r3, 8005d1c <_strtod_l+0x5fc>
 8005cec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005cf0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	4659      	mov	r1, fp
 8005cf8:	dd10      	ble.n	8005d1c <_strtod_l+0x5fc>
 8005cfa:	2b1f      	cmp	r3, #31
 8005cfc:	f340 8107 	ble.w	8005f0e <_strtod_l+0x7ee>
 8005d00:	2b34      	cmp	r3, #52	; 0x34
 8005d02:	bfde      	ittt	le
 8005d04:	3b20      	suble	r3, #32
 8005d06:	f04f 32ff 	movle.w	r2, #4294967295
 8005d0a:	fa02 f303 	lslle.w	r3, r2, r3
 8005d0e:	f04f 0a00 	mov.w	sl, #0
 8005d12:	bfcc      	ite	gt
 8005d14:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005d18:	ea03 0b01 	andle.w	fp, r3, r1
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2300      	movs	r3, #0
 8005d20:	4650      	mov	r0, sl
 8005d22:	4659      	mov	r1, fp
 8005d24:	f7fa fe7c 	bl	8000a20 <__aeabi_dcmpeq>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d1ac      	bne.n	8005c86 <_strtod_l+0x566>
 8005d2c:	9b07      	ldr	r3, [sp, #28]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	9a05      	ldr	r2, [sp, #20]
 8005d32:	9908      	ldr	r1, [sp, #32]
 8005d34:	4623      	mov	r3, r4
 8005d36:	4648      	mov	r0, r9
 8005d38:	f000 fec5 	bl	8006ac6 <__s2b>
 8005d3c:	9007      	str	r0, [sp, #28]
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	f43f af08 	beq.w	8005b54 <_strtod_l+0x434>
 8005d44:	9a06      	ldr	r2, [sp, #24]
 8005d46:	9b06      	ldr	r3, [sp, #24]
 8005d48:	2a00      	cmp	r2, #0
 8005d4a:	f1c3 0300 	rsb	r3, r3, #0
 8005d4e:	bfa8      	it	ge
 8005d50:	2300      	movge	r3, #0
 8005d52:	930e      	str	r3, [sp, #56]	; 0x38
 8005d54:	2400      	movs	r4, #0
 8005d56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005d5a:	9316      	str	r3, [sp, #88]	; 0x58
 8005d5c:	46a0      	mov	r8, r4
 8005d5e:	9b07      	ldr	r3, [sp, #28]
 8005d60:	4648      	mov	r0, r9
 8005d62:	6859      	ldr	r1, [r3, #4]
 8005d64:	f000 fe29 	bl	80069ba <_Balloc>
 8005d68:	9005      	str	r0, [sp, #20]
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	f43f aef6 	beq.w	8005b5c <_strtod_l+0x43c>
 8005d70:	9b07      	ldr	r3, [sp, #28]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	3202      	adds	r2, #2
 8005d76:	f103 010c 	add.w	r1, r3, #12
 8005d7a:	0092      	lsls	r2, r2, #2
 8005d7c:	300c      	adds	r0, #12
 8005d7e:	f000 fe11 	bl	80069a4 <memcpy>
 8005d82:	aa1e      	add	r2, sp, #120	; 0x78
 8005d84:	a91d      	add	r1, sp, #116	; 0x74
 8005d86:	ec4b ab10 	vmov	d0, sl, fp
 8005d8a:	4648      	mov	r0, r9
 8005d8c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005d90:	f001 f954 	bl	800703c <__d2b>
 8005d94:	901c      	str	r0, [sp, #112]	; 0x70
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f43f aee0 	beq.w	8005b5c <_strtod_l+0x43c>
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4648      	mov	r0, r9
 8005da0:	f000 ff1d 	bl	8006bde <__i2b>
 8005da4:	4680      	mov	r8, r0
 8005da6:	2800      	cmp	r0, #0
 8005da8:	f43f aed8 	beq.w	8005b5c <_strtod_l+0x43c>
 8005dac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005dae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005db0:	2e00      	cmp	r6, #0
 8005db2:	bfab      	itete	ge
 8005db4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005db6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005db8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005dba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005dbc:	bfac      	ite	ge
 8005dbe:	18f7      	addge	r7, r6, r3
 8005dc0:	1b9d      	sublt	r5, r3, r6
 8005dc2:	9b04      	ldr	r3, [sp, #16]
 8005dc4:	1af6      	subs	r6, r6, r3
 8005dc6:	4416      	add	r6, r2
 8005dc8:	4b63      	ldr	r3, [pc, #396]	; (8005f58 <_strtod_l+0x838>)
 8005dca:	3e01      	subs	r6, #1
 8005dcc:	429e      	cmp	r6, r3
 8005dce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005dd2:	f280 80af 	bge.w	8005f34 <_strtod_l+0x814>
 8005dd6:	1b9b      	subs	r3, r3, r6
 8005dd8:	2b1f      	cmp	r3, #31
 8005dda:	eba2 0203 	sub.w	r2, r2, r3
 8005dde:	f04f 0101 	mov.w	r1, #1
 8005de2:	f300 809b 	bgt.w	8005f1c <_strtod_l+0x7fc>
 8005de6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dea:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dec:	2300      	movs	r3, #0
 8005dee:	930a      	str	r3, [sp, #40]	; 0x28
 8005df0:	18be      	adds	r6, r7, r2
 8005df2:	9b04      	ldr	r3, [sp, #16]
 8005df4:	42b7      	cmp	r7, r6
 8005df6:	4415      	add	r5, r2
 8005df8:	441d      	add	r5, r3
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	bfa8      	it	ge
 8005dfe:	4633      	movge	r3, r6
 8005e00:	42ab      	cmp	r3, r5
 8005e02:	bfa8      	it	ge
 8005e04:	462b      	movge	r3, r5
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bfc2      	ittt	gt
 8005e0a:	1af6      	subgt	r6, r6, r3
 8005e0c:	1aed      	subgt	r5, r5, r3
 8005e0e:	1aff      	subgt	r7, r7, r3
 8005e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e12:	b1bb      	cbz	r3, 8005e44 <_strtod_l+0x724>
 8005e14:	4641      	mov	r1, r8
 8005e16:	461a      	mov	r2, r3
 8005e18:	4648      	mov	r0, r9
 8005e1a:	f000 ff7f 	bl	8006d1c <__pow5mult>
 8005e1e:	4680      	mov	r8, r0
 8005e20:	2800      	cmp	r0, #0
 8005e22:	f43f ae9b 	beq.w	8005b5c <_strtod_l+0x43c>
 8005e26:	4601      	mov	r1, r0
 8005e28:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005e2a:	4648      	mov	r0, r9
 8005e2c:	f000 fee0 	bl	8006bf0 <__multiply>
 8005e30:	900c      	str	r0, [sp, #48]	; 0x30
 8005e32:	2800      	cmp	r0, #0
 8005e34:	f43f ae92 	beq.w	8005b5c <_strtod_l+0x43c>
 8005e38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005e3a:	4648      	mov	r0, r9
 8005e3c:	f000 fdf1 	bl	8006a22 <_Bfree>
 8005e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e42:	931c      	str	r3, [sp, #112]	; 0x70
 8005e44:	2e00      	cmp	r6, #0
 8005e46:	dc7a      	bgt.n	8005f3e <_strtod_l+0x81e>
 8005e48:	9b06      	ldr	r3, [sp, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	dd08      	ble.n	8005e60 <_strtod_l+0x740>
 8005e4e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005e50:	9905      	ldr	r1, [sp, #20]
 8005e52:	4648      	mov	r0, r9
 8005e54:	f000 ff62 	bl	8006d1c <__pow5mult>
 8005e58:	9005      	str	r0, [sp, #20]
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	f43f ae7e 	beq.w	8005b5c <_strtod_l+0x43c>
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	dd08      	ble.n	8005e76 <_strtod_l+0x756>
 8005e64:	462a      	mov	r2, r5
 8005e66:	9905      	ldr	r1, [sp, #20]
 8005e68:	4648      	mov	r0, r9
 8005e6a:	f000 ffa5 	bl	8006db8 <__lshift>
 8005e6e:	9005      	str	r0, [sp, #20]
 8005e70:	2800      	cmp	r0, #0
 8005e72:	f43f ae73 	beq.w	8005b5c <_strtod_l+0x43c>
 8005e76:	2f00      	cmp	r7, #0
 8005e78:	dd08      	ble.n	8005e8c <_strtod_l+0x76c>
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	463a      	mov	r2, r7
 8005e7e:	4648      	mov	r0, r9
 8005e80:	f000 ff9a 	bl	8006db8 <__lshift>
 8005e84:	4680      	mov	r8, r0
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f43f ae68 	beq.w	8005b5c <_strtod_l+0x43c>
 8005e8c:	9a05      	ldr	r2, [sp, #20]
 8005e8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005e90:	4648      	mov	r0, r9
 8005e92:	f000 ffff 	bl	8006e94 <__mdiff>
 8005e96:	4604      	mov	r4, r0
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	f43f ae5f 	beq.w	8005b5c <_strtod_l+0x43c>
 8005e9e:	68c3      	ldr	r3, [r0, #12]
 8005ea0:	930c      	str	r3, [sp, #48]	; 0x30
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60c3      	str	r3, [r0, #12]
 8005ea6:	4641      	mov	r1, r8
 8005ea8:	f000 ffda 	bl	8006e60 <__mcmp>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	da55      	bge.n	8005f5c <_strtod_l+0x83c>
 8005eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005eb2:	b9e3      	cbnz	r3, 8005eee <_strtod_l+0x7ce>
 8005eb4:	f1ba 0f00 	cmp.w	sl, #0
 8005eb8:	d119      	bne.n	8005eee <_strtod_l+0x7ce>
 8005eba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ebe:	b9b3      	cbnz	r3, 8005eee <_strtod_l+0x7ce>
 8005ec0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ec4:	0d1b      	lsrs	r3, r3, #20
 8005ec6:	051b      	lsls	r3, r3, #20
 8005ec8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005ecc:	d90f      	bls.n	8005eee <_strtod_l+0x7ce>
 8005ece:	6963      	ldr	r3, [r4, #20]
 8005ed0:	b913      	cbnz	r3, 8005ed8 <_strtod_l+0x7b8>
 8005ed2:	6923      	ldr	r3, [r4, #16]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	dd0a      	ble.n	8005eee <_strtod_l+0x7ce>
 8005ed8:	4621      	mov	r1, r4
 8005eda:	2201      	movs	r2, #1
 8005edc:	4648      	mov	r0, r9
 8005ede:	f000 ff6b 	bl	8006db8 <__lshift>
 8005ee2:	4641      	mov	r1, r8
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	f000 ffbb 	bl	8006e60 <__mcmp>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	dc67      	bgt.n	8005fbe <_strtod_l+0x89e>
 8005eee:	9b04      	ldr	r3, [sp, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d171      	bne.n	8005fd8 <_strtod_l+0x8b8>
 8005ef4:	e63d      	b.n	8005b72 <_strtod_l+0x452>
 8005ef6:	f018 0f01 	tst.w	r8, #1
 8005efa:	d004      	beq.n	8005f06 <_strtod_l+0x7e6>
 8005efc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f00:	f7fa fb26 	bl	8000550 <__aeabi_dmul>
 8005f04:	2301      	movs	r3, #1
 8005f06:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005f0a:	3508      	adds	r5, #8
 8005f0c:	e6e5      	b.n	8005cda <_strtod_l+0x5ba>
 8005f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	ea03 0a0a 	and.w	sl, r3, sl
 8005f1a:	e6ff      	b.n	8005d1c <_strtod_l+0x5fc>
 8005f1c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005f20:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005f24:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005f28:	36e2      	adds	r6, #226	; 0xe2
 8005f2a:	fa01 f306 	lsl.w	r3, r1, r6
 8005f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f30:	910f      	str	r1, [sp, #60]	; 0x3c
 8005f32:	e75d      	b.n	8005df0 <_strtod_l+0x6d0>
 8005f34:	2300      	movs	r3, #0
 8005f36:	930a      	str	r3, [sp, #40]	; 0x28
 8005f38:	2301      	movs	r3, #1
 8005f3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f3c:	e758      	b.n	8005df0 <_strtod_l+0x6d0>
 8005f3e:	4632      	mov	r2, r6
 8005f40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f42:	4648      	mov	r0, r9
 8005f44:	f000 ff38 	bl	8006db8 <__lshift>
 8005f48:	901c      	str	r0, [sp, #112]	; 0x70
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	f47f af7c 	bne.w	8005e48 <_strtod_l+0x728>
 8005f50:	e604      	b.n	8005b5c <_strtod_l+0x43c>
 8005f52:	bf00      	nop
 8005f54:	08007360 	.word	0x08007360
 8005f58:	fffffc02 	.word	0xfffffc02
 8005f5c:	465d      	mov	r5, fp
 8005f5e:	f040 8086 	bne.w	800606e <_strtod_l+0x94e>
 8005f62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f68:	b32a      	cbz	r2, 8005fb6 <_strtod_l+0x896>
 8005f6a:	4aaf      	ldr	r2, [pc, #700]	; (8006228 <_strtod_l+0xb08>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d153      	bne.n	8006018 <_strtod_l+0x8f8>
 8005f70:	9b04      	ldr	r3, [sp, #16]
 8005f72:	4650      	mov	r0, sl
 8005f74:	b1d3      	cbz	r3, 8005fac <_strtod_l+0x88c>
 8005f76:	4aad      	ldr	r2, [pc, #692]	; (800622c <_strtod_l+0xb0c>)
 8005f78:	402a      	ands	r2, r5
 8005f7a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8005f82:	d816      	bhi.n	8005fb2 <_strtod_l+0x892>
 8005f84:	0d12      	lsrs	r2, r2, #20
 8005f86:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8e:	4298      	cmp	r0, r3
 8005f90:	d142      	bne.n	8006018 <_strtod_l+0x8f8>
 8005f92:	4ba7      	ldr	r3, [pc, #668]	; (8006230 <_strtod_l+0xb10>)
 8005f94:	429d      	cmp	r5, r3
 8005f96:	d102      	bne.n	8005f9e <_strtod_l+0x87e>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	f43f addf 	beq.w	8005b5c <_strtod_l+0x43c>
 8005f9e:	4ba3      	ldr	r3, [pc, #652]	; (800622c <_strtod_l+0xb0c>)
 8005fa0:	402b      	ands	r3, r5
 8005fa2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005fa6:	f04f 0a00 	mov.w	sl, #0
 8005faa:	e7a0      	b.n	8005eee <_strtod_l+0x7ce>
 8005fac:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb0:	e7ed      	b.n	8005f8e <_strtod_l+0x86e>
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	e7eb      	b.n	8005f8e <_strtod_l+0x86e>
 8005fb6:	bb7b      	cbnz	r3, 8006018 <_strtod_l+0x8f8>
 8005fb8:	f1ba 0f00 	cmp.w	sl, #0
 8005fbc:	d12c      	bne.n	8006018 <_strtod_l+0x8f8>
 8005fbe:	9904      	ldr	r1, [sp, #16]
 8005fc0:	4a9a      	ldr	r2, [pc, #616]	; (800622c <_strtod_l+0xb0c>)
 8005fc2:	465b      	mov	r3, fp
 8005fc4:	b1f1      	cbz	r1, 8006004 <_strtod_l+0x8e4>
 8005fc6:	ea02 010b 	and.w	r1, r2, fp
 8005fca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005fce:	dc19      	bgt.n	8006004 <_strtod_l+0x8e4>
 8005fd0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005fd4:	f77f ae5b 	ble.w	8005c8e <_strtod_l+0x56e>
 8005fd8:	4a96      	ldr	r2, [pc, #600]	; (8006234 <_strtod_l+0xb14>)
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	4659      	mov	r1, fp
 8005fe4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005fe8:	f7fa fab2 	bl	8000550 <__aeabi_dmul>
 8005fec:	4682      	mov	sl, r0
 8005fee:	468b      	mov	fp, r1
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	f47f adbe 	bne.w	8005b72 <_strtod_l+0x452>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	f47f adbb 	bne.w	8005b72 <_strtod_l+0x452>
 8005ffc:	2322      	movs	r3, #34	; 0x22
 8005ffe:	f8c9 3000 	str.w	r3, [r9]
 8006002:	e5b6      	b.n	8005b72 <_strtod_l+0x452>
 8006004:	4013      	ands	r3, r2
 8006006:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800600a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800600e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006012:	f04f 3aff 	mov.w	sl, #4294967295
 8006016:	e76a      	b.n	8005eee <_strtod_l+0x7ce>
 8006018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800601a:	b193      	cbz	r3, 8006042 <_strtod_l+0x922>
 800601c:	422b      	tst	r3, r5
 800601e:	f43f af66 	beq.w	8005eee <_strtod_l+0x7ce>
 8006022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006024:	9a04      	ldr	r2, [sp, #16]
 8006026:	4650      	mov	r0, sl
 8006028:	4659      	mov	r1, fp
 800602a:	b173      	cbz	r3, 800604a <_strtod_l+0x92a>
 800602c:	f7ff fb5c 	bl	80056e8 <sulp>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006038:	f7fa f8d4 	bl	80001e4 <__adddf3>
 800603c:	4682      	mov	sl, r0
 800603e:	468b      	mov	fp, r1
 8006040:	e755      	b.n	8005eee <_strtod_l+0x7ce>
 8006042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006044:	ea13 0f0a 	tst.w	r3, sl
 8006048:	e7e9      	b.n	800601e <_strtod_l+0x8fe>
 800604a:	f7ff fb4d 	bl	80056e8 <sulp>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006056:	f7fa f8c3 	bl	80001e0 <__aeabi_dsub>
 800605a:	2200      	movs	r2, #0
 800605c:	2300      	movs	r3, #0
 800605e:	4682      	mov	sl, r0
 8006060:	468b      	mov	fp, r1
 8006062:	f7fa fcdd 	bl	8000a20 <__aeabi_dcmpeq>
 8006066:	2800      	cmp	r0, #0
 8006068:	f47f ae11 	bne.w	8005c8e <_strtod_l+0x56e>
 800606c:	e73f      	b.n	8005eee <_strtod_l+0x7ce>
 800606e:	4641      	mov	r1, r8
 8006070:	4620      	mov	r0, r4
 8006072:	f001 f832 	bl	80070da <__ratio>
 8006076:	ec57 6b10 	vmov	r6, r7, d0
 800607a:	2200      	movs	r2, #0
 800607c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006080:	ee10 0a10 	vmov	r0, s0
 8006084:	4639      	mov	r1, r7
 8006086:	f7fa fcdf 	bl	8000a48 <__aeabi_dcmple>
 800608a:	2800      	cmp	r0, #0
 800608c:	d077      	beq.n	800617e <_strtod_l+0xa5e>
 800608e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006090:	2b00      	cmp	r3, #0
 8006092:	d04a      	beq.n	800612a <_strtod_l+0xa0a>
 8006094:	4b68      	ldr	r3, [pc, #416]	; (8006238 <_strtod_l+0xb18>)
 8006096:	2200      	movs	r2, #0
 8006098:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800609c:	4f66      	ldr	r7, [pc, #408]	; (8006238 <_strtod_l+0xb18>)
 800609e:	2600      	movs	r6, #0
 80060a0:	4b62      	ldr	r3, [pc, #392]	; (800622c <_strtod_l+0xb0c>)
 80060a2:	402b      	ands	r3, r5
 80060a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80060a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060a8:	4b64      	ldr	r3, [pc, #400]	; (800623c <_strtod_l+0xb1c>)
 80060aa:	429a      	cmp	r2, r3
 80060ac:	f040 80ce 	bne.w	800624c <_strtod_l+0xb2c>
 80060b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80060b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060b8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80060bc:	ec4b ab10 	vmov	d0, sl, fp
 80060c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80060c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80060c8:	f000 ff42 	bl	8006f50 <__ulp>
 80060cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060d0:	ec53 2b10 	vmov	r2, r3, d0
 80060d4:	f7fa fa3c 	bl	8000550 <__aeabi_dmul>
 80060d8:	4652      	mov	r2, sl
 80060da:	465b      	mov	r3, fp
 80060dc:	f7fa f882 	bl	80001e4 <__adddf3>
 80060e0:	460b      	mov	r3, r1
 80060e2:	4952      	ldr	r1, [pc, #328]	; (800622c <_strtod_l+0xb0c>)
 80060e4:	4a56      	ldr	r2, [pc, #344]	; (8006240 <_strtod_l+0xb20>)
 80060e6:	4019      	ands	r1, r3
 80060e8:	4291      	cmp	r1, r2
 80060ea:	4682      	mov	sl, r0
 80060ec:	d95b      	bls.n	80061a6 <_strtod_l+0xa86>
 80060ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d103      	bne.n	8006100 <_strtod_l+0x9e0>
 80060f8:	9b08      	ldr	r3, [sp, #32]
 80060fa:	3301      	adds	r3, #1
 80060fc:	f43f ad2e 	beq.w	8005b5c <_strtod_l+0x43c>
 8006100:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006230 <_strtod_l+0xb10>
 8006104:	f04f 3aff 	mov.w	sl, #4294967295
 8006108:	991c      	ldr	r1, [sp, #112]	; 0x70
 800610a:	4648      	mov	r0, r9
 800610c:	f000 fc89 	bl	8006a22 <_Bfree>
 8006110:	9905      	ldr	r1, [sp, #20]
 8006112:	4648      	mov	r0, r9
 8006114:	f000 fc85 	bl	8006a22 <_Bfree>
 8006118:	4641      	mov	r1, r8
 800611a:	4648      	mov	r0, r9
 800611c:	f000 fc81 	bl	8006a22 <_Bfree>
 8006120:	4621      	mov	r1, r4
 8006122:	4648      	mov	r0, r9
 8006124:	f000 fc7d 	bl	8006a22 <_Bfree>
 8006128:	e619      	b.n	8005d5e <_strtod_l+0x63e>
 800612a:	f1ba 0f00 	cmp.w	sl, #0
 800612e:	d11a      	bne.n	8006166 <_strtod_l+0xa46>
 8006130:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006134:	b9eb      	cbnz	r3, 8006172 <_strtod_l+0xa52>
 8006136:	2200      	movs	r2, #0
 8006138:	4b3f      	ldr	r3, [pc, #252]	; (8006238 <_strtod_l+0xb18>)
 800613a:	4630      	mov	r0, r6
 800613c:	4639      	mov	r1, r7
 800613e:	f7fa fc79 	bl	8000a34 <__aeabi_dcmplt>
 8006142:	b9c8      	cbnz	r0, 8006178 <_strtod_l+0xa58>
 8006144:	4630      	mov	r0, r6
 8006146:	4639      	mov	r1, r7
 8006148:	2200      	movs	r2, #0
 800614a:	4b3e      	ldr	r3, [pc, #248]	; (8006244 <_strtod_l+0xb24>)
 800614c:	f7fa fa00 	bl	8000550 <__aeabi_dmul>
 8006150:	4606      	mov	r6, r0
 8006152:	460f      	mov	r7, r1
 8006154:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006158:	9618      	str	r6, [sp, #96]	; 0x60
 800615a:	9319      	str	r3, [sp, #100]	; 0x64
 800615c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006160:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006164:	e79c      	b.n	80060a0 <_strtod_l+0x980>
 8006166:	f1ba 0f01 	cmp.w	sl, #1
 800616a:	d102      	bne.n	8006172 <_strtod_l+0xa52>
 800616c:	2d00      	cmp	r5, #0
 800616e:	f43f ad8e 	beq.w	8005c8e <_strtod_l+0x56e>
 8006172:	2200      	movs	r2, #0
 8006174:	4b34      	ldr	r3, [pc, #208]	; (8006248 <_strtod_l+0xb28>)
 8006176:	e78f      	b.n	8006098 <_strtod_l+0x978>
 8006178:	2600      	movs	r6, #0
 800617a:	4f32      	ldr	r7, [pc, #200]	; (8006244 <_strtod_l+0xb24>)
 800617c:	e7ea      	b.n	8006154 <_strtod_l+0xa34>
 800617e:	4b31      	ldr	r3, [pc, #196]	; (8006244 <_strtod_l+0xb24>)
 8006180:	4630      	mov	r0, r6
 8006182:	4639      	mov	r1, r7
 8006184:	2200      	movs	r2, #0
 8006186:	f7fa f9e3 	bl	8000550 <__aeabi_dmul>
 800618a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800618c:	4606      	mov	r6, r0
 800618e:	460f      	mov	r7, r1
 8006190:	b933      	cbnz	r3, 80061a0 <_strtod_l+0xa80>
 8006192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006196:	9010      	str	r0, [sp, #64]	; 0x40
 8006198:	9311      	str	r3, [sp, #68]	; 0x44
 800619a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800619e:	e7df      	b.n	8006160 <_strtod_l+0xa40>
 80061a0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80061a4:	e7f9      	b.n	800619a <_strtod_l+0xa7a>
 80061a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80061aa:	9b04      	ldr	r3, [sp, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1ab      	bne.n	8006108 <_strtod_l+0x9e8>
 80061b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061b4:	0d1b      	lsrs	r3, r3, #20
 80061b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061b8:	051b      	lsls	r3, r3, #20
 80061ba:	429a      	cmp	r2, r3
 80061bc:	465d      	mov	r5, fp
 80061be:	d1a3      	bne.n	8006108 <_strtod_l+0x9e8>
 80061c0:	4639      	mov	r1, r7
 80061c2:	4630      	mov	r0, r6
 80061c4:	f7fa fc5e 	bl	8000a84 <__aeabi_d2iz>
 80061c8:	f7fa f958 	bl	800047c <__aeabi_i2d>
 80061cc:	460b      	mov	r3, r1
 80061ce:	4602      	mov	r2, r0
 80061d0:	4639      	mov	r1, r7
 80061d2:	4630      	mov	r0, r6
 80061d4:	f7fa f804 	bl	80001e0 <__aeabi_dsub>
 80061d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061da:	4606      	mov	r6, r0
 80061dc:	460f      	mov	r7, r1
 80061de:	b933      	cbnz	r3, 80061ee <_strtod_l+0xace>
 80061e0:	f1ba 0f00 	cmp.w	sl, #0
 80061e4:	d103      	bne.n	80061ee <_strtod_l+0xace>
 80061e6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80061ea:	2d00      	cmp	r5, #0
 80061ec:	d06d      	beq.n	80062ca <_strtod_l+0xbaa>
 80061ee:	a30a      	add	r3, pc, #40	; (adr r3, 8006218 <_strtod_l+0xaf8>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	4630      	mov	r0, r6
 80061f6:	4639      	mov	r1, r7
 80061f8:	f7fa fc1c 	bl	8000a34 <__aeabi_dcmplt>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	f47f acb8 	bne.w	8005b72 <_strtod_l+0x452>
 8006202:	a307      	add	r3, pc, #28	; (adr r3, 8006220 <_strtod_l+0xb00>)
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	4630      	mov	r0, r6
 800620a:	4639      	mov	r1, r7
 800620c:	f7fa fc30 	bl	8000a70 <__aeabi_dcmpgt>
 8006210:	2800      	cmp	r0, #0
 8006212:	f43f af79 	beq.w	8006108 <_strtod_l+0x9e8>
 8006216:	e4ac      	b.n	8005b72 <_strtod_l+0x452>
 8006218:	94a03595 	.word	0x94a03595
 800621c:	3fdfffff 	.word	0x3fdfffff
 8006220:	35afe535 	.word	0x35afe535
 8006224:	3fe00000 	.word	0x3fe00000
 8006228:	000fffff 	.word	0x000fffff
 800622c:	7ff00000 	.word	0x7ff00000
 8006230:	7fefffff 	.word	0x7fefffff
 8006234:	39500000 	.word	0x39500000
 8006238:	3ff00000 	.word	0x3ff00000
 800623c:	7fe00000 	.word	0x7fe00000
 8006240:	7c9fffff 	.word	0x7c9fffff
 8006244:	3fe00000 	.word	0x3fe00000
 8006248:	bff00000 	.word	0xbff00000
 800624c:	9b04      	ldr	r3, [sp, #16]
 800624e:	b333      	cbz	r3, 800629e <_strtod_l+0xb7e>
 8006250:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006252:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006256:	d822      	bhi.n	800629e <_strtod_l+0xb7e>
 8006258:	a327      	add	r3, pc, #156	; (adr r3, 80062f8 <_strtod_l+0xbd8>)
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	4630      	mov	r0, r6
 8006260:	4639      	mov	r1, r7
 8006262:	f7fa fbf1 	bl	8000a48 <__aeabi_dcmple>
 8006266:	b1a0      	cbz	r0, 8006292 <_strtod_l+0xb72>
 8006268:	4639      	mov	r1, r7
 800626a:	4630      	mov	r0, r6
 800626c:	f7fa fc32 	bl	8000ad4 <__aeabi_d2uiz>
 8006270:	2800      	cmp	r0, #0
 8006272:	bf08      	it	eq
 8006274:	2001      	moveq	r0, #1
 8006276:	f7fa f8f1 	bl	800045c <__aeabi_ui2d>
 800627a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800627c:	4606      	mov	r6, r0
 800627e:	460f      	mov	r7, r1
 8006280:	bb03      	cbnz	r3, 80062c4 <_strtod_l+0xba4>
 8006282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006286:	9012      	str	r0, [sp, #72]	; 0x48
 8006288:	9313      	str	r3, [sp, #76]	; 0x4c
 800628a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800628e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006294:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006296:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800629a:	1a9b      	subs	r3, r3, r2
 800629c:	930b      	str	r3, [sp, #44]	; 0x2c
 800629e:	ed9d 0b08 	vldr	d0, [sp, #32]
 80062a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80062a6:	f000 fe53 	bl	8006f50 <__ulp>
 80062aa:	4650      	mov	r0, sl
 80062ac:	ec53 2b10 	vmov	r2, r3, d0
 80062b0:	4659      	mov	r1, fp
 80062b2:	f7fa f94d 	bl	8000550 <__aeabi_dmul>
 80062b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062ba:	f7f9 ff93 	bl	80001e4 <__adddf3>
 80062be:	4682      	mov	sl, r0
 80062c0:	468b      	mov	fp, r1
 80062c2:	e772      	b.n	80061aa <_strtod_l+0xa8a>
 80062c4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80062c8:	e7df      	b.n	800628a <_strtod_l+0xb6a>
 80062ca:	a30d      	add	r3, pc, #52	; (adr r3, 8006300 <_strtod_l+0xbe0>)
 80062cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d0:	f7fa fbb0 	bl	8000a34 <__aeabi_dcmplt>
 80062d4:	e79c      	b.n	8006210 <_strtod_l+0xaf0>
 80062d6:	2300      	movs	r3, #0
 80062d8:	930d      	str	r3, [sp, #52]	; 0x34
 80062da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80062dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	f7ff ba61 	b.w	80057a6 <_strtod_l+0x86>
 80062e4:	2b65      	cmp	r3, #101	; 0x65
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	f43f ab4e 	beq.w	800598a <_strtod_l+0x26a>
 80062ee:	2101      	movs	r1, #1
 80062f0:	4614      	mov	r4, r2
 80062f2:	9104      	str	r1, [sp, #16]
 80062f4:	f7ff bacb 	b.w	800588e <_strtod_l+0x16e>
 80062f8:	ffc00000 	.word	0xffc00000
 80062fc:	41dfffff 	.word	0x41dfffff
 8006300:	94a03595 	.word	0x94a03595
 8006304:	3fcfffff 	.word	0x3fcfffff

08006308 <strtod>:
 8006308:	4b07      	ldr	r3, [pc, #28]	; (8006328 <strtod+0x20>)
 800630a:	4a08      	ldr	r2, [pc, #32]	; (800632c <strtod+0x24>)
 800630c:	b410      	push	{r4}
 800630e:	681c      	ldr	r4, [r3, #0]
 8006310:	6a23      	ldr	r3, [r4, #32]
 8006312:	2b00      	cmp	r3, #0
 8006314:	bf08      	it	eq
 8006316:	4613      	moveq	r3, r2
 8006318:	460a      	mov	r2, r1
 800631a:	4601      	mov	r1, r0
 800631c:	4620      	mov	r0, r4
 800631e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006322:	f7ff b9fd 	b.w	8005720 <_strtod_l>
 8006326:	bf00      	nop
 8006328:	20000014 	.word	0x20000014
 800632c:	20000078 	.word	0x20000078

08006330 <rshift>:
 8006330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006332:	6906      	ldr	r6, [r0, #16]
 8006334:	114b      	asrs	r3, r1, #5
 8006336:	429e      	cmp	r6, r3
 8006338:	f100 0414 	add.w	r4, r0, #20
 800633c:	dd30      	ble.n	80063a0 <rshift+0x70>
 800633e:	f011 011f 	ands.w	r1, r1, #31
 8006342:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006346:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800634a:	d108      	bne.n	800635e <rshift+0x2e>
 800634c:	4621      	mov	r1, r4
 800634e:	42b2      	cmp	r2, r6
 8006350:	460b      	mov	r3, r1
 8006352:	d211      	bcs.n	8006378 <rshift+0x48>
 8006354:	f852 3b04 	ldr.w	r3, [r2], #4
 8006358:	f841 3b04 	str.w	r3, [r1], #4
 800635c:	e7f7      	b.n	800634e <rshift+0x1e>
 800635e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006362:	f1c1 0c20 	rsb	ip, r1, #32
 8006366:	40cd      	lsrs	r5, r1
 8006368:	3204      	adds	r2, #4
 800636a:	4623      	mov	r3, r4
 800636c:	42b2      	cmp	r2, r6
 800636e:	4617      	mov	r7, r2
 8006370:	d30c      	bcc.n	800638c <rshift+0x5c>
 8006372:	601d      	str	r5, [r3, #0]
 8006374:	b105      	cbz	r5, 8006378 <rshift+0x48>
 8006376:	3304      	adds	r3, #4
 8006378:	1b1a      	subs	r2, r3, r4
 800637a:	42a3      	cmp	r3, r4
 800637c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006380:	bf08      	it	eq
 8006382:	2300      	moveq	r3, #0
 8006384:	6102      	str	r2, [r0, #16]
 8006386:	bf08      	it	eq
 8006388:	6143      	streq	r3, [r0, #20]
 800638a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800638c:	683f      	ldr	r7, [r7, #0]
 800638e:	fa07 f70c 	lsl.w	r7, r7, ip
 8006392:	433d      	orrs	r5, r7
 8006394:	f843 5b04 	str.w	r5, [r3], #4
 8006398:	f852 5b04 	ldr.w	r5, [r2], #4
 800639c:	40cd      	lsrs	r5, r1
 800639e:	e7e5      	b.n	800636c <rshift+0x3c>
 80063a0:	4623      	mov	r3, r4
 80063a2:	e7e9      	b.n	8006378 <rshift+0x48>

080063a4 <__hexdig_fun>:
 80063a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80063a8:	2b09      	cmp	r3, #9
 80063aa:	d802      	bhi.n	80063b2 <__hexdig_fun+0xe>
 80063ac:	3820      	subs	r0, #32
 80063ae:	b2c0      	uxtb	r0, r0
 80063b0:	4770      	bx	lr
 80063b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80063b6:	2b05      	cmp	r3, #5
 80063b8:	d801      	bhi.n	80063be <__hexdig_fun+0x1a>
 80063ba:	3847      	subs	r0, #71	; 0x47
 80063bc:	e7f7      	b.n	80063ae <__hexdig_fun+0xa>
 80063be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80063c2:	2b05      	cmp	r3, #5
 80063c4:	d801      	bhi.n	80063ca <__hexdig_fun+0x26>
 80063c6:	3827      	subs	r0, #39	; 0x27
 80063c8:	e7f1      	b.n	80063ae <__hexdig_fun+0xa>
 80063ca:	2000      	movs	r0, #0
 80063cc:	4770      	bx	lr

080063ce <__gethex>:
 80063ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d2:	b08b      	sub	sp, #44	; 0x2c
 80063d4:	468a      	mov	sl, r1
 80063d6:	9002      	str	r0, [sp, #8]
 80063d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80063da:	9306      	str	r3, [sp, #24]
 80063dc:	4690      	mov	r8, r2
 80063de:	f000 facd 	bl	800697c <__localeconv_l>
 80063e2:	6803      	ldr	r3, [r0, #0]
 80063e4:	9303      	str	r3, [sp, #12]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7f9 feee 	bl	80001c8 <strlen>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	9001      	str	r0, [sp, #4]
 80063f0:	4403      	add	r3, r0
 80063f2:	f04f 0b00 	mov.w	fp, #0
 80063f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80063fa:	9307      	str	r3, [sp, #28]
 80063fc:	f8da 3000 	ldr.w	r3, [sl]
 8006400:	3302      	adds	r3, #2
 8006402:	461f      	mov	r7, r3
 8006404:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006408:	2830      	cmp	r0, #48	; 0x30
 800640a:	d06c      	beq.n	80064e6 <__gethex+0x118>
 800640c:	f7ff ffca 	bl	80063a4 <__hexdig_fun>
 8006410:	4604      	mov	r4, r0
 8006412:	2800      	cmp	r0, #0
 8006414:	d16a      	bne.n	80064ec <__gethex+0x11e>
 8006416:	9a01      	ldr	r2, [sp, #4]
 8006418:	9903      	ldr	r1, [sp, #12]
 800641a:	4638      	mov	r0, r7
 800641c:	f000 ff44 	bl	80072a8 <strncmp>
 8006420:	2800      	cmp	r0, #0
 8006422:	d166      	bne.n	80064f2 <__gethex+0x124>
 8006424:	9b01      	ldr	r3, [sp, #4]
 8006426:	5cf8      	ldrb	r0, [r7, r3]
 8006428:	18fe      	adds	r6, r7, r3
 800642a:	f7ff ffbb 	bl	80063a4 <__hexdig_fun>
 800642e:	2800      	cmp	r0, #0
 8006430:	d062      	beq.n	80064f8 <__gethex+0x12a>
 8006432:	4633      	mov	r3, r6
 8006434:	7818      	ldrb	r0, [r3, #0]
 8006436:	2830      	cmp	r0, #48	; 0x30
 8006438:	461f      	mov	r7, r3
 800643a:	f103 0301 	add.w	r3, r3, #1
 800643e:	d0f9      	beq.n	8006434 <__gethex+0x66>
 8006440:	f7ff ffb0 	bl	80063a4 <__hexdig_fun>
 8006444:	fab0 f580 	clz	r5, r0
 8006448:	096d      	lsrs	r5, r5, #5
 800644a:	4634      	mov	r4, r6
 800644c:	f04f 0b01 	mov.w	fp, #1
 8006450:	463a      	mov	r2, r7
 8006452:	4616      	mov	r6, r2
 8006454:	3201      	adds	r2, #1
 8006456:	7830      	ldrb	r0, [r6, #0]
 8006458:	f7ff ffa4 	bl	80063a4 <__hexdig_fun>
 800645c:	2800      	cmp	r0, #0
 800645e:	d1f8      	bne.n	8006452 <__gethex+0x84>
 8006460:	9a01      	ldr	r2, [sp, #4]
 8006462:	9903      	ldr	r1, [sp, #12]
 8006464:	4630      	mov	r0, r6
 8006466:	f000 ff1f 	bl	80072a8 <strncmp>
 800646a:	b950      	cbnz	r0, 8006482 <__gethex+0xb4>
 800646c:	b954      	cbnz	r4, 8006484 <__gethex+0xb6>
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	18f4      	adds	r4, r6, r3
 8006472:	4622      	mov	r2, r4
 8006474:	4616      	mov	r6, r2
 8006476:	3201      	adds	r2, #1
 8006478:	7830      	ldrb	r0, [r6, #0]
 800647a:	f7ff ff93 	bl	80063a4 <__hexdig_fun>
 800647e:	2800      	cmp	r0, #0
 8006480:	d1f8      	bne.n	8006474 <__gethex+0xa6>
 8006482:	b10c      	cbz	r4, 8006488 <__gethex+0xba>
 8006484:	1ba4      	subs	r4, r4, r6
 8006486:	00a4      	lsls	r4, r4, #2
 8006488:	7833      	ldrb	r3, [r6, #0]
 800648a:	2b50      	cmp	r3, #80	; 0x50
 800648c:	d001      	beq.n	8006492 <__gethex+0xc4>
 800648e:	2b70      	cmp	r3, #112	; 0x70
 8006490:	d140      	bne.n	8006514 <__gethex+0x146>
 8006492:	7873      	ldrb	r3, [r6, #1]
 8006494:	2b2b      	cmp	r3, #43	; 0x2b
 8006496:	d031      	beq.n	80064fc <__gethex+0x12e>
 8006498:	2b2d      	cmp	r3, #45	; 0x2d
 800649a:	d033      	beq.n	8006504 <__gethex+0x136>
 800649c:	1c71      	adds	r1, r6, #1
 800649e:	f04f 0900 	mov.w	r9, #0
 80064a2:	7808      	ldrb	r0, [r1, #0]
 80064a4:	f7ff ff7e 	bl	80063a4 <__hexdig_fun>
 80064a8:	1e43      	subs	r3, r0, #1
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b18      	cmp	r3, #24
 80064ae:	d831      	bhi.n	8006514 <__gethex+0x146>
 80064b0:	f1a0 0210 	sub.w	r2, r0, #16
 80064b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80064b8:	f7ff ff74 	bl	80063a4 <__hexdig_fun>
 80064bc:	1e43      	subs	r3, r0, #1
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b18      	cmp	r3, #24
 80064c2:	d922      	bls.n	800650a <__gethex+0x13c>
 80064c4:	f1b9 0f00 	cmp.w	r9, #0
 80064c8:	d000      	beq.n	80064cc <__gethex+0xfe>
 80064ca:	4252      	negs	r2, r2
 80064cc:	4414      	add	r4, r2
 80064ce:	f8ca 1000 	str.w	r1, [sl]
 80064d2:	b30d      	cbz	r5, 8006518 <__gethex+0x14a>
 80064d4:	f1bb 0f00 	cmp.w	fp, #0
 80064d8:	bf0c      	ite	eq
 80064da:	2706      	moveq	r7, #6
 80064dc:	2700      	movne	r7, #0
 80064de:	4638      	mov	r0, r7
 80064e0:	b00b      	add	sp, #44	; 0x2c
 80064e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e6:	f10b 0b01 	add.w	fp, fp, #1
 80064ea:	e78a      	b.n	8006402 <__gethex+0x34>
 80064ec:	2500      	movs	r5, #0
 80064ee:	462c      	mov	r4, r5
 80064f0:	e7ae      	b.n	8006450 <__gethex+0x82>
 80064f2:	463e      	mov	r6, r7
 80064f4:	2501      	movs	r5, #1
 80064f6:	e7c7      	b.n	8006488 <__gethex+0xba>
 80064f8:	4604      	mov	r4, r0
 80064fa:	e7fb      	b.n	80064f4 <__gethex+0x126>
 80064fc:	f04f 0900 	mov.w	r9, #0
 8006500:	1cb1      	adds	r1, r6, #2
 8006502:	e7ce      	b.n	80064a2 <__gethex+0xd4>
 8006504:	f04f 0901 	mov.w	r9, #1
 8006508:	e7fa      	b.n	8006500 <__gethex+0x132>
 800650a:	230a      	movs	r3, #10
 800650c:	fb03 0202 	mla	r2, r3, r2, r0
 8006510:	3a10      	subs	r2, #16
 8006512:	e7cf      	b.n	80064b4 <__gethex+0xe6>
 8006514:	4631      	mov	r1, r6
 8006516:	e7da      	b.n	80064ce <__gethex+0x100>
 8006518:	1bf3      	subs	r3, r6, r7
 800651a:	3b01      	subs	r3, #1
 800651c:	4629      	mov	r1, r5
 800651e:	2b07      	cmp	r3, #7
 8006520:	dc49      	bgt.n	80065b6 <__gethex+0x1e8>
 8006522:	9802      	ldr	r0, [sp, #8]
 8006524:	f000 fa49 	bl	80069ba <_Balloc>
 8006528:	9b01      	ldr	r3, [sp, #4]
 800652a:	f100 0914 	add.w	r9, r0, #20
 800652e:	f04f 0b00 	mov.w	fp, #0
 8006532:	f1c3 0301 	rsb	r3, r3, #1
 8006536:	4605      	mov	r5, r0
 8006538:	f8cd 9010 	str.w	r9, [sp, #16]
 800653c:	46da      	mov	sl, fp
 800653e:	9308      	str	r3, [sp, #32]
 8006540:	42b7      	cmp	r7, r6
 8006542:	d33b      	bcc.n	80065bc <__gethex+0x1ee>
 8006544:	9804      	ldr	r0, [sp, #16]
 8006546:	f840 ab04 	str.w	sl, [r0], #4
 800654a:	eba0 0009 	sub.w	r0, r0, r9
 800654e:	1080      	asrs	r0, r0, #2
 8006550:	6128      	str	r0, [r5, #16]
 8006552:	0147      	lsls	r7, r0, #5
 8006554:	4650      	mov	r0, sl
 8006556:	f000 faf4 	bl	8006b42 <__hi0bits>
 800655a:	f8d8 6000 	ldr.w	r6, [r8]
 800655e:	1a3f      	subs	r7, r7, r0
 8006560:	42b7      	cmp	r7, r6
 8006562:	dd64      	ble.n	800662e <__gethex+0x260>
 8006564:	1bbf      	subs	r7, r7, r6
 8006566:	4639      	mov	r1, r7
 8006568:	4628      	mov	r0, r5
 800656a:	f000 fe03 	bl	8007174 <__any_on>
 800656e:	4682      	mov	sl, r0
 8006570:	b178      	cbz	r0, 8006592 <__gethex+0x1c4>
 8006572:	1e7b      	subs	r3, r7, #1
 8006574:	1159      	asrs	r1, r3, #5
 8006576:	f003 021f 	and.w	r2, r3, #31
 800657a:	f04f 0a01 	mov.w	sl, #1
 800657e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006582:	fa0a f202 	lsl.w	r2, sl, r2
 8006586:	420a      	tst	r2, r1
 8006588:	d003      	beq.n	8006592 <__gethex+0x1c4>
 800658a:	4553      	cmp	r3, sl
 800658c:	dc46      	bgt.n	800661c <__gethex+0x24e>
 800658e:	f04f 0a02 	mov.w	sl, #2
 8006592:	4639      	mov	r1, r7
 8006594:	4628      	mov	r0, r5
 8006596:	f7ff fecb 	bl	8006330 <rshift>
 800659a:	443c      	add	r4, r7
 800659c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	da52      	bge.n	800664a <__gethex+0x27c>
 80065a4:	4629      	mov	r1, r5
 80065a6:	9802      	ldr	r0, [sp, #8]
 80065a8:	f000 fa3b 	bl	8006a22 <_Bfree>
 80065ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80065ae:	2300      	movs	r3, #0
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	27a3      	movs	r7, #163	; 0xa3
 80065b4:	e793      	b.n	80064de <__gethex+0x110>
 80065b6:	3101      	adds	r1, #1
 80065b8:	105b      	asrs	r3, r3, #1
 80065ba:	e7b0      	b.n	800651e <__gethex+0x150>
 80065bc:	1e73      	subs	r3, r6, #1
 80065be:	9305      	str	r3, [sp, #20]
 80065c0:	9a07      	ldr	r2, [sp, #28]
 80065c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d018      	beq.n	80065fc <__gethex+0x22e>
 80065ca:	f1bb 0f20 	cmp.w	fp, #32
 80065ce:	d107      	bne.n	80065e0 <__gethex+0x212>
 80065d0:	9b04      	ldr	r3, [sp, #16]
 80065d2:	f8c3 a000 	str.w	sl, [r3]
 80065d6:	3304      	adds	r3, #4
 80065d8:	f04f 0a00 	mov.w	sl, #0
 80065dc:	9304      	str	r3, [sp, #16]
 80065de:	46d3      	mov	fp, sl
 80065e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80065e4:	f7ff fede 	bl	80063a4 <__hexdig_fun>
 80065e8:	f000 000f 	and.w	r0, r0, #15
 80065ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80065f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80065f4:	f10b 0b04 	add.w	fp, fp, #4
 80065f8:	9b05      	ldr	r3, [sp, #20]
 80065fa:	e00d      	b.n	8006618 <__gethex+0x24a>
 80065fc:	9b05      	ldr	r3, [sp, #20]
 80065fe:	9a08      	ldr	r2, [sp, #32]
 8006600:	4413      	add	r3, r2
 8006602:	42bb      	cmp	r3, r7
 8006604:	d3e1      	bcc.n	80065ca <__gethex+0x1fc>
 8006606:	4618      	mov	r0, r3
 8006608:	9a01      	ldr	r2, [sp, #4]
 800660a:	9903      	ldr	r1, [sp, #12]
 800660c:	9309      	str	r3, [sp, #36]	; 0x24
 800660e:	f000 fe4b 	bl	80072a8 <strncmp>
 8006612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006614:	2800      	cmp	r0, #0
 8006616:	d1d8      	bne.n	80065ca <__gethex+0x1fc>
 8006618:	461e      	mov	r6, r3
 800661a:	e791      	b.n	8006540 <__gethex+0x172>
 800661c:	1eb9      	subs	r1, r7, #2
 800661e:	4628      	mov	r0, r5
 8006620:	f000 fda8 	bl	8007174 <__any_on>
 8006624:	2800      	cmp	r0, #0
 8006626:	d0b2      	beq.n	800658e <__gethex+0x1c0>
 8006628:	f04f 0a03 	mov.w	sl, #3
 800662c:	e7b1      	b.n	8006592 <__gethex+0x1c4>
 800662e:	da09      	bge.n	8006644 <__gethex+0x276>
 8006630:	1bf7      	subs	r7, r6, r7
 8006632:	4629      	mov	r1, r5
 8006634:	463a      	mov	r2, r7
 8006636:	9802      	ldr	r0, [sp, #8]
 8006638:	f000 fbbe 	bl	8006db8 <__lshift>
 800663c:	1be4      	subs	r4, r4, r7
 800663e:	4605      	mov	r5, r0
 8006640:	f100 0914 	add.w	r9, r0, #20
 8006644:	f04f 0a00 	mov.w	sl, #0
 8006648:	e7a8      	b.n	800659c <__gethex+0x1ce>
 800664a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800664e:	42a0      	cmp	r0, r4
 8006650:	dd6a      	ble.n	8006728 <__gethex+0x35a>
 8006652:	1b04      	subs	r4, r0, r4
 8006654:	42a6      	cmp	r6, r4
 8006656:	dc2e      	bgt.n	80066b6 <__gethex+0x2e8>
 8006658:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d022      	beq.n	80066a6 <__gethex+0x2d8>
 8006660:	2b03      	cmp	r3, #3
 8006662:	d024      	beq.n	80066ae <__gethex+0x2e0>
 8006664:	2b01      	cmp	r3, #1
 8006666:	d115      	bne.n	8006694 <__gethex+0x2c6>
 8006668:	42a6      	cmp	r6, r4
 800666a:	d113      	bne.n	8006694 <__gethex+0x2c6>
 800666c:	2e01      	cmp	r6, #1
 800666e:	dc0b      	bgt.n	8006688 <__gethex+0x2ba>
 8006670:	9a06      	ldr	r2, [sp, #24]
 8006672:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	2301      	movs	r3, #1
 800667a:	612b      	str	r3, [r5, #16]
 800667c:	f8c9 3000 	str.w	r3, [r9]
 8006680:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006682:	2762      	movs	r7, #98	; 0x62
 8006684:	601d      	str	r5, [r3, #0]
 8006686:	e72a      	b.n	80064de <__gethex+0x110>
 8006688:	1e71      	subs	r1, r6, #1
 800668a:	4628      	mov	r0, r5
 800668c:	f000 fd72 	bl	8007174 <__any_on>
 8006690:	2800      	cmp	r0, #0
 8006692:	d1ed      	bne.n	8006670 <__gethex+0x2a2>
 8006694:	4629      	mov	r1, r5
 8006696:	9802      	ldr	r0, [sp, #8]
 8006698:	f000 f9c3 	bl	8006a22 <_Bfree>
 800669c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800669e:	2300      	movs	r3, #0
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	2750      	movs	r7, #80	; 0x50
 80066a4:	e71b      	b.n	80064de <__gethex+0x110>
 80066a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0e1      	beq.n	8006670 <__gethex+0x2a2>
 80066ac:	e7f2      	b.n	8006694 <__gethex+0x2c6>
 80066ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1dd      	bne.n	8006670 <__gethex+0x2a2>
 80066b4:	e7ee      	b.n	8006694 <__gethex+0x2c6>
 80066b6:	1e67      	subs	r7, r4, #1
 80066b8:	f1ba 0f00 	cmp.w	sl, #0
 80066bc:	d131      	bne.n	8006722 <__gethex+0x354>
 80066be:	b127      	cbz	r7, 80066ca <__gethex+0x2fc>
 80066c0:	4639      	mov	r1, r7
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 fd56 	bl	8007174 <__any_on>
 80066c8:	4682      	mov	sl, r0
 80066ca:	117a      	asrs	r2, r7, #5
 80066cc:	2301      	movs	r3, #1
 80066ce:	f007 071f 	and.w	r7, r7, #31
 80066d2:	fa03 f707 	lsl.w	r7, r3, r7
 80066d6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80066da:	4621      	mov	r1, r4
 80066dc:	421f      	tst	r7, r3
 80066de:	4628      	mov	r0, r5
 80066e0:	bf18      	it	ne
 80066e2:	f04a 0a02 	orrne.w	sl, sl, #2
 80066e6:	1b36      	subs	r6, r6, r4
 80066e8:	f7ff fe22 	bl	8006330 <rshift>
 80066ec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80066f0:	2702      	movs	r7, #2
 80066f2:	f1ba 0f00 	cmp.w	sl, #0
 80066f6:	d048      	beq.n	800678a <__gethex+0x3bc>
 80066f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d015      	beq.n	800672c <__gethex+0x35e>
 8006700:	2b03      	cmp	r3, #3
 8006702:	d017      	beq.n	8006734 <__gethex+0x366>
 8006704:	2b01      	cmp	r3, #1
 8006706:	d109      	bne.n	800671c <__gethex+0x34e>
 8006708:	f01a 0f02 	tst.w	sl, #2
 800670c:	d006      	beq.n	800671c <__gethex+0x34e>
 800670e:	f8d9 3000 	ldr.w	r3, [r9]
 8006712:	ea4a 0a03 	orr.w	sl, sl, r3
 8006716:	f01a 0f01 	tst.w	sl, #1
 800671a:	d10e      	bne.n	800673a <__gethex+0x36c>
 800671c:	f047 0710 	orr.w	r7, r7, #16
 8006720:	e033      	b.n	800678a <__gethex+0x3bc>
 8006722:	f04f 0a01 	mov.w	sl, #1
 8006726:	e7d0      	b.n	80066ca <__gethex+0x2fc>
 8006728:	2701      	movs	r7, #1
 800672a:	e7e2      	b.n	80066f2 <__gethex+0x324>
 800672c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800672e:	f1c3 0301 	rsb	r3, r3, #1
 8006732:	9315      	str	r3, [sp, #84]	; 0x54
 8006734:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0f0      	beq.n	800671c <__gethex+0x34e>
 800673a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800673e:	f105 0314 	add.w	r3, r5, #20
 8006742:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006746:	eb03 010a 	add.w	r1, r3, sl
 800674a:	f04f 0c00 	mov.w	ip, #0
 800674e:	4618      	mov	r0, r3
 8006750:	f853 2b04 	ldr.w	r2, [r3], #4
 8006754:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006758:	d01c      	beq.n	8006794 <__gethex+0x3c6>
 800675a:	3201      	adds	r2, #1
 800675c:	6002      	str	r2, [r0, #0]
 800675e:	2f02      	cmp	r7, #2
 8006760:	f105 0314 	add.w	r3, r5, #20
 8006764:	d138      	bne.n	80067d8 <__gethex+0x40a>
 8006766:	f8d8 2000 	ldr.w	r2, [r8]
 800676a:	3a01      	subs	r2, #1
 800676c:	42b2      	cmp	r2, r6
 800676e:	d10a      	bne.n	8006786 <__gethex+0x3b8>
 8006770:	1171      	asrs	r1, r6, #5
 8006772:	2201      	movs	r2, #1
 8006774:	f006 061f 	and.w	r6, r6, #31
 8006778:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800677c:	fa02 f606 	lsl.w	r6, r2, r6
 8006780:	421e      	tst	r6, r3
 8006782:	bf18      	it	ne
 8006784:	4617      	movne	r7, r2
 8006786:	f047 0720 	orr.w	r7, r7, #32
 800678a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800678c:	601d      	str	r5, [r3, #0]
 800678e:	9b06      	ldr	r3, [sp, #24]
 8006790:	601c      	str	r4, [r3, #0]
 8006792:	e6a4      	b.n	80064de <__gethex+0x110>
 8006794:	4299      	cmp	r1, r3
 8006796:	f843 cc04 	str.w	ip, [r3, #-4]
 800679a:	d8d8      	bhi.n	800674e <__gethex+0x380>
 800679c:	68ab      	ldr	r3, [r5, #8]
 800679e:	4599      	cmp	r9, r3
 80067a0:	db12      	blt.n	80067c8 <__gethex+0x3fa>
 80067a2:	6869      	ldr	r1, [r5, #4]
 80067a4:	9802      	ldr	r0, [sp, #8]
 80067a6:	3101      	adds	r1, #1
 80067a8:	f000 f907 	bl	80069ba <_Balloc>
 80067ac:	692a      	ldr	r2, [r5, #16]
 80067ae:	3202      	adds	r2, #2
 80067b0:	f105 010c 	add.w	r1, r5, #12
 80067b4:	4683      	mov	fp, r0
 80067b6:	0092      	lsls	r2, r2, #2
 80067b8:	300c      	adds	r0, #12
 80067ba:	f000 f8f3 	bl	80069a4 <memcpy>
 80067be:	4629      	mov	r1, r5
 80067c0:	9802      	ldr	r0, [sp, #8]
 80067c2:	f000 f92e 	bl	8006a22 <_Bfree>
 80067c6:	465d      	mov	r5, fp
 80067c8:	692b      	ldr	r3, [r5, #16]
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80067d0:	612a      	str	r2, [r5, #16]
 80067d2:	2201      	movs	r2, #1
 80067d4:	615a      	str	r2, [r3, #20]
 80067d6:	e7c2      	b.n	800675e <__gethex+0x390>
 80067d8:	692a      	ldr	r2, [r5, #16]
 80067da:	454a      	cmp	r2, r9
 80067dc:	dd0b      	ble.n	80067f6 <__gethex+0x428>
 80067de:	2101      	movs	r1, #1
 80067e0:	4628      	mov	r0, r5
 80067e2:	f7ff fda5 	bl	8006330 <rshift>
 80067e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80067ea:	3401      	adds	r4, #1
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	f6ff aed9 	blt.w	80065a4 <__gethex+0x1d6>
 80067f2:	2701      	movs	r7, #1
 80067f4:	e7c7      	b.n	8006786 <__gethex+0x3b8>
 80067f6:	f016 061f 	ands.w	r6, r6, #31
 80067fa:	d0fa      	beq.n	80067f2 <__gethex+0x424>
 80067fc:	449a      	add	sl, r3
 80067fe:	f1c6 0620 	rsb	r6, r6, #32
 8006802:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006806:	f000 f99c 	bl	8006b42 <__hi0bits>
 800680a:	42b0      	cmp	r0, r6
 800680c:	dbe7      	blt.n	80067de <__gethex+0x410>
 800680e:	e7f0      	b.n	80067f2 <__gethex+0x424>

08006810 <L_shift>:
 8006810:	f1c2 0208 	rsb	r2, r2, #8
 8006814:	0092      	lsls	r2, r2, #2
 8006816:	b570      	push	{r4, r5, r6, lr}
 8006818:	f1c2 0620 	rsb	r6, r2, #32
 800681c:	6843      	ldr	r3, [r0, #4]
 800681e:	6804      	ldr	r4, [r0, #0]
 8006820:	fa03 f506 	lsl.w	r5, r3, r6
 8006824:	432c      	orrs	r4, r5
 8006826:	40d3      	lsrs	r3, r2
 8006828:	6004      	str	r4, [r0, #0]
 800682a:	f840 3f04 	str.w	r3, [r0, #4]!
 800682e:	4288      	cmp	r0, r1
 8006830:	d3f4      	bcc.n	800681c <L_shift+0xc>
 8006832:	bd70      	pop	{r4, r5, r6, pc}

08006834 <__match>:
 8006834:	b530      	push	{r4, r5, lr}
 8006836:	6803      	ldr	r3, [r0, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800683e:	b914      	cbnz	r4, 8006846 <__match+0x12>
 8006840:	6003      	str	r3, [r0, #0]
 8006842:	2001      	movs	r0, #1
 8006844:	bd30      	pop	{r4, r5, pc}
 8006846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800684a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800684e:	2d19      	cmp	r5, #25
 8006850:	bf98      	it	ls
 8006852:	3220      	addls	r2, #32
 8006854:	42a2      	cmp	r2, r4
 8006856:	d0f0      	beq.n	800683a <__match+0x6>
 8006858:	2000      	movs	r0, #0
 800685a:	e7f3      	b.n	8006844 <__match+0x10>

0800685c <__hexnan>:
 800685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	680b      	ldr	r3, [r1, #0]
 8006862:	6801      	ldr	r1, [r0, #0]
 8006864:	115f      	asrs	r7, r3, #5
 8006866:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800686a:	f013 031f 	ands.w	r3, r3, #31
 800686e:	b087      	sub	sp, #28
 8006870:	bf18      	it	ne
 8006872:	3704      	addne	r7, #4
 8006874:	2500      	movs	r5, #0
 8006876:	1f3e      	subs	r6, r7, #4
 8006878:	4682      	mov	sl, r0
 800687a:	4690      	mov	r8, r2
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	f847 5c04 	str.w	r5, [r7, #-4]
 8006882:	46b1      	mov	r9, r6
 8006884:	4634      	mov	r4, r6
 8006886:	9502      	str	r5, [sp, #8]
 8006888:	46ab      	mov	fp, r5
 800688a:	784a      	ldrb	r2, [r1, #1]
 800688c:	1c4b      	adds	r3, r1, #1
 800688e:	9303      	str	r3, [sp, #12]
 8006890:	b342      	cbz	r2, 80068e4 <__hexnan+0x88>
 8006892:	4610      	mov	r0, r2
 8006894:	9105      	str	r1, [sp, #20]
 8006896:	9204      	str	r2, [sp, #16]
 8006898:	f7ff fd84 	bl	80063a4 <__hexdig_fun>
 800689c:	2800      	cmp	r0, #0
 800689e:	d143      	bne.n	8006928 <__hexnan+0xcc>
 80068a0:	9a04      	ldr	r2, [sp, #16]
 80068a2:	9905      	ldr	r1, [sp, #20]
 80068a4:	2a20      	cmp	r2, #32
 80068a6:	d818      	bhi.n	80068da <__hexnan+0x7e>
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	459b      	cmp	fp, r3
 80068ac:	dd13      	ble.n	80068d6 <__hexnan+0x7a>
 80068ae:	454c      	cmp	r4, r9
 80068b0:	d206      	bcs.n	80068c0 <__hexnan+0x64>
 80068b2:	2d07      	cmp	r5, #7
 80068b4:	dc04      	bgt.n	80068c0 <__hexnan+0x64>
 80068b6:	462a      	mov	r2, r5
 80068b8:	4649      	mov	r1, r9
 80068ba:	4620      	mov	r0, r4
 80068bc:	f7ff ffa8 	bl	8006810 <L_shift>
 80068c0:	4544      	cmp	r4, r8
 80068c2:	d944      	bls.n	800694e <__hexnan+0xf2>
 80068c4:	2300      	movs	r3, #0
 80068c6:	f1a4 0904 	sub.w	r9, r4, #4
 80068ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80068ce:	f8cd b008 	str.w	fp, [sp, #8]
 80068d2:	464c      	mov	r4, r9
 80068d4:	461d      	mov	r5, r3
 80068d6:	9903      	ldr	r1, [sp, #12]
 80068d8:	e7d7      	b.n	800688a <__hexnan+0x2e>
 80068da:	2a29      	cmp	r2, #41	; 0x29
 80068dc:	d14a      	bne.n	8006974 <__hexnan+0x118>
 80068de:	3102      	adds	r1, #2
 80068e0:	f8ca 1000 	str.w	r1, [sl]
 80068e4:	f1bb 0f00 	cmp.w	fp, #0
 80068e8:	d044      	beq.n	8006974 <__hexnan+0x118>
 80068ea:	454c      	cmp	r4, r9
 80068ec:	d206      	bcs.n	80068fc <__hexnan+0xa0>
 80068ee:	2d07      	cmp	r5, #7
 80068f0:	dc04      	bgt.n	80068fc <__hexnan+0xa0>
 80068f2:	462a      	mov	r2, r5
 80068f4:	4649      	mov	r1, r9
 80068f6:	4620      	mov	r0, r4
 80068f8:	f7ff ff8a 	bl	8006810 <L_shift>
 80068fc:	4544      	cmp	r4, r8
 80068fe:	d928      	bls.n	8006952 <__hexnan+0xf6>
 8006900:	4643      	mov	r3, r8
 8006902:	f854 2b04 	ldr.w	r2, [r4], #4
 8006906:	f843 2b04 	str.w	r2, [r3], #4
 800690a:	42a6      	cmp	r6, r4
 800690c:	d2f9      	bcs.n	8006902 <__hexnan+0xa6>
 800690e:	2200      	movs	r2, #0
 8006910:	f843 2b04 	str.w	r2, [r3], #4
 8006914:	429e      	cmp	r6, r3
 8006916:	d2fb      	bcs.n	8006910 <__hexnan+0xb4>
 8006918:	6833      	ldr	r3, [r6, #0]
 800691a:	b91b      	cbnz	r3, 8006924 <__hexnan+0xc8>
 800691c:	4546      	cmp	r6, r8
 800691e:	d127      	bne.n	8006970 <__hexnan+0x114>
 8006920:	2301      	movs	r3, #1
 8006922:	6033      	str	r3, [r6, #0]
 8006924:	2005      	movs	r0, #5
 8006926:	e026      	b.n	8006976 <__hexnan+0x11a>
 8006928:	3501      	adds	r5, #1
 800692a:	2d08      	cmp	r5, #8
 800692c:	f10b 0b01 	add.w	fp, fp, #1
 8006930:	dd06      	ble.n	8006940 <__hexnan+0xe4>
 8006932:	4544      	cmp	r4, r8
 8006934:	d9cf      	bls.n	80068d6 <__hexnan+0x7a>
 8006936:	2300      	movs	r3, #0
 8006938:	f844 3c04 	str.w	r3, [r4, #-4]
 800693c:	2501      	movs	r5, #1
 800693e:	3c04      	subs	r4, #4
 8006940:	6822      	ldr	r2, [r4, #0]
 8006942:	f000 000f 	and.w	r0, r0, #15
 8006946:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800694a:	6020      	str	r0, [r4, #0]
 800694c:	e7c3      	b.n	80068d6 <__hexnan+0x7a>
 800694e:	2508      	movs	r5, #8
 8006950:	e7c1      	b.n	80068d6 <__hexnan+0x7a>
 8006952:	9b01      	ldr	r3, [sp, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0df      	beq.n	8006918 <__hexnan+0xbc>
 8006958:	f04f 32ff 	mov.w	r2, #4294967295
 800695c:	f1c3 0320 	rsb	r3, r3, #32
 8006960:	fa22 f303 	lsr.w	r3, r2, r3
 8006964:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006968:	401a      	ands	r2, r3
 800696a:	f847 2c04 	str.w	r2, [r7, #-4]
 800696e:	e7d3      	b.n	8006918 <__hexnan+0xbc>
 8006970:	3e04      	subs	r6, #4
 8006972:	e7d1      	b.n	8006918 <__hexnan+0xbc>
 8006974:	2004      	movs	r0, #4
 8006976:	b007      	add	sp, #28
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800697c <__localeconv_l>:
 800697c:	30f0      	adds	r0, #240	; 0xf0
 800697e:	4770      	bx	lr

08006980 <__ascii_mbtowc>:
 8006980:	b082      	sub	sp, #8
 8006982:	b901      	cbnz	r1, 8006986 <__ascii_mbtowc+0x6>
 8006984:	a901      	add	r1, sp, #4
 8006986:	b142      	cbz	r2, 800699a <__ascii_mbtowc+0x1a>
 8006988:	b14b      	cbz	r3, 800699e <__ascii_mbtowc+0x1e>
 800698a:	7813      	ldrb	r3, [r2, #0]
 800698c:	600b      	str	r3, [r1, #0]
 800698e:	7812      	ldrb	r2, [r2, #0]
 8006990:	1c10      	adds	r0, r2, #0
 8006992:	bf18      	it	ne
 8006994:	2001      	movne	r0, #1
 8006996:	b002      	add	sp, #8
 8006998:	4770      	bx	lr
 800699a:	4610      	mov	r0, r2
 800699c:	e7fb      	b.n	8006996 <__ascii_mbtowc+0x16>
 800699e:	f06f 0001 	mvn.w	r0, #1
 80069a2:	e7f8      	b.n	8006996 <__ascii_mbtowc+0x16>

080069a4 <memcpy>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	1e43      	subs	r3, r0, #1
 80069a8:	440a      	add	r2, r1
 80069aa:	4291      	cmp	r1, r2
 80069ac:	d100      	bne.n	80069b0 <memcpy+0xc>
 80069ae:	bd10      	pop	{r4, pc}
 80069b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069b8:	e7f7      	b.n	80069aa <memcpy+0x6>

080069ba <_Balloc>:
 80069ba:	b570      	push	{r4, r5, r6, lr}
 80069bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80069be:	4604      	mov	r4, r0
 80069c0:	460e      	mov	r6, r1
 80069c2:	b93d      	cbnz	r5, 80069d4 <_Balloc+0x1a>
 80069c4:	2010      	movs	r0, #16
 80069c6:	f000 fc8f 	bl	80072e8 <malloc>
 80069ca:	6260      	str	r0, [r4, #36]	; 0x24
 80069cc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069d0:	6005      	str	r5, [r0, #0]
 80069d2:	60c5      	str	r5, [r0, #12]
 80069d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80069d6:	68eb      	ldr	r3, [r5, #12]
 80069d8:	b183      	cbz	r3, 80069fc <_Balloc+0x42>
 80069da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80069e2:	b9b8      	cbnz	r0, 8006a14 <_Balloc+0x5a>
 80069e4:	2101      	movs	r1, #1
 80069e6:	fa01 f506 	lsl.w	r5, r1, r6
 80069ea:	1d6a      	adds	r2, r5, #5
 80069ec:	0092      	lsls	r2, r2, #2
 80069ee:	4620      	mov	r0, r4
 80069f0:	f000 fbe1 	bl	80071b6 <_calloc_r>
 80069f4:	b160      	cbz	r0, 8006a10 <_Balloc+0x56>
 80069f6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80069fa:	e00e      	b.n	8006a1a <_Balloc+0x60>
 80069fc:	2221      	movs	r2, #33	; 0x21
 80069fe:	2104      	movs	r1, #4
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 fbd8 	bl	80071b6 <_calloc_r>
 8006a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a08:	60e8      	str	r0, [r5, #12]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e4      	bne.n	80069da <_Balloc+0x20>
 8006a10:	2000      	movs	r0, #0
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
 8006a14:	6802      	ldr	r2, [r0, #0]
 8006a16:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a20:	e7f7      	b.n	8006a12 <_Balloc+0x58>

08006a22 <_Bfree>:
 8006a22:	b570      	push	{r4, r5, r6, lr}
 8006a24:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006a26:	4606      	mov	r6, r0
 8006a28:	460d      	mov	r5, r1
 8006a2a:	b93c      	cbnz	r4, 8006a3c <_Bfree+0x1a>
 8006a2c:	2010      	movs	r0, #16
 8006a2e:	f000 fc5b 	bl	80072e8 <malloc>
 8006a32:	6270      	str	r0, [r6, #36]	; 0x24
 8006a34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a38:	6004      	str	r4, [r0, #0]
 8006a3a:	60c4      	str	r4, [r0, #12]
 8006a3c:	b13d      	cbz	r5, 8006a4e <_Bfree+0x2c>
 8006a3e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006a40:	686a      	ldr	r2, [r5, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a48:	6029      	str	r1, [r5, #0]
 8006a4a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}

08006a50 <__multadd>:
 8006a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a54:	690d      	ldr	r5, [r1, #16]
 8006a56:	461f      	mov	r7, r3
 8006a58:	4606      	mov	r6, r0
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	f101 0c14 	add.w	ip, r1, #20
 8006a60:	2300      	movs	r3, #0
 8006a62:	f8dc 0000 	ldr.w	r0, [ip]
 8006a66:	b281      	uxth	r1, r0
 8006a68:	fb02 7101 	mla	r1, r2, r1, r7
 8006a6c:	0c0f      	lsrs	r7, r1, #16
 8006a6e:	0c00      	lsrs	r0, r0, #16
 8006a70:	fb02 7000 	mla	r0, r2, r0, r7
 8006a74:	b289      	uxth	r1, r1
 8006a76:	3301      	adds	r3, #1
 8006a78:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006a7c:	429d      	cmp	r5, r3
 8006a7e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006a82:	f84c 1b04 	str.w	r1, [ip], #4
 8006a86:	dcec      	bgt.n	8006a62 <__multadd+0x12>
 8006a88:	b1d7      	cbz	r7, 8006ac0 <__multadd+0x70>
 8006a8a:	68a3      	ldr	r3, [r4, #8]
 8006a8c:	42ab      	cmp	r3, r5
 8006a8e:	dc12      	bgt.n	8006ab6 <__multadd+0x66>
 8006a90:	6861      	ldr	r1, [r4, #4]
 8006a92:	4630      	mov	r0, r6
 8006a94:	3101      	adds	r1, #1
 8006a96:	f7ff ff90 	bl	80069ba <_Balloc>
 8006a9a:	6922      	ldr	r2, [r4, #16]
 8006a9c:	3202      	adds	r2, #2
 8006a9e:	f104 010c 	add.w	r1, r4, #12
 8006aa2:	4680      	mov	r8, r0
 8006aa4:	0092      	lsls	r2, r2, #2
 8006aa6:	300c      	adds	r0, #12
 8006aa8:	f7ff ff7c 	bl	80069a4 <memcpy>
 8006aac:	4621      	mov	r1, r4
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f7ff ffb7 	bl	8006a22 <_Bfree>
 8006ab4:	4644      	mov	r4, r8
 8006ab6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006aba:	3501      	adds	r5, #1
 8006abc:	615f      	str	r7, [r3, #20]
 8006abe:	6125      	str	r5, [r4, #16]
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006ac6 <__s2b>:
 8006ac6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aca:	460c      	mov	r4, r1
 8006acc:	4615      	mov	r5, r2
 8006ace:	461f      	mov	r7, r3
 8006ad0:	2209      	movs	r2, #9
 8006ad2:	3308      	adds	r3, #8
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ada:	2100      	movs	r1, #0
 8006adc:	2201      	movs	r2, #1
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	db20      	blt.n	8006b24 <__s2b+0x5e>
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff ff69 	bl	80069ba <_Balloc>
 8006ae8:	9b08      	ldr	r3, [sp, #32]
 8006aea:	6143      	str	r3, [r0, #20]
 8006aec:	2d09      	cmp	r5, #9
 8006aee:	f04f 0301 	mov.w	r3, #1
 8006af2:	6103      	str	r3, [r0, #16]
 8006af4:	dd19      	ble.n	8006b2a <__s2b+0x64>
 8006af6:	f104 0809 	add.w	r8, r4, #9
 8006afa:	46c1      	mov	r9, r8
 8006afc:	442c      	add	r4, r5
 8006afe:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006b02:	4601      	mov	r1, r0
 8006b04:	3b30      	subs	r3, #48	; 0x30
 8006b06:	220a      	movs	r2, #10
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f7ff ffa1 	bl	8006a50 <__multadd>
 8006b0e:	45a1      	cmp	r9, r4
 8006b10:	d1f5      	bne.n	8006afe <__s2b+0x38>
 8006b12:	eb08 0405 	add.w	r4, r8, r5
 8006b16:	3c08      	subs	r4, #8
 8006b18:	1b2d      	subs	r5, r5, r4
 8006b1a:	1963      	adds	r3, r4, r5
 8006b1c:	42bb      	cmp	r3, r7
 8006b1e:	db07      	blt.n	8006b30 <__s2b+0x6a>
 8006b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b24:	0052      	lsls	r2, r2, #1
 8006b26:	3101      	adds	r1, #1
 8006b28:	e7d9      	b.n	8006ade <__s2b+0x18>
 8006b2a:	340a      	adds	r4, #10
 8006b2c:	2509      	movs	r5, #9
 8006b2e:	e7f3      	b.n	8006b18 <__s2b+0x52>
 8006b30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b34:	4601      	mov	r1, r0
 8006b36:	3b30      	subs	r3, #48	; 0x30
 8006b38:	220a      	movs	r2, #10
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f7ff ff88 	bl	8006a50 <__multadd>
 8006b40:	e7eb      	b.n	8006b1a <__s2b+0x54>

08006b42 <__hi0bits>:
 8006b42:	0c02      	lsrs	r2, r0, #16
 8006b44:	0412      	lsls	r2, r2, #16
 8006b46:	4603      	mov	r3, r0
 8006b48:	b9b2      	cbnz	r2, 8006b78 <__hi0bits+0x36>
 8006b4a:	0403      	lsls	r3, r0, #16
 8006b4c:	2010      	movs	r0, #16
 8006b4e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006b52:	bf04      	itt	eq
 8006b54:	021b      	lsleq	r3, r3, #8
 8006b56:	3008      	addeq	r0, #8
 8006b58:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b5c:	bf04      	itt	eq
 8006b5e:	011b      	lsleq	r3, r3, #4
 8006b60:	3004      	addeq	r0, #4
 8006b62:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b66:	bf04      	itt	eq
 8006b68:	009b      	lsleq	r3, r3, #2
 8006b6a:	3002      	addeq	r0, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	db06      	blt.n	8006b7e <__hi0bits+0x3c>
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	d503      	bpl.n	8006b7c <__hi0bits+0x3a>
 8006b74:	3001      	adds	r0, #1
 8006b76:	4770      	bx	lr
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e7e8      	b.n	8006b4e <__hi0bits+0xc>
 8006b7c:	2020      	movs	r0, #32
 8006b7e:	4770      	bx	lr

08006b80 <__lo0bits>:
 8006b80:	6803      	ldr	r3, [r0, #0]
 8006b82:	f013 0207 	ands.w	r2, r3, #7
 8006b86:	4601      	mov	r1, r0
 8006b88:	d00b      	beq.n	8006ba2 <__lo0bits+0x22>
 8006b8a:	07da      	lsls	r2, r3, #31
 8006b8c:	d423      	bmi.n	8006bd6 <__lo0bits+0x56>
 8006b8e:	0798      	lsls	r0, r3, #30
 8006b90:	bf49      	itett	mi
 8006b92:	085b      	lsrmi	r3, r3, #1
 8006b94:	089b      	lsrpl	r3, r3, #2
 8006b96:	2001      	movmi	r0, #1
 8006b98:	600b      	strmi	r3, [r1, #0]
 8006b9a:	bf5c      	itt	pl
 8006b9c:	600b      	strpl	r3, [r1, #0]
 8006b9e:	2002      	movpl	r0, #2
 8006ba0:	4770      	bx	lr
 8006ba2:	b298      	uxth	r0, r3
 8006ba4:	b9a8      	cbnz	r0, 8006bd2 <__lo0bits+0x52>
 8006ba6:	0c1b      	lsrs	r3, r3, #16
 8006ba8:	2010      	movs	r0, #16
 8006baa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006bae:	bf04      	itt	eq
 8006bb0:	0a1b      	lsreq	r3, r3, #8
 8006bb2:	3008      	addeq	r0, #8
 8006bb4:	071a      	lsls	r2, r3, #28
 8006bb6:	bf04      	itt	eq
 8006bb8:	091b      	lsreq	r3, r3, #4
 8006bba:	3004      	addeq	r0, #4
 8006bbc:	079a      	lsls	r2, r3, #30
 8006bbe:	bf04      	itt	eq
 8006bc0:	089b      	lsreq	r3, r3, #2
 8006bc2:	3002      	addeq	r0, #2
 8006bc4:	07da      	lsls	r2, r3, #31
 8006bc6:	d402      	bmi.n	8006bce <__lo0bits+0x4e>
 8006bc8:	085b      	lsrs	r3, r3, #1
 8006bca:	d006      	beq.n	8006bda <__lo0bits+0x5a>
 8006bcc:	3001      	adds	r0, #1
 8006bce:	600b      	str	r3, [r1, #0]
 8006bd0:	4770      	bx	lr
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	e7e9      	b.n	8006baa <__lo0bits+0x2a>
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	4770      	bx	lr
 8006bda:	2020      	movs	r0, #32
 8006bdc:	4770      	bx	lr

08006bde <__i2b>:
 8006bde:	b510      	push	{r4, lr}
 8006be0:	460c      	mov	r4, r1
 8006be2:	2101      	movs	r1, #1
 8006be4:	f7ff fee9 	bl	80069ba <_Balloc>
 8006be8:	2201      	movs	r2, #1
 8006bea:	6144      	str	r4, [r0, #20]
 8006bec:	6102      	str	r2, [r0, #16]
 8006bee:	bd10      	pop	{r4, pc}

08006bf0 <__multiply>:
 8006bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	690a      	ldr	r2, [r1, #16]
 8006bf8:	6923      	ldr	r3, [r4, #16]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	bfb8      	it	lt
 8006bfe:	460b      	movlt	r3, r1
 8006c00:	4688      	mov	r8, r1
 8006c02:	bfbc      	itt	lt
 8006c04:	46a0      	movlt	r8, r4
 8006c06:	461c      	movlt	r4, r3
 8006c08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006c0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006c10:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006c18:	eb07 0609 	add.w	r6, r7, r9
 8006c1c:	42b3      	cmp	r3, r6
 8006c1e:	bfb8      	it	lt
 8006c20:	3101      	addlt	r1, #1
 8006c22:	f7ff feca 	bl	80069ba <_Balloc>
 8006c26:	f100 0514 	add.w	r5, r0, #20
 8006c2a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006c2e:	462b      	mov	r3, r5
 8006c30:	2200      	movs	r2, #0
 8006c32:	4573      	cmp	r3, lr
 8006c34:	d316      	bcc.n	8006c64 <__multiply+0x74>
 8006c36:	f104 0214 	add.w	r2, r4, #20
 8006c3a:	f108 0114 	add.w	r1, r8, #20
 8006c3e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006c42:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	9b00      	ldr	r3, [sp, #0]
 8006c4a:	9201      	str	r2, [sp, #4]
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d80c      	bhi.n	8006c6a <__multiply+0x7a>
 8006c50:	2e00      	cmp	r6, #0
 8006c52:	dd03      	ble.n	8006c5c <__multiply+0x6c>
 8006c54:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d05d      	beq.n	8006d18 <__multiply+0x128>
 8006c5c:	6106      	str	r6, [r0, #16]
 8006c5e:	b003      	add	sp, #12
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c64:	f843 2b04 	str.w	r2, [r3], #4
 8006c68:	e7e3      	b.n	8006c32 <__multiply+0x42>
 8006c6a:	f8b2 b000 	ldrh.w	fp, [r2]
 8006c6e:	f1bb 0f00 	cmp.w	fp, #0
 8006c72:	d023      	beq.n	8006cbc <__multiply+0xcc>
 8006c74:	4689      	mov	r9, r1
 8006c76:	46ac      	mov	ip, r5
 8006c78:	f04f 0800 	mov.w	r8, #0
 8006c7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006c80:	f8dc a000 	ldr.w	sl, [ip]
 8006c84:	b2a3      	uxth	r3, r4
 8006c86:	fa1f fa8a 	uxth.w	sl, sl
 8006c8a:	fb0b a303 	mla	r3, fp, r3, sl
 8006c8e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006c92:	f8dc 4000 	ldr.w	r4, [ip]
 8006c96:	4443      	add	r3, r8
 8006c98:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006c9c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006ca0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006ca4:	46e2      	mov	sl, ip
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006cac:	454f      	cmp	r7, r9
 8006cae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006cb2:	f84a 3b04 	str.w	r3, [sl], #4
 8006cb6:	d82b      	bhi.n	8006d10 <__multiply+0x120>
 8006cb8:	f8cc 8004 	str.w	r8, [ip, #4]
 8006cbc:	9b01      	ldr	r3, [sp, #4]
 8006cbe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006cc2:	3204      	adds	r2, #4
 8006cc4:	f1ba 0f00 	cmp.w	sl, #0
 8006cc8:	d020      	beq.n	8006d0c <__multiply+0x11c>
 8006cca:	682b      	ldr	r3, [r5, #0]
 8006ccc:	4689      	mov	r9, r1
 8006cce:	46a8      	mov	r8, r5
 8006cd0:	f04f 0b00 	mov.w	fp, #0
 8006cd4:	f8b9 c000 	ldrh.w	ip, [r9]
 8006cd8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006cdc:	fb0a 440c 	mla	r4, sl, ip, r4
 8006ce0:	445c      	add	r4, fp
 8006ce2:	46c4      	mov	ip, r8
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006cea:	f84c 3b04 	str.w	r3, [ip], #4
 8006cee:	f859 3b04 	ldr.w	r3, [r9], #4
 8006cf2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006cf6:	0c1b      	lsrs	r3, r3, #16
 8006cf8:	fb0a b303 	mla	r3, sl, r3, fp
 8006cfc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006d00:	454f      	cmp	r7, r9
 8006d02:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006d06:	d805      	bhi.n	8006d14 <__multiply+0x124>
 8006d08:	f8c8 3004 	str.w	r3, [r8, #4]
 8006d0c:	3504      	adds	r5, #4
 8006d0e:	e79b      	b.n	8006c48 <__multiply+0x58>
 8006d10:	46d4      	mov	ip, sl
 8006d12:	e7b3      	b.n	8006c7c <__multiply+0x8c>
 8006d14:	46e0      	mov	r8, ip
 8006d16:	e7dd      	b.n	8006cd4 <__multiply+0xe4>
 8006d18:	3e01      	subs	r6, #1
 8006d1a:	e799      	b.n	8006c50 <__multiply+0x60>

08006d1c <__pow5mult>:
 8006d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d20:	4615      	mov	r5, r2
 8006d22:	f012 0203 	ands.w	r2, r2, #3
 8006d26:	4606      	mov	r6, r0
 8006d28:	460f      	mov	r7, r1
 8006d2a:	d007      	beq.n	8006d3c <__pow5mult+0x20>
 8006d2c:	3a01      	subs	r2, #1
 8006d2e:	4c21      	ldr	r4, [pc, #132]	; (8006db4 <__pow5mult+0x98>)
 8006d30:	2300      	movs	r3, #0
 8006d32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d36:	f7ff fe8b 	bl	8006a50 <__multadd>
 8006d3a:	4607      	mov	r7, r0
 8006d3c:	10ad      	asrs	r5, r5, #2
 8006d3e:	d035      	beq.n	8006dac <__pow5mult+0x90>
 8006d40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d42:	b93c      	cbnz	r4, 8006d54 <__pow5mult+0x38>
 8006d44:	2010      	movs	r0, #16
 8006d46:	f000 facf 	bl	80072e8 <malloc>
 8006d4a:	6270      	str	r0, [r6, #36]	; 0x24
 8006d4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d50:	6004      	str	r4, [r0, #0]
 8006d52:	60c4      	str	r4, [r0, #12]
 8006d54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d5c:	b94c      	cbnz	r4, 8006d72 <__pow5mult+0x56>
 8006d5e:	f240 2171 	movw	r1, #625	; 0x271
 8006d62:	4630      	mov	r0, r6
 8006d64:	f7ff ff3b 	bl	8006bde <__i2b>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d6e:	4604      	mov	r4, r0
 8006d70:	6003      	str	r3, [r0, #0]
 8006d72:	f04f 0800 	mov.w	r8, #0
 8006d76:	07eb      	lsls	r3, r5, #31
 8006d78:	d50a      	bpl.n	8006d90 <__pow5mult+0x74>
 8006d7a:	4639      	mov	r1, r7
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f7ff ff36 	bl	8006bf0 <__multiply>
 8006d84:	4639      	mov	r1, r7
 8006d86:	4681      	mov	r9, r0
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f7ff fe4a 	bl	8006a22 <_Bfree>
 8006d8e:	464f      	mov	r7, r9
 8006d90:	106d      	asrs	r5, r5, #1
 8006d92:	d00b      	beq.n	8006dac <__pow5mult+0x90>
 8006d94:	6820      	ldr	r0, [r4, #0]
 8006d96:	b938      	cbnz	r0, 8006da8 <__pow5mult+0x8c>
 8006d98:	4622      	mov	r2, r4
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f7ff ff27 	bl	8006bf0 <__multiply>
 8006da2:	6020      	str	r0, [r4, #0]
 8006da4:	f8c0 8000 	str.w	r8, [r0]
 8006da8:	4604      	mov	r4, r0
 8006daa:	e7e4      	b.n	8006d76 <__pow5mult+0x5a>
 8006dac:	4638      	mov	r0, r7
 8006dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006db2:	bf00      	nop
 8006db4:	08007488 	.word	0x08007488

08006db8 <__lshift>:
 8006db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006dc2:	6923      	ldr	r3, [r4, #16]
 8006dc4:	6849      	ldr	r1, [r1, #4]
 8006dc6:	eb0a 0903 	add.w	r9, sl, r3
 8006dca:	68a3      	ldr	r3, [r4, #8]
 8006dcc:	4607      	mov	r7, r0
 8006dce:	4616      	mov	r6, r2
 8006dd0:	f109 0501 	add.w	r5, r9, #1
 8006dd4:	42ab      	cmp	r3, r5
 8006dd6:	db32      	blt.n	8006e3e <__lshift+0x86>
 8006dd8:	4638      	mov	r0, r7
 8006dda:	f7ff fdee 	bl	80069ba <_Balloc>
 8006dde:	2300      	movs	r3, #0
 8006de0:	4680      	mov	r8, r0
 8006de2:	f100 0114 	add.w	r1, r0, #20
 8006de6:	461a      	mov	r2, r3
 8006de8:	4553      	cmp	r3, sl
 8006dea:	db2b      	blt.n	8006e44 <__lshift+0x8c>
 8006dec:	6920      	ldr	r0, [r4, #16]
 8006dee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006df2:	f104 0314 	add.w	r3, r4, #20
 8006df6:	f016 021f 	ands.w	r2, r6, #31
 8006dfa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006dfe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e02:	d025      	beq.n	8006e50 <__lshift+0x98>
 8006e04:	f1c2 0e20 	rsb	lr, r2, #32
 8006e08:	2000      	movs	r0, #0
 8006e0a:	681e      	ldr	r6, [r3, #0]
 8006e0c:	468a      	mov	sl, r1
 8006e0e:	4096      	lsls	r6, r2
 8006e10:	4330      	orrs	r0, r6
 8006e12:	f84a 0b04 	str.w	r0, [sl], #4
 8006e16:	f853 0b04 	ldr.w	r0, [r3], #4
 8006e1a:	459c      	cmp	ip, r3
 8006e1c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006e20:	d814      	bhi.n	8006e4c <__lshift+0x94>
 8006e22:	6048      	str	r0, [r1, #4]
 8006e24:	b108      	cbz	r0, 8006e2a <__lshift+0x72>
 8006e26:	f109 0502 	add.w	r5, r9, #2
 8006e2a:	3d01      	subs	r5, #1
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006e32:	4621      	mov	r1, r4
 8006e34:	f7ff fdf5 	bl	8006a22 <_Bfree>
 8006e38:	4640      	mov	r0, r8
 8006e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3e:	3101      	adds	r1, #1
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	e7c7      	b.n	8006dd4 <__lshift+0x1c>
 8006e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	e7cd      	b.n	8006de8 <__lshift+0x30>
 8006e4c:	4651      	mov	r1, sl
 8006e4e:	e7dc      	b.n	8006e0a <__lshift+0x52>
 8006e50:	3904      	subs	r1, #4
 8006e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e56:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e5a:	459c      	cmp	ip, r3
 8006e5c:	d8f9      	bhi.n	8006e52 <__lshift+0x9a>
 8006e5e:	e7e4      	b.n	8006e2a <__lshift+0x72>

08006e60 <__mcmp>:
 8006e60:	6903      	ldr	r3, [r0, #16]
 8006e62:	690a      	ldr	r2, [r1, #16]
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	b530      	push	{r4, r5, lr}
 8006e68:	d10c      	bne.n	8006e84 <__mcmp+0x24>
 8006e6a:	0092      	lsls	r2, r2, #2
 8006e6c:	3014      	adds	r0, #20
 8006e6e:	3114      	adds	r1, #20
 8006e70:	1884      	adds	r4, r0, r2
 8006e72:	4411      	add	r1, r2
 8006e74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e7c:	4295      	cmp	r5, r2
 8006e7e:	d003      	beq.n	8006e88 <__mcmp+0x28>
 8006e80:	d305      	bcc.n	8006e8e <__mcmp+0x2e>
 8006e82:	2301      	movs	r3, #1
 8006e84:	4618      	mov	r0, r3
 8006e86:	bd30      	pop	{r4, r5, pc}
 8006e88:	42a0      	cmp	r0, r4
 8006e8a:	d3f3      	bcc.n	8006e74 <__mcmp+0x14>
 8006e8c:	e7fa      	b.n	8006e84 <__mcmp+0x24>
 8006e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e92:	e7f7      	b.n	8006e84 <__mcmp+0x24>

08006e94 <__mdiff>:
 8006e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	460d      	mov	r5, r1
 8006e9a:	4607      	mov	r7, r0
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	f7ff ffdd 	bl	8006e60 <__mcmp>
 8006ea6:	1e06      	subs	r6, r0, #0
 8006ea8:	d108      	bne.n	8006ebc <__mdiff+0x28>
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4638      	mov	r0, r7
 8006eae:	f7ff fd84 	bl	80069ba <_Balloc>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ebc:	bfa4      	itt	ge
 8006ebe:	4623      	movge	r3, r4
 8006ec0:	462c      	movge	r4, r5
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	6861      	ldr	r1, [r4, #4]
 8006ec6:	bfa6      	itte	ge
 8006ec8:	461d      	movge	r5, r3
 8006eca:	2600      	movge	r6, #0
 8006ecc:	2601      	movlt	r6, #1
 8006ece:	f7ff fd74 	bl	80069ba <_Balloc>
 8006ed2:	692b      	ldr	r3, [r5, #16]
 8006ed4:	60c6      	str	r6, [r0, #12]
 8006ed6:	6926      	ldr	r6, [r4, #16]
 8006ed8:	f105 0914 	add.w	r9, r5, #20
 8006edc:	f104 0214 	add.w	r2, r4, #20
 8006ee0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006ee4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006ee8:	f100 0514 	add.w	r5, r0, #20
 8006eec:	f04f 0e00 	mov.w	lr, #0
 8006ef0:	f852 ab04 	ldr.w	sl, [r2], #4
 8006ef4:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ef8:	fa1e f18a 	uxtah	r1, lr, sl
 8006efc:	b2a3      	uxth	r3, r4
 8006efe:	1ac9      	subs	r1, r1, r3
 8006f00:	0c23      	lsrs	r3, r4, #16
 8006f02:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006f06:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006f0a:	b289      	uxth	r1, r1
 8006f0c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006f10:	45c8      	cmp	r8, r9
 8006f12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006f16:	4694      	mov	ip, r2
 8006f18:	f845 3b04 	str.w	r3, [r5], #4
 8006f1c:	d8e8      	bhi.n	8006ef0 <__mdiff+0x5c>
 8006f1e:	45bc      	cmp	ip, r7
 8006f20:	d304      	bcc.n	8006f2c <__mdiff+0x98>
 8006f22:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006f26:	b183      	cbz	r3, 8006f4a <__mdiff+0xb6>
 8006f28:	6106      	str	r6, [r0, #16]
 8006f2a:	e7c5      	b.n	8006eb8 <__mdiff+0x24>
 8006f2c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006f30:	fa1e f381 	uxtah	r3, lr, r1
 8006f34:	141a      	asrs	r2, r3, #16
 8006f36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f40:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006f44:	f845 3b04 	str.w	r3, [r5], #4
 8006f48:	e7e9      	b.n	8006f1e <__mdiff+0x8a>
 8006f4a:	3e01      	subs	r6, #1
 8006f4c:	e7e9      	b.n	8006f22 <__mdiff+0x8e>
	...

08006f50 <__ulp>:
 8006f50:	4b12      	ldr	r3, [pc, #72]	; (8006f9c <__ulp+0x4c>)
 8006f52:	ee10 2a90 	vmov	r2, s1
 8006f56:	401a      	ands	r2, r3
 8006f58:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	dd04      	ble.n	8006f6a <__ulp+0x1a>
 8006f60:	2000      	movs	r0, #0
 8006f62:	4619      	mov	r1, r3
 8006f64:	ec41 0b10 	vmov	d0, r0, r1
 8006f68:	4770      	bx	lr
 8006f6a:	425b      	negs	r3, r3
 8006f6c:	151b      	asrs	r3, r3, #20
 8006f6e:	2b13      	cmp	r3, #19
 8006f70:	f04f 0000 	mov.w	r0, #0
 8006f74:	f04f 0100 	mov.w	r1, #0
 8006f78:	dc04      	bgt.n	8006f84 <__ulp+0x34>
 8006f7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006f7e:	fa42 f103 	asr.w	r1, r2, r3
 8006f82:	e7ef      	b.n	8006f64 <__ulp+0x14>
 8006f84:	3b14      	subs	r3, #20
 8006f86:	2b1e      	cmp	r3, #30
 8006f88:	f04f 0201 	mov.w	r2, #1
 8006f8c:	bfda      	itte	le
 8006f8e:	f1c3 031f 	rsble	r3, r3, #31
 8006f92:	fa02 f303 	lslle.w	r3, r2, r3
 8006f96:	4613      	movgt	r3, r2
 8006f98:	4618      	mov	r0, r3
 8006f9a:	e7e3      	b.n	8006f64 <__ulp+0x14>
 8006f9c:	7ff00000 	.word	0x7ff00000

08006fa0 <__b2d>:
 8006fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa2:	6905      	ldr	r5, [r0, #16]
 8006fa4:	f100 0714 	add.w	r7, r0, #20
 8006fa8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006fac:	1f2e      	subs	r6, r5, #4
 8006fae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f7ff fdc5 	bl	8006b42 <__hi0bits>
 8006fb8:	f1c0 0320 	rsb	r3, r0, #32
 8006fbc:	280a      	cmp	r0, #10
 8006fbe:	600b      	str	r3, [r1, #0]
 8006fc0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007038 <__b2d+0x98>
 8006fc4:	dc14      	bgt.n	8006ff0 <__b2d+0x50>
 8006fc6:	f1c0 0e0b 	rsb	lr, r0, #11
 8006fca:	fa24 f10e 	lsr.w	r1, r4, lr
 8006fce:	42b7      	cmp	r7, r6
 8006fd0:	ea41 030c 	orr.w	r3, r1, ip
 8006fd4:	bf34      	ite	cc
 8006fd6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006fda:	2100      	movcs	r1, #0
 8006fdc:	3015      	adds	r0, #21
 8006fde:	fa04 f000 	lsl.w	r0, r4, r0
 8006fe2:	fa21 f10e 	lsr.w	r1, r1, lr
 8006fe6:	ea40 0201 	orr.w	r2, r0, r1
 8006fea:	ec43 2b10 	vmov	d0, r2, r3
 8006fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff0:	42b7      	cmp	r7, r6
 8006ff2:	bf3a      	itte	cc
 8006ff4:	f1a5 0608 	subcc.w	r6, r5, #8
 8006ff8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006ffc:	2100      	movcs	r1, #0
 8006ffe:	380b      	subs	r0, #11
 8007000:	d015      	beq.n	800702e <__b2d+0x8e>
 8007002:	4084      	lsls	r4, r0
 8007004:	f1c0 0520 	rsb	r5, r0, #32
 8007008:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800700c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007010:	42be      	cmp	r6, r7
 8007012:	fa21 fc05 	lsr.w	ip, r1, r5
 8007016:	ea44 030c 	orr.w	r3, r4, ip
 800701a:	bf8c      	ite	hi
 800701c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007020:	2400      	movls	r4, #0
 8007022:	fa01 f000 	lsl.w	r0, r1, r0
 8007026:	40ec      	lsrs	r4, r5
 8007028:	ea40 0204 	orr.w	r2, r0, r4
 800702c:	e7dd      	b.n	8006fea <__b2d+0x4a>
 800702e:	ea44 030c 	orr.w	r3, r4, ip
 8007032:	460a      	mov	r2, r1
 8007034:	e7d9      	b.n	8006fea <__b2d+0x4a>
 8007036:	bf00      	nop
 8007038:	3ff00000 	.word	0x3ff00000

0800703c <__d2b>:
 800703c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007040:	460e      	mov	r6, r1
 8007042:	2101      	movs	r1, #1
 8007044:	ec59 8b10 	vmov	r8, r9, d0
 8007048:	4615      	mov	r5, r2
 800704a:	f7ff fcb6 	bl	80069ba <_Balloc>
 800704e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007052:	4607      	mov	r7, r0
 8007054:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007058:	bb34      	cbnz	r4, 80070a8 <__d2b+0x6c>
 800705a:	9301      	str	r3, [sp, #4]
 800705c:	f1b8 0300 	subs.w	r3, r8, #0
 8007060:	d027      	beq.n	80070b2 <__d2b+0x76>
 8007062:	a802      	add	r0, sp, #8
 8007064:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007068:	f7ff fd8a 	bl	8006b80 <__lo0bits>
 800706c:	9900      	ldr	r1, [sp, #0]
 800706e:	b1f0      	cbz	r0, 80070ae <__d2b+0x72>
 8007070:	9a01      	ldr	r2, [sp, #4]
 8007072:	f1c0 0320 	rsb	r3, r0, #32
 8007076:	fa02 f303 	lsl.w	r3, r2, r3
 800707a:	430b      	orrs	r3, r1
 800707c:	40c2      	lsrs	r2, r0
 800707e:	617b      	str	r3, [r7, #20]
 8007080:	9201      	str	r2, [sp, #4]
 8007082:	9b01      	ldr	r3, [sp, #4]
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	bf14      	ite	ne
 800708a:	2102      	movne	r1, #2
 800708c:	2101      	moveq	r1, #1
 800708e:	6139      	str	r1, [r7, #16]
 8007090:	b1c4      	cbz	r4, 80070c4 <__d2b+0x88>
 8007092:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007096:	4404      	add	r4, r0
 8007098:	6034      	str	r4, [r6, #0]
 800709a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800709e:	6028      	str	r0, [r5, #0]
 80070a0:	4638      	mov	r0, r7
 80070a2:	b003      	add	sp, #12
 80070a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070ac:	e7d5      	b.n	800705a <__d2b+0x1e>
 80070ae:	6179      	str	r1, [r7, #20]
 80070b0:	e7e7      	b.n	8007082 <__d2b+0x46>
 80070b2:	a801      	add	r0, sp, #4
 80070b4:	f7ff fd64 	bl	8006b80 <__lo0bits>
 80070b8:	9b01      	ldr	r3, [sp, #4]
 80070ba:	617b      	str	r3, [r7, #20]
 80070bc:	2101      	movs	r1, #1
 80070be:	6139      	str	r1, [r7, #16]
 80070c0:	3020      	adds	r0, #32
 80070c2:	e7e5      	b.n	8007090 <__d2b+0x54>
 80070c4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80070c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070cc:	6030      	str	r0, [r6, #0]
 80070ce:	6918      	ldr	r0, [r3, #16]
 80070d0:	f7ff fd37 	bl	8006b42 <__hi0bits>
 80070d4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80070d8:	e7e1      	b.n	800709e <__d2b+0x62>

080070da <__ratio>:
 80070da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070de:	4688      	mov	r8, r1
 80070e0:	4669      	mov	r1, sp
 80070e2:	4681      	mov	r9, r0
 80070e4:	f7ff ff5c 	bl	8006fa0 <__b2d>
 80070e8:	a901      	add	r1, sp, #4
 80070ea:	4640      	mov	r0, r8
 80070ec:	ec57 6b10 	vmov	r6, r7, d0
 80070f0:	f7ff ff56 	bl	8006fa0 <__b2d>
 80070f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80070f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80070fc:	eba3 0c02 	sub.w	ip, r3, r2
 8007100:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007104:	1a9b      	subs	r3, r3, r2
 8007106:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800710a:	ec5b ab10 	vmov	sl, fp, d0
 800710e:	2b00      	cmp	r3, #0
 8007110:	bfce      	itee	gt
 8007112:	463a      	movgt	r2, r7
 8007114:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007118:	465a      	movle	r2, fp
 800711a:	4659      	mov	r1, fp
 800711c:	463d      	mov	r5, r7
 800711e:	bfd4      	ite	le
 8007120:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007124:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007128:	4630      	mov	r0, r6
 800712a:	ee10 2a10 	vmov	r2, s0
 800712e:	460b      	mov	r3, r1
 8007130:	4629      	mov	r1, r5
 8007132:	f7f9 fb37 	bl	80007a4 <__aeabi_ddiv>
 8007136:	ec41 0b10 	vmov	d0, r0, r1
 800713a:	b003      	add	sp, #12
 800713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007140 <__copybits>:
 8007140:	3901      	subs	r1, #1
 8007142:	b510      	push	{r4, lr}
 8007144:	1149      	asrs	r1, r1, #5
 8007146:	6914      	ldr	r4, [r2, #16]
 8007148:	3101      	adds	r1, #1
 800714a:	f102 0314 	add.w	r3, r2, #20
 800714e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007152:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007156:	42a3      	cmp	r3, r4
 8007158:	4602      	mov	r2, r0
 800715a:	d303      	bcc.n	8007164 <__copybits+0x24>
 800715c:	2300      	movs	r3, #0
 800715e:	428a      	cmp	r2, r1
 8007160:	d305      	bcc.n	800716e <__copybits+0x2e>
 8007162:	bd10      	pop	{r4, pc}
 8007164:	f853 2b04 	ldr.w	r2, [r3], #4
 8007168:	f840 2b04 	str.w	r2, [r0], #4
 800716c:	e7f3      	b.n	8007156 <__copybits+0x16>
 800716e:	f842 3b04 	str.w	r3, [r2], #4
 8007172:	e7f4      	b.n	800715e <__copybits+0x1e>

08007174 <__any_on>:
 8007174:	f100 0214 	add.w	r2, r0, #20
 8007178:	6900      	ldr	r0, [r0, #16]
 800717a:	114b      	asrs	r3, r1, #5
 800717c:	4298      	cmp	r0, r3
 800717e:	b510      	push	{r4, lr}
 8007180:	db11      	blt.n	80071a6 <__any_on+0x32>
 8007182:	dd0a      	ble.n	800719a <__any_on+0x26>
 8007184:	f011 011f 	ands.w	r1, r1, #31
 8007188:	d007      	beq.n	800719a <__any_on+0x26>
 800718a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800718e:	fa24 f001 	lsr.w	r0, r4, r1
 8007192:	fa00 f101 	lsl.w	r1, r0, r1
 8007196:	428c      	cmp	r4, r1
 8007198:	d10b      	bne.n	80071b2 <__any_on+0x3e>
 800719a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800719e:	4293      	cmp	r3, r2
 80071a0:	d803      	bhi.n	80071aa <__any_on+0x36>
 80071a2:	2000      	movs	r0, #0
 80071a4:	bd10      	pop	{r4, pc}
 80071a6:	4603      	mov	r3, r0
 80071a8:	e7f7      	b.n	800719a <__any_on+0x26>
 80071aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80071ae:	2900      	cmp	r1, #0
 80071b0:	d0f5      	beq.n	800719e <__any_on+0x2a>
 80071b2:	2001      	movs	r0, #1
 80071b4:	e7f6      	b.n	80071a4 <__any_on+0x30>

080071b6 <_calloc_r>:
 80071b6:	b538      	push	{r3, r4, r5, lr}
 80071b8:	fb02 f401 	mul.w	r4, r2, r1
 80071bc:	4621      	mov	r1, r4
 80071be:	f000 f809 	bl	80071d4 <_malloc_r>
 80071c2:	4605      	mov	r5, r0
 80071c4:	b118      	cbz	r0, 80071ce <_calloc_r+0x18>
 80071c6:	4622      	mov	r2, r4
 80071c8:	2100      	movs	r1, #0
 80071ca:	f7fe fa85 	bl	80056d8 <memset>
 80071ce:	4628      	mov	r0, r5
 80071d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080071d4 <_malloc_r>:
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	1ccd      	adds	r5, r1, #3
 80071d8:	f025 0503 	bic.w	r5, r5, #3
 80071dc:	3508      	adds	r5, #8
 80071de:	2d0c      	cmp	r5, #12
 80071e0:	bf38      	it	cc
 80071e2:	250c      	movcc	r5, #12
 80071e4:	2d00      	cmp	r5, #0
 80071e6:	4606      	mov	r6, r0
 80071e8:	db01      	blt.n	80071ee <_malloc_r+0x1a>
 80071ea:	42a9      	cmp	r1, r5
 80071ec:	d903      	bls.n	80071f6 <_malloc_r+0x22>
 80071ee:	230c      	movs	r3, #12
 80071f0:	6033      	str	r3, [r6, #0]
 80071f2:	2000      	movs	r0, #0
 80071f4:	bd70      	pop	{r4, r5, r6, pc}
 80071f6:	f000 f87f 	bl	80072f8 <__malloc_lock>
 80071fa:	4a21      	ldr	r2, [pc, #132]	; (8007280 <_malloc_r+0xac>)
 80071fc:	6814      	ldr	r4, [r2, #0]
 80071fe:	4621      	mov	r1, r4
 8007200:	b991      	cbnz	r1, 8007228 <_malloc_r+0x54>
 8007202:	4c20      	ldr	r4, [pc, #128]	; (8007284 <_malloc_r+0xb0>)
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	b91b      	cbnz	r3, 8007210 <_malloc_r+0x3c>
 8007208:	4630      	mov	r0, r6
 800720a:	f000 f83d 	bl	8007288 <_sbrk_r>
 800720e:	6020      	str	r0, [r4, #0]
 8007210:	4629      	mov	r1, r5
 8007212:	4630      	mov	r0, r6
 8007214:	f000 f838 	bl	8007288 <_sbrk_r>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d124      	bne.n	8007266 <_malloc_r+0x92>
 800721c:	230c      	movs	r3, #12
 800721e:	6033      	str	r3, [r6, #0]
 8007220:	4630      	mov	r0, r6
 8007222:	f000 f86a 	bl	80072fa <__malloc_unlock>
 8007226:	e7e4      	b.n	80071f2 <_malloc_r+0x1e>
 8007228:	680b      	ldr	r3, [r1, #0]
 800722a:	1b5b      	subs	r3, r3, r5
 800722c:	d418      	bmi.n	8007260 <_malloc_r+0x8c>
 800722e:	2b0b      	cmp	r3, #11
 8007230:	d90f      	bls.n	8007252 <_malloc_r+0x7e>
 8007232:	600b      	str	r3, [r1, #0]
 8007234:	50cd      	str	r5, [r1, r3]
 8007236:	18cc      	adds	r4, r1, r3
 8007238:	4630      	mov	r0, r6
 800723a:	f000 f85e 	bl	80072fa <__malloc_unlock>
 800723e:	f104 000b 	add.w	r0, r4, #11
 8007242:	1d23      	adds	r3, r4, #4
 8007244:	f020 0007 	bic.w	r0, r0, #7
 8007248:	1ac3      	subs	r3, r0, r3
 800724a:	d0d3      	beq.n	80071f4 <_malloc_r+0x20>
 800724c:	425a      	negs	r2, r3
 800724e:	50e2      	str	r2, [r4, r3]
 8007250:	e7d0      	b.n	80071f4 <_malloc_r+0x20>
 8007252:	428c      	cmp	r4, r1
 8007254:	684b      	ldr	r3, [r1, #4]
 8007256:	bf16      	itet	ne
 8007258:	6063      	strne	r3, [r4, #4]
 800725a:	6013      	streq	r3, [r2, #0]
 800725c:	460c      	movne	r4, r1
 800725e:	e7eb      	b.n	8007238 <_malloc_r+0x64>
 8007260:	460c      	mov	r4, r1
 8007262:	6849      	ldr	r1, [r1, #4]
 8007264:	e7cc      	b.n	8007200 <_malloc_r+0x2c>
 8007266:	1cc4      	adds	r4, r0, #3
 8007268:	f024 0403 	bic.w	r4, r4, #3
 800726c:	42a0      	cmp	r0, r4
 800726e:	d005      	beq.n	800727c <_malloc_r+0xa8>
 8007270:	1a21      	subs	r1, r4, r0
 8007272:	4630      	mov	r0, r6
 8007274:	f000 f808 	bl	8007288 <_sbrk_r>
 8007278:	3001      	adds	r0, #1
 800727a:	d0cf      	beq.n	800721c <_malloc_r+0x48>
 800727c:	6025      	str	r5, [r4, #0]
 800727e:	e7db      	b.n	8007238 <_malloc_r+0x64>
 8007280:	20000264 	.word	0x20000264
 8007284:	20000268 	.word	0x20000268

08007288 <_sbrk_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4c06      	ldr	r4, [pc, #24]	; (80072a4 <_sbrk_r+0x1c>)
 800728c:	2300      	movs	r3, #0
 800728e:	4605      	mov	r5, r0
 8007290:	4608      	mov	r0, r1
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	f7fa fe5c 	bl	8001f50 <_sbrk>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d102      	bne.n	80072a2 <_sbrk_r+0x1a>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	b103      	cbz	r3, 80072a2 <_sbrk_r+0x1a>
 80072a0:	602b      	str	r3, [r5, #0]
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	2001d8cc 	.word	0x2001d8cc

080072a8 <strncmp>:
 80072a8:	b510      	push	{r4, lr}
 80072aa:	b16a      	cbz	r2, 80072c8 <strncmp+0x20>
 80072ac:	3901      	subs	r1, #1
 80072ae:	1884      	adds	r4, r0, r2
 80072b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80072b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d103      	bne.n	80072c4 <strncmp+0x1c>
 80072bc:	42a0      	cmp	r0, r4
 80072be:	d001      	beq.n	80072c4 <strncmp+0x1c>
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f5      	bne.n	80072b0 <strncmp+0x8>
 80072c4:	1a98      	subs	r0, r3, r2
 80072c6:	bd10      	pop	{r4, pc}
 80072c8:	4610      	mov	r0, r2
 80072ca:	e7fc      	b.n	80072c6 <strncmp+0x1e>

080072cc <__ascii_wctomb>:
 80072cc:	b149      	cbz	r1, 80072e2 <__ascii_wctomb+0x16>
 80072ce:	2aff      	cmp	r2, #255	; 0xff
 80072d0:	bf85      	ittet	hi
 80072d2:	238a      	movhi	r3, #138	; 0x8a
 80072d4:	6003      	strhi	r3, [r0, #0]
 80072d6:	700a      	strbls	r2, [r1, #0]
 80072d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80072dc:	bf98      	it	ls
 80072de:	2001      	movls	r0, #1
 80072e0:	4770      	bx	lr
 80072e2:	4608      	mov	r0, r1
 80072e4:	4770      	bx	lr
	...

080072e8 <malloc>:
 80072e8:	4b02      	ldr	r3, [pc, #8]	; (80072f4 <malloc+0xc>)
 80072ea:	4601      	mov	r1, r0
 80072ec:	6818      	ldr	r0, [r3, #0]
 80072ee:	f7ff bf71 	b.w	80071d4 <_malloc_r>
 80072f2:	bf00      	nop
 80072f4:	20000014 	.word	0x20000014

080072f8 <__malloc_lock>:
 80072f8:	4770      	bx	lr

080072fa <__malloc_unlock>:
 80072fa:	4770      	bx	lr

080072fc <_init>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr

08007308 <_fini>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	bf00      	nop
 800730c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730e:	bc08      	pop	{r3}
 8007310:	469e      	mov	lr, r3
 8007312:	4770      	bx	lr
