
Esclavo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08007630  08007630  00017630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b0  080078b0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078b8  080078b8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080078c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d6f8  200001e4  08007aa4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001d8dc  08007aa4  0002d8dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001123b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000254d  00000000  00000000  0003144f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  000339a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  00034620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021f1f  00000000  00000000  00035178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b338  00000000  00000000  00057097  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9e6e  00000000  00000000  000623cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c23d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c00  00000000  00000000  0012c2b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007614 	.word	0x08007614

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08007614 	.word	0x08007614

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b972 	b.w	8000eb0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9e08      	ldr	r6, [sp, #32]
 8000bea:	4604      	mov	r4, r0
 8000bec:	4688      	mov	r8, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d14b      	bne.n	8000c8a <__udivmoddi4+0xa6>
 8000bf2:	428a      	cmp	r2, r1
 8000bf4:	4615      	mov	r5, r2
 8000bf6:	d967      	bls.n	8000cc8 <__udivmoddi4+0xe4>
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0720 	rsb	r7, r2, #32
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0a:	4095      	lsls	r5, r2
 8000c0c:	ea47 0803 	orr.w	r8, r7, r3
 8000c10:	4094      	lsls	r4, r2
 8000c12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c16:	0c23      	lsrs	r3, r4, #16
 8000c18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c1c:	fa1f fc85 	uxth.w	ip, r5
 8000c20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c28:	fb07 f10c 	mul.w	r1, r7, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x60>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c36:	f080 811b 	bcs.w	8000e70 <__udivmoddi4+0x28c>
 8000c3a:	4299      	cmp	r1, r3
 8000c3c:	f240 8118 	bls.w	8000e70 <__udivmoddi4+0x28c>
 8000c40:	3f02      	subs	r7, #2
 8000c42:	442b      	add	r3, r5
 8000c44:	1a5b      	subs	r3, r3, r1
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c58:	45a4      	cmp	ip, r4
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x8c>
 8000c5c:	192c      	adds	r4, r5, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	f080 8107 	bcs.w	8000e74 <__udivmoddi4+0x290>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	f240 8104 	bls.w	8000e74 <__udivmoddi4+0x290>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	442c      	add	r4, r5
 8000c70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c74:	eba4 040c 	sub.w	r4, r4, ip
 8000c78:	2700      	movs	r7, #0
 8000c7a:	b11e      	cbz	r6, 8000c84 <__udivmoddi4+0xa0>
 8000c7c:	40d4      	lsrs	r4, r2
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e9c6 4300 	strd	r4, r3, [r6]
 8000c84:	4639      	mov	r1, r7
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d909      	bls.n	8000ca2 <__udivmoddi4+0xbe>
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	f000 80eb 	beq.w	8000e6a <__udivmoddi4+0x286>
 8000c94:	2700      	movs	r7, #0
 8000c96:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9a:	4638      	mov	r0, r7
 8000c9c:	4639      	mov	r1, r7
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	fab3 f783 	clz	r7, r3
 8000ca6:	2f00      	cmp	r7, #0
 8000ca8:	d147      	bne.n	8000d3a <__udivmoddi4+0x156>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xd0>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 80fa 	bhi.w	8000ea8 <__udivmoddi4+0x2c4>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4698      	mov	r8, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d0e0      	beq.n	8000c84 <__udivmoddi4+0xa0>
 8000cc2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cc6:	e7dd      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000cc8:	b902      	cbnz	r2, 8000ccc <__udivmoddi4+0xe8>
 8000cca:	deff      	udf	#255	; 0xff
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	f040 808f 	bne.w	8000df4 <__udivmoddi4+0x210>
 8000cd6:	1b49      	subs	r1, r1, r5
 8000cd8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cdc:	fa1f f885 	uxth.w	r8, r5
 8000ce0:	2701      	movs	r7, #1
 8000ce2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ce6:	0c23      	lsrs	r3, r4, #16
 8000ce8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf0:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x124>
 8000cf8:	18eb      	adds	r3, r5, r3
 8000cfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x122>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	f200 80cd 	bhi.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d06:	4684      	mov	ip, r0
 8000d08:	1a59      	subs	r1, r3, r1
 8000d0a:	b2a3      	uxth	r3, r4
 8000d0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d18:	fb08 f800 	mul.w	r8, r8, r0
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x14c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x14a>
 8000d28:	45a0      	cmp	r8, r4
 8000d2a:	f200 80b6 	bhi.w	8000e9a <__udivmoddi4+0x2b6>
 8000d2e:	4618      	mov	r0, r3
 8000d30:	eba4 0408 	sub.w	r4, r4, r8
 8000d34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d38:	e79f      	b.n	8000c7a <__udivmoddi4+0x96>
 8000d3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000d3e:	40bb      	lsls	r3, r7
 8000d40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d48:	fa01 f407 	lsl.w	r4, r1, r7
 8000d4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d58:	4325      	orrs	r5, r4
 8000d5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d5e:	0c2c      	lsrs	r4, r5, #16
 8000d60:	fb08 3319 	mls	r3, r8, r9, r3
 8000d64:	fa1f fa8e 	uxth.w	sl, lr
 8000d68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d70:	429c      	cmp	r4, r3
 8000d72:	fa02 f207 	lsl.w	r2, r2, r7
 8000d76:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b0>
 8000d7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d84:	f080 8087 	bcs.w	8000e96 <__udivmoddi4+0x2b2>
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	f240 8084 	bls.w	8000e96 <__udivmoddi4+0x2b2>
 8000d8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d92:	4473      	add	r3, lr
 8000d94:	1b1b      	subs	r3, r3, r4
 8000d96:	b2ad      	uxth	r5, r5
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da8:	45a2      	cmp	sl, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1da>
 8000dac:	eb1e 0404 	adds.w	r4, lr, r4
 8000db0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db4:	d26b      	bcs.n	8000e8e <__udivmoddi4+0x2aa>
 8000db6:	45a2      	cmp	sl, r4
 8000db8:	d969      	bls.n	8000e8e <__udivmoddi4+0x2aa>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4474      	add	r4, lr
 8000dbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	eba4 040a 	sub.w	r4, r4, sl
 8000dca:	454c      	cmp	r4, r9
 8000dcc:	46c2      	mov	sl, r8
 8000dce:	464b      	mov	r3, r9
 8000dd0:	d354      	bcc.n	8000e7c <__udivmoddi4+0x298>
 8000dd2:	d051      	beq.n	8000e78 <__udivmoddi4+0x294>
 8000dd4:	2e00      	cmp	r6, #0
 8000dd6:	d069      	beq.n	8000eac <__udivmoddi4+0x2c8>
 8000dd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000ddc:	eb64 0403 	sbc.w	r4, r4, r3
 8000de0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de4:	40fd      	lsrs	r5, r7
 8000de6:	40fc      	lsrs	r4, r7
 8000de8:	ea4c 0505 	orr.w	r5, ip, r5
 8000dec:	e9c6 5400 	strd	r5, r4, [r6]
 8000df0:	2700      	movs	r7, #0
 8000df2:	e747      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000df4:	f1c2 0320 	rsb	r3, r2, #32
 8000df8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dfc:	4095      	lsls	r5, r2
 8000dfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000e02:	fa21 f303 	lsr.w	r3, r1, r3
 8000e06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0a:	4338      	orrs	r0, r7
 8000e0c:	0c01      	lsrs	r1, r0, #16
 8000e0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e12:	fa1f f885 	uxth.w	r8, r5
 8000e16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1e:	fb07 f308 	mul.w	r3, r7, r8
 8000e22:	428b      	cmp	r3, r1
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x256>
 8000e2a:	1869      	adds	r1, r5, r1
 8000e2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e30:	d22f      	bcs.n	8000e92 <__udivmoddi4+0x2ae>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d92d      	bls.n	8000e92 <__udivmoddi4+0x2ae>
 8000e36:	3f02      	subs	r7, #2
 8000e38:	4429      	add	r1, r5
 8000e3a:	1acb      	subs	r3, r1, r3
 8000e3c:	b281      	uxth	r1, r0
 8000e3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb00 f308 	mul.w	r3, r0, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x27e>
 8000e52:	1869      	adds	r1, r5, r1
 8000e54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e58:	d217      	bcs.n	8000e8a <__udivmoddi4+0x2a6>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d915      	bls.n	8000e8a <__udivmoddi4+0x2a6>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4429      	add	r1, r5
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e68:	e73b      	b.n	8000ce2 <__udivmoddi4+0xfe>
 8000e6a:	4637      	mov	r7, r6
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e709      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000e70:	4607      	mov	r7, r0
 8000e72:	e6e7      	b.n	8000c44 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fb      	b.n	8000c70 <__udivmoddi4+0x8c>
 8000e78:	4541      	cmp	r1, r8
 8000e7a:	d2ab      	bcs.n	8000dd4 <__udivmoddi4+0x1f0>
 8000e7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e80:	eb69 020e 	sbc.w	r2, r9, lr
 8000e84:	3801      	subs	r0, #1
 8000e86:	4613      	mov	r3, r2
 8000e88:	e7a4      	b.n	8000dd4 <__udivmoddi4+0x1f0>
 8000e8a:	4660      	mov	r0, ip
 8000e8c:	e7e9      	b.n	8000e62 <__udivmoddi4+0x27e>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	e795      	b.n	8000dbe <__udivmoddi4+0x1da>
 8000e92:	4667      	mov	r7, ip
 8000e94:	e7d1      	b.n	8000e3a <__udivmoddi4+0x256>
 8000e96:	4681      	mov	r9, r0
 8000e98:	e77c      	b.n	8000d94 <__udivmoddi4+0x1b0>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	442c      	add	r4, r5
 8000e9e:	e747      	b.n	8000d30 <__udivmoddi4+0x14c>
 8000ea0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea4:	442b      	add	r3, r5
 8000ea6:	e72f      	b.n	8000d08 <__udivmoddi4+0x124>
 8000ea8:	4638      	mov	r0, r7
 8000eaa:	e708      	b.n	8000cbe <__udivmoddi4+0xda>
 8000eac:	4637      	mov	r7, r6
 8000eae:	e6e9      	b.n	8000c84 <__udivmoddi4+0xa0>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <identificador>:
 *
 * Created: 11/12/2019 18:47:43
 *  Author: Rodrigo Goñi
 */
#include "identificador.h"
int identificador(char *str, double *instrucciones, int cont) {
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b0c5      	sub	sp, #276	; 0x114
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	6018      	str	r0, [r3, #0]
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	6019      	str	r1, [r3, #0]
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	601a      	str	r2, [r3, #0]
	char tmp[50] = { 0 };
 8000eca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ece:	2232      	movs	r2, #50	; 0x32
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f004 fd8c 	bl	80059f0 <memset>
	double vec[20];
	char *puntero;
	int i = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	int j = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	int k = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	int l = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	int cont1 = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	double numero;
	while (i < cont) {
 8000ef6:	e240      	b.n	800137a <identificador+0x4c6>
		switch (str[i]) {
 8000ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000efc:	f107 020c 	add.w	r2, r7, #12
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	3b41      	subs	r3, #65	; 0x41
 8000f08:	2b31      	cmp	r3, #49	; 0x31
 8000f0a:	f200 8231 	bhi.w	8001370 <identificador+0x4bc>
 8000f0e:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <identificador+0x60>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08001035 	.word	0x08001035
 8000f18:	08001371 	.word	0x08001371
 8000f1c:	08001371 	.word	0x08001371
 8000f20:	0800108d 	.word	0x0800108d
 8000f24:	08001139 	.word	0x08001139
 8000f28:	08001371 	.word	0x08001371
 8000f2c:	08001371 	.word	0x08001371
 8000f30:	080010e3 	.word	0x080010e3
 8000f34:	080011e5 	.word	0x080011e5
 8000f38:	08001371 	.word	0x08001371
 8000f3c:	08001371 	.word	0x08001371
 8000f40:	08001371 	.word	0x08001371
 8000f44:	08001371 	.word	0x08001371
 8000f48:	08001371 	.word	0x08001371
 8000f4c:	08001371 	.word	0x08001371
 8000f50:	0800118f 	.word	0x0800118f
 8000f54:	08001371 	.word	0x08001371
 8000f58:	08000fdd 	.word	0x08000fdd
 8000f5c:	08001371 	.word	0x08001371
 8000f60:	08001371 	.word	0x08001371
 8000f64:	08001371 	.word	0x08001371
 8000f68:	08001371 	.word	0x08001371
 8000f6c:	08001371 	.word	0x08001371
 8000f70:	08001371 	.word	0x08001371
 8000f74:	08001371 	.word	0x08001371
 8000f78:	08001371 	.word	0x08001371
 8000f7c:	08001371 	.word	0x08001371
 8000f80:	08001371 	.word	0x08001371
 8000f84:	08001371 	.word	0x08001371
 8000f88:	08001371 	.word	0x08001371
 8000f8c:	08001371 	.word	0x08001371
 8000f90:	08001371 	.word	0x08001371
 8000f94:	08001035 	.word	0x08001035
 8000f98:	08001371 	.word	0x08001371
 8000f9c:	08001371 	.word	0x08001371
 8000fa0:	0800108d 	.word	0x0800108d
 8000fa4:	08001139 	.word	0x08001139
 8000fa8:	08001371 	.word	0x08001371
 8000fac:	08001371 	.word	0x08001371
 8000fb0:	080010e3 	.word	0x080010e3
 8000fb4:	080011e5 	.word	0x080011e5
 8000fb8:	08001371 	.word	0x08001371
 8000fbc:	08001371 	.word	0x08001371
 8000fc0:	08001371 	.word	0x08001371
 8000fc4:	08001371 	.word	0x08001371
 8000fc8:	08001371 	.word	0x08001371
 8000fcc:	08001371 	.word	0x08001371
 8000fd0:	0800118f 	.word	0x0800118f
 8000fd4:	08001371 	.word	0x08001371
 8000fd8:	08000fdd 	.word	0x08000fdd
		case 'r':
		case 'R':
			if (str[i + 1] == '/' || str[i + 1] == ':') {
 8000fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	f107 020c 	add.w	r2, r7, #12
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b2f      	cmp	r3, #47	; 0x2f
 8000fee:	d009      	beq.n	8001004 <identificador+0x150>
 8000ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	f107 020c 	add.w	r2, r7, #12
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b3a      	cmp	r3, #58	; 0x3a
 8001002:	d111      	bne.n	8001028 <identificador+0x174>
				instrucciones[j] = Estados;
 8001004:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	f107 0208 	add.w	r2, r7, #8
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	441a      	add	r2, r3
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800101a:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 800101e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001022:	3301      	adds	r3, #1
 8001024:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 8001028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800102c:	3301      	adds	r3, #1
 800102e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8001032:	e1a2      	b.n	800137a <identificador+0x4c6>
		case 'a':
		case 'A':
			if (str[i + 1] == '/' || str[i + 1] == ':') {
 8001034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001038:	3301      	adds	r3, #1
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b2f      	cmp	r3, #47	; 0x2f
 8001046:	d009      	beq.n	800105c <identificador+0x1a8>
 8001048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800104c:	3301      	adds	r3, #1
 800104e:	f107 020c 	add.w	r2, r7, #12
 8001052:	6812      	ldr	r2, [r2, #0]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b3a      	cmp	r3, #58	; 0x3a
 800105a:	d111      	bne.n	8001080 <identificador+0x1cc>
				instrucciones[j] = Activar;
 800105c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	f107 0208 	add.w	r2, r7, #8
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	441a      	add	r2, r3
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	f04f 0400 	mov.w	r4, #0
 8001072:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 8001076:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800107a:	3301      	adds	r3, #1
 800107c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 8001080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001084:	3301      	adds	r3, #1
 8001086:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 800108a:	e176      	b.n	800137a <identificador+0x4c6>
		case 'd':
		case 'D':
			if (str[i + 1] == '/' || str[i + 1] == ':') {
 800108c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001090:	3301      	adds	r3, #1
 8001092:	f107 020c 	add.w	r2, r7, #12
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b2f      	cmp	r3, #47	; 0x2f
 800109e:	d009      	beq.n	80010b4 <identificador+0x200>
 80010a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010a4:	3301      	adds	r3, #1
 80010a6:	f107 020c 	add.w	r2, r7, #12
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b3a      	cmp	r3, #58	; 0x3a
 80010b2:	d110      	bne.n	80010d6 <identificador+0x222>
				instrucciones[j] = Desactivar;
 80010b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	f107 0208 	add.w	r2, r7, #8
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	441a      	add	r2, r3
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	4cb4      	ldr	r4, [pc, #720]	; (8001398 <identificador+0x4e4>)
 80010c8:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 80010cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80010d0:	3301      	adds	r3, #1
 80010d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 80010d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010da:	3301      	adds	r3, #1
 80010dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 80010e0:	e14b      	b.n	800137a <identificador+0x4c6>
		case 'h':
		case 'H':
			if (str[i + 1] == '/' || str[i + 1] == ':') {
 80010e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010e6:	3301      	adds	r3, #1
 80010e8:	f107 020c 	add.w	r2, r7, #12
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b2f      	cmp	r3, #47	; 0x2f
 80010f4:	d009      	beq.n	800110a <identificador+0x256>
 80010f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010fa:	3301      	adds	r3, #1
 80010fc:	f107 020c 	add.w	r2, r7, #12
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b3a      	cmp	r3, #58	; 0x3a
 8001108:	d110      	bne.n	800112c <identificador+0x278>
				instrucciones[j] = Modo_homing;
 800110a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	f107 0208 	add.w	r2, r7, #8
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	441a      	add	r2, r3
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	4c9f      	ldr	r4, [pc, #636]	; (800139c <identificador+0x4e8>)
 800111e:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 8001122:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001126:	3301      	adds	r3, #1
 8001128:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 800112c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001130:	3301      	adds	r3, #1
 8001132:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8001136:	e120      	b.n	800137a <identificador+0x4c6>
		case 'e':
		case 'E':
			if (str[i + 1] == '/' || str[i + 1] == ':') {
 8001138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800113c:	3301      	adds	r3, #1
 800113e:	f107 020c 	add.w	r2, r7, #12
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b2f      	cmp	r3, #47	; 0x2f
 800114a:	d009      	beq.n	8001160 <identificador+0x2ac>
 800114c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001150:	3301      	adds	r3, #1
 8001152:	f107 020c 	add.w	r2, r7, #12
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b3a      	cmp	r3, #58	; 0x3a
 800115e:	d110      	bne.n	8001182 <identificador+0x2ce>
				instrucciones[j] = error;
 8001160:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	441a      	add	r2, r3
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	4c8b      	ldr	r4, [pc, #556]	; (80013a0 <identificador+0x4ec>)
 8001174:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 8001178:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800117c:	3301      	adds	r3, #1
 800117e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 8001182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001186:	3301      	adds	r3, #1
 8001188:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 800118c:	e0f5      	b.n	800137a <identificador+0x4c6>
		case 'p':
		case 'P':
			if (str[i + 1] == '/' || str[i + 1] == ':') {
 800118e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001192:	3301      	adds	r3, #1
 8001194:	f107 020c 	add.w	r2, r7, #12
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b2f      	cmp	r3, #47	; 0x2f
 80011a0:	d009      	beq.n	80011b6 <identificador+0x302>
 80011a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011a6:	3301      	adds	r3, #1
 80011a8:	f107 020c 	add.w	r2, r7, #12
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b3a      	cmp	r3, #58	; 0x3a
 80011b4:	d110      	bne.n	80011d8 <identificador+0x324>
				instrucciones[j] = Preguntar;
 80011b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	f107 0208 	add.w	r2, r7, #8
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	441a      	add	r2, r3
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	4c76      	ldr	r4, [pc, #472]	; (80013a4 <identificador+0x4f0>)
 80011ca:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 80011ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011d2:	3301      	adds	r3, #1
 80011d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 80011d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011dc:	3301      	adds	r3, #1
 80011de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 80011e2:	e0ca      	b.n	800137a <identificador+0x4c6>
		case 'i':
		case 'I':
			i++;
 80011e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011e8:	3301      	adds	r3, #1
 80011ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			while ((str[i] != '/') && (i < cont)) {
 80011ee:	e070      	b.n	80012d2 <identificador+0x41e>
				k = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
				if (str[i] == '_') {
 80011f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011fa:	f107 020c 	add.w	r2, r7, #12
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	4413      	add	r3, r2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b5f      	cmp	r3, #95	; 0x5f
 8001206:	d11d      	bne.n	8001244 <identificador+0x390>
					i++;
 8001208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800120c:	3301      	adds	r3, #1
 800120e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				}
				while ((str[i] != '_') && (i < cont) && (str[i] != '/')) {
 8001212:	e017      	b.n	8001244 <identificador+0x390>
					tmp[k] = str[i];
 8001214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001218:	f107 020c 	add.w	r2, r7, #12
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	4413      	add	r3, r2
 8001220:	7819      	ldrb	r1, [r3, #0]
 8001222:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800122a:	4413      	add	r3, r2
 800122c:	460a      	mov	r2, r1
 800122e:	701a      	strb	r2, [r3, #0]
					k++;
 8001230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001234:	3301      	adds	r3, #1
 8001236:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
					i++;
 800123a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800123e:	3301      	adds	r3, #1
 8001240:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				while ((str[i] != '_') && (i < cont) && (str[i] != '/')) {
 8001244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001248:	f107 020c 	add.w	r2, r7, #12
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b5f      	cmp	r3, #95	; 0x5f
 8001254:	d00e      	beq.n	8001274 <identificador+0x3c0>
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	da08      	bge.n	8001274 <identificador+0x3c0>
 8001262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001266:	f107 020c 	add.w	r2, r7, #12
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b2f      	cmp	r3, #47	; 0x2f
 8001272:	d1cf      	bne.n	8001214 <identificador+0x360>
				}
				numero = strtod(tmp, &puntero);
 8001274:	f107 0214 	add.w	r2, r7, #20
 8001278:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800127c:	4611      	mov	r1, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f005 f9ce 	bl	8006620 <strtod>
 8001284:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
				vec[cont1] = numero;
 8001288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001292:	4413      	add	r3, r2
 8001294:	f1a3 02f8 	sub.w	r2, r3, #248	; 0xf8
 8001298:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800129c:	e9c2 3400 	strd	r3, r4, [r2]
				cont1++;
 80012a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012a4:	3301      	adds	r3, #1
 80012a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
				for (int m = 0; m <= 50; m++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80012b0:	e00b      	b.n	80012ca <identificador+0x416>
					tmp[m] = 0;
 80012b2:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80012b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012ba:	4413      	add	r3, r2
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
				for (int m = 0; m <= 50; m++) {
 80012c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012c4:	3301      	adds	r3, #1
 80012c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80012ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012ce:	2b32      	cmp	r3, #50	; 0x32
 80012d0:	ddef      	ble.n	80012b2 <identificador+0x3fe>
			while ((str[i] != '/') && (i < cont)) {
 80012d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012d6:	f107 020c 	add.w	r2, r7, #12
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b2f      	cmp	r3, #47	; 0x2f
 80012e2:	d006      	beq.n	80012f2 <identificador+0x43e>
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f6ff af7f 	blt.w	80011f0 <identificador+0x33c>
				}
			}
			if (cont1 == 3) {
 80012f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d136      	bne.n	8001368 <identificador+0x4b4>
				instrucciones[j] = Modo_ir;
 80012fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	f107 0208 	add.w	r2, r7, #8
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	441a      	add	r2, r3
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	4c26      	ldr	r4, [pc, #152]	; (80013a8 <identificador+0x4f4>)
 800130e:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 8001312:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001316:	3301      	adds	r3, #1
 8001318:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				for (l = 0; l < cont1; l++) {
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001322:	e01b      	b.n	800135c <identificador+0x4a8>
					instrucciones[j] = vec[l];
 8001324:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	f107 0208 	add.w	r2, r7, #8
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	441a      	add	r2, r3
 8001332:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800133c:	440b      	add	r3, r1
 800133e:	3bf8      	subs	r3, #248	; 0xf8
 8001340:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001344:	e9c2 3400 	strd	r3, r4, [r2]
					j++;
 8001348:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800134c:	3301      	adds	r3, #1
 800134e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				for (l = 0; l < cont1; l++) {
 8001352:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001356:	3301      	adds	r3, #1
 8001358:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800135c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001364:	429a      	cmp	r2, r3
 8001366:	dbdd      	blt.n	8001324 <identificador+0x470>
				}
			}
			cont1 = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
			break;
 800136e:	e004      	b.n	800137a <identificador+0x4c6>
		default:
			i++;
 8001370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001374:	3301      	adds	r3, #1
 8001376:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	while (i < cont) {
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	f6ff adb8 	blt.w	8000ef8 <identificador+0x44>
		}
	}
	return j;
 8001388:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
}
 800138c:	4618      	mov	r0, r3
 800138e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001392:	46bd      	mov	sp, r7
 8001394:	bd90      	pop	{r4, r7, pc}
 8001396:	bf00      	nop
 8001398:	3ff00000 	.word	0x3ff00000
 800139c:	40080000 	.word	0x40080000
 80013a0:	40140000 	.word	0x40140000
 80013a4:	40180000 	.word	0x40180000
 80013a8:	40100000 	.word	0x40100000
 80013ac:	00000000 	.word	0x00000000

080013b0 <interpolador_vel>:
							- acel_nes / 2 * pow((TIEMPO_SAMP * i), 2));
		}
	}
}
int interpolador_vel(double pos_init, double pos_fin, double tiempo,
		float *q_vec,int cant_pun_tot) {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b097      	sub	sp, #92	; 0x5c
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	ed87 0b06 	vstr	d0, [r7, #24]
 80013ba:	ed87 1b04 	vstr	d1, [r7, #16]
 80013be:	ed87 2b02 	vstr	d2, [r7, #8]
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	double acel_nes, tau, pend;
	int cant_pun_tau;
	if (pos_fin - pos_init > 0) {
 80013c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013ce:	f7fe ff07 	bl	80001e0 <__aeabi_dsub>
 80013d2:	4603      	mov	r3, r0
 80013d4:	460c      	mov	r4, r1
 80013d6:	4618      	mov	r0, r3
 80013d8:	4621      	mov	r1, r4
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	f7ff fb45 	bl	8000a70 <__aeabi_dcmpgt>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80bc 	beq.w	8001566 <interpolador_vel+0x1b6>
		acel_nes = (VEL_MAX*2 / (tiempo - (pos_fin - pos_init) / VEL_MAX));
 80013ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013f6:	f7fe fef3 	bl	80001e0 <__aeabi_dsub>
 80013fa:	4603      	mov	r3, r0
 80013fc:	460c      	mov	r4, r1
 80013fe:	4618      	mov	r0, r3
 8001400:	4621      	mov	r1, r4
 8001402:	a3b7      	add	r3, pc, #732	; (adr r3, 80016e0 <interpolador_vel+0x330>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff f9cc 	bl	80007a4 <__aeabi_ddiv>
 800140c:	4603      	mov	r3, r0
 800140e:	460c      	mov	r4, r1
 8001410:	461a      	mov	r2, r3
 8001412:	4623      	mov	r3, r4
 8001414:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001418:	f7fe fee2 	bl	80001e0 <__aeabi_dsub>
 800141c:	4603      	mov	r3, r0
 800141e:	460c      	mov	r4, r1
 8001420:	461a      	mov	r2, r3
 8001422:	4623      	mov	r3, r4
 8001424:	a1b0      	add	r1, pc, #704	; (adr r1, 80016e8 <interpolador_vel+0x338>)
 8001426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800142a:	f7ff f9bb 	bl	80007a4 <__aeabi_ddiv>
 800142e:	4603      	mov	r3, r0
 8001430:	460c      	mov	r4, r1
 8001432:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		tau = VEL_MAX / acel_nes;
 8001436:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800143a:	a1a9      	add	r1, pc, #676	; (adr r1, 80016e0 <interpolador_vel+0x330>)
 800143c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001440:	f7ff f9b0 	bl	80007a4 <__aeabi_ddiv>
 8001444:	4603      	mov	r3, r0
 8001446:	460c      	mov	r4, r1
 8001448:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		cant_pun_tau = tau / TIEMPO_SAMP;
 800144c:	a3a2      	add	r3, pc, #648	; (adr r3, 80016d8 <interpolador_vel+0x328>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001456:	f7ff f9a5 	bl	80007a4 <__aeabi_ddiv>
 800145a:	4603      	mov	r3, r0
 800145c:	460c      	mov	r4, r1
 800145e:	4618      	mov	r0, r3
 8001460:	4621      	mov	r1, r4
 8001462:	f7ff fb0f 	bl	8000a84 <__aeabi_d2iz>
 8001466:	4603      	mov	r3, r0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
		pend = VEL_MAX / tau;
 800146a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800146e:	a19c      	add	r1, pc, #624	; (adr r1, 80016e0 <interpolador_vel+0x330>)
 8001470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001474:	f7ff f996 	bl	80007a4 <__aeabi_ddiv>
 8001478:	4603      	mov	r3, r0
 800147a:	460c      	mov	r4, r1
 800147c:	e9c7 3408 	strd	r3, r4, [r7, #32]
		for (int i = 0; i <= cant_pun_tau; i++) {
 8001480:	2300      	movs	r3, #0
 8001482:	657b      	str	r3, [r7, #84]	; 0x54
 8001484:	e01e      	b.n	80014c4 <interpolador_vel+0x114>
			q_vec[i] = TIEMPO_SAMP * i * pend;
 8001486:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001488:	f7fe fff8 	bl	800047c <__aeabi_i2d>
 800148c:	a392      	add	r3, pc, #584	; (adr r3, 80016d8 <interpolador_vel+0x328>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f85d 	bl	8000550 <__aeabi_dmul>
 8001496:	4603      	mov	r3, r0
 8001498:	460c      	mov	r4, r1
 800149a:	4618      	mov	r0, r3
 800149c:	4621      	mov	r1, r4
 800149e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014a2:	f7ff f855 	bl	8000550 <__aeabi_dmul>
 80014a6:	4603      	mov	r3, r0
 80014a8:	460c      	mov	r4, r1
 80014aa:	4618      	mov	r0, r3
 80014ac:	4621      	mov	r1, r4
 80014ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	18d4      	adds	r4, r2, r3
 80014b6:	f7ff fb2d 	bl	8000b14 <__aeabi_d2f>
 80014ba:	4603      	mov	r3, r0
 80014bc:	6023      	str	r3, [r4, #0]
		for (int i = 0; i <= cant_pun_tau; i++) {
 80014be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c0:	3301      	adds	r3, #1
 80014c2:	657b      	str	r3, [r7, #84]	; 0x54
 80014c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80014c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dddc      	ble.n	8001486 <interpolador_vel+0xd6>
		}

		for (int i = cant_pun_tau + 1; i <= (cant_pun_tot - cant_pun_tau);
 80014cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ce:	3301      	adds	r3, #1
 80014d0:	653b      	str	r3, [r7, #80]	; 0x50
 80014d2:	e008      	b.n	80014e6 <interpolador_vel+0x136>
				i++) {
			q_vec[i] = VEL_MAX;
 80014d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	4a84      	ldr	r2, [pc, #528]	; (80016f0 <interpolador_vel+0x340>)
 80014de:	601a      	str	r2, [r3, #0]
				i++) {
 80014e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014e2:	3301      	adds	r3, #1
 80014e4:	653b      	str	r3, [r7, #80]	; 0x50
		for (int i = cant_pun_tau + 1; i <= (cant_pun_tot - cant_pun_tau);
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80014ee:	429a      	cmp	r2, r3
 80014f0:	ddf0      	ble.n	80014d4 <interpolador_vel+0x124>
		}
		for (int i = (cant_pun_tot - cant_pun_tau) + 1; i < cant_pun_tot; i++) {
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014fc:	e02d      	b.n	800155a <interpolador_vel+0x1aa>
			q_vec[i] = VEL_MAX - TIEMPO_SAMP * (i-((cant_pun_tot - cant_pun_tau) + 1)) * pend;
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	3301      	adds	r3, #1
 8001506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ffb6 	bl	800047c <__aeabi_i2d>
 8001510:	a371      	add	r3, pc, #452	; (adr r3, 80016d8 <interpolador_vel+0x328>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7ff f81b 	bl	8000550 <__aeabi_dmul>
 800151a:	4603      	mov	r3, r0
 800151c:	460c      	mov	r4, r1
 800151e:	4618      	mov	r0, r3
 8001520:	4621      	mov	r1, r4
 8001522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001526:	f7ff f813 	bl	8000550 <__aeabi_dmul>
 800152a:	4603      	mov	r3, r0
 800152c:	460c      	mov	r4, r1
 800152e:	461a      	mov	r2, r3
 8001530:	4623      	mov	r3, r4
 8001532:	a16b      	add	r1, pc, #428	; (adr r1, 80016e0 <interpolador_vel+0x330>)
 8001534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001538:	f7fe fe52 	bl	80001e0 <__aeabi_dsub>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	18d4      	adds	r4, r2, r3
 800154c:	f7ff fae2 	bl	8000b14 <__aeabi_d2f>
 8001550:	4603      	mov	r3, r0
 8001552:	6023      	str	r3, [r4, #0]
		for (int i = (cant_pun_tot - cant_pun_tau) + 1; i < cant_pun_tot; i++) {
 8001554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001556:	3301      	adds	r3, #1
 8001558:	64fb      	str	r3, [r7, #76]	; 0x4c
 800155a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	dbcd      	blt.n	80014fe <interpolador_vel+0x14e>
		}
		return 1;
 8001562:	2301      	movs	r3, #1
 8001564:	e0b4      	b.n	80016d0 <interpolador_vel+0x320>
	} else {
		acel_nes = (VEL_MAX*2 / (tiempo + (pos_fin - pos_init) / VEL_MAX));
 8001566:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800156a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800156e:	f7fe fe37 	bl	80001e0 <__aeabi_dsub>
 8001572:	4603      	mov	r3, r0
 8001574:	460c      	mov	r4, r1
 8001576:	4618      	mov	r0, r3
 8001578:	4621      	mov	r1, r4
 800157a:	a359      	add	r3, pc, #356	; (adr r3, 80016e0 <interpolador_vel+0x330>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7ff f910 	bl	80007a4 <__aeabi_ddiv>
 8001584:	4603      	mov	r3, r0
 8001586:	460c      	mov	r4, r1
 8001588:	4618      	mov	r0, r3
 800158a:	4621      	mov	r1, r4
 800158c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001590:	f7fe fe28 	bl	80001e4 <__adddf3>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	461a      	mov	r2, r3
 800159a:	4623      	mov	r3, r4
 800159c:	a152      	add	r1, pc, #328	; (adr r1, 80016e8 <interpolador_vel+0x338>)
 800159e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015a2:	f7ff f8ff 	bl	80007a4 <__aeabi_ddiv>
 80015a6:	4603      	mov	r3, r0
 80015a8:	460c      	mov	r4, r1
 80015aa:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		tau = VEL_MAX / acel_nes;
 80015ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015b2:	a14b      	add	r1, pc, #300	; (adr r1, 80016e0 <interpolador_vel+0x330>)
 80015b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015b8:	f7ff f8f4 	bl	80007a4 <__aeabi_ddiv>
 80015bc:	4603      	mov	r3, r0
 80015be:	460c      	mov	r4, r1
 80015c0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		cant_pun_tau = tau / TIEMPO_SAMP;
 80015c4:	a344      	add	r3, pc, #272	; (adr r3, 80016d8 <interpolador_vel+0x328>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015ce:	f7ff f8e9 	bl	80007a4 <__aeabi_ddiv>
 80015d2:	4603      	mov	r3, r0
 80015d4:	460c      	mov	r4, r1
 80015d6:	4618      	mov	r0, r3
 80015d8:	4621      	mov	r1, r4
 80015da:	f7ff fa53 	bl	8000a84 <__aeabi_d2iz>
 80015de:	4603      	mov	r3, r0
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		pend = VEL_MAX / tau;
 80015e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015e6:	a13e      	add	r1, pc, #248	; (adr r1, 80016e0 <interpolador_vel+0x330>)
 80015e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015ec:	f7ff f8da 	bl	80007a4 <__aeabi_ddiv>
 80015f0:	4603      	mov	r3, r0
 80015f2:	460c      	mov	r4, r1
 80015f4:	e9c7 3408 	strd	r3, r4, [r7, #32]
		for (int i = 0; i <= cant_pun_tau; i++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80015fc:	e01e      	b.n	800163c <interpolador_vel+0x28c>
			q_vec[i] = TIEMPO_SAMP * i * pend;
 80015fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001600:	f7fe ff3c 	bl	800047c <__aeabi_i2d>
 8001604:	a334      	add	r3, pc, #208	; (adr r3, 80016d8 <interpolador_vel+0x328>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7fe ffa1 	bl	8000550 <__aeabi_dmul>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	4618      	mov	r0, r3
 8001614:	4621      	mov	r1, r4
 8001616:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800161a:	f7fe ff99 	bl	8000550 <__aeabi_dmul>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	4618      	mov	r0, r3
 8001624:	4621      	mov	r1, r4
 8001626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	18d4      	adds	r4, r2, r3
 800162e:	f7ff fa71 	bl	8000b14 <__aeabi_d2f>
 8001632:	4603      	mov	r3, r0
 8001634:	6023      	str	r3, [r4, #0]
		for (int i = 0; i <= cant_pun_tau; i++) {
 8001636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001638:	3301      	adds	r3, #1
 800163a:	64bb      	str	r3, [r7, #72]	; 0x48
 800163c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	429a      	cmp	r2, r3
 8001642:	dddc      	ble.n	80015fe <interpolador_vel+0x24e>
		}

		for (int i = cant_pun_tau + 1; i <= (cant_pun_tot - cant_pun_tau);
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001646:	3301      	adds	r3, #1
 8001648:	647b      	str	r3, [r7, #68]	; 0x44
 800164a:	e008      	b.n	800165e <interpolador_vel+0x2ae>
				i++) {
			q_vec[i] = VEL_MAX;
 800164c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	4413      	add	r3, r2
 8001654:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <interpolador_vel+0x340>)
 8001656:	601a      	str	r2, [r3, #0]
				i++) {
 8001658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800165a:	3301      	adds	r3, #1
 800165c:	647b      	str	r3, [r7, #68]	; 0x44
		for (int i = cant_pun_tau + 1; i <= (cant_pun_tot - cant_pun_tau);
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001666:	429a      	cmp	r2, r3
 8001668:	ddf0      	ble.n	800164c <interpolador_vel+0x29c>
		}
		for (int i = (cant_pun_tot - cant_pun_tau) + 1; i < cant_pun_tot; i++) {
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	3301      	adds	r3, #1
 8001672:	643b      	str	r3, [r7, #64]	; 0x40
 8001674:	e027      	b.n	80016c6 <interpolador_vel+0x316>
			q_vec[i] = VEL_MAX - TIEMPO_SAMP * i * pend;
 8001676:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001678:	f7fe ff00 	bl	800047c <__aeabi_i2d>
 800167c:	a316      	add	r3, pc, #88	; (adr r3, 80016d8 <interpolador_vel+0x328>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe ff65 	bl	8000550 <__aeabi_dmul>
 8001686:	4603      	mov	r3, r0
 8001688:	460c      	mov	r4, r1
 800168a:	4618      	mov	r0, r3
 800168c:	4621      	mov	r1, r4
 800168e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001692:	f7fe ff5d 	bl	8000550 <__aeabi_dmul>
 8001696:	4603      	mov	r3, r0
 8001698:	460c      	mov	r4, r1
 800169a:	461a      	mov	r2, r3
 800169c:	4623      	mov	r3, r4
 800169e:	a110      	add	r1, pc, #64	; (adr r1, 80016e0 <interpolador_vel+0x330>)
 80016a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016a4:	f7fe fd9c 	bl	80001e0 <__aeabi_dsub>
 80016a8:	4603      	mov	r3, r0
 80016aa:	460c      	mov	r4, r1
 80016ac:	4618      	mov	r0, r3
 80016ae:	4621      	mov	r1, r4
 80016b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	18d4      	adds	r4, r2, r3
 80016b8:	f7ff fa2c 	bl	8000b14 <__aeabi_d2f>
 80016bc:	4603      	mov	r3, r0
 80016be:	6023      	str	r3, [r4, #0]
		for (int i = (cant_pun_tot - cant_pun_tau) + 1; i < cant_pun_tot; i++) {
 80016c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016c2:	3301      	adds	r3, #1
 80016c4:	643b      	str	r3, [r7, #64]	; 0x40
 80016c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dbd3      	blt.n	8001676 <interpolador_vel+0x2c6>
		}
		return 0;
 80016ce:	2300      	movs	r3, #0
	}

}
 80016d0:	4618      	mov	r0, r3
 80016d2:	375c      	adds	r7, #92	; 0x5c
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	eb1c432d 	.word	0xeb1c432d
 80016dc:	3f2a36e2 	.word	0x3f2a36e2
 80016e0:	fbe76c8b 	.word	0xfbe76c8b
 80016e4:	4024f1a9 	.word	0x4024f1a9
 80016e8:	fbe76c8b 	.word	0xfbe76c8b
 80016ec:	4034f1a9 	.word	0x4034f1a9
 80016f0:	41278d50 	.word	0x41278d50

080016f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <MX_GPIO_Init+0xc4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <MX_GPIO_Init+0xc4>)
 8001714:	f043 0310 	orr.w	r3, r3, #16
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <MX_GPIO_Init+0xc4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <MX_GPIO_Init+0xc4>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a22      	ldr	r2, [pc, #136]	; (80017b8 <MX_GPIO_Init+0xc4>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <MX_GPIO_Init+0xc4>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <MX_GPIO_Init+0xc4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a1b      	ldr	r2, [pc, #108]	; (80017b8 <MX_GPIO_Init+0xc4>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <MX_GPIO_Init+0xc4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, dir2_Pin|L298_ENA1_Pin|L298_ENA2_Pin|dir1_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	211e      	movs	r1, #30
 8001762:	4816      	ldr	r0, [pc, #88]	; (80017bc <MX_GPIO_Init+0xc8>)
 8001764:	f001 fb50 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, out2_Pin|int1_M_cpt_t_Pin, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800176e:	4814      	ldr	r0, [pc, #80]	; (80017c0 <MX_GPIO_Init+0xcc>)
 8001770:	f001 fb4a 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = dir2_Pin|L298_ENA1_Pin|L298_ENA2_Pin|dir1_Pin;
 8001774:	231e      	movs	r3, #30
 8001776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	4619      	mov	r1, r3
 800178a:	480c      	ldr	r0, [pc, #48]	; (80017bc <MX_GPIO_Init+0xc8>)
 800178c:	f001 f9a2 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = out2_Pin|int1_M_cpt_t_Pin;
 8001790:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_GPIO_Init+0xcc>)
 80017aa:	f001 f993 	bl	8002ad4 <HAL_GPIO_Init>

}
 80017ae:	bf00      	nop
 80017b0:	3720      	adds	r7, #32
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40020800 	.word	0x40020800
 80017c4:	00000000 	.word	0x00000000

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b0ec      	sub	sp, #432	; 0x1b0
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Declarar variables
	int cant = 0, flag_activacion, flag_homing;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	double instrucciones[50] = { };
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	4618      	mov	r0, r3
 80017da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80017de:	461a      	mov	r2, r3
 80017e0:	2100      	movs	r1, #0
 80017e2:	f004 f905 	bl	80059f0 <memset>
	motor1.pos_inicial=0;
 80017e6:	4bc0      	ldr	r3, [pc, #768]	; (8001ae8 <main+0x320>)
 80017e8:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 80017ec:	3368      	adds	r3, #104	; 0x68
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
	PWM_config.OCMode = TIM_OCMODE_PWM1;
 80017f4:	4bbd      	ldr	r3, [pc, #756]	; (8001aec <main+0x324>)
 80017f6:	2260      	movs	r2, #96	; 0x60
 80017f8:	601a      	str	r2, [r3, #0]
	PWM_config.Pulse = 0;
 80017fa:	4bbc      	ldr	r3, [pc, #752]	; (8001aec <main+0x324>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
	PWM_config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001800:	4bba      	ldr	r3, [pc, #744]	; (8001aec <main+0x324>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
	PWM_config.OCFastMode = TIM_OCFAST_DISABLE;
 8001806:	4bb9      	ldr	r3, [pc, #740]	; (8001aec <main+0x324>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
	// init variables
	enum Estado estado = Desactivado;
 800180c:	2301      	movs	r3, #1
 800180e:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
	int comando;
	flag_activacion = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	flag_homing = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181e:	f000 ffb3 	bl	8002788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001822:	f000 f9ff 	bl	8001c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001826:	f7ff ff65 	bl	80016f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800182a:	f000 fd03 	bl	8002234 <MX_TIM1_Init>
  MX_TIM3_Init();
 800182e:	f000 fd59 	bl	80022e4 <MX_TIM3_Init>
  MX_TIM9_Init();
 8001832:	f000 fdab 	bl	800238c <MX_TIM9_Init>
  MX_TIM12_Init();
 8001836:	f000 fe09 	bl	800244c <MX_TIM12_Init>
  MX_SPI2_Init();
 800183a:	f000 fb9f 	bl	8001f7c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 800183e:	2201      	movs	r2, #1
 8001840:	49ab      	ldr	r1, [pc, #684]	; (8001af0 <main+0x328>)
 8001842:	48ac      	ldr	r0, [pc, #688]	; (8001af4 <main+0x32c>)
 8001844:	f002 f80e 	bl	8003864 <HAL_SPI_Receive_IT>
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001848:	213c      	movs	r1, #60	; 0x3c
 800184a:	48ab      	ldr	r0, [pc, #684]	; (8001af8 <main+0x330>)
 800184c:	f003 f9c0 	bl	8004bd0 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//Generar comando
		if (flag_mensaje_completo == 0) {
 8001850:	4baa      	ldr	r3, [pc, #680]	; (8001afc <main+0x334>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10f      	bne.n	8001878 <main+0xb0>
			cant = identificador(str, instrucciones, contador_instrucciones);
 8001858:	4ba9      	ldr	r3, [pc, #676]	; (8001b00 <main+0x338>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	4619      	mov	r1, r3
 8001862:	48a8      	ldr	r0, [pc, #672]	; (8001b04 <main+0x33c>)
 8001864:	f7ff fb26 	bl	8000eb4 <identificador>
 8001868:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
			flag_mensaje_completo = 1;
 800186c:	4ba3      	ldr	r3, [pc, #652]	; (8001afc <main+0x334>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]
			contador_instrucciones = 0;
 8001872:	4ba3      	ldr	r3, [pc, #652]	; (8001b00 <main+0x338>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
		}
		// identificar comandos
		if (flag_mensaje_completo == 1) {
 8001878:	4ba0      	ldr	r3, [pc, #640]	; (8001afc <main+0x334>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	f040 8164 	bne.w	8001b4a <main+0x382>
			for (int i = 0; i < cant; i++) {
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001888:	e152      	b.n	8001b30 <main+0x368>
				comando = (int) instrucciones[i];
 800188a:	f107 0208 	add.w	r2, r7, #8
 800188e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	e9d3 3400 	ldrd	r3, r4, [r3]
 800189a:	4618      	mov	r0, r3
 800189c:	4621      	mov	r1, r4
 800189e:	f7ff f8f1 	bl	8000a84 <__aeabi_d2iz>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
				switch (comando) {
 80018a8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80018ac:	2b06      	cmp	r3, #6
 80018ae:	f200 813a 	bhi.w	8001b26 <main+0x35e>
 80018b2:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <main+0xf0>)
 80018b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b8:	080018f3 	.word	0x080018f3
 80018bc:	080018d5 	.word	0x080018d5
 80018c0:	08001b27 	.word	0x08001b27
 80018c4:	0800191b 	.word	0x0800191b
 80018c8:	08001939 	.word	0x08001939
 80018cc:	080019f7 	.word	0x080019f7
 80018d0:	08001a0b 	.word	0x08001a0b
				case Desactivar:
					if (flag_activacion) {
 80018d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80fa 	beq.w	8001ad2 <main+0x30a>
						//desactivar PWM baja el pin del motor
						//Comunica que desactivo Interrumpe
						estado = Desactivado;
 80018de:	2301      	movs	r3, #1
 80018e0:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
						flag_activacion = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
						flag_cambio = 1;
 80018ea:	4b87      	ldr	r3, [pc, #540]	; (8001b08 <main+0x340>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
					} else {
					}
					break;
 80018f0:	e0ef      	b.n	8001ad2 <main+0x30a>
				case Activar:
					if (!flag_activacion) {
 80018f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 80ed 	bne.w	8001ad6 <main+0x30e>
						//inicializa PWM FRECUENCIA 1 KHZ PWM1 Resolución 7.4 e-4 volts por paso 16000 pasos hasta TOP
						//configurar_prescaler_TIMER1(1000);
						//inicializa PWM FRECUENCIA 1 KHZ PWM2 Resolución 0.048volts por paso 249 pasos hasta TOP
						//configurar_prescaler_TIMER2(1000);
						//seteamos pwms
						estado = Activado;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
						flag_activacion = 1;
 8001902:	2301      	movs	r3, #1
 8001904:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
						flag_cambio = 1;
 8001908:	4b7f      	ldr	r3, [pc, #508]	; (8001b08 <main+0x340>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(L298_ENA1_GPIO_Port, L298_ENA1_Pin,
 800190e:	2201      	movs	r2, #1
 8001910:	2108      	movs	r1, #8
 8001912:	487e      	ldr	r0, [pc, #504]	; (8001b0c <main+0x344>)
 8001914:	f001 fa78 	bl	8002e08 <HAL_GPIO_WritePin>
								GPIO_PIN_SET);
					} else {
					}
					break;
 8001918:	e0dd      	b.n	8001ad6 <main+0x30e>
				case Modo_homing:
					if (flag_activacion) {
 800191a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 80db 	beq.w	8001ada <main+0x312>
						//Realizar homming:configurar PWM a vel baja:
						//simular un fin de carrera con un pull y una interrupcion
						flag_homing = 1;
 8001924:	2301      	movs	r3, #1
 8001926:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
						flag_cambio = 1;
 800192a:	4b77      	ldr	r3, [pc, #476]	; (8001b08 <main+0x340>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]
						estado = Modo_Homing;
 8001930:	2302      	movs	r3, #2
 8001932:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
					}
					break;
 8001936:	e0d0      	b.n	8001ada <main+0x312>
				case Modo_ir:
					if (flag_activacion && flag_homing) {
 8001938:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80f1 	beq.w	8001b24 <main+0x35c>
 8001942:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80ec 	beq.w	8001b24 <main+0x35c>
						// saca vel media con consigna, la pos actual y tiempo
						//calcula el duty cycle segun la vel
						//calcula la cantidad de pulsos del enconder para llegar a esta pos
						//aca se hace la interpolacion
						cont_samp=0;
 800194c:	4b70      	ldr	r3, [pc, #448]	; (8001b10 <main+0x348>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
						cant_pun_tot = instrucciones[i + 3] / TIEMPO_SAMP;
 8001952:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001956:	3303      	adds	r3, #3
 8001958:	f107 0208 	add.w	r2, r7, #8
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4413      	add	r3, r2
 8001960:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001964:	a35e      	add	r3, pc, #376	; (adr r3, 8001ae0 <main+0x318>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe ff1b 	bl	80007a4 <__aeabi_ddiv>
 800196e:	4603      	mov	r3, r0
 8001970:	460c      	mov	r4, r1
 8001972:	4618      	mov	r0, r3
 8001974:	4621      	mov	r1, r4
 8001976:	f7ff f885 	bl	8000a84 <__aeabi_d2iz>
 800197a:	4602      	mov	r2, r0
 800197c:	4b65      	ldr	r3, [pc, #404]	; (8001b14 <main+0x34c>)
 800197e:	601a      	str	r2, [r3, #0]
						dir = interpolador_vel(motor1.pos_inicial,
 8001980:	4b59      	ldr	r3, [pc, #356]	; (8001ae8 <main+0x320>)
 8001982:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8001986:	3368      	adds	r3, #104	; 0x68
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fd88 	bl	80004a0 <__aeabi_f2d>
 8001990:	4604      	mov	r4, r0
 8001992:	460d      	mov	r5, r1
								instrucciones[i + 1], instrucciones[i + 3],
 8001994:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001998:	3301      	adds	r3, #1
						dir = interpolador_vel(motor1.pos_inicial,
 800199a:	f107 0208 	add.w	r2, r7, #8
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4413      	add	r3, r2
 80019a2:	ed93 7b00 	vldr	d7, [r3]
								instrucciones[i + 1], instrucciones[i + 3],
 80019a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80019aa:	3303      	adds	r3, #3
						dir = interpolador_vel(motor1.pos_inicial,
 80019ac:	f107 0208 	add.w	r2, r7, #8
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	4413      	add	r3, r2
 80019b4:	ed93 6b00 	vldr	d6, [r3]
 80019b8:	4b56      	ldr	r3, [pc, #344]	; (8001b14 <main+0x34c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	484a      	ldr	r0, [pc, #296]	; (8001ae8 <main+0x320>)
 80019c0:	eeb0 2a46 	vmov.f32	s4, s12
 80019c4:	eef0 2a66 	vmov.f32	s5, s13
 80019c8:	eeb0 1a47 	vmov.f32	s2, s14
 80019cc:	eef0 1a67 	vmov.f32	s3, s15
 80019d0:	ec45 4b10 	vmov	d0, r4, r5
 80019d4:	f7ff fcec 	bl	80013b0 <interpolador_vel>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <main+0x350>)
 80019dc:	601a      	str	r2, [r3, #0]
								motor1.pos_objetivo, cant_pun_tot);
						flag_cambio = 1;
 80019de:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <main+0x340>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
						estado = Modo_Normal;
 80019e4:	2303      	movs	r3, #3
 80019e6:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
						i += 3;
 80019ea:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80019ee:	3303      	adds	r3, #3
 80019f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
					}
					break;
 80019f4:	e096      	b.n	8001b24 <main+0x35c>
				case error:
					//apagar todo
					flag_homing = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
					estado = Desactivado;
 80019fc:	2301      	movs	r3, #1
 80019fe:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
					flag_activacion = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					break;
 8001a08:	e08d      	b.n	8001b26 <main+0x35e>
				case Preguntar:
					HAL_SPI_Abort_IT(&hspi2);
 8001a0a:	483a      	ldr	r0, [pc, #232]	; (8001af4 <main+0x32c>)
 8001a0c:	f002 f854 	bl	8003ab8 <HAL_SPI_Abort_IT>
					//Revisa el estado, interuumpe y guarada el estado en el puerto SP
					if (estado == Desactivado) {
 8001a10:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d108      	bne.n	8001a2a <main+0x262>
						pTxData = 'D';
 8001a18:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <main+0x354>)
 8001a1a:	2244      	movs	r2, #68	; 0x44
 8001a1c:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	493e      	ldr	r1, [pc, #248]	; (8001b1c <main+0x354>)
 8001a22:	4834      	ldr	r0, [pc, #208]	; (8001af4 <main+0x32c>)
 8001a24:	f001 fe9c 	bl	8003760 <HAL_SPI_Transmit_IT>
 8001a28:	e032      	b.n	8001a90 <main+0x2c8>
					} else if (estado == Activado) {
 8001a2a:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <main+0x27c>
						pTxData = 'A';
 8001a32:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <main+0x354>)
 8001a34:	2241      	movs	r2, #65	; 0x41
 8001a36:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4938      	ldr	r1, [pc, #224]	; (8001b1c <main+0x354>)
 8001a3c:	482d      	ldr	r0, [pc, #180]	; (8001af4 <main+0x32c>)
 8001a3e:	f001 fe8f 	bl	8003760 <HAL_SPI_Transmit_IT>
 8001a42:	e025      	b.n	8001a90 <main+0x2c8>
					} else if (estado == Modo_Homing) {
 8001a44:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d108      	bne.n	8001a5e <main+0x296>
						pTxData = 'H';
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <main+0x354>)
 8001a4e:	2248      	movs	r2, #72	; 0x48
 8001a50:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001a52:	2201      	movs	r2, #1
 8001a54:	4931      	ldr	r1, [pc, #196]	; (8001b1c <main+0x354>)
 8001a56:	4827      	ldr	r0, [pc, #156]	; (8001af4 <main+0x32c>)
 8001a58:	f001 fe82 	bl	8003760 <HAL_SPI_Transmit_IT>
 8001a5c:	e018      	b.n	8001a90 <main+0x2c8>
					} else if (estado == Modo_Normal) {
 8001a5e:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d108      	bne.n	8001a78 <main+0x2b0>
						pTxData = 'N';
 8001a66:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <main+0x354>)
 8001a68:	224e      	movs	r2, #78	; 0x4e
 8001a6a:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	492b      	ldr	r1, [pc, #172]	; (8001b1c <main+0x354>)
 8001a70:	4820      	ldr	r0, [pc, #128]	; (8001af4 <main+0x32c>)
 8001a72:	f001 fe75 	bl	8003760 <HAL_SPI_Transmit_IT>
 8001a76:	e00b      	b.n	8001a90 <main+0x2c8>
					} else if (estado == Error) {
 8001a78:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d107      	bne.n	8001a90 <main+0x2c8>
						pTxData = 'E';
 8001a80:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <main+0x354>)
 8001a82:	2245      	movs	r2, #69	; 0x45
 8001a84:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001a86:	2201      	movs	r2, #1
 8001a88:	4924      	ldr	r1, [pc, #144]	; (8001b1c <main+0x354>)
 8001a8a:	481a      	ldr	r0, [pc, #104]	; (8001af4 <main+0x32c>)
 8001a8c:	f001 fe68 	bl	8003760 <HAL_SPI_Transmit_IT>
					}
					HAL_GPIO_WritePin(int1_M_cpt_t_GPIO_Port, int1_M_cpt_t_Pin,
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a96:	4822      	ldr	r0, [pc, #136]	; (8001b20 <main+0x358>)
 8001a98:	f001 f9b6 	bl	8002e08 <HAL_GPIO_WritePin>
							GPIO_PIN_SET);
					HAL_GPIO_WritePin(int1_M_cpt_t_GPIO_Port, int1_M_cpt_t_Pin,
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa2:	481f      	ldr	r0, [pc, #124]	; (8001b20 <main+0x358>)
 8001aa4:	f001 f9b0 	bl	8002e08 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					__HAL_SPI_CLEAR_OVRFLAG(&hspi2);
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <main+0x32c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <main+0x32c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	681b      	ldr	r3, [r3, #0]
					HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4909      	ldr	r1, [pc, #36]	; (8001af0 <main+0x328>)
 8001aca:	480a      	ldr	r0, [pc, #40]	; (8001af4 <main+0x32c>)
 8001acc:	f001 feca 	bl	8003864 <HAL_SPI_Receive_IT>
					break;
 8001ad0:	e029      	b.n	8001b26 <main+0x35e>
					break;
 8001ad2:	bf00      	nop
 8001ad4:	e027      	b.n	8001b26 <main+0x35e>
					break;
 8001ad6:	bf00      	nop
 8001ad8:	e025      	b.n	8001b26 <main+0x35e>
					break;
 8001ada:	bf00      	nop
 8001adc:	e023      	b.n	8001b26 <main+0x35e>
 8001ade:	bf00      	nop
 8001ae0:	eb1c432d 	.word	0xeb1c432d
 8001ae4:	3f2a36e2 	.word	0x3f2a36e2
 8001ae8:	2000ecf0 	.word	0x2000ecf0
 8001aec:	20000248 	.word	0x20000248
 8001af0:	2001d774 	.word	0x2001d774
 8001af4:	2001d77c 	.word	0x2001d77c
 8001af8:	2001d814 	.word	0x2001d814
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000208 	.word	0x20000208
 8001b04:	20000210 	.word	0x20000210
 8001b08:	2000020c 	.word	0x2000020c
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	20000244 	.word	0x20000244
 8001b14:	2001d770 	.word	0x2001d770
 8001b18:	2001d76c 	.word	0x2001d76c
 8001b1c:	20000200 	.word	0x20000200
 8001b20:	40020800 	.word	0x40020800
					break;
 8001b24:	bf00      	nop
			for (int i = 0; i < cant; i++) {
 8001b26:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b30:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001b34:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	f6ff aea6 	blt.w	800188a <main+0xc2>
					//Revisa el estado, interuumpe y guarada el estado en el puerto SP
					break;
				}

			}
			flag_mensaje_completo = 2;
 8001b3e:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <main+0x438>)
 8001b40:	2202      	movs	r2, #2
 8001b42:	601a      	str	r2, [r3, #0]
			cant = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		}

		switch (estado) {
 8001b4a:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	f63f ae7e 	bhi.w	8001850 <main+0x88>
 8001b54:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <main+0x394>)
 8001b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5a:	bf00      	nop
 8001b5c:	08001b71 	.word	0x08001b71
 8001b60:	08001851 	.word	0x08001851
 8001b64:	08001b89 	.word	0x08001b89
 8001b68:	08001b99 	.word	0x08001b99
 8001b6c:	08001851 	.word	0x08001851
			//apagar timer
			//bajar tension en todos lados lo primero
			break;
		case Activado:
			//energisar l298
			if (flag_cambio == 1) {
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <main+0x43c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d13d      	bne.n	8001bf4 <main+0x42c>
				HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001b78:	213c      	movs	r1, #60	; 0x3c
 8001b7a:	4823      	ldr	r0, [pc, #140]	; (8001c08 <main+0x440>)
 8001b7c:	f003 f828 	bl	8004bd0 <HAL_TIM_Encoder_Start>
				flag_cambio = 0;
 8001b80:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <main+0x43c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
			}
			//
			//
			//
			break;
 8001b86:	e035      	b.n	8001bf4 <main+0x42c>
		case Modo_Homing:
			if (flag_cambio == 1) {
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <main+0x43c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d133      	bne.n	8001bf8 <main+0x430>
				flag_cambio = 0;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <main+0x43c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
			//sensar el final de carrera
			//cambiar la dirreccion
			//cambiar el pwm a algo muy lento
			//mover muy lento
			//colocar el contador del encoder 0
			break;
 8001b96:	e02f      	b.n	8001bf8 <main+0x430>
		case Modo_Normal:
			//avisar que estoy listo
			//activar los pwm con el
			//control de pocicion y lectura de encoder
			//manifulacion del efector final
			if (flag_cambio == 1) {
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <main+0x43c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d12d      	bne.n	8001bfc <main+0x434>
				flag_cambio = 0;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <main+0x43c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
				flag_configuracion_PWM = 1;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <main+0x444>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
				//aca hay que esperar a que todos los esclavos esten listos
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001bac:	2100      	movs	r1, #0
 8001bae:	4818      	ldr	r0, [pc, #96]	; (8001c10 <main+0x448>)
 8001bb0:	f002 ff3e 	bl	8004a30 <HAL_TIM_PWM_Start>
				HAL_TIM_Base_Start_IT(&htim9);
 8001bb4:	4817      	ldr	r0, [pc, #92]	; (8001c14 <main+0x44c>)
 8001bb6:	f002 fe82 	bl	80048be <HAL_TIM_Base_Start_IT>
				if (dir) {
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <main+0x450>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d012      	beq.n	8001be8 <main+0x420>
					PWM_config.Pulse = 2799;
 8001bc2:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <main+0x454>)
 8001bc4:	f640 22ef 	movw	r2, #2799	; 0xaef
 8001bc8:	605a      	str	r2, [r3, #4]
					//TIM12->CCR1 = TIM12->CCR2;
					//TIM_OC2_SetConfig(TIM12, &PWM_config);
					HAL_TIM_PWM_ConfigChannel(&htim12, &PWM_config,TIM_CHANNEL_1);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	4913      	ldr	r1, [pc, #76]	; (8001c1c <main+0x454>)
 8001bce:	4810      	ldr	r0, [pc, #64]	; (8001c10 <main+0x448>)
 8001bd0:	f003 f99e 	bl	8004f10 <HAL_TIM_PWM_ConfigChannel>
					HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin, GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	4811      	ldr	r0, [pc, #68]	; (8001c20 <main+0x458>)
 8001bda:	f001 f915 	bl	8002e08 <HAL_GPIO_WritePin>
					HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001bde:	2100      	movs	r1, #0
 8001be0:	480b      	ldr	r0, [pc, #44]	; (8001c10 <main+0x448>)
 8001be2:	f002 ff25 	bl	8004a30 <HAL_TIM_PWM_Start>
				} else {
					HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin, GPIO_PIN_RESET);
				}

			}
			break;
 8001be6:	e009      	b.n	8001bfc <main+0x434>
					HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2102      	movs	r1, #2
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <main+0x458>)
 8001bee:	f001 f90b 	bl	8002e08 <HAL_GPIO_WritePin>
			break;
 8001bf2:	e003      	b.n	8001bfc <main+0x434>
			break;
 8001bf4:	bf00      	nop
 8001bf6:	e62b      	b.n	8001850 <main+0x88>
			break;
 8001bf8:	bf00      	nop
 8001bfa:	e629      	b.n	8001850 <main+0x88>
			break;
 8001bfc:	bf00      	nop
		if (flag_mensaje_completo == 0) {
 8001bfe:	e627      	b.n	8001850 <main+0x88>
 8001c00:	20000000 	.word	0x20000000
 8001c04:	2000020c 	.word	0x2000020c
 8001c08:	2001d814 	.word	0x2001d814
 8001c0c:	20000004 	.word	0x20000004
 8001c10:	2001d894 	.word	0x2001d894
 8001c14:	2001d854 	.word	0x2001d854
 8001c18:	2001d76c 	.word	0x2001d76c
 8001c1c:	20000248 	.word	0x20000248
 8001c20:	40021000 	.word	0x40021000

08001c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b094      	sub	sp, #80	; 0x50
 8001c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2a:	f107 0320 	add.w	r3, r7, #32
 8001c2e:	2230      	movs	r2, #48	; 0x30
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 fedc 	bl	80059f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <SystemClock_Config+0xcc>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <SystemClock_Config+0xcc>)
 8001c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c56:	6413      	str	r3, [r2, #64]	; 0x40
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <SystemClock_Config+0xcc>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <SystemClock_Config+0xd0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <SystemClock_Config+0xd0>)
 8001c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <SystemClock_Config+0xd0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c80:	2302      	movs	r3, #2
 8001c82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c84:	2301      	movs	r3, #1
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c88:	2310      	movs	r3, #16
 8001c8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c90:	2300      	movs	r3, #0
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c94:	2308      	movs	r3, #8
 8001c96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c98:	23a8      	movs	r3, #168	; 0xa8
 8001c9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ca0:	2307      	movs	r3, #7
 8001ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca4:	f107 0320 	add.w	r3, r7, #32
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 f8c7 	bl	8002e3c <HAL_RCC_OscConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cb4:	f000 f95a 	bl	8001f6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb8:	230f      	movs	r3, #15
 8001cba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001cc4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001cca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	2105      	movs	r1, #5
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f001 fb20 	bl	800331c <HAL_RCC_ClockConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ce2:	f000 f943 	bl	8001f6c <Error_Handler>
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	3750      	adds	r7, #80	; 0x50
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40007000 	.word	0x40007000

08001cf8 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	cont_datos_SPI++;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_SPI_RxCpltCallback+0x54>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3301      	adds	r3, #1
 8001d06:	4a11      	ldr	r2, [pc, #68]	; (8001d4c <HAL_SPI_RxCpltCallback+0x54>)
 8001d08:	6013      	str	r3, [r2, #0]
	str[cont_datos_SPI - 1] = dato_recepcion_SPI;
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_SPI_RxCpltCallback+0x54>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <HAL_SPI_RxCpltCallback+0x58>)
 8001d12:	7811      	ldrb	r1, [r2, #0]
 8001d14:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5c>)
 8001d16:	54d1      	strb	r1, [r2, r3]
	if (str[cont_datos_SPI - 1] == ':') {
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_SPI_RxCpltCallback+0x54>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5c>)
 8001d20:	5cd3      	ldrb	r3, [r2, r3]
 8001d22:	2b3a      	cmp	r3, #58	; 0x3a
 8001d24:	d109      	bne.n	8001d3a <HAL_SPI_RxCpltCallback+0x42>
		flag_mensaje_completo = 0;
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <HAL_SPI_RxCpltCallback+0x60>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
		contador_instrucciones = cont_datos_SPI;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <HAL_SPI_RxCpltCallback+0x54>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_SPI_RxCpltCallback+0x64>)
 8001d32:	6013      	str	r3, [r2, #0]
		cont_datos_SPI = 0;
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_SPI_RxCpltCallback+0x54>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
	}
	HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4904      	ldr	r1, [pc, #16]	; (8001d50 <HAL_SPI_RxCpltCallback+0x58>)
 8001d3e:	4808      	ldr	r0, [pc, #32]	; (8001d60 <HAL_SPI_RxCpltCallback+0x68>)
 8001d40:	f001 fd90 	bl	8003864 <HAL_SPI_Receive_IT>
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000204 	.word	0x20000204
 8001d50:	2001d774 	.word	0x2001d774
 8001d54:	20000210 	.word	0x20000210
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000208 	.word	0x20000208
 8001d60:	2001d77c 	.word	0x2001d77c
 8001d64:	00000000 	.word	0x00000000

08001d68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {

	}
	if (htim->Instance == TIM3) {
	}
	if (htim->Instance == TIM9) {
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a70      	ldr	r2, [pc, #448]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	f040 80cb 	bne.w	8001f12 <HAL_TIM_PeriodElapsedCallback+0x1aa>
		if (cont_samp < cant_pun_tot) {
 8001d7c:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a6f      	ldr	r2, [pc, #444]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	4293      	cmp	r3, r2
 8001d86:	f080 80b0 	bcs.w	8001eea <HAL_TIM_PeriodElapsedCallback+0x182>
			motor1.pos_actual=TIM1->CNT/600*2*M_PI+TIM1->CNT%600*2*M_PI/600;
 8001d8a:	4b6e      	ldr	r3, [pc, #440]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	4a6e      	ldr	r2, [pc, #440]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	099b      	lsrs	r3, r3, #6
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fb5f 	bl	800045c <__aeabi_ui2d>
 8001d9e:	a360      	add	r3, pc, #384	; (adr r3, 8001f20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fbd4 	bl	8000550 <__aeabi_dmul>
 8001da8:	4603      	mov	r3, r0
 8001daa:	460c      	mov	r4, r1
 8001dac:	4625      	mov	r5, r4
 8001dae:	461c      	mov	r4, r3
 8001db0:	4b64      	ldr	r3, [pc, #400]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db4:	4b64      	ldr	r3, [pc, #400]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001db6:	fba3 1302 	umull	r1, r3, r3, r2
 8001dba:	099b      	lsrs	r3, r3, #6
 8001dbc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fb47 	bl	800045c <__aeabi_ui2d>
 8001dce:	a354      	add	r3, pc, #336	; (adr r3, 8001f20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fbbc 	bl	8000550 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001de6:	f7fe fcdd 	bl	80007a4 <__aeabi_ddiv>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4620      	mov	r0, r4
 8001df0:	4629      	mov	r1, r5
 8001df2:	f7fe f9f7 	bl	80001e4 <__adddf3>
 8001df6:	4603      	mov	r3, r0
 8001df8:	460c      	mov	r4, r1
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	f7fe fe89 	bl	8000b14 <__aeabi_d2f>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b52      	ldr	r3, [pc, #328]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001e06:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8001e0a:	3360      	adds	r3, #96	; 0x60
 8001e0c:	601a      	str	r2, [r3, #0]
			if (dir) {
 8001e0e:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d036      	beq.n	8001e84 <HAL_TIM_PeriodElapsedCallback+0x11c>
				valor_PWM = 2799
						- motor1.pos_objetivo[cont_samp] / VEL_MAX * 2799;
 8001e16:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a4d      	ldr	r2, [pc, #308]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb3c 	bl	80004a0 <__aeabi_f2d>
 8001e28:	a33f      	add	r3, pc, #252	; (adr r3, 8001f28 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fcb9 	bl	80007a4 <__aeabi_ddiv>
 8001e32:	4603      	mov	r3, r0
 8001e34:	460c      	mov	r4, r1
 8001e36:	4618      	mov	r0, r3
 8001e38:	4621      	mov	r1, r4
 8001e3a:	a33d      	add	r3, pc, #244	; (adr r3, 8001f30 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	f7fe fb86 	bl	8000550 <__aeabi_dmul>
 8001e44:	4603      	mov	r3, r0
 8001e46:	460c      	mov	r4, r1
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4623      	mov	r3, r4
 8001e4c:	a138      	add	r1, pc, #224	; (adr r1, 8001f30 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001e4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e52:	f7fe f9c5 	bl	80001e0 <__aeabi_dsub>
 8001e56:	4603      	mov	r3, r0
 8001e58:	460c      	mov	r4, r1
				valor_PWM = 2799
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	f7fe fe39 	bl	8000ad4 <__aeabi_d2uiz>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001e66:	601a      	str	r2, [r3, #0]
				PWM_config.Pulse = valor_PWM;
 8001e68:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a3b      	ldr	r2, [pc, #236]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001e6e:	6053      	str	r3, [r2, #4]
				//TIM12->CCR1 = TIM12->CCR2;
				//TIM_OC2_SetConfig(TIM12, &PWM_config);
				HAL_TIM_PWM_ConfigChannel(&htim12, &PWM_config,TIM_CHANNEL_1);
 8001e70:	2200      	movs	r2, #0
 8001e72:	493a      	ldr	r1, [pc, #232]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001e74:	483a      	ldr	r0, [pc, #232]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001e76:	f003 f84b 	bl	8004f10 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4838      	ldr	r0, [pc, #224]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001e7e:	f002 fdd7 	bl	8004a30 <HAL_TIM_PWM_Start>
 8001e82:	e02c      	b.n	8001ede <HAL_TIM_PeriodElapsedCallback+0x176>
			} else {
				valor_PWM = motor1.pos_objetivo[cont_samp] / VEL_MAX * 2799;
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a31      	ldr	r2, [pc, #196]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fb05 	bl	80004a0 <__aeabi_f2d>
 8001e96:	a324      	add	r3, pc, #144	; (adr r3, 8001f28 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	f7fe fc82 	bl	80007a4 <__aeabi_ddiv>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	460c      	mov	r4, r1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	a321      	add	r3, pc, #132	; (adr r3, 8001f30 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	f7fe fb4f 	bl	8000550 <__aeabi_dmul>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460c      	mov	r4, r1
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	4621      	mov	r1, r4
 8001eba:	f7fe fe0b 	bl	8000ad4 <__aeabi_d2uiz>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001ec2:	601a      	str	r2, [r3, #0]
				PWM_config.Pulse = valor_PWM;
 8001ec4:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a24      	ldr	r2, [pc, #144]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001eca:	6053      	str	r3, [r2, #4]
				//TIM12->CCR1 = TIM12->CCR2;
				//TIM_OC2_SetConfig(TIM12, &PWM_config);
				HAL_TIM_PWM_ConfigChannel(&htim12, &PWM_config,TIM_CHANNEL_1);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	4923      	ldr	r1, [pc, #140]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001ed0:	4823      	ldr	r0, [pc, #140]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001ed2:	f003 f81d 	bl	8004f10 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4821      	ldr	r0, [pc, #132]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001eda:	f002 fda9 	bl	8004a30 <HAL_TIM_PWM_Start>
			}
			cont_samp++;
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e013      	b.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x1aa>
		} else {
				HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin, GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2102      	movs	r1, #2
 8001eee:	481d      	ldr	r0, [pc, #116]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001ef0:	f000 ff8a 	bl	8002e08 <HAL_GPIO_WritePin>
				PWM_config.Pulse = 0;
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	605a      	str	r2, [r3, #4]
				//TIM12->CCR1 = TIM12->CCR2;
				//TIM_OC2_SetConfig(TIM12, &PWM_config);
				HAL_TIM_PWM_ConfigChannel(&htim12, &PWM_config,TIM_CHANNEL_1);
 8001efa:	2200      	movs	r2, #0
 8001efc:	4917      	ldr	r1, [pc, #92]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001efe:	4818      	ldr	r0, [pc, #96]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001f00:	f003 f806 	bl	8004f10 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001f04:	2100      	movs	r1, #0
 8001f06:	4816      	ldr	r0, [pc, #88]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001f08:	f002 fd92 	bl	8004a30 <HAL_TIM_PWM_Start>
				HAL_TIM_Base_Stop_IT(&htim9);
 8001f0c:	4816      	ldr	r0, [pc, #88]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001f0e:	f002 fcfa 	bl	8004906 <HAL_TIM_Base_Stop_IT>
		}
	}
	if (htim->Instance == TIM12) {
	}
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	f3af 8000 	nop.w
 8001f20:	54442d18 	.word	0x54442d18
 8001f24:	400921fb 	.word	0x400921fb
 8001f28:	fbe76c8b 	.word	0xfbe76c8b
 8001f2c:	4024f1a9 	.word	0x4024f1a9
 8001f30:	00000000 	.word	0x00000000
 8001f34:	40a5de00 	.word	0x40a5de00
 8001f38:	40014000 	.word	0x40014000
 8001f3c:	20000244 	.word	0x20000244
 8001f40:	2001d770 	.word	0x2001d770
 8001f44:	40010000 	.word	0x40010000
 8001f48:	1b4e81b5 	.word	0x1b4e81b5
 8001f4c:	4082c000 	.word	0x4082c000
 8001f50:	2000ecf0 	.word	0x2000ecf0
 8001f54:	2001d76c 	.word	0x2001d76c
 8001f58:	2000ecec 	.word	0x2000ecec
 8001f5c:	20000248 	.word	0x20000248
 8001f60:	2001d894 	.word	0x2001d894
 8001f64:	40021000 	.word	0x40021000
 8001f68:	2001d854 	.word	0x2001d854

08001f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <MX_SPI2_Init+0x5c>)
 8001f82:	4a16      	ldr	r2, [pc, #88]	; (8001fdc <MX_SPI2_Init+0x60>)
 8001f84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_SPI2_Init+0x5c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <MX_SPI2_Init+0x5c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_SPI2_Init+0x5c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_SPI2_Init+0x5c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_SPI2_Init+0x5c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_SPI2_Init+0x5c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_SPI2_Init+0x5c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_SPI2_Init+0x5c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_SPI2_Init+0x5c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_SPI2_Init+0x5c>)
 8001fbe:	220a      	movs	r2, #10
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_SPI2_Init+0x5c>)
 8001fc4:	f001 fb68 	bl	8003698 <HAL_SPI_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8001fce:	f7ff ffcd 	bl	8001f6c <Error_Handler>
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2001d77c 	.word	0x2001d77c
 8001fdc:	40003800 	.word	0x40003800

08001fe0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a2c      	ldr	r2, [pc, #176]	; (80020b0 <HAL_SPI_MspInit+0xd0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d152      	bne.n	80020a8 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_SPI_MspInit+0xd4>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a2a      	ldr	r2, [pc, #168]	; (80020b4 <HAL_SPI_MspInit+0xd4>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <HAL_SPI_MspInit+0xd4>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_SPI_MspInit+0xd4>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a23      	ldr	r2, [pc, #140]	; (80020b4 <HAL_SPI_MspInit+0xd4>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <HAL_SPI_MspInit+0xd4>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HAL_SPI_MspInit+0xd4>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <HAL_SPI_MspInit+0xd4>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <HAL_SPI_MspInit+0xd4>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002056:	230c      	movs	r3, #12
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002066:	2305      	movs	r3, #5
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	4811      	ldr	r0, [pc, #68]	; (80020b8 <HAL_SPI_MspInit+0xd8>)
 8002072:	f000 fd2f 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002076:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002084:	2303      	movs	r3, #3
 8002086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002088:	2305      	movs	r3, #5
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	480a      	ldr	r0, [pc, #40]	; (80020bc <HAL_SPI_MspInit+0xdc>)
 8002094:	f000 fd1e 	bl	8002ad4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2100      	movs	r1, #0
 800209c:	2024      	movs	r0, #36	; 0x24
 800209e:	f000 fcc0 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80020a2:	2024      	movs	r0, #36	; 0x24
 80020a4:	f000 fcd9 	bl	8002a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80020a8:	bf00      	nop
 80020aa:	3728      	adds	r7, #40	; 0x28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40003800 	.word	0x40003800
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020800 	.word	0x40020800
 80020bc:	40020400 	.word	0x40020400

080020c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_MspInit+0x4c>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	4a0f      	ldr	r2, [pc, #60]	; (800210c <HAL_MspInit+0x4c>)
 80020d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d4:	6453      	str	r3, [r2, #68]	; 0x44
 80020d6:	4b0d      	ldr	r3, [pc, #52]	; (800210c <HAL_MspInit+0x4c>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_MspInit+0x4c>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a08      	ldr	r2, [pc, #32]	; (800210c <HAL_MspInit+0x4c>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_MspInit+0x4c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800

08002110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <HardFault_Handler+0x4>

08002124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <MemManage_Handler+0x4>

0800212a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <BusFault_Handler+0x4>

08002130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <UsageFault_Handler+0x4>

08002136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002164:	f000 fb62 	bl	800282c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}

0800216c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002170:	4803      	ldr	r0, [pc, #12]	; (8002180 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002172:	f002 fd64 	bl	8004c3e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002176:	4803      	ldr	r0, [pc, #12]	; (8002184 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002178:	f002 fd61 	bl	8004c3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2001d814 	.word	0x2001d814
 8002184:	2001d854 	.word	0x2001d854

08002188 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <TIM3_IRQHandler+0x10>)
 800218e:	f002 fd56 	bl	8004c3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2001d7d4 	.word	0x2001d7d4

0800219c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <SPI2_IRQHandler+0x10>)
 80021a2:	f001 fd83 	bl	8003cac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2001d77c 	.word	0x2001d77c

080021b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <_sbrk+0x50>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <_sbrk+0x16>
		heap_end = &end;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <_sbrk+0x50>)
 80021c2:	4a10      	ldr	r2, [pc, #64]	; (8002204 <_sbrk+0x54>)
 80021c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <_sbrk+0x50>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <_sbrk+0x50>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	466a      	mov	r2, sp
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d907      	bls.n	80021ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80021da:	f003 fbdf 	bl	800599c <__errno>
 80021de:	4602      	mov	r2, r0
 80021e0:	230c      	movs	r3, #12
 80021e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295
 80021e8:	e006      	b.n	80021f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <_sbrk+0x50>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a03      	ldr	r2, [pc, #12]	; (8002200 <_sbrk+0x50>)
 80021f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000264 	.word	0x20000264
 8002204:	2001d8e0 	.word	0x2001d8e0

08002208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <SystemInit+0x28>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	4a07      	ldr	r2, [pc, #28]	; (8002230 <SystemInit+0x28>)
 8002214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <SystemInit+0x28>)
 800221e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002222:	609a      	str	r2, [r3, #8]
#endif
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08c      	sub	sp, #48	; 0x30
 8002238:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	2224      	movs	r2, #36	; 0x24
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f003 fbd4 	bl	80059f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8002250:	4b22      	ldr	r3, [pc, #136]	; (80022dc <MX_TIM1_Init+0xa8>)
 8002252:	4a23      	ldr	r2, [pc, #140]	; (80022e0 <MX_TIM1_Init+0xac>)
 8002254:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8002256:	4b21      	ldr	r3, [pc, #132]	; (80022dc <MX_TIM1_Init+0xa8>)
 8002258:	2201      	movs	r2, #1
 800225a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225c:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <MX_TIM1_Init+0xa8>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <MX_TIM1_Init+0xa8>)
 8002264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002268:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226a:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <MX_TIM1_Init+0xa8>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <MX_TIM1_Init+0xa8>)
 8002272:	2200      	movs	r2, #0
 8002274:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <MX_TIM1_Init+0xa8>)
 8002278:	2280      	movs	r2, #128	; 0x80
 800227a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800227c:	2301      	movs	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002284:	2301      	movs	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002288:	2300      	movs	r3, #0
 800228a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002294:	2301      	movs	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002298:	2300      	movs	r3, #0
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	4619      	mov	r1, r3
 80022a6:	480d      	ldr	r0, [pc, #52]	; (80022dc <MX_TIM1_Init+0xa8>)
 80022a8:	f002 fc00 	bl	8004aac <HAL_TIM_Encoder_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80022b2:	f7ff fe5b 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <MX_TIM1_Init+0xa8>)
 80022c4:	f003 fada 	bl	800587c <HAL_TIMEx_MasterConfigSynchronization>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80022ce:	f7ff fe4d 	bl	8001f6c <Error_Handler>
  }

}
 80022d2:	bf00      	nop
 80022d4:	3730      	adds	r7, #48	; 0x30
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2001d814 	.word	0x2001d814
 80022e0:	40010000 	.word	0x40010000

080022e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	; 0x30
 80022e8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	2224      	movs	r2, #36	; 0x24
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fb7c 	bl	80059f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002300:	4b20      	ldr	r3, [pc, #128]	; (8002384 <MX_TIM3_Init+0xa0>)
 8002302:	4a21      	ldr	r2, [pc, #132]	; (8002388 <MX_TIM3_Init+0xa4>)
 8002304:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <MX_TIM3_Init+0xa0>)
 8002308:	2200      	movs	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230c:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <MX_TIM3_Init+0xa0>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <MX_TIM3_Init+0xa0>)
 8002314:	2200      	movs	r2, #0
 8002316:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <MX_TIM3_Init+0xa0>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <MX_TIM3_Init+0xa0>)
 8002320:	2280      	movs	r2, #128	; 0x80
 8002322:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002324:	2301      	movs	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800232c:	2301      	movs	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 8002330:	2304      	movs	r3, #4
 8002332:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800233c:	2301      	movs	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 8002340:	2304      	movs	r3, #4
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	4619      	mov	r1, r3
 800234e:	480d      	ldr	r0, [pc, #52]	; (8002384 <MX_TIM3_Init+0xa0>)
 8002350:	f002 fbac 	bl	8004aac <HAL_TIM_Encoder_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800235a:	f7ff fe07 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800235e:	2350      	movs	r3, #80	; 0x50
 8002360:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	4619      	mov	r1, r3
 800236a:	4806      	ldr	r0, [pc, #24]	; (8002384 <MX_TIM3_Init+0xa0>)
 800236c:	f003 fa86 	bl	800587c <HAL_TIMEx_MasterConfigSynchronization>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002376:	f7ff fdf9 	bl	8001f6c <Error_Handler>
  }

}
 800237a:	bf00      	nop
 800237c:	3730      	adds	r7, #48	; 0x30
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2001d7d4 	.word	0x2001d7d4
 8002388:	40000400 	.word	0x40000400

0800238c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08c      	sub	sp, #48	; 0x30
 8002390:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002392:	f107 0320 	add.w	r3, r7, #32
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	611a      	str	r2, [r3, #16]
 80023ae:	615a      	str	r2, [r3, #20]
 80023b0:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 80023b2:	4b24      	ldr	r3, [pc, #144]	; (8002444 <MX_TIM9_Init+0xb8>)
 80023b4:	4a24      	ldr	r2, [pc, #144]	; (8002448 <MX_TIM9_Init+0xbc>)
 80023b6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1;
 80023b8:	4b22      	ldr	r3, [pc, #136]	; (8002444 <MX_TIM9_Init+0xb8>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023be:	4b21      	ldr	r3, [pc, #132]	; (8002444 <MX_TIM9_Init+0xb8>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 8399;
 80023c4:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <MX_TIM9_Init+0xb8>)
 80023c6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80023ca:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023cc:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <MX_TIM9_Init+0xb8>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <MX_TIM9_Init+0xb8>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80023d8:	481a      	ldr	r0, [pc, #104]	; (8002444 <MX_TIM9_Init+0xb8>)
 80023da:	f002 fa45 	bl	8004868 <HAL_TIM_Base_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80023e4:	f7ff fdc2 	bl	8001f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80023ee:	f107 0320 	add.w	r3, r7, #32
 80023f2:	4619      	mov	r1, r3
 80023f4:	4813      	ldr	r0, [pc, #76]	; (8002444 <MX_TIM9_Init+0xb8>)
 80023f6:	f002 fe51 	bl	800509c <HAL_TIM_ConfigClockSource>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8002400:	f7ff fdb4 	bl	8001f6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8002404:	480f      	ldr	r0, [pc, #60]	; (8002444 <MX_TIM9_Init+0xb8>)
 8002406:	f002 faa9 	bl	800495c <HAL_TIM_OC_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8002410:	f7ff fdac 	bl	8001f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002414:	2300      	movs	r3, #0
 8002416:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	2200      	movs	r2, #0
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <MX_TIM9_Init+0xb8>)
 800242c:	f002 fd10 	bl	8004e50 <HAL_TIM_OC_ConfigChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8002436:	f7ff fd99 	bl	8001f6c <Error_Handler>
  }

}
 800243a:	bf00      	nop
 800243c:	3730      	adds	r7, #48	; 0x30
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	2001d854 	.word	0x2001d854
 8002448:	40014000 	.word	0x40014000

0800244c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002452:	f107 0320 	add.w	r3, r7, #32
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	611a      	str	r2, [r3, #16]
 800246e:	615a      	str	r2, [r3, #20]
 8002470:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8002472:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <MX_TIM12_Init+0xd4>)
 8002474:	4a2b      	ldr	r2, [pc, #172]	; (8002524 <MX_TIM12_Init+0xd8>)
 8002476:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8002478:	4b29      	ldr	r3, [pc, #164]	; (8002520 <MX_TIM12_Init+0xd4>)
 800247a:	2201      	movs	r2, #1
 800247c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247e:	4b28      	ldr	r3, [pc, #160]	; (8002520 <MX_TIM12_Init+0xd4>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2799;
 8002484:	4b26      	ldr	r3, [pc, #152]	; (8002520 <MX_TIM12_Init+0xd4>)
 8002486:	f640 22ef 	movw	r2, #2799	; 0xaef
 800248a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248c:	4b24      	ldr	r3, [pc, #144]	; (8002520 <MX_TIM12_Init+0xd4>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002492:	4b23      	ldr	r3, [pc, #140]	; (8002520 <MX_TIM12_Init+0xd4>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002498:	4821      	ldr	r0, [pc, #132]	; (8002520 <MX_TIM12_Init+0xd4>)
 800249a:	f002 f9e5 	bl	8004868 <HAL_TIM_Base_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80024a4:	f7ff fd62 	bl	8001f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80024ae:	f107 0320 	add.w	r3, r7, #32
 80024b2:	4619      	mov	r1, r3
 80024b4:	481a      	ldr	r0, [pc, #104]	; (8002520 <MX_TIM12_Init+0xd4>)
 80024b6:	f002 fdf1 	bl	800509c <HAL_TIM_ConfigClockSource>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80024c0:	f7ff fd54 	bl	8001f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80024c4:	4816      	ldr	r0, [pc, #88]	; (8002520 <MX_TIM12_Init+0xd4>)
 80024c6:	f002 fa7e 	bl	80049c6 <HAL_TIM_PWM_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80024d0:	f7ff fd4c 	bl	8001f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d4:	2360      	movs	r3, #96	; 0x60
 80024d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2200      	movs	r2, #0
 80024e8:	4619      	mov	r1, r3
 80024ea:	480d      	ldr	r0, [pc, #52]	; (8002520 <MX_TIM12_Init+0xd4>)
 80024ec:	f002 fd10 	bl	8004f10 <HAL_TIM_PWM_ConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80024f6:	f7ff fd39 	bl	8001f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	2204      	movs	r2, #4
 80024fe:	4619      	mov	r1, r3
 8002500:	4807      	ldr	r0, [pc, #28]	; (8002520 <MX_TIM12_Init+0xd4>)
 8002502:	f002 fd05 	bl	8004f10 <HAL_TIM_PWM_ConfigChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 800250c:	f7ff fd2e 	bl	8001f6c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8002510:	4803      	ldr	r0, [pc, #12]	; (8002520 <MX_TIM12_Init+0xd4>)
 8002512:	f000 f8d5 	bl	80026c0 <HAL_TIM_MspPostInit>

}
 8002516:	bf00      	nop
 8002518:	3730      	adds	r7, #48	; 0x30
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2001d894 	.word	0x2001d894
 8002524:	40001800 	.word	0x40001800

08002528 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	; 0x30
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 031c 	add.w	r3, r7, #28
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a3a      	ldr	r2, [pc, #232]	; (8002630 <HAL_TIM_Encoder_MspInit+0x108>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d135      	bne.n	80025b6 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	4b39      	ldr	r3, [pc, #228]	; (8002634 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	4a38      	ldr	r2, [pc, #224]	; (8002634 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6453      	str	r3, [r2, #68]	; 0x44
 800255a:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_TIM_Encoder_MspInit+0x10c>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	4b32      	ldr	r3, [pc, #200]	; (8002634 <HAL_TIM_Encoder_MspInit+0x10c>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a31      	ldr	r2, [pc, #196]	; (8002634 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002570:	f043 0310 	orr.w	r3, r3, #16
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002582:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800258c:	2301      	movs	r3, #1
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002590:	2302      	movs	r3, #2
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002594:	2301      	movs	r3, #1
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002598:	f107 031c 	add.w	r3, r7, #28
 800259c:	4619      	mov	r1, r3
 800259e:	4826      	ldr	r0, [pc, #152]	; (8002638 <HAL_TIM_Encoder_MspInit+0x110>)
 80025a0:	f000 fa98 	bl	8002ad4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80025a4:	2200      	movs	r2, #0
 80025a6:	2100      	movs	r1, #0
 80025a8:	2018      	movs	r0, #24
 80025aa:	f000 fa3a 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80025ae:	2018      	movs	r0, #24
 80025b0:	f000 fa53 	bl	8002a5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80025b4:	e038      	b.n	8002628 <HAL_TIM_Encoder_MspInit+0x100>
  else if(tim_encoderHandle->Instance==TIM3)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a20      	ldr	r2, [pc, #128]	; (800263c <HAL_TIM_Encoder_MspInit+0x114>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d133      	bne.n	8002628 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_TIM_Encoder_MspInit+0x10c>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <HAL_TIM_Encoder_MspInit+0x10c>)
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	6413      	str	r3, [r2, #64]	; 0x40
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <HAL_TIM_Encoder_MspInit+0x10c>)
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_TIM_Encoder_MspInit+0x10c>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	4a13      	ldr	r2, [pc, #76]	; (8002634 <HAL_TIM_Encoder_MspInit+0x10c>)
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	6313      	str	r3, [r2, #48]	; 0x30
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_TIM_Encoder_MspInit+0x10c>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025f8:	23c0      	movs	r3, #192	; 0xc0
 80025fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002600:	2301      	movs	r3, #1
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002604:	2302      	movs	r3, #2
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002608:	2302      	movs	r3, #2
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	4619      	mov	r1, r3
 8002612:	480b      	ldr	r0, [pc, #44]	; (8002640 <HAL_TIM_Encoder_MspInit+0x118>)
 8002614:	f000 fa5e 	bl	8002ad4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	2100      	movs	r1, #0
 800261c:	201d      	movs	r0, #29
 800261e:	f000 fa00 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002622:	201d      	movs	r0, #29
 8002624:	f000 fa19 	bl	8002a5a <HAL_NVIC_EnableIRQ>
}
 8002628:	bf00      	nop
 800262a:	3730      	adds	r7, #48	; 0x30
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40010000 	.word	0x40010000
 8002634:	40023800 	.word	0x40023800
 8002638:	40021000 	.word	0x40021000
 800263c:	40000400 	.word	0x40000400
 8002640:	40020800 	.word	0x40020800

08002644 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <HAL_TIM_Base_MspInit+0x70>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d116      	bne.n	8002684 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_TIM_Base_MspInit+0x74>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <HAL_TIM_Base_MspInit+0x74>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <HAL_TIM_Base_MspInit+0x74>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	2018      	movs	r0, #24
 8002678:	f000 f9d3 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800267c:	2018      	movs	r0, #24
 800267e:	f000 f9ec 	bl	8002a5a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002682:	e012      	b.n	80026aa <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM12)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0c      	ldr	r2, [pc, #48]	; (80026bc <HAL_TIM_Base_MspInit+0x78>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10d      	bne.n	80026aa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_TIM_Base_MspInit+0x74>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <HAL_TIM_Base_MspInit+0x74>)
 8002698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_TIM_Base_MspInit+0x74>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40014000 	.word	0x40014000
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40001800 	.word	0x40001800

080026c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a12      	ldr	r2, [pc, #72]	; (8002728 <HAL_TIM_MspPostInit+0x68>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d11e      	bne.n	8002720 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_TIM_MspPostInit+0x6c>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_TIM_MspPostInit+0x6c>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <HAL_TIM_MspPostInit+0x6c>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration    
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80026fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002702:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002710:	2309      	movs	r3, #9
 8002712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	4619      	mov	r1, r3
 800271a:	4805      	ldr	r0, [pc, #20]	; (8002730 <HAL_TIM_MspPostInit+0x70>)
 800271c:	f000 f9da 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002720:	bf00      	nop
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40001800 	.word	0x40001800
 800272c:	40023800 	.word	0x40023800
 8002730:	40020400 	.word	0x40020400

08002734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800276c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002738:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800273a:	e003      	b.n	8002744 <LoopCopyDataInit>

0800273c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800273e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002740:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002742:	3104      	adds	r1, #4

08002744 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002744:	480b      	ldr	r0, [pc, #44]	; (8002774 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002748:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800274a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800274c:	d3f6      	bcc.n	800273c <CopyDataInit>
  ldr  r2, =_sbss
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002750:	e002      	b.n	8002758 <LoopFillZerobss>

08002752 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002752:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002754:	f842 3b04 	str.w	r3, [r2], #4

08002758 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800275a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800275c:	d3f9      	bcc.n	8002752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800275e:	f7ff fd53 	bl	8002208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002762:	f003 f921 	bl	80059a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002766:	f7ff f82f 	bl	80017c8 <main>
  bx  lr    
 800276a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800276c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002770:	080078c0 	.word	0x080078c0
  ldr  r0, =_sdata
 8002774:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002778:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800277c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8002780:	2001d8dc 	.word	0x2001d8dc

08002784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <ADC_IRQHandler>
	...

08002788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_Init+0x40>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <HAL_Init+0x40>)
 8002792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_Init+0x40>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <HAL_Init+0x40>)
 800279e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_Init+0x40>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <HAL_Init+0x40>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b0:	2003      	movs	r0, #3
 80027b2:	f000 f92b 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f000 f808 	bl	80027cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027bc:	f7ff fc80 	bl	80020c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40023c00 	.word	0x40023c00

080027cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_InitTick+0x54>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_InitTick+0x58>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	4619      	mov	r1, r3
 80027de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f943 	bl	8002a76 <HAL_SYSTICK_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00e      	b.n	8002818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b0f      	cmp	r3, #15
 80027fe:	d80a      	bhi.n	8002816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002800:	2200      	movs	r2, #0
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	f000 f90b 	bl	8002a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800280c:	4a06      	ldr	r2, [pc, #24]	; (8002828 <HAL_InitTick+0x5c>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e000      	b.n	8002818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000008 	.word	0x20000008
 8002824:	20000010 	.word	0x20000010
 8002828:	2000000c 	.word	0x2000000c

0800282c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_IncTick+0x20>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_IncTick+0x24>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4413      	add	r3, r2
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_IncTick+0x24>)
 800283e:	6013      	str	r3, [r2, #0]
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000010 	.word	0x20000010
 8002850:	2001d8d4 	.word	0x2001d8d4

08002854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return uwTick;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_GetTick+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	2001d8d4 	.word	0x2001d8d4

0800286c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002888:	4013      	ands	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289e:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	60d3      	str	r3, [r2, #12]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <__NVIC_GetPriorityGrouping+0x18>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	f003 0307 	and.w	r3, r3, #7
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db0b      	blt.n	80028fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4907      	ldr	r1, [pc, #28]	; (8002908 <__NVIC_EnableIRQ+0x38>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2001      	movs	r0, #1
 80028f2:	fa00 f202 	lsl.w	r2, r0, r2
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d8:	d301      	bcc.n	80029de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029da:	2301      	movs	r3, #1
 80029dc:	e00f      	b.n	80029fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <SysTick_Config+0x40>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e6:	210f      	movs	r1, #15
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f7ff ff8e 	bl	800290c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <SysTick_Config+0x40>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f6:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <SysTick_Config+0x40>)
 80029f8:	2207      	movs	r2, #7
 80029fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	e000e010 	.word	0xe000e010

08002a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ff29 	bl	800286c <__NVIC_SetPriorityGrouping>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a34:	f7ff ff3e 	bl	80028b4 <__NVIC_GetPriorityGrouping>
 8002a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	f7ff ff8e 	bl	8002960 <NVIC_EncodePriority>
 8002a44:	4602      	mov	r2, r0
 8002a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff5d 	bl	800290c <__NVIC_SetPriority>
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff31 	bl	80028d0 <__NVIC_EnableIRQ>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ffa2 	bl	80029c8 <SysTick_Config>
 8002a84:	4603      	mov	r3, r0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d004      	beq.n	8002aac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e00c      	b.n	8002ac6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2205      	movs	r2, #5
 8002ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	; 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	e16b      	b.n	8002dc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af0:	2201      	movs	r2, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	f040 815a 	bne.w	8002dc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d00b      	beq.n	8002b2e <HAL_GPIO_Init+0x5a>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d007      	beq.n	8002b2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b22:	2b11      	cmp	r3, #17
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b12      	cmp	r3, #18
 8002b2c:	d130      	bne.n	8002b90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 0201 	and.w	r2, r3, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0xfc>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b12      	cmp	r3, #18
 8002bce:	d123      	bne.n	8002c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	08da      	lsrs	r2, r3, #3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3208      	adds	r2, #8
 8002bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	220f      	movs	r2, #15
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	08da      	lsrs	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3208      	adds	r2, #8
 8002c12:	69b9      	ldr	r1, [r7, #24]
 8002c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0203 	and.w	r2, r3, #3
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80b4 	beq.w	8002dc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4b5f      	ldr	r3, [pc, #380]	; (8002ddc <HAL_GPIO_Init+0x308>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a5e      	ldr	r2, [pc, #376]	; (8002ddc <HAL_GPIO_Init+0x308>)
 8002c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b5c      	ldr	r3, [pc, #368]	; (8002ddc <HAL_GPIO_Init+0x308>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c76:	4a5a      	ldr	r2, [pc, #360]	; (8002de0 <HAL_GPIO_Init+0x30c>)
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	220f      	movs	r2, #15
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a51      	ldr	r2, [pc, #324]	; (8002de4 <HAL_GPIO_Init+0x310>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d02b      	beq.n	8002cfa <HAL_GPIO_Init+0x226>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a50      	ldr	r2, [pc, #320]	; (8002de8 <HAL_GPIO_Init+0x314>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d025      	beq.n	8002cf6 <HAL_GPIO_Init+0x222>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4f      	ldr	r2, [pc, #316]	; (8002dec <HAL_GPIO_Init+0x318>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01f      	beq.n	8002cf2 <HAL_GPIO_Init+0x21e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4e      	ldr	r2, [pc, #312]	; (8002df0 <HAL_GPIO_Init+0x31c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d019      	beq.n	8002cee <HAL_GPIO_Init+0x21a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4d      	ldr	r2, [pc, #308]	; (8002df4 <HAL_GPIO_Init+0x320>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_GPIO_Init+0x216>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	; (8002df8 <HAL_GPIO_Init+0x324>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_GPIO_Init+0x212>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4b      	ldr	r2, [pc, #300]	; (8002dfc <HAL_GPIO_Init+0x328>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <HAL_GPIO_Init+0x20e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4a      	ldr	r2, [pc, #296]	; (8002e00 <HAL_GPIO_Init+0x32c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_GPIO_Init+0x20a>
 8002cda:	2307      	movs	r3, #7
 8002cdc:	e00e      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002cde:	2308      	movs	r3, #8
 8002ce0:	e00c      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002ce2:	2306      	movs	r3, #6
 8002ce4:	e00a      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002ce6:	2305      	movs	r3, #5
 8002ce8:	e008      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002cea:	2304      	movs	r3, #4
 8002cec:	e006      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e004      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e002      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f002 0203 	and.w	r2, r2, #3
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	4093      	lsls	r3, r2
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d0c:	4934      	ldr	r1, [pc, #208]	; (8002de0 <HAL_GPIO_Init+0x30c>)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	3302      	adds	r3, #2
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d1a:	4b3a      	ldr	r3, [pc, #232]	; (8002e04 <HAL_GPIO_Init+0x330>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d3e:	4a31      	ldr	r2, [pc, #196]	; (8002e04 <HAL_GPIO_Init+0x330>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d44:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <HAL_GPIO_Init+0x330>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d68:	4a26      	ldr	r2, [pc, #152]	; (8002e04 <HAL_GPIO_Init+0x330>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d6e:	4b25      	ldr	r3, [pc, #148]	; (8002e04 <HAL_GPIO_Init+0x330>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d92:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_GPIO_Init+0x330>)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d98:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_GPIO_Init+0x330>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dbc:	4a11      	ldr	r2, [pc, #68]	; (8002e04 <HAL_GPIO_Init+0x330>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	f67f ae90 	bls.w	8002af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	3724      	adds	r7, #36	; 0x24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40013800 	.word	0x40013800
 8002de4:	40020000 	.word	0x40020000
 8002de8:	40020400 	.word	0x40020400
 8002dec:	40020800 	.word	0x40020800
 8002df0:	40020c00 	.word	0x40020c00
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40021400 	.word	0x40021400
 8002dfc:	40021800 	.word	0x40021800
 8002e00:	40021c00 	.word	0x40021c00
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e24:	e003      	b.n	8002e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	041a      	lsls	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	619a      	str	r2, [r3, #24]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e25b      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d075      	beq.n	8002f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e5a:	4ba3      	ldr	r3, [pc, #652]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d00c      	beq.n	8002e80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e66:	4ba0      	ldr	r3, [pc, #640]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d112      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e72:	4b9d      	ldr	r3, [pc, #628]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e7e:	d10b      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	4b99      	ldr	r3, [pc, #612]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d05b      	beq.n	8002f44 <HAL_RCC_OscConfig+0x108>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d157      	bne.n	8002f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e236      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	d106      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x74>
 8002ea2:	4b91      	ldr	r3, [pc, #580]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a90      	ldr	r2, [pc, #576]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e01d      	b.n	8002eec <HAL_RCC_OscConfig+0xb0>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x98>
 8002eba:	4b8b      	ldr	r3, [pc, #556]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a8a      	ldr	r2, [pc, #552]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b88      	ldr	r3, [pc, #544]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a87      	ldr	r2, [pc, #540]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0xb0>
 8002ed4:	4b84      	ldr	r3, [pc, #528]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a83      	ldr	r2, [pc, #524]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b81      	ldr	r3, [pc, #516]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a80      	ldr	r2, [pc, #512]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7ff fcae 	bl	8002854 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002efc:	f7ff fcaa 	bl	8002854 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e1fb      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0xc0>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7ff fc9a 	bl	8002854 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f24:	f7ff fc96 	bl	8002854 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e1e7      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	4b6c      	ldr	r3, [pc, #432]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0xe8>
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d063      	beq.n	800301a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f52:	4b65      	ldr	r3, [pc, #404]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f5e:	4b62      	ldr	r3, [pc, #392]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d11c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6a:	4b5f      	ldr	r3, [pc, #380]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d116      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	4b5c      	ldr	r3, [pc, #368]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_RCC_OscConfig+0x152>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d001      	beq.n	8002f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e1bb      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8e:	4b56      	ldr	r3, [pc, #344]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4952      	ldr	r1, [pc, #328]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa2:	e03a      	b.n	800301a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fac:	4b4f      	ldr	r3, [pc, #316]	; (80030ec <HAL_RCC_OscConfig+0x2b0>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7ff fc4f 	bl	8002854 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fba:	f7ff fc4b 	bl	8002854 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e19c      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fcc:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd8:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4940      	ldr	r1, [pc, #256]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]
 8002fec:	e015      	b.n	800301a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fee:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <HAL_RCC_OscConfig+0x2b0>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7ff fc2e 	bl	8002854 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffc:	f7ff fc2a 	bl	8002854 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e17b      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d030      	beq.n	8003088 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d016      	beq.n	800305c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800302e:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <HAL_RCC_OscConfig+0x2b4>)
 8003030:	2201      	movs	r2, #1
 8003032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7ff fc0e 	bl	8002854 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303c:	f7ff fc0a 	bl	8002854 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e15b      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x200>
 800305a:	e015      	b.n	8003088 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800305c:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HAL_RCC_OscConfig+0x2b4>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7ff fbf7 	bl	8002854 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306a:	f7ff fbf3 	bl	8002854 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e144      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307c:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 800307e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80a0 	beq.w	80031d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003096:	2300      	movs	r3, #0
 8003098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309a:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	4a0e      	ldr	r2, [pc, #56]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b4:	6413      	str	r3, [r2, #64]	; 0x40
 80030b6:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_OscConfig+0x2b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d121      	bne.n	8003116 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_RCC_OscConfig+0x2b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a07      	ldr	r2, [pc, #28]	; (80030f4 <HAL_RCC_OscConfig+0x2b8>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030de:	f7ff fbb9 	bl	8002854 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	e011      	b.n	800310a <HAL_RCC_OscConfig+0x2ce>
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	42470000 	.word	0x42470000
 80030f0:	42470e80 	.word	0x42470e80
 80030f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f8:	f7ff fbac 	bl	8002854 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e0fd      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	4b81      	ldr	r3, [pc, #516]	; (8003310 <HAL_RCC_OscConfig+0x4d4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d106      	bne.n	800312c <HAL_RCC_OscConfig+0x2f0>
 800311e:	4b7d      	ldr	r3, [pc, #500]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	4a7c      	ldr	r2, [pc, #496]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6713      	str	r3, [r2, #112]	; 0x70
 800312a:	e01c      	b.n	8003166 <HAL_RCC_OscConfig+0x32a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d10c      	bne.n	800314e <HAL_RCC_OscConfig+0x312>
 8003134:	4b77      	ldr	r3, [pc, #476]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a76      	ldr	r2, [pc, #472]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 800313a:	f043 0304 	orr.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
 8003140:	4b74      	ldr	r3, [pc, #464]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a73      	ldr	r2, [pc, #460]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
 800314c:	e00b      	b.n	8003166 <HAL_RCC_OscConfig+0x32a>
 800314e:	4b71      	ldr	r3, [pc, #452]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	4a70      	ldr	r2, [pc, #448]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6713      	str	r3, [r2, #112]	; 0x70
 800315a:	4b6e      	ldr	r3, [pc, #440]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	4a6d      	ldr	r2, [pc, #436]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d015      	beq.n	800319a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316e:	f7ff fb71 	bl	8002854 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003174:	e00a      	b.n	800318c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7ff fb6d 	bl	8002854 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0bc      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318c:	4b61      	ldr	r3, [pc, #388]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ee      	beq.n	8003176 <HAL_RCC_OscConfig+0x33a>
 8003198:	e014      	b.n	80031c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7ff fb5b 	bl	8002854 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7ff fb57 	bl	8002854 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e0a6      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b8:	4b56      	ldr	r3, [pc, #344]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1ee      	bne.n	80031a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d105      	bne.n	80031d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ca:	4b52      	ldr	r3, [pc, #328]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	4a51      	ldr	r2, [pc, #324]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 80031d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8092 	beq.w	8003304 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031e0:	4b4c      	ldr	r3, [pc, #304]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d05c      	beq.n	80032a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d141      	bne.n	8003278 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f4:	4b48      	ldr	r3, [pc, #288]	; (8003318 <HAL_RCC_OscConfig+0x4dc>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7ff fb2b 	bl	8002854 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003202:	f7ff fb27 	bl	8002854 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e078      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003214:	4b3f      	ldr	r3, [pc, #252]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f0      	bne.n	8003202 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	019b      	lsls	r3, r3, #6
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	3b01      	subs	r3, #1
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	061b      	lsls	r3, r3, #24
 8003244:	4933      	ldr	r1, [pc, #204]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 8003246:	4313      	orrs	r3, r2
 8003248:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800324a:	4b33      	ldr	r3, [pc, #204]	; (8003318 <HAL_RCC_OscConfig+0x4dc>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7ff fb00 	bl	8002854 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003258:	f7ff fafc 	bl	8002854 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e04d      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x41c>
 8003276:	e045      	b.n	8003304 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003278:	4b27      	ldr	r3, [pc, #156]	; (8003318 <HAL_RCC_OscConfig+0x4dc>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7ff fae9 	bl	8002854 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003286:	f7ff fae5 	bl	8002854 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e036      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x44a>
 80032a4:	e02e      	b.n	8003304 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e029      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b2:	4b18      	ldr	r3, [pc, #96]	; (8003314 <HAL_RCC_OscConfig+0x4d8>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d11c      	bne.n	8003300 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d115      	bne.n	8003300 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032da:	4013      	ands	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d10d      	bne.n	8003300 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d106      	bne.n	8003300 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40007000 	.word	0x40007000
 8003314:	40023800 	.word	0x40023800
 8003318:	42470060 	.word	0x42470060

0800331c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0cc      	b.n	80034ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003330:	4b68      	ldr	r3, [pc, #416]	; (80034d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d90c      	bls.n	8003358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b65      	ldr	r3, [pc, #404]	; (80034d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	4b63      	ldr	r3, [pc, #396]	; (80034d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0b8      	b.n	80034ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d020      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003370:	4b59      	ldr	r3, [pc, #356]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4a58      	ldr	r2, [pc, #352]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800337a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003388:	4b53      	ldr	r3, [pc, #332]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4a52      	ldr	r2, [pc, #328]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003392:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003394:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	494d      	ldr	r1, [pc, #308]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d044      	beq.n	800343c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d119      	bne.n	80033fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e07f      	b.n	80034ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d003      	beq.n	80033da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d107      	bne.n	80033ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033da:	4b3f      	ldr	r3, [pc, #252]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e06f      	b.n	80034ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ea:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e067      	b.n	80034ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033fa:	4b37      	ldr	r3, [pc, #220]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f023 0203 	bic.w	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4934      	ldr	r1, [pc, #208]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	4313      	orrs	r3, r2
 800340a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800340c:	f7ff fa22 	bl	8002854 <HAL_GetTick>
 8003410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003412:	e00a      	b.n	800342a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003414:	f7ff fa1e 	bl	8002854 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e04f      	b.n	80034ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342a:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 020c 	and.w	r2, r3, #12
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	429a      	cmp	r2, r3
 800343a:	d1eb      	bne.n	8003414 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800343c:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <HAL_RCC_ClockConfig+0x1b8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d20c      	bcs.n	8003464 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e032      	b.n	80034ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003470:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4916      	ldr	r1, [pc, #88]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	490e      	ldr	r1, [pc, #56]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034a2:	f000 f821 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 80034a6:	4601      	mov	r1, r0
 80034a8:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <HAL_RCC_ClockConfig+0x1c0>)
 80034b4:	5cd3      	ldrb	r3, [r2, r3]
 80034b6:	fa21 f303 	lsr.w	r3, r1, r3
 80034ba:	4a09      	ldr	r2, [pc, #36]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff f982 	bl	80027cc <HAL_InitTick>

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40023c00 	.word	0x40023c00
 80034d8:	40023800 	.word	0x40023800
 80034dc:	08007630 	.word	0x08007630
 80034e0:	20000008 	.word	0x20000008
 80034e4:	2000000c 	.word	0x2000000c

080034e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	2300      	movs	r3, #0
 80034f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034fe:	4b63      	ldr	r3, [pc, #396]	; (800368c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b04      	cmp	r3, #4
 8003508:	d007      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0x32>
 800350a:	2b08      	cmp	r3, #8
 800350c:	d008      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x38>
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 80b4 	bne.w	800367c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b5e      	ldr	r3, [pc, #376]	; (8003690 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003516:	60bb      	str	r3, [r7, #8]
       break;
 8003518:	e0b3      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800351a:	4b5e      	ldr	r3, [pc, #376]	; (8003694 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800351c:	60bb      	str	r3, [r7, #8]
      break;
 800351e:	e0b0      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003520:	4b5a      	ldr	r3, [pc, #360]	; (800368c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003528:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352a:	4b58      	ldr	r3, [pc, #352]	; (800368c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d04a      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b55      	ldr	r3, [pc, #340]	; (800368c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	f04f 0400 	mov.w	r4, #0
 8003540:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	ea03 0501 	and.w	r5, r3, r1
 800354c:	ea04 0602 	and.w	r6, r4, r2
 8003550:	4629      	mov	r1, r5
 8003552:	4632      	mov	r2, r6
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	f04f 0400 	mov.w	r4, #0
 800355c:	0154      	lsls	r4, r2, #5
 800355e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003562:	014b      	lsls	r3, r1, #5
 8003564:	4619      	mov	r1, r3
 8003566:	4622      	mov	r2, r4
 8003568:	1b49      	subs	r1, r1, r5
 800356a:	eb62 0206 	sbc.w	r2, r2, r6
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	f04f 0400 	mov.w	r4, #0
 8003576:	0194      	lsls	r4, r2, #6
 8003578:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800357c:	018b      	lsls	r3, r1, #6
 800357e:	1a5b      	subs	r3, r3, r1
 8003580:	eb64 0402 	sbc.w	r4, r4, r2
 8003584:	f04f 0100 	mov.w	r1, #0
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	00e2      	lsls	r2, r4, #3
 800358e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003592:	00d9      	lsls	r1, r3, #3
 8003594:	460b      	mov	r3, r1
 8003596:	4614      	mov	r4, r2
 8003598:	195b      	adds	r3, r3, r5
 800359a:	eb44 0406 	adc.w	r4, r4, r6
 800359e:	f04f 0100 	mov.w	r1, #0
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	0262      	lsls	r2, r4, #9
 80035a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80035ac:	0259      	lsls	r1, r3, #9
 80035ae:	460b      	mov	r3, r1
 80035b0:	4614      	mov	r4, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	4621      	mov	r1, r4
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f04f 0400 	mov.w	r4, #0
 80035bc:	461a      	mov	r2, r3
 80035be:	4623      	mov	r3, r4
 80035c0:	f7fd faf8 	bl	8000bb4 <__aeabi_uldivmod>
 80035c4:	4603      	mov	r3, r0
 80035c6:	460c      	mov	r4, r1
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	e049      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035cc:	4b2f      	ldr	r3, [pc, #188]	; (800368c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	099b      	lsrs	r3, r3, #6
 80035d2:	f04f 0400 	mov.w	r4, #0
 80035d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	ea03 0501 	and.w	r5, r3, r1
 80035e2:	ea04 0602 	and.w	r6, r4, r2
 80035e6:	4629      	mov	r1, r5
 80035e8:	4632      	mov	r2, r6
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	f04f 0400 	mov.w	r4, #0
 80035f2:	0154      	lsls	r4, r2, #5
 80035f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035f8:	014b      	lsls	r3, r1, #5
 80035fa:	4619      	mov	r1, r3
 80035fc:	4622      	mov	r2, r4
 80035fe:	1b49      	subs	r1, r1, r5
 8003600:	eb62 0206 	sbc.w	r2, r2, r6
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	f04f 0400 	mov.w	r4, #0
 800360c:	0194      	lsls	r4, r2, #6
 800360e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003612:	018b      	lsls	r3, r1, #6
 8003614:	1a5b      	subs	r3, r3, r1
 8003616:	eb64 0402 	sbc.w	r4, r4, r2
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	00e2      	lsls	r2, r4, #3
 8003624:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003628:	00d9      	lsls	r1, r3, #3
 800362a:	460b      	mov	r3, r1
 800362c:	4614      	mov	r4, r2
 800362e:	195b      	adds	r3, r3, r5
 8003630:	eb44 0406 	adc.w	r4, r4, r6
 8003634:	f04f 0100 	mov.w	r1, #0
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	02a2      	lsls	r2, r4, #10
 800363e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003642:	0299      	lsls	r1, r3, #10
 8003644:	460b      	mov	r3, r1
 8003646:	4614      	mov	r4, r2
 8003648:	4618      	mov	r0, r3
 800364a:	4621      	mov	r1, r4
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f04f 0400 	mov.w	r4, #0
 8003652:	461a      	mov	r2, r3
 8003654:	4623      	mov	r3, r4
 8003656:	f7fd faad 	bl	8000bb4 <__aeabi_uldivmod>
 800365a:	4603      	mov	r3, r0
 800365c:	460c      	mov	r4, r1
 800365e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003660:	4b0a      	ldr	r3, [pc, #40]	; (800368c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	3301      	adds	r3, #1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	60bb      	str	r3, [r7, #8]
      break;
 800367a:	e002      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800367e:	60bb      	str	r3, [r7, #8]
      break;
 8003680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003682:	68bb      	ldr	r3, [r7, #8]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800368c:	40023800 	.word	0x40023800
 8003690:	00f42400 	.word	0x00f42400
 8003694:	007a1200 	.word	0x007a1200

08003698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e056      	b.n	8003758 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d106      	bne.n	80036ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7fe fc8b 	bl	8001fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2202      	movs	r2, #2
 80036ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	ea42 0103 	orr.w	r1, r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	f003 0104 	and.w	r1, r3, #4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69da      	ldr	r2, [r3, #28]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003746:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_SPI_Transmit_IT+0x20>
 800377c:	2302      	movs	r3, #2
 800377e:	e067      	b.n	8003850 <HAL_SPI_Transmit_IT+0xf0>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_SPI_Transmit_IT+0x34>
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003798:	e055      	b.n	8003846 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d002      	beq.n	80037ac <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
 80037a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037aa:	e04c      	b.n	8003846 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2203      	movs	r2, #3
 80037b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	88fa      	ldrh	r2, [r7, #6]
 80037c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a1b      	ldr	r2, [pc, #108]	; (800385c <HAL_SPI_Transmit_IT+0xfc>)
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
 80037f2:	e002      	b.n	80037fa <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4a1a      	ldr	r2, [pc, #104]	; (8003860 <HAL_SPI_Transmit_IT+0x100>)
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003802:	d107      	bne.n	8003814 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003812:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003822:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d008      	beq.n	8003844 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e000      	b.n	8003846 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8003844:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800384e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003850:	4618      	mov	r0, r3
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	08004311 	.word	0x08004311
 8003860:	080042cb 	.word	0x080042cb

08003864 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	4613      	mov	r3, r2
 8003870:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d110      	bne.n	80038a0 <HAL_SPI_Receive_IT+0x3c>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003886:	d10b      	bne.n	80038a0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2204      	movs	r2, #4
 800388c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f87a 	bl	8003990 <HAL_SPI_TransmitReceive_IT>
 800389c:	4603      	mov	r3, r0
 800389e:	e06e      	b.n	800397e <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_SPI_Receive_IT+0x4a>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e067      	b.n	800397e <HAL_SPI_Receive_IT+0x11a>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d002      	beq.n	80038c8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
 80038c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038c6:	e055      	b.n	8003974 <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_SPI_Receive_IT+0x70>
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038d8:	e04c      	b.n	8003974 <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2204      	movs	r2, #4
 80038de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	88fa      	ldrh	r2, [r7, #6]
 80038f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	88fa      	ldrh	r2, [r7, #6]
 80038f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <HAL_SPI_Receive_IT+0x124>)
 800391e:	641a      	str	r2, [r3, #64]	; 0x40
 8003920:	e002      	b.n	8003928 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <HAL_SPI_Receive_IT+0x128>)
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003930:	d107      	bne.n	8003942 <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003940:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003950:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d008      	beq.n	8003972 <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e000      	b.n	8003974 <HAL_SPI_Receive_IT+0x110>
  }

error :
 8003972:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800397c:	7dfb      	ldrb	r3, [r7, #23]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	08004285 	.word	0x08004285
 800398c:	0800423b 	.word	0x0800423b

08003990 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_SPI_TransmitReceive_IT+0x20>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e075      	b.n	8003a9c <HAL_SPI_TransmitReceive_IT+0x10c>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039be:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039c6:	7dbb      	ldrb	r3, [r7, #22]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d00d      	beq.n	80039e8 <HAL_SPI_TransmitReceive_IT+0x58>
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039d2:	d106      	bne.n	80039e2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <HAL_SPI_TransmitReceive_IT+0x52>
 80039dc:	7dbb      	ldrb	r3, [r7, #22]
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d002      	beq.n	80039e8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
 80039e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039e6:	e054      	b.n	8003a92 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_SPI_TransmitReceive_IT+0x6a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_SPI_TransmitReceive_IT+0x6a>
 80039f4:	887b      	ldrh	r3, [r7, #2]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039fe:	e048      	b.n	8003a92 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d003      	beq.n	8003a14 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2205      	movs	r2, #5
 8003a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	887a      	ldrh	r2, [r7, #2]
 8003a24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	887a      	ldrh	r2, [r7, #2]
 8003a2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	887a      	ldrh	r2, [r7, #2]
 8003a36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	887a      	ldrh	r2, [r7, #2]
 8003a3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d006      	beq.n	8003a54 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a17      	ldr	r2, [pc, #92]	; (8003aa8 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a17      	ldr	r2, [pc, #92]	; (8003aac <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
 8003a52:	e005      	b.n	8003a60 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <HAL_SPI_TransmitReceive_IT+0x120>)
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <HAL_SPI_TransmitReceive_IT+0x124>)
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7a:	2b40      	cmp	r3, #64	; 0x40
 8003a7c:	d008      	beq.n	8003a90 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e000      	b.n	8003a92 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8003a90:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	371c      	adds	r7, #28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	0800417d 	.word	0x0800417d
 8003aac:	080041dd 	.word	0x080041dd
 8003ab0:	080040b9 	.word	0x080040b9
 8003ab4:	0800411d 	.word	0x0800411d

08003ab8 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003ac8:	4b72      	ldr	r3, [pc, #456]	; (8003c94 <HAL_SPI_Abort_IT+0x1dc>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a72      	ldr	r2, [pc, #456]	; (8003c98 <HAL_SPI_Abort_IT+0x1e0>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0a5b      	lsrs	r3, r3, #9
 8003ad4:	2264      	movs	r2, #100	; 0x64
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0220 	bic.w	r2, r2, #32
 8003aee:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afa:	2b80      	cmp	r3, #128	; 0x80
 8003afc:	d117      	bne.n	8003b2e <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a66      	ldr	r2, [pc, #408]	; (8003c9c <HAL_SPI_Abort_IT+0x1e4>)
 8003b02:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003b16:	e008      	b.n	8003b2a <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b07      	cmp	r3, #7
 8003b28:	d1ec      	bne.n	8003b04 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d117      	bne.n	8003b6c <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a58      	ldr	r2, [pc, #352]	; (8003ca0 <HAL_SPI_Abort_IT+0x1e8>)
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003b54:	e008      	b.n	8003b68 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b07      	cmp	r3, #7
 8003b66:	d1ec      	bne.n	8003b42 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00f      	beq.n	8003b94 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d104      	bne.n	8003b8c <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b86:	4a47      	ldr	r2, [pc, #284]	; (8003ca4 <HAL_SPI_Abort_IT+0x1ec>)
 8003b88:	651a      	str	r2, [r3, #80]	; 0x50
 8003b8a:	e003      	b.n	8003b94 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b90:	2200      	movs	r2, #0
 8003b92:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00f      	beq.n	8003bbc <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d104      	bne.n	8003bb4 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bae:	4a3e      	ldr	r2, [pc, #248]	; (8003ca8 <HAL_SPI_Abort_IT+0x1f0>)
 8003bb0:	651a      	str	r2, [r3, #80]	; 0x50
 8003bb2:	e003      	b.n	8003bbc <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb8:	2200      	movs	r2, #0
 8003bba:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d115      	bne.n	8003bf6 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d011      	beq.n	8003bf6 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe ff59 	bl	8002a8e <HAL_DMA_Abort_IT>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be6:	2200      	movs	r2, #0
 8003be8:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2240      	movs	r2, #64	; 0x40
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
 8003bf0:	e001      	b.n	8003bf6 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d115      	bne.n	8003c30 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d011      	beq.n	8003c30 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fe ff3c 	bl	8002a8e <HAL_DMA_Abort_IT>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c20:	2200      	movs	r2, #0
 8003c22:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2240      	movs	r2, #64	; 0x40
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
 8003c2a:	e001      	b.n	8003c30 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d128      	bne.n	8003c88 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d102      	bne.n	8003c50 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	77fb      	strb	r3, [r7, #31]
 8003c4e:	e002      	b.n	8003c56 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f930 	bl	8003ee8 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8003c88:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3720      	adds	r7, #32
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000008 	.word	0x20000008
 8003c98:	057619f1 	.word	0x057619f1
 8003c9c:	0800482d 	.word	0x0800482d
 8003ca0:	080047a5 	.word	0x080047a5
 8003ca4:	08003f25 	.word	0x08003f25
 8003ca8:	08003ff9 	.word	0x08003ff9

08003cac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	099b      	lsrs	r3, r3, #6
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10f      	bne.n	8003cf0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	099b      	lsrs	r3, r3, #6
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d004      	beq.n	8003cf0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	4798      	blx	r3
    return;
 8003cee:	e0d8      	b.n	8003ea2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_SPI_IRQHandler+0x66>
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	09db      	lsrs	r3, r3, #7
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d004      	beq.n	8003d12 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	4798      	blx	r3
    return;
 8003d10:	e0c7      	b.n	8003ea2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10c      	bne.n	8003d38 <HAL_SPI_IRQHandler+0x8c>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80b5 	beq.w	8003ea2 <HAL_SPI_IRQHandler+0x1f6>
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80ae 	beq.w	8003ea2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	099b      	lsrs	r3, r3, #6
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d023      	beq.n	8003d9a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d011      	beq.n	8003d82 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	f043 0204 	orr.w	r2, r3, #4
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	e00b      	b.n	8003d9a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	693b      	ldr	r3, [r7, #16]
        return;
 8003d98:	e083      	b.n	8003ea2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d014      	beq.n	8003dd0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	f043 0201 	orr.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00c      	beq.n	8003df6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f043 0208 	orr.w	r2, r3, #8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003de8:	2300      	movs	r3, #0
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d050      	beq.n	8003ea0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e0c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <HAL_SPI_IRQHandler+0x17e>
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d034      	beq.n	8003e94 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0203 	bic.w	r2, r2, #3
 8003e38:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d011      	beq.n	8003e66 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	4a18      	ldr	r2, [pc, #96]	; (8003ea8 <HAL_SPI_IRQHandler+0x1fc>)
 8003e48:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fe1d 	bl	8002a8e <HAL_DMA_Abort_IT>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e72:	4a0d      	ldr	r2, [pc, #52]	; (8003ea8 <HAL_SPI_IRQHandler+0x1fc>)
 8003e74:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fe07 	bl	8002a8e <HAL_DMA_Abort_IT>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003e92:	e003      	b.n	8003e9c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f81d 	bl	8003ed4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e9a:	e000      	b.n	8003e9e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003e9c:	bf00      	nop
    return;
 8003e9e:	bf00      	nop
 8003ea0:	bf00      	nop
  }
}
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	08003efd 	.word	0x08003efd

08003eac <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7ff ffdc 	bl	8003ed4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f36:	2200      	movs	r2, #0
 8003f38:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003f3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <SPI_DMATxAbortCallback+0xcc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a2d      	ldr	r2, [pc, #180]	; (8003ff4 <SPI_DMATxAbortCallback+0xd0>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	0a5b      	lsrs	r3, r3, #9
 8003f46:	2264      	movs	r2, #100	; 0x64
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0202 	bic.w	r2, r2, #2
 8003f5c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f70:	e009      	b.n	8003f86 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0eb      	beq.n	8003f5e <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d126      	bne.n	8003fe6 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d002      	beq.n	8003fb2 <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8003fde:	6978      	ldr	r0, [r7, #20]
 8003fe0:	f7ff ff82 	bl	8003ee8 <HAL_SPI_AbortCpltCallback>
 8003fe4:	e000      	b.n	8003fe8 <SPI_DMATxAbortCallback+0xc4>
      return;
 8003fe6:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000008 	.word	0x20000008
 8003ff4:	057619f1 	.word	0x057619f1

08003ff8 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004014:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401a:	2200      	movs	r2, #0
 800401c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800402e:	f7fe fc11 	bl	8002854 <HAL_GetTick>
 8004032:	4603      	mov	r3, r0
 8004034:	461a      	mov	r2, r3
 8004036:	2164      	movs	r1, #100	; 0x64
 8004038:	6978      	ldr	r0, [r7, #20]
 800403a:	f000 fa5b 	bl	80044f4 <SPI_EndRxTxTransaction>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004054:	2b00      	cmp	r3, #0
 8004056:	d004      	beq.n	8004062 <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	2b00      	cmp	r3, #0
 8004060:	d126      	bne.n	80040b0 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2200      	movs	r2, #0
 800406c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	2b40      	cmp	r3, #64	; 0x40
 8004074:	d002      	beq.n	800407c <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 80040a8:	6978      	ldr	r0, [r7, #20]
 80040aa:	f7ff ff1d 	bl	8003ee8 <HAL_SPI_AbortCpltCallback>
 80040ae:	e000      	b.n	80040b2 <SPI_DMARxAbortCallback+0xba>
      return;
 80040b0:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f103 020c 	add.w	r2, r3, #12
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	7812      	ldrb	r2, [r2, #0]
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10f      	bne.n	8004114 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004102:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fa32 	bl	8004578 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	7812      	ldrb	r2, [r2, #0]
 8004130:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10f      	bne.n	8004174 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004162:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d102      	bne.n	8004174 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa02 	bl	8004578 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	b292      	uxth	r2, r2
 8004190:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	1c9a      	adds	r2, r3, #2
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10f      	bne.n	80041d4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f9d2 	bl	8004578 <SPI_CloseRxTx_ISR>
    }
  }
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	881a      	ldrh	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	1c9a      	adds	r2, r3, #2
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10f      	bne.n	8004232 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004220:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f9a3 	bl	8004578 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f103 020c 	add.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	7812      	ldrb	r2, [r2, #0]
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f9f2 	bl	8004660 <SPI_CloseRx_ISR>
  }
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	b292      	uxth	r2, r2
 8004298:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	1c9a      	adds	r2, r3, #2
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f9cf 	bl	8004660 <SPI_CloseRx_ISR>
  }
}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	7812      	ldrb	r2, [r2, #0]
 80042de:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9ec 	bl	80046e0 <SPI_CloseTx_ISR>
  }
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	881a      	ldrh	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	1c9a      	adds	r2, r3, #2
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d102      	bne.n	800434c <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f9ca 	bl	80046e0 <SPI_CloseTx_ISR>
  }
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	4613      	mov	r3, r2
 8004362:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004364:	e04c      	b.n	8004400 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d048      	beq.n	8004400 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800436e:	f7fe fa71 	bl	8002854 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d902      	bls.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x30>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d13d      	bne.n	8004400 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004392:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800439c:	d111      	bne.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a6:	d004      	beq.n	80043b2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b0:	d107      	bne.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ca:	d10f      	bne.n	80043ec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e00f      	b.n	8004420 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4013      	ands	r3, r2
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	429a      	cmp	r2, r3
 800440e:	bf0c      	ite	eq
 8004410:	2301      	moveq	r3, #1
 8004412:	2300      	movne	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	461a      	mov	r2, r3
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	429a      	cmp	r2, r3
 800441c:	d1a3      	bne.n	8004366 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800443c:	d111      	bne.n	8004462 <SPI_EndRxTransaction+0x3a>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004446:	d004      	beq.n	8004452 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004450:	d107      	bne.n	8004462 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004460:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800446a:	d12a      	bne.n	80044c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004474:	d012      	beq.n	800449c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2200      	movs	r2, #0
 800447e:	2180      	movs	r1, #128	; 0x80
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff ff67 	bl	8004354 <SPI_WaitFlagStateUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d02d      	beq.n	80044e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	f043 0220 	orr.w	r2, r3, #32
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e026      	b.n	80044ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2200      	movs	r2, #0
 80044a4:	2101      	movs	r1, #1
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7ff ff54 	bl	8004354 <SPI_WaitFlagStateUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01a      	beq.n	80044e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e013      	b.n	80044ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2200      	movs	r2, #0
 80044ca:	2101      	movs	r1, #1
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f7ff ff41 	bl	8004354 <SPI_WaitFlagStateUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e000      	b.n	80044ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <SPI_EndRxTxTransaction+0x7c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <SPI_EndRxTxTransaction+0x80>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	0d5b      	lsrs	r3, r3, #21
 800450c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004510:	fb02 f303 	mul.w	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800451e:	d112      	bne.n	8004546 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2200      	movs	r2, #0
 8004528:	2180      	movs	r1, #128	; 0x80
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff ff12 	bl	8004354 <SPI_WaitFlagStateUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d016      	beq.n	8004564 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e00f      	b.n	8004566 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3b01      	subs	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455c:	2b80      	cmp	r3, #128	; 0x80
 800455e:	d0f2      	beq.n	8004546 <SPI_EndRxTxTransaction+0x52>
 8004560:	e000      	b.n	8004564 <SPI_EndRxTxTransaction+0x70>
        break;
 8004562:	bf00      	nop
  }

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000008 	.word	0x20000008
 8004574:	165e9f81 	.word	0x165e9f81

08004578 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004580:	4b35      	ldr	r3, [pc, #212]	; (8004658 <SPI_CloseRxTx_ISR+0xe0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a35      	ldr	r2, [pc, #212]	; (800465c <SPI_CloseRxTx_ISR+0xe4>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	0a5b      	lsrs	r3, r3, #9
 800458c:	2264      	movs	r2, #100	; 0x64
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004594:	f7fe f95e 	bl	8002854 <HAL_GetTick>
 8004598:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0220 	bic.w	r2, r2, #32
 80045a8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045bc:	e009      	b.n	80045d2 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0eb      	beq.n	80045aa <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	2164      	movs	r1, #100	; 0x64
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff ff8c 	bl	80044f4 <SPI_EndRxTxTransaction>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10a      	bne.n	800460c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004610:	2b00      	cmp	r3, #0
 8004612:	d115      	bne.n	8004640 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b04      	cmp	r3, #4
 800461e:	d107      	bne.n	8004630 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7fd fb65 	bl	8001cf8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800462e:	e00e      	b.n	800464e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff fc41 	bl	8003ec0 <HAL_SPI_TxRxCpltCallback>
}
 800463e:	e006      	b.n	800464e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff fc43 	bl	8003ed4 <HAL_SPI_ErrorCallback>
}
 800464e:	bf00      	nop
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000008 	.word	0x20000008
 800465c:	057619f1 	.word	0x057619f1

08004660 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004676:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004678:	f7fe f8ec 	bl	8002854 <HAL_GetTick>
 800467c:	4603      	mov	r3, r0
 800467e:	461a      	mov	r2, r3
 8004680:	2164      	movs	r1, #100	; 0x64
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff fed0 	bl	8004428 <SPI_EndRxTransaction>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	f043 0220 	orr.w	r2, r3, #32
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7fd fb15 	bl	8001cf8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80046ce:	e002      	b.n	80046d6 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff fbff 	bl	8003ed4 <HAL_SPI_ErrorCallback>
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80046e8:	4b2c      	ldr	r3, [pc, #176]	; (800479c <SPI_CloseTx_ISR+0xbc>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a2c      	ldr	r2, [pc, #176]	; (80047a0 <SPI_CloseTx_ISR+0xc0>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	0a5b      	lsrs	r3, r3, #9
 80046f4:	2264      	movs	r2, #100	; 0x64
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046fc:	f7fe f8aa 	bl	8002854 <HAL_GetTick>
 8004700:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004714:	e009      	b.n	800472a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	3b01      	subs	r3, #1
 800471a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0eb      	beq.n	8004702 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004738:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	2164      	movs	r1, #100	; 0x64
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff fed8 	bl	80044f4 <SPI_EndRxTxTransaction>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	f043 0220 	orr.w	r2, r3, #32
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff fba5 	bl	8003ed4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800478a:	e002      	b.n	8004792 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fb8d 	bl	8003eac <HAL_SPI_TxCpltCallback>
}
 8004792:	bf00      	nop
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000008 	.word	0x20000008
 80047a0:	057619f1 	.word	0x057619f1

080047a4 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80047ac:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <SPI_AbortRx_ISR+0x80>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <SPI_AbortRx_ISR+0x84>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	0a5b      	lsrs	r3, r3, #9
 80047b8:	2264      	movs	r2, #100	; 0x64
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047d2:	e009      	b.n	80047e8 <SPI_AbortRx_ISR+0x44>
    }
    count--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0eb      	beq.n	80047c0 <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f6:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004806:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2207      	movs	r2, #7
 8004812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20000008 	.word	0x20000008
 8004828:	057619f1 	.word	0x057619f1

0800482c <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004842:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004852:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2207      	movs	r2, #7
 8004858:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e01d      	b.n	80048b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fd fed8 	bl	8002644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f000 fcd8 	bl	800525c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b085      	sub	sp, #20
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b06      	cmp	r3, #6
 80048e6:	d007      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a1a      	ldr	r2, [r3, #32]
 8004924:	f241 1311 	movw	r3, #4369	; 0x1111
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <HAL_TIM_Base_Stop_IT+0x48>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6a1a      	ldr	r2, [r3, #32]
 8004934:	f240 4344 	movw	r3, #1092	; 0x444
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d107      	bne.n	800494e <HAL_TIM_Base_Stop_IT+0x48>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0201 	bic.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e01d      	b.n	80049aa <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f815 	bl	80049b2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f000 fc5e 	bl	800525c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e01d      	b.n	8004a14 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f815 	bl	8004a1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3304      	adds	r3, #4
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f000 fc29 	bl	800525c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	6839      	ldr	r1, [r7, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fef4 	bl	8005830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a15      	ldr	r2, [pc, #84]	; (8004aa4 <HAL_TIM_PWM_Start+0x74>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <HAL_TIM_PWM_Start+0x2c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a14      	ldr	r2, [pc, #80]	; (8004aa8 <HAL_TIM_PWM_Start+0x78>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIM_PWM_Start+0x30>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <HAL_TIM_PWM_Start+0x32>
 8004a60:	2300      	movs	r3, #0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d007      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b06      	cmp	r3, #6
 8004a86:	d007      	beq.n	8004a98 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40010000 	.word	0x40010000
 8004aa8:	40010400 	.word	0x40010400

08004aac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e083      	b.n	8004bc8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7fd fd27 	bl	8002528 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004af0:	f023 0307 	bic.w	r3, r3, #7
 8004af4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3304      	adds	r3, #4
 8004afe:	4619      	mov	r1, r3
 8004b00:	4610      	mov	r0, r2
 8004b02:	f000 fbab 	bl	800525c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b4c:	f023 030c 	bic.w	r3, r3, #12
 8004b50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	011a      	lsls	r2, r3, #4
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	031b      	lsls	r3, r3, #12
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004b92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_TIM_Encoder_Start+0x16>
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d008      	beq.n	8004bf6 <HAL_TIM_Encoder_Start+0x26>
 8004be4:	e00f      	b.n	8004c06 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2201      	movs	r2, #1
 8004bec:	2100      	movs	r1, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fe1e 	bl	8005830 <TIM_CCxChannelCmd>
      break;
 8004bf4:	e016      	b.n	8004c24 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	2104      	movs	r1, #4
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fe16 	bl	8005830 <TIM_CCxChannelCmd>
      break;
 8004c04:	e00e      	b.n	8004c24 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fe0e 	bl	8005830 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	2104      	movs	r1, #4
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fe07 	bl	8005830 <TIM_CCxChannelCmd>
      break;
 8004c22:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d122      	bne.n	8004c9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d11b      	bne.n	8004c9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f06f 0202 	mvn.w	r2, #2
 8004c6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 facc 	bl	800521e <HAL_TIM_IC_CaptureCallback>
 8004c86:	e005      	b.n	8004c94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fabe 	bl	800520a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 facf 	bl	8005232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d122      	bne.n	8004cee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d11b      	bne.n	8004cee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f06f 0204 	mvn.w	r2, #4
 8004cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 faa2 	bl	800521e <HAL_TIM_IC_CaptureCallback>
 8004cda:	e005      	b.n	8004ce8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fa94 	bl	800520a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 faa5 	bl	8005232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d122      	bne.n	8004d42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d11b      	bne.n	8004d42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f06f 0208 	mvn.w	r2, #8
 8004d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2204      	movs	r2, #4
 8004d18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fa78 	bl	800521e <HAL_TIM_IC_CaptureCallback>
 8004d2e:	e005      	b.n	8004d3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fa6a 	bl	800520a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fa7b 	bl	8005232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d122      	bne.n	8004d96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	d11b      	bne.n	8004d96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f06f 0210 	mvn.w	r2, #16
 8004d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2208      	movs	r2, #8
 8004d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fa4e 	bl	800521e <HAL_TIM_IC_CaptureCallback>
 8004d82:	e005      	b.n	8004d90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fa40 	bl	800520a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fa51 	bl	8005232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d10e      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d107      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f06f 0201 	mvn.w	r2, #1
 8004dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fc ffd3 	bl	8001d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	2b80      	cmp	r3, #128	; 0x80
 8004dce:	d10e      	bne.n	8004dee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dda:	2b80      	cmp	r3, #128	; 0x80
 8004ddc:	d107      	bne.n	8004dee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fdcd 	bl	8005988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d10e      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d107      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fa16 	bl	8005246 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d10e      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d107      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f06f 0220 	mvn.w	r2, #32
 8004e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fd97 	bl	8005974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e04e      	b.n	8004f08 <HAL_TIM_OC_ConfigChannel+0xb8>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2202      	movs	r2, #2
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b0c      	cmp	r3, #12
 8004e7e:	d839      	bhi.n	8004ef4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <HAL_TIM_OC_ConfigChannel+0x38>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004ebd 	.word	0x08004ebd
 8004e8c:	08004ef5 	.word	0x08004ef5
 8004e90:	08004ef5 	.word	0x08004ef5
 8004e94:	08004ef5 	.word	0x08004ef5
 8004e98:	08004ecb 	.word	0x08004ecb
 8004e9c:	08004ef5 	.word	0x08004ef5
 8004ea0:	08004ef5 	.word	0x08004ef5
 8004ea4:	08004ef5 	.word	0x08004ef5
 8004ea8:	08004ed9 	.word	0x08004ed9
 8004eac:	08004ef5 	.word	0x08004ef5
 8004eb0:	08004ef5 	.word	0x08004ef5
 8004eb4:	08004ef5 	.word	0x08004ef5
 8004eb8:	08004ee7 	.word	0x08004ee7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fa6a 	bl	800539c <TIM_OC1_SetConfig>
      break;
 8004ec8:	e015      	b.n	8004ef6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fad3 	bl	800547c <TIM_OC2_SetConfig>
      break;
 8004ed6:	e00e      	b.n	8004ef6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fb42 	bl	8005568 <TIM_OC3_SetConfig>
      break;
 8004ee4:	e007      	b.n	8004ef6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fbaf 	bl	8005650 <TIM_OC4_SetConfig>
      break;
 8004ef2:	e000      	b.n	8004ef6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8004ef4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e0b4      	b.n	8005094 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2202      	movs	r2, #2
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b0c      	cmp	r3, #12
 8004f3e:	f200 809f 	bhi.w	8005080 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f7d 	.word	0x08004f7d
 8004f4c:	08005081 	.word	0x08005081
 8004f50:	08005081 	.word	0x08005081
 8004f54:	08005081 	.word	0x08005081
 8004f58:	08004fbd 	.word	0x08004fbd
 8004f5c:	08005081 	.word	0x08005081
 8004f60:	08005081 	.word	0x08005081
 8004f64:	08005081 	.word	0x08005081
 8004f68:	08004fff 	.word	0x08004fff
 8004f6c:	08005081 	.word	0x08005081
 8004f70:	08005081 	.word	0x08005081
 8004f74:	08005081 	.word	0x08005081
 8004f78:	0800503f 	.word	0x0800503f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fa0a 	bl	800539c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0208 	orr.w	r2, r2, #8
 8004f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0204 	bic.w	r2, r2, #4
 8004fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6999      	ldr	r1, [r3, #24]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	619a      	str	r2, [r3, #24]
      break;
 8004fba:	e062      	b.n	8005082 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fa5a 	bl	800547c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6999      	ldr	r1, [r3, #24]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	021a      	lsls	r2, r3, #8
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	619a      	str	r2, [r3, #24]
      break;
 8004ffc:	e041      	b.n	8005082 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	4618      	mov	r0, r3
 8005006:	f000 faaf 	bl	8005568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0208 	orr.w	r2, r2, #8
 8005018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0204 	bic.w	r2, r2, #4
 8005028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69d9      	ldr	r1, [r3, #28]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	61da      	str	r2, [r3, #28]
      break;
 800503c:	e021      	b.n	8005082 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fb03 	bl	8005650 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69d9      	ldr	r1, [r3, #28]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	021a      	lsls	r2, r3, #8
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	61da      	str	r2, [r3, #28]
      break;
 800507e:	e000      	b.n	8005082 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005080:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_TIM_ConfigClockSource+0x18>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e0a6      	b.n	8005202 <HAL_TIM_ConfigClockSource+0x166>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d067      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0x120>
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d80b      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x6c>
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d073      	beq.n	80051dc <HAL_TIM_ConfigClockSource+0x140>
 80050f4:	2b10      	cmp	r3, #16
 80050f6:	d802      	bhi.n	80050fe <HAL_TIM_ConfigClockSource+0x62>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d06f      	beq.n	80051dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80050fc:	e078      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d06c      	beq.n	80051dc <HAL_TIM_ConfigClockSource+0x140>
 8005102:	2b30      	cmp	r3, #48	; 0x30
 8005104:	d06a      	beq.n	80051dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005106:	e073      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005108:	2b70      	cmp	r3, #112	; 0x70
 800510a:	d00d      	beq.n	8005128 <HAL_TIM_ConfigClockSource+0x8c>
 800510c:	2b70      	cmp	r3, #112	; 0x70
 800510e:	d804      	bhi.n	800511a <HAL_TIM_ConfigClockSource+0x7e>
 8005110:	2b50      	cmp	r3, #80	; 0x50
 8005112:	d033      	beq.n	800517c <HAL_TIM_ConfigClockSource+0xe0>
 8005114:	2b60      	cmp	r3, #96	; 0x60
 8005116:	d041      	beq.n	800519c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005118:	e06a      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511e:	d066      	beq.n	80051ee <HAL_TIM_ConfigClockSource+0x152>
 8005120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005124:	d017      	beq.n	8005156 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005126:	e063      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	6899      	ldr	r1, [r3, #8]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f000 fb5a 	bl	80057f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800514a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	609a      	str	r2, [r3, #8]
      break;
 8005154:	e04c      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6899      	ldr	r1, [r3, #8]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f000 fb43 	bl	80057f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005178:	609a      	str	r2, [r3, #8]
      break;
 800517a:	e039      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	6859      	ldr	r1, [r3, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	461a      	mov	r2, r3
 800518a:	f000 fab7 	bl	80056fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2150      	movs	r1, #80	; 0x50
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fb10 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 800519a:	e029      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	6859      	ldr	r1, [r3, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	461a      	mov	r2, r3
 80051aa:	f000 fad6 	bl	800575a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2160      	movs	r1, #96	; 0x60
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fb00 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 80051ba:	e019      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	6859      	ldr	r1, [r3, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	461a      	mov	r2, r3
 80051ca:	f000 fa97 	bl	80056fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2140      	movs	r1, #64	; 0x40
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 faf0 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 80051da:	e009      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f000 fae7 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 80051ec:	e000      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80051ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a40      	ldr	r2, [pc, #256]	; (8005370 <TIM_Base_SetConfig+0x114>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d013      	beq.n	800529c <TIM_Base_SetConfig+0x40>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527a:	d00f      	beq.n	800529c <TIM_Base_SetConfig+0x40>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a3d      	ldr	r2, [pc, #244]	; (8005374 <TIM_Base_SetConfig+0x118>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00b      	beq.n	800529c <TIM_Base_SetConfig+0x40>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a3c      	ldr	r2, [pc, #240]	; (8005378 <TIM_Base_SetConfig+0x11c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d007      	beq.n	800529c <TIM_Base_SetConfig+0x40>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a3b      	ldr	r2, [pc, #236]	; (800537c <TIM_Base_SetConfig+0x120>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_Base_SetConfig+0x40>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a3a      	ldr	r2, [pc, #232]	; (8005380 <TIM_Base_SetConfig+0x124>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d108      	bne.n	80052ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a2f      	ldr	r2, [pc, #188]	; (8005370 <TIM_Base_SetConfig+0x114>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d02b      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052bc:	d027      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a2c      	ldr	r2, [pc, #176]	; (8005374 <TIM_Base_SetConfig+0x118>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d023      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a2b      	ldr	r2, [pc, #172]	; (8005378 <TIM_Base_SetConfig+0x11c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01f      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a2a      	ldr	r2, [pc, #168]	; (800537c <TIM_Base_SetConfig+0x120>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d01b      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a29      	ldr	r2, [pc, #164]	; (8005380 <TIM_Base_SetConfig+0x124>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d017      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a28      	ldr	r2, [pc, #160]	; (8005384 <TIM_Base_SetConfig+0x128>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a27      	ldr	r2, [pc, #156]	; (8005388 <TIM_Base_SetConfig+0x12c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00f      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a26      	ldr	r2, [pc, #152]	; (800538c <TIM_Base_SetConfig+0x130>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00b      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a25      	ldr	r2, [pc, #148]	; (8005390 <TIM_Base_SetConfig+0x134>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a24      	ldr	r2, [pc, #144]	; (8005394 <TIM_Base_SetConfig+0x138>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a23      	ldr	r2, [pc, #140]	; (8005398 <TIM_Base_SetConfig+0x13c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d108      	bne.n	8005320 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a0a      	ldr	r2, [pc, #40]	; (8005370 <TIM_Base_SetConfig+0x114>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_Base_SetConfig+0xf8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a0c      	ldr	r2, [pc, #48]	; (8005380 <TIM_Base_SetConfig+0x124>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d103      	bne.n	800535c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	615a      	str	r2, [r3, #20]
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40010000 	.word	0x40010000
 8005374:	40000400 	.word	0x40000400
 8005378:	40000800 	.word	0x40000800
 800537c:	40000c00 	.word	0x40000c00
 8005380:	40010400 	.word	0x40010400
 8005384:	40014000 	.word	0x40014000
 8005388:	40014400 	.word	0x40014400
 800538c:	40014800 	.word	0x40014800
 8005390:	40001800 	.word	0x40001800
 8005394:	40001c00 	.word	0x40001c00
 8005398:	40002000 	.word	0x40002000

0800539c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f023 0201 	bic.w	r2, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0303 	bic.w	r3, r3, #3
 80053d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f023 0302 	bic.w	r3, r3, #2
 80053e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a20      	ldr	r2, [pc, #128]	; (8005474 <TIM_OC1_SetConfig+0xd8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_OC1_SetConfig+0x64>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1f      	ldr	r2, [pc, #124]	; (8005478 <TIM_OC1_SetConfig+0xdc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10c      	bne.n	800541a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0308 	bic.w	r3, r3, #8
 8005406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f023 0304 	bic.w	r3, r3, #4
 8005418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a15      	ldr	r2, [pc, #84]	; (8005474 <TIM_OC1_SetConfig+0xd8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_OC1_SetConfig+0x8e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a14      	ldr	r2, [pc, #80]	; (8005478 <TIM_OC1_SetConfig+0xdc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d111      	bne.n	800544e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	621a      	str	r2, [r3, #32]
}
 8005468:	bf00      	nop
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	40010000 	.word	0x40010000
 8005478:	40010400 	.word	0x40010400

0800547c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f023 0210 	bic.w	r2, r3, #16
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0320 	bic.w	r3, r3, #32
 80054c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a22      	ldr	r2, [pc, #136]	; (8005560 <TIM_OC2_SetConfig+0xe4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC2_SetConfig+0x68>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a21      	ldr	r2, [pc, #132]	; (8005564 <TIM_OC2_SetConfig+0xe8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10d      	bne.n	8005500 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a17      	ldr	r2, [pc, #92]	; (8005560 <TIM_OC2_SetConfig+0xe4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <TIM_OC2_SetConfig+0x94>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a16      	ldr	r2, [pc, #88]	; (8005564 <TIM_OC2_SetConfig+0xe8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d113      	bne.n	8005538 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800551e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40010400 	.word	0x40010400

08005568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0303 	bic.w	r3, r3, #3
 800559e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a21      	ldr	r2, [pc, #132]	; (8005648 <TIM_OC3_SetConfig+0xe0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_OC3_SetConfig+0x66>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a20      	ldr	r2, [pc, #128]	; (800564c <TIM_OC3_SetConfig+0xe4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10d      	bne.n	80055ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a16      	ldr	r2, [pc, #88]	; (8005648 <TIM_OC3_SetConfig+0xe0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d003      	beq.n	80055fa <TIM_OC3_SetConfig+0x92>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a15      	ldr	r2, [pc, #84]	; (800564c <TIM_OC3_SetConfig+0xe4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d113      	bne.n	8005622 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	40010000 	.word	0x40010000
 800564c:	40010400 	.word	0x40010400

08005650 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800569a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	031b      	lsls	r3, r3, #12
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a12      	ldr	r2, [pc, #72]	; (80056f4 <TIM_OC4_SetConfig+0xa4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_OC4_SetConfig+0x68>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a11      	ldr	r2, [pc, #68]	; (80056f8 <TIM_OC4_SetConfig+0xa8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d109      	bne.n	80056cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	019b      	lsls	r3, r3, #6
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40010000 	.word	0x40010000
 80056f8:	40010400 	.word	0x40010400

080056fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f023 0201 	bic.w	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f023 030a 	bic.w	r3, r3, #10
 8005738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	621a      	str	r2, [r3, #32]
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800575a:	b480      	push	{r7}
 800575c:	b087      	sub	sp, #28
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	f023 0210 	bic.w	r2, r3, #16
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005784:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	031b      	lsls	r3, r3, #12
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005796:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	621a      	str	r2, [r3, #32]
}
 80057ae:	bf00      	nop
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b085      	sub	sp, #20
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f043 0307 	orr.w	r3, r3, #7
 80057dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	609a      	str	r2, [r3, #8]
}
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800580a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	021a      	lsls	r2, r3, #8
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	431a      	orrs	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4313      	orrs	r3, r2
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	609a      	str	r2, [r3, #8]
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2201      	movs	r2, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1a      	ldr	r2, [r3, #32]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	43db      	mvns	r3, r3
 8005852:	401a      	ands	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	fa01 f303 	lsl.w	r3, r1, r3
 8005868:	431a      	orrs	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005890:	2302      	movs	r3, #2
 8005892:	e05a      	b.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a21      	ldr	r2, [pc, #132]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d022      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e0:	d01d      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1d      	ldr	r2, [pc, #116]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d018      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1b      	ldr	r2, [pc, #108]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1a      	ldr	r2, [pc, #104]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00e      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a18      	ldr	r2, [pc, #96]	; (8005968 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d009      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a17      	ldr	r2, [pc, #92]	; (800596c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d004      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a15      	ldr	r2, [pc, #84]	; (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d10c      	bne.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	4313      	orrs	r3, r2
 800592e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	40010000 	.word	0x40010000
 800595c:	40000400 	.word	0x40000400
 8005960:	40000800 	.word	0x40000800
 8005964:	40000c00 	.word	0x40000c00
 8005968:	40010400 	.word	0x40010400
 800596c:	40014000 	.word	0x40014000
 8005970:	40001800 	.word	0x40001800

08005974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <__errno>:
 800599c:	4b01      	ldr	r3, [pc, #4]	; (80059a4 <__errno+0x8>)
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	20000014 	.word	0x20000014

080059a8 <__libc_init_array>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	4e0d      	ldr	r6, [pc, #52]	; (80059e0 <__libc_init_array+0x38>)
 80059ac:	4c0d      	ldr	r4, [pc, #52]	; (80059e4 <__libc_init_array+0x3c>)
 80059ae:	1ba4      	subs	r4, r4, r6
 80059b0:	10a4      	asrs	r4, r4, #2
 80059b2:	2500      	movs	r5, #0
 80059b4:	42a5      	cmp	r5, r4
 80059b6:	d109      	bne.n	80059cc <__libc_init_array+0x24>
 80059b8:	4e0b      	ldr	r6, [pc, #44]	; (80059e8 <__libc_init_array+0x40>)
 80059ba:	4c0c      	ldr	r4, [pc, #48]	; (80059ec <__libc_init_array+0x44>)
 80059bc:	f001 fe2a 	bl	8007614 <_init>
 80059c0:	1ba4      	subs	r4, r4, r6
 80059c2:	10a4      	asrs	r4, r4, #2
 80059c4:	2500      	movs	r5, #0
 80059c6:	42a5      	cmp	r5, r4
 80059c8:	d105      	bne.n	80059d6 <__libc_init_array+0x2e>
 80059ca:	bd70      	pop	{r4, r5, r6, pc}
 80059cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059d0:	4798      	blx	r3
 80059d2:	3501      	adds	r5, #1
 80059d4:	e7ee      	b.n	80059b4 <__libc_init_array+0xc>
 80059d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059da:	4798      	blx	r3
 80059dc:	3501      	adds	r5, #1
 80059de:	e7f2      	b.n	80059c6 <__libc_init_array+0x1e>
 80059e0:	080078b8 	.word	0x080078b8
 80059e4:	080078b8 	.word	0x080078b8
 80059e8:	080078b8 	.word	0x080078b8
 80059ec:	080078bc 	.word	0x080078bc

080059f0 <memset>:
 80059f0:	4402      	add	r2, r0
 80059f2:	4603      	mov	r3, r0
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d100      	bne.n	80059fa <memset+0xa>
 80059f8:	4770      	bx	lr
 80059fa:	f803 1b01 	strb.w	r1, [r3], #1
 80059fe:	e7f9      	b.n	80059f4 <memset+0x4>

08005a00 <sulp>:
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	4604      	mov	r4, r0
 8005a04:	460d      	mov	r5, r1
 8005a06:	ec45 4b10 	vmov	d0, r4, r5
 8005a0a:	4616      	mov	r6, r2
 8005a0c:	f001 fc2c 	bl	8007268 <__ulp>
 8005a10:	ec51 0b10 	vmov	r0, r1, d0
 8005a14:	b17e      	cbz	r6, 8005a36 <sulp+0x36>
 8005a16:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005a1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	dd09      	ble.n	8005a36 <sulp+0x36>
 8005a22:	051b      	lsls	r3, r3, #20
 8005a24:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005a28:	2400      	movs	r4, #0
 8005a2a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005a2e:	4622      	mov	r2, r4
 8005a30:	462b      	mov	r3, r5
 8005a32:	f7fa fd8d 	bl	8000550 <__aeabi_dmul>
 8005a36:	bd70      	pop	{r4, r5, r6, pc}

08005a38 <_strtod_l>:
 8005a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3c:	461f      	mov	r7, r3
 8005a3e:	b0a1      	sub	sp, #132	; 0x84
 8005a40:	2300      	movs	r3, #0
 8005a42:	4681      	mov	r9, r0
 8005a44:	4638      	mov	r0, r7
 8005a46:	460e      	mov	r6, r1
 8005a48:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a4a:	931c      	str	r3, [sp, #112]	; 0x70
 8005a4c:	f001 f922 	bl	8006c94 <__localeconv_l>
 8005a50:	4680      	mov	r8, r0
 8005a52:	6800      	ldr	r0, [r0, #0]
 8005a54:	f7fa fbb8 	bl	80001c8 <strlen>
 8005a58:	f04f 0a00 	mov.w	sl, #0
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	f04f 0b00 	mov.w	fp, #0
 8005a62:	961b      	str	r6, [sp, #108]	; 0x6c
 8005a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a66:	781a      	ldrb	r2, [r3, #0]
 8005a68:	2a0d      	cmp	r2, #13
 8005a6a:	d832      	bhi.n	8005ad2 <_strtod_l+0x9a>
 8005a6c:	2a09      	cmp	r2, #9
 8005a6e:	d236      	bcs.n	8005ade <_strtod_l+0xa6>
 8005a70:	2a00      	cmp	r2, #0
 8005a72:	d03e      	beq.n	8005af2 <_strtod_l+0xba>
 8005a74:	2300      	movs	r3, #0
 8005a76:	930d      	str	r3, [sp, #52]	; 0x34
 8005a78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005a7a:	782b      	ldrb	r3, [r5, #0]
 8005a7c:	2b30      	cmp	r3, #48	; 0x30
 8005a7e:	f040 80ac 	bne.w	8005bda <_strtod_l+0x1a2>
 8005a82:	786b      	ldrb	r3, [r5, #1]
 8005a84:	2b58      	cmp	r3, #88	; 0x58
 8005a86:	d001      	beq.n	8005a8c <_strtod_l+0x54>
 8005a88:	2b78      	cmp	r3, #120	; 0x78
 8005a8a:	d167      	bne.n	8005b5c <_strtod_l+0x124>
 8005a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	ab1c      	add	r3, sp, #112	; 0x70
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	9702      	str	r7, [sp, #8]
 8005a96:	ab1d      	add	r3, sp, #116	; 0x74
 8005a98:	4a88      	ldr	r2, [pc, #544]	; (8005cbc <_strtod_l+0x284>)
 8005a9a:	a91b      	add	r1, sp, #108	; 0x6c
 8005a9c:	4648      	mov	r0, r9
 8005a9e:	f000 fe22 	bl	80066e6 <__gethex>
 8005aa2:	f010 0407 	ands.w	r4, r0, #7
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	d005      	beq.n	8005ab6 <_strtod_l+0x7e>
 8005aaa:	2c06      	cmp	r4, #6
 8005aac:	d12b      	bne.n	8005b06 <_strtod_l+0xce>
 8005aae:	3501      	adds	r5, #1
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	951b      	str	r5, [sp, #108]	; 0x6c
 8005ab4:	930d      	str	r3, [sp, #52]	; 0x34
 8005ab6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f040 859a 	bne.w	80065f2 <_strtod_l+0xbba>
 8005abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ac0:	b1e3      	cbz	r3, 8005afc <_strtod_l+0xc4>
 8005ac2:	4652      	mov	r2, sl
 8005ac4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005ac8:	ec43 2b10 	vmov	d0, r2, r3
 8005acc:	b021      	add	sp, #132	; 0x84
 8005ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad2:	2a2b      	cmp	r2, #43	; 0x2b
 8005ad4:	d015      	beq.n	8005b02 <_strtod_l+0xca>
 8005ad6:	2a2d      	cmp	r2, #45	; 0x2d
 8005ad8:	d004      	beq.n	8005ae4 <_strtod_l+0xac>
 8005ada:	2a20      	cmp	r2, #32
 8005adc:	d1ca      	bne.n	8005a74 <_strtod_l+0x3c>
 8005ade:	3301      	adds	r3, #1
 8005ae0:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ae2:	e7bf      	b.n	8005a64 <_strtod_l+0x2c>
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	920d      	str	r2, [sp, #52]	; 0x34
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	921b      	str	r2, [sp, #108]	; 0x6c
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1c2      	bne.n	8005a78 <_strtod_l+0x40>
 8005af2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005af4:	961b      	str	r6, [sp, #108]	; 0x6c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f040 8579 	bne.w	80065ee <_strtod_l+0xbb6>
 8005afc:	4652      	mov	r2, sl
 8005afe:	465b      	mov	r3, fp
 8005b00:	e7e2      	b.n	8005ac8 <_strtod_l+0x90>
 8005b02:	2200      	movs	r2, #0
 8005b04:	e7ef      	b.n	8005ae6 <_strtod_l+0xae>
 8005b06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005b08:	b13a      	cbz	r2, 8005b1a <_strtod_l+0xe2>
 8005b0a:	2135      	movs	r1, #53	; 0x35
 8005b0c:	a81e      	add	r0, sp, #120	; 0x78
 8005b0e:	f001 fca3 	bl	8007458 <__copybits>
 8005b12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b14:	4648      	mov	r0, r9
 8005b16:	f001 f910 	bl	8006d3a <_Bfree>
 8005b1a:	3c01      	subs	r4, #1
 8005b1c:	2c04      	cmp	r4, #4
 8005b1e:	d806      	bhi.n	8005b2e <_strtod_l+0xf6>
 8005b20:	e8df f004 	tbb	[pc, r4]
 8005b24:	1714030a 	.word	0x1714030a
 8005b28:	0a          	.byte	0x0a
 8005b29:	00          	.byte	0x00
 8005b2a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005b2e:	0730      	lsls	r0, r6, #28
 8005b30:	d5c1      	bpl.n	8005ab6 <_strtod_l+0x7e>
 8005b32:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005b36:	e7be      	b.n	8005ab6 <_strtod_l+0x7e>
 8005b38:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005b3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005b3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b42:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005b46:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005b4a:	e7f0      	b.n	8005b2e <_strtod_l+0xf6>
 8005b4c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005cc0 <_strtod_l+0x288>
 8005b50:	e7ed      	b.n	8005b2e <_strtod_l+0xf6>
 8005b52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005b56:	f04f 3aff 	mov.w	sl, #4294967295
 8005b5a:	e7e8      	b.n	8005b2e <_strtod_l+0xf6>
 8005b5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	921b      	str	r2, [sp, #108]	; 0x6c
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	2b30      	cmp	r3, #48	; 0x30
 8005b66:	d0f9      	beq.n	8005b5c <_strtod_l+0x124>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0a4      	beq.n	8005ab6 <_strtod_l+0x7e>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	2500      	movs	r5, #0
 8005b70:	9306      	str	r3, [sp, #24]
 8005b72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b74:	9308      	str	r3, [sp, #32]
 8005b76:	9507      	str	r5, [sp, #28]
 8005b78:	9505      	str	r5, [sp, #20]
 8005b7a:	220a      	movs	r2, #10
 8005b7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005b7e:	7807      	ldrb	r7, [r0, #0]
 8005b80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005b84:	b2d9      	uxtb	r1, r3
 8005b86:	2909      	cmp	r1, #9
 8005b88:	d929      	bls.n	8005bde <_strtod_l+0x1a6>
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	f8d8 1000 	ldr.w	r1, [r8]
 8005b90:	f001 fd16 	bl	80075c0 <strncmp>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	d031      	beq.n	8005bfc <_strtod_l+0x1c4>
 8005b98:	2000      	movs	r0, #0
 8005b9a:	9c05      	ldr	r4, [sp, #20]
 8005b9c:	9004      	str	r0, [sp, #16]
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	2b65      	cmp	r3, #101	; 0x65
 8005ba4:	d001      	beq.n	8005baa <_strtod_l+0x172>
 8005ba6:	2b45      	cmp	r3, #69	; 0x45
 8005ba8:	d114      	bne.n	8005bd4 <_strtod_l+0x19c>
 8005baa:	b924      	cbnz	r4, 8005bb6 <_strtod_l+0x17e>
 8005bac:	b910      	cbnz	r0, 8005bb4 <_strtod_l+0x17c>
 8005bae:	9b06      	ldr	r3, [sp, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d09e      	beq.n	8005af2 <_strtod_l+0xba>
 8005bb4:	2400      	movs	r4, #0
 8005bb6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005bb8:	1c73      	adds	r3, r6, #1
 8005bba:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bbc:	7873      	ldrb	r3, [r6, #1]
 8005bbe:	2b2b      	cmp	r3, #43	; 0x2b
 8005bc0:	d078      	beq.n	8005cb4 <_strtod_l+0x27c>
 8005bc2:	2b2d      	cmp	r3, #45	; 0x2d
 8005bc4:	d070      	beq.n	8005ca8 <_strtod_l+0x270>
 8005bc6:	f04f 0c00 	mov.w	ip, #0
 8005bca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005bce:	2f09      	cmp	r7, #9
 8005bd0:	d97c      	bls.n	8005ccc <_strtod_l+0x294>
 8005bd2:	961b      	str	r6, [sp, #108]	; 0x6c
 8005bd4:	f04f 0e00 	mov.w	lr, #0
 8005bd8:	e09a      	b.n	8005d10 <_strtod_l+0x2d8>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e7c7      	b.n	8005b6e <_strtod_l+0x136>
 8005bde:	9905      	ldr	r1, [sp, #20]
 8005be0:	2908      	cmp	r1, #8
 8005be2:	bfdd      	ittte	le
 8005be4:	9907      	ldrle	r1, [sp, #28]
 8005be6:	fb02 3301 	mlale	r3, r2, r1, r3
 8005bea:	9307      	strle	r3, [sp, #28]
 8005bec:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005bf0:	9b05      	ldr	r3, [sp, #20]
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	9305      	str	r3, [sp, #20]
 8005bf8:	901b      	str	r0, [sp, #108]	; 0x6c
 8005bfa:	e7bf      	b.n	8005b7c <_strtod_l+0x144>
 8005bfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bfe:	191a      	adds	r2, r3, r4
 8005c00:	921b      	str	r2, [sp, #108]	; 0x6c
 8005c02:	9a05      	ldr	r2, [sp, #20]
 8005c04:	5d1b      	ldrb	r3, [r3, r4]
 8005c06:	2a00      	cmp	r2, #0
 8005c08:	d037      	beq.n	8005c7a <_strtod_l+0x242>
 8005c0a:	9c05      	ldr	r4, [sp, #20]
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005c12:	2909      	cmp	r1, #9
 8005c14:	d913      	bls.n	8005c3e <_strtod_l+0x206>
 8005c16:	2101      	movs	r1, #1
 8005c18:	9104      	str	r1, [sp, #16]
 8005c1a:	e7c2      	b.n	8005ba2 <_strtod_l+0x16a>
 8005c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	921b      	str	r2, [sp, #108]	; 0x6c
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	3001      	adds	r0, #1
 8005c26:	2b30      	cmp	r3, #48	; 0x30
 8005c28:	d0f8      	beq.n	8005c1c <_strtod_l+0x1e4>
 8005c2a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005c2e:	2a08      	cmp	r2, #8
 8005c30:	f200 84e4 	bhi.w	80065fc <_strtod_l+0xbc4>
 8005c34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005c36:	9208      	str	r2, [sp, #32]
 8005c38:	4602      	mov	r2, r0
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005c42:	f100 0101 	add.w	r1, r0, #1
 8005c46:	d012      	beq.n	8005c6e <_strtod_l+0x236>
 8005c48:	440a      	add	r2, r1
 8005c4a:	eb00 0c04 	add.w	ip, r0, r4
 8005c4e:	4621      	mov	r1, r4
 8005c50:	270a      	movs	r7, #10
 8005c52:	458c      	cmp	ip, r1
 8005c54:	d113      	bne.n	8005c7e <_strtod_l+0x246>
 8005c56:	1821      	adds	r1, r4, r0
 8005c58:	2908      	cmp	r1, #8
 8005c5a:	f104 0401 	add.w	r4, r4, #1
 8005c5e:	4404      	add	r4, r0
 8005c60:	dc19      	bgt.n	8005c96 <_strtod_l+0x25e>
 8005c62:	9b07      	ldr	r3, [sp, #28]
 8005c64:	210a      	movs	r1, #10
 8005c66:	fb01 e303 	mla	r3, r1, r3, lr
 8005c6a:	9307      	str	r3, [sp, #28]
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c70:	1c58      	adds	r0, r3, #1
 8005c72:	901b      	str	r0, [sp, #108]	; 0x6c
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	4608      	mov	r0, r1
 8005c78:	e7c9      	b.n	8005c0e <_strtod_l+0x1d6>
 8005c7a:	9805      	ldr	r0, [sp, #20]
 8005c7c:	e7d3      	b.n	8005c26 <_strtod_l+0x1ee>
 8005c7e:	2908      	cmp	r1, #8
 8005c80:	f101 0101 	add.w	r1, r1, #1
 8005c84:	dc03      	bgt.n	8005c8e <_strtod_l+0x256>
 8005c86:	9b07      	ldr	r3, [sp, #28]
 8005c88:	437b      	muls	r3, r7
 8005c8a:	9307      	str	r3, [sp, #28]
 8005c8c:	e7e1      	b.n	8005c52 <_strtod_l+0x21a>
 8005c8e:	2910      	cmp	r1, #16
 8005c90:	bfd8      	it	le
 8005c92:	437d      	mulle	r5, r7
 8005c94:	e7dd      	b.n	8005c52 <_strtod_l+0x21a>
 8005c96:	2c10      	cmp	r4, #16
 8005c98:	bfdc      	itt	le
 8005c9a:	210a      	movle	r1, #10
 8005c9c:	fb01 e505 	mlale	r5, r1, r5, lr
 8005ca0:	e7e4      	b.n	8005c6c <_strtod_l+0x234>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	9304      	str	r3, [sp, #16]
 8005ca6:	e781      	b.n	8005bac <_strtod_l+0x174>
 8005ca8:	f04f 0c01 	mov.w	ip, #1
 8005cac:	1cb3      	adds	r3, r6, #2
 8005cae:	931b      	str	r3, [sp, #108]	; 0x6c
 8005cb0:	78b3      	ldrb	r3, [r6, #2]
 8005cb2:	e78a      	b.n	8005bca <_strtod_l+0x192>
 8005cb4:	f04f 0c00 	mov.w	ip, #0
 8005cb8:	e7f8      	b.n	8005cac <_strtod_l+0x274>
 8005cba:	bf00      	nop
 8005cbc:	0800764c 	.word	0x0800764c
 8005cc0:	7ff00000 	.word	0x7ff00000
 8005cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cc6:	1c5f      	adds	r7, r3, #1
 8005cc8:	971b      	str	r7, [sp, #108]	; 0x6c
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2b30      	cmp	r3, #48	; 0x30
 8005cce:	d0f9      	beq.n	8005cc4 <_strtod_l+0x28c>
 8005cd0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005cd4:	2f08      	cmp	r7, #8
 8005cd6:	f63f af7d 	bhi.w	8005bd4 <_strtod_l+0x19c>
 8005cda:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005cde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ce0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ce2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ce4:	1c5f      	adds	r7, r3, #1
 8005ce6:	971b      	str	r7, [sp, #108]	; 0x6c
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005cee:	f1b8 0f09 	cmp.w	r8, #9
 8005cf2:	d937      	bls.n	8005d64 <_strtod_l+0x32c>
 8005cf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005cf6:	1a7f      	subs	r7, r7, r1
 8005cf8:	2f08      	cmp	r7, #8
 8005cfa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005cfe:	dc37      	bgt.n	8005d70 <_strtod_l+0x338>
 8005d00:	45be      	cmp	lr, r7
 8005d02:	bfa8      	it	ge
 8005d04:	46be      	movge	lr, r7
 8005d06:	f1bc 0f00 	cmp.w	ip, #0
 8005d0a:	d001      	beq.n	8005d10 <_strtod_l+0x2d8>
 8005d0c:	f1ce 0e00 	rsb	lr, lr, #0
 8005d10:	2c00      	cmp	r4, #0
 8005d12:	d151      	bne.n	8005db8 <_strtod_l+0x380>
 8005d14:	2800      	cmp	r0, #0
 8005d16:	f47f aece 	bne.w	8005ab6 <_strtod_l+0x7e>
 8005d1a:	9a06      	ldr	r2, [sp, #24]
 8005d1c:	2a00      	cmp	r2, #0
 8005d1e:	f47f aeca 	bne.w	8005ab6 <_strtod_l+0x7e>
 8005d22:	9a04      	ldr	r2, [sp, #16]
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	f47f aee4 	bne.w	8005af2 <_strtod_l+0xba>
 8005d2a:	2b4e      	cmp	r3, #78	; 0x4e
 8005d2c:	d027      	beq.n	8005d7e <_strtod_l+0x346>
 8005d2e:	dc21      	bgt.n	8005d74 <_strtod_l+0x33c>
 8005d30:	2b49      	cmp	r3, #73	; 0x49
 8005d32:	f47f aede 	bne.w	8005af2 <_strtod_l+0xba>
 8005d36:	49a0      	ldr	r1, [pc, #640]	; (8005fb8 <_strtod_l+0x580>)
 8005d38:	a81b      	add	r0, sp, #108	; 0x6c
 8005d3a:	f000 ff07 	bl	8006b4c <__match>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	f43f aed7 	beq.w	8005af2 <_strtod_l+0xba>
 8005d44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d46:	499d      	ldr	r1, [pc, #628]	; (8005fbc <_strtod_l+0x584>)
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	a81b      	add	r0, sp, #108	; 0x6c
 8005d4c:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d4e:	f000 fefd 	bl	8006b4c <__match>
 8005d52:	b910      	cbnz	r0, 8005d5a <_strtod_l+0x322>
 8005d54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d56:	3301      	adds	r3, #1
 8005d58:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d5a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005fd0 <_strtod_l+0x598>
 8005d5e:	f04f 0a00 	mov.w	sl, #0
 8005d62:	e6a8      	b.n	8005ab6 <_strtod_l+0x7e>
 8005d64:	210a      	movs	r1, #10
 8005d66:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005d6a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005d6e:	e7b8      	b.n	8005ce2 <_strtod_l+0x2aa>
 8005d70:	46be      	mov	lr, r7
 8005d72:	e7c8      	b.n	8005d06 <_strtod_l+0x2ce>
 8005d74:	2b69      	cmp	r3, #105	; 0x69
 8005d76:	d0de      	beq.n	8005d36 <_strtod_l+0x2fe>
 8005d78:	2b6e      	cmp	r3, #110	; 0x6e
 8005d7a:	f47f aeba 	bne.w	8005af2 <_strtod_l+0xba>
 8005d7e:	4990      	ldr	r1, [pc, #576]	; (8005fc0 <_strtod_l+0x588>)
 8005d80:	a81b      	add	r0, sp, #108	; 0x6c
 8005d82:	f000 fee3 	bl	8006b4c <__match>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	f43f aeb3 	beq.w	8005af2 <_strtod_l+0xba>
 8005d8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b28      	cmp	r3, #40	; 0x28
 8005d92:	d10e      	bne.n	8005db2 <_strtod_l+0x37a>
 8005d94:	aa1e      	add	r2, sp, #120	; 0x78
 8005d96:	498b      	ldr	r1, [pc, #556]	; (8005fc4 <_strtod_l+0x58c>)
 8005d98:	a81b      	add	r0, sp, #108	; 0x6c
 8005d9a:	f000 feeb 	bl	8006b74 <__hexnan>
 8005d9e:	2805      	cmp	r0, #5
 8005da0:	d107      	bne.n	8005db2 <_strtod_l+0x37a>
 8005da2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005da4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005da8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005dac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005db0:	e681      	b.n	8005ab6 <_strtod_l+0x7e>
 8005db2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005fd8 <_strtod_l+0x5a0>
 8005db6:	e7d2      	b.n	8005d5e <_strtod_l+0x326>
 8005db8:	ebae 0302 	sub.w	r3, lr, r2
 8005dbc:	9306      	str	r3, [sp, #24]
 8005dbe:	9b05      	ldr	r3, [sp, #20]
 8005dc0:	9807      	ldr	r0, [sp, #28]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bf08      	it	eq
 8005dc6:	4623      	moveq	r3, r4
 8005dc8:	2c10      	cmp	r4, #16
 8005dca:	9305      	str	r3, [sp, #20]
 8005dcc:	46a0      	mov	r8, r4
 8005dce:	bfa8      	it	ge
 8005dd0:	f04f 0810 	movge.w	r8, #16
 8005dd4:	f7fa fb42 	bl	800045c <__aeabi_ui2d>
 8005dd8:	2c09      	cmp	r4, #9
 8005dda:	4682      	mov	sl, r0
 8005ddc:	468b      	mov	fp, r1
 8005dde:	dc13      	bgt.n	8005e08 <_strtod_l+0x3d0>
 8005de0:	9b06      	ldr	r3, [sp, #24]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f43f ae67 	beq.w	8005ab6 <_strtod_l+0x7e>
 8005de8:	9b06      	ldr	r3, [sp, #24]
 8005dea:	dd7a      	ble.n	8005ee2 <_strtod_l+0x4aa>
 8005dec:	2b16      	cmp	r3, #22
 8005dee:	dc61      	bgt.n	8005eb4 <_strtod_l+0x47c>
 8005df0:	4a75      	ldr	r2, [pc, #468]	; (8005fc8 <_strtod_l+0x590>)
 8005df2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005df6:	e9de 0100 	ldrd	r0, r1, [lr]
 8005dfa:	4652      	mov	r2, sl
 8005dfc:	465b      	mov	r3, fp
 8005dfe:	f7fa fba7 	bl	8000550 <__aeabi_dmul>
 8005e02:	4682      	mov	sl, r0
 8005e04:	468b      	mov	fp, r1
 8005e06:	e656      	b.n	8005ab6 <_strtod_l+0x7e>
 8005e08:	4b6f      	ldr	r3, [pc, #444]	; (8005fc8 <_strtod_l+0x590>)
 8005e0a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005e0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005e12:	f7fa fb9d 	bl	8000550 <__aeabi_dmul>
 8005e16:	4606      	mov	r6, r0
 8005e18:	4628      	mov	r0, r5
 8005e1a:	460f      	mov	r7, r1
 8005e1c:	f7fa fb1e 	bl	800045c <__aeabi_ui2d>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4630      	mov	r0, r6
 8005e26:	4639      	mov	r1, r7
 8005e28:	f7fa f9dc 	bl	80001e4 <__adddf3>
 8005e2c:	2c0f      	cmp	r4, #15
 8005e2e:	4682      	mov	sl, r0
 8005e30:	468b      	mov	fp, r1
 8005e32:	ddd5      	ble.n	8005de0 <_strtod_l+0x3a8>
 8005e34:	9b06      	ldr	r3, [sp, #24]
 8005e36:	eba4 0808 	sub.w	r8, r4, r8
 8005e3a:	4498      	add	r8, r3
 8005e3c:	f1b8 0f00 	cmp.w	r8, #0
 8005e40:	f340 8096 	ble.w	8005f70 <_strtod_l+0x538>
 8005e44:	f018 030f 	ands.w	r3, r8, #15
 8005e48:	d00a      	beq.n	8005e60 <_strtod_l+0x428>
 8005e4a:	495f      	ldr	r1, [pc, #380]	; (8005fc8 <_strtod_l+0x590>)
 8005e4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e50:	4652      	mov	r2, sl
 8005e52:	465b      	mov	r3, fp
 8005e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e58:	f7fa fb7a 	bl	8000550 <__aeabi_dmul>
 8005e5c:	4682      	mov	sl, r0
 8005e5e:	468b      	mov	fp, r1
 8005e60:	f038 080f 	bics.w	r8, r8, #15
 8005e64:	d073      	beq.n	8005f4e <_strtod_l+0x516>
 8005e66:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005e6a:	dd47      	ble.n	8005efc <_strtod_l+0x4c4>
 8005e6c:	2400      	movs	r4, #0
 8005e6e:	46a0      	mov	r8, r4
 8005e70:	9407      	str	r4, [sp, #28]
 8005e72:	9405      	str	r4, [sp, #20]
 8005e74:	2322      	movs	r3, #34	; 0x22
 8005e76:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005fd0 <_strtod_l+0x598>
 8005e7a:	f8c9 3000 	str.w	r3, [r9]
 8005e7e:	f04f 0a00 	mov.w	sl, #0
 8005e82:	9b07      	ldr	r3, [sp, #28]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f43f ae16 	beq.w	8005ab6 <_strtod_l+0x7e>
 8005e8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005e8c:	4648      	mov	r0, r9
 8005e8e:	f000 ff54 	bl	8006d3a <_Bfree>
 8005e92:	9905      	ldr	r1, [sp, #20]
 8005e94:	4648      	mov	r0, r9
 8005e96:	f000 ff50 	bl	8006d3a <_Bfree>
 8005e9a:	4641      	mov	r1, r8
 8005e9c:	4648      	mov	r0, r9
 8005e9e:	f000 ff4c 	bl	8006d3a <_Bfree>
 8005ea2:	9907      	ldr	r1, [sp, #28]
 8005ea4:	4648      	mov	r0, r9
 8005ea6:	f000 ff48 	bl	8006d3a <_Bfree>
 8005eaa:	4621      	mov	r1, r4
 8005eac:	4648      	mov	r0, r9
 8005eae:	f000 ff44 	bl	8006d3a <_Bfree>
 8005eb2:	e600      	b.n	8005ab6 <_strtod_l+0x7e>
 8005eb4:	9a06      	ldr	r2, [sp, #24]
 8005eb6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	dbba      	blt.n	8005e34 <_strtod_l+0x3fc>
 8005ebe:	4d42      	ldr	r5, [pc, #264]	; (8005fc8 <_strtod_l+0x590>)
 8005ec0:	f1c4 040f 	rsb	r4, r4, #15
 8005ec4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005ec8:	4652      	mov	r2, sl
 8005eca:	465b      	mov	r3, fp
 8005ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ed0:	f7fa fb3e 	bl	8000550 <__aeabi_dmul>
 8005ed4:	9b06      	ldr	r3, [sp, #24]
 8005ed6:	1b1c      	subs	r4, r3, r4
 8005ed8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005edc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ee0:	e78d      	b.n	8005dfe <_strtod_l+0x3c6>
 8005ee2:	f113 0f16 	cmn.w	r3, #22
 8005ee6:	dba5      	blt.n	8005e34 <_strtod_l+0x3fc>
 8005ee8:	4a37      	ldr	r2, [pc, #220]	; (8005fc8 <_strtod_l+0x590>)
 8005eea:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005eee:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005ef2:	4650      	mov	r0, sl
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	f7fa fc55 	bl	80007a4 <__aeabi_ddiv>
 8005efa:	e782      	b.n	8005e02 <_strtod_l+0x3ca>
 8005efc:	2300      	movs	r3, #0
 8005efe:	4e33      	ldr	r6, [pc, #204]	; (8005fcc <_strtod_l+0x594>)
 8005f00:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005f04:	4650      	mov	r0, sl
 8005f06:	4659      	mov	r1, fp
 8005f08:	461d      	mov	r5, r3
 8005f0a:	f1b8 0f01 	cmp.w	r8, #1
 8005f0e:	dc21      	bgt.n	8005f54 <_strtod_l+0x51c>
 8005f10:	b10b      	cbz	r3, 8005f16 <_strtod_l+0x4de>
 8005f12:	4682      	mov	sl, r0
 8005f14:	468b      	mov	fp, r1
 8005f16:	4b2d      	ldr	r3, [pc, #180]	; (8005fcc <_strtod_l+0x594>)
 8005f18:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005f1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005f20:	4652      	mov	r2, sl
 8005f22:	465b      	mov	r3, fp
 8005f24:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005f28:	f7fa fb12 	bl	8000550 <__aeabi_dmul>
 8005f2c:	4b28      	ldr	r3, [pc, #160]	; (8005fd0 <_strtod_l+0x598>)
 8005f2e:	460a      	mov	r2, r1
 8005f30:	400b      	ands	r3, r1
 8005f32:	4928      	ldr	r1, [pc, #160]	; (8005fd4 <_strtod_l+0x59c>)
 8005f34:	428b      	cmp	r3, r1
 8005f36:	4682      	mov	sl, r0
 8005f38:	d898      	bhi.n	8005e6c <_strtod_l+0x434>
 8005f3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005f3e:	428b      	cmp	r3, r1
 8005f40:	bf86      	itte	hi
 8005f42:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005fdc <_strtod_l+0x5a4>
 8005f46:	f04f 3aff 	movhi.w	sl, #4294967295
 8005f4a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005f4e:	2300      	movs	r3, #0
 8005f50:	9304      	str	r3, [sp, #16]
 8005f52:	e077      	b.n	8006044 <_strtod_l+0x60c>
 8005f54:	f018 0f01 	tst.w	r8, #1
 8005f58:	d006      	beq.n	8005f68 <_strtod_l+0x530>
 8005f5a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f62:	f7fa faf5 	bl	8000550 <__aeabi_dmul>
 8005f66:	2301      	movs	r3, #1
 8005f68:	3501      	adds	r5, #1
 8005f6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005f6e:	e7cc      	b.n	8005f0a <_strtod_l+0x4d2>
 8005f70:	d0ed      	beq.n	8005f4e <_strtod_l+0x516>
 8005f72:	f1c8 0800 	rsb	r8, r8, #0
 8005f76:	f018 020f 	ands.w	r2, r8, #15
 8005f7a:	d00a      	beq.n	8005f92 <_strtod_l+0x55a>
 8005f7c:	4b12      	ldr	r3, [pc, #72]	; (8005fc8 <_strtod_l+0x590>)
 8005f7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f82:	4650      	mov	r0, sl
 8005f84:	4659      	mov	r1, fp
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f7fa fc0b 	bl	80007a4 <__aeabi_ddiv>
 8005f8e:	4682      	mov	sl, r0
 8005f90:	468b      	mov	fp, r1
 8005f92:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005f96:	d0da      	beq.n	8005f4e <_strtod_l+0x516>
 8005f98:	f1b8 0f1f 	cmp.w	r8, #31
 8005f9c:	dd20      	ble.n	8005fe0 <_strtod_l+0x5a8>
 8005f9e:	2400      	movs	r4, #0
 8005fa0:	46a0      	mov	r8, r4
 8005fa2:	9407      	str	r4, [sp, #28]
 8005fa4:	9405      	str	r4, [sp, #20]
 8005fa6:	2322      	movs	r3, #34	; 0x22
 8005fa8:	f04f 0a00 	mov.w	sl, #0
 8005fac:	f04f 0b00 	mov.w	fp, #0
 8005fb0:	f8c9 3000 	str.w	r3, [r9]
 8005fb4:	e765      	b.n	8005e82 <_strtod_l+0x44a>
 8005fb6:	bf00      	nop
 8005fb8:	08007640 	.word	0x08007640
 8005fbc:	08007643 	.word	0x08007643
 8005fc0:	08007649 	.word	0x08007649
 8005fc4:	08007660 	.word	0x08007660
 8005fc8:	080076d8 	.word	0x080076d8
 8005fcc:	080076b0 	.word	0x080076b0
 8005fd0:	7ff00000 	.word	0x7ff00000
 8005fd4:	7ca00000 	.word	0x7ca00000
 8005fd8:	fff80000 	.word	0xfff80000
 8005fdc:	7fefffff 	.word	0x7fefffff
 8005fe0:	f018 0310 	ands.w	r3, r8, #16
 8005fe4:	bf18      	it	ne
 8005fe6:	236a      	movne	r3, #106	; 0x6a
 8005fe8:	4da0      	ldr	r5, [pc, #640]	; (800626c <_strtod_l+0x834>)
 8005fea:	9304      	str	r3, [sp, #16]
 8005fec:	4650      	mov	r0, sl
 8005fee:	4659      	mov	r1, fp
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f1b8 0f00 	cmp.w	r8, #0
 8005ff6:	f300 810a 	bgt.w	800620e <_strtod_l+0x7d6>
 8005ffa:	b10b      	cbz	r3, 8006000 <_strtod_l+0x5c8>
 8005ffc:	4682      	mov	sl, r0
 8005ffe:	468b      	mov	fp, r1
 8006000:	9b04      	ldr	r3, [sp, #16]
 8006002:	b1bb      	cbz	r3, 8006034 <_strtod_l+0x5fc>
 8006004:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006008:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800600c:	2b00      	cmp	r3, #0
 800600e:	4659      	mov	r1, fp
 8006010:	dd10      	ble.n	8006034 <_strtod_l+0x5fc>
 8006012:	2b1f      	cmp	r3, #31
 8006014:	f340 8107 	ble.w	8006226 <_strtod_l+0x7ee>
 8006018:	2b34      	cmp	r3, #52	; 0x34
 800601a:	bfde      	ittt	le
 800601c:	3b20      	suble	r3, #32
 800601e:	f04f 32ff 	movle.w	r2, #4294967295
 8006022:	fa02 f303 	lslle.w	r3, r2, r3
 8006026:	f04f 0a00 	mov.w	sl, #0
 800602a:	bfcc      	ite	gt
 800602c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006030:	ea03 0b01 	andle.w	fp, r3, r1
 8006034:	2200      	movs	r2, #0
 8006036:	2300      	movs	r3, #0
 8006038:	4650      	mov	r0, sl
 800603a:	4659      	mov	r1, fp
 800603c:	f7fa fcf0 	bl	8000a20 <__aeabi_dcmpeq>
 8006040:	2800      	cmp	r0, #0
 8006042:	d1ac      	bne.n	8005f9e <_strtod_l+0x566>
 8006044:	9b07      	ldr	r3, [sp, #28]
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	9a05      	ldr	r2, [sp, #20]
 800604a:	9908      	ldr	r1, [sp, #32]
 800604c:	4623      	mov	r3, r4
 800604e:	4648      	mov	r0, r9
 8006050:	f000 fec5 	bl	8006dde <__s2b>
 8006054:	9007      	str	r0, [sp, #28]
 8006056:	2800      	cmp	r0, #0
 8006058:	f43f af08 	beq.w	8005e6c <_strtod_l+0x434>
 800605c:	9a06      	ldr	r2, [sp, #24]
 800605e:	9b06      	ldr	r3, [sp, #24]
 8006060:	2a00      	cmp	r2, #0
 8006062:	f1c3 0300 	rsb	r3, r3, #0
 8006066:	bfa8      	it	ge
 8006068:	2300      	movge	r3, #0
 800606a:	930e      	str	r3, [sp, #56]	; 0x38
 800606c:	2400      	movs	r4, #0
 800606e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006072:	9316      	str	r3, [sp, #88]	; 0x58
 8006074:	46a0      	mov	r8, r4
 8006076:	9b07      	ldr	r3, [sp, #28]
 8006078:	4648      	mov	r0, r9
 800607a:	6859      	ldr	r1, [r3, #4]
 800607c:	f000 fe29 	bl	8006cd2 <_Balloc>
 8006080:	9005      	str	r0, [sp, #20]
 8006082:	2800      	cmp	r0, #0
 8006084:	f43f aef6 	beq.w	8005e74 <_strtod_l+0x43c>
 8006088:	9b07      	ldr	r3, [sp, #28]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	3202      	adds	r2, #2
 800608e:	f103 010c 	add.w	r1, r3, #12
 8006092:	0092      	lsls	r2, r2, #2
 8006094:	300c      	adds	r0, #12
 8006096:	f000 fe11 	bl	8006cbc <memcpy>
 800609a:	aa1e      	add	r2, sp, #120	; 0x78
 800609c:	a91d      	add	r1, sp, #116	; 0x74
 800609e:	ec4b ab10 	vmov	d0, sl, fp
 80060a2:	4648      	mov	r0, r9
 80060a4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80060a8:	f001 f954 	bl	8007354 <__d2b>
 80060ac:	901c      	str	r0, [sp, #112]	; 0x70
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f43f aee0 	beq.w	8005e74 <_strtod_l+0x43c>
 80060b4:	2101      	movs	r1, #1
 80060b6:	4648      	mov	r0, r9
 80060b8:	f000 ff1d 	bl	8006ef6 <__i2b>
 80060bc:	4680      	mov	r8, r0
 80060be:	2800      	cmp	r0, #0
 80060c0:	f43f aed8 	beq.w	8005e74 <_strtod_l+0x43c>
 80060c4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80060c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80060c8:	2e00      	cmp	r6, #0
 80060ca:	bfab      	itete	ge
 80060cc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80060ce:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80060d0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80060d2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80060d4:	bfac      	ite	ge
 80060d6:	18f7      	addge	r7, r6, r3
 80060d8:	1b9d      	sublt	r5, r3, r6
 80060da:	9b04      	ldr	r3, [sp, #16]
 80060dc:	1af6      	subs	r6, r6, r3
 80060de:	4416      	add	r6, r2
 80060e0:	4b63      	ldr	r3, [pc, #396]	; (8006270 <_strtod_l+0x838>)
 80060e2:	3e01      	subs	r6, #1
 80060e4:	429e      	cmp	r6, r3
 80060e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80060ea:	f280 80af 	bge.w	800624c <_strtod_l+0x814>
 80060ee:	1b9b      	subs	r3, r3, r6
 80060f0:	2b1f      	cmp	r3, #31
 80060f2:	eba2 0203 	sub.w	r2, r2, r3
 80060f6:	f04f 0101 	mov.w	r1, #1
 80060fa:	f300 809b 	bgt.w	8006234 <_strtod_l+0x7fc>
 80060fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006102:	930f      	str	r3, [sp, #60]	; 0x3c
 8006104:	2300      	movs	r3, #0
 8006106:	930a      	str	r3, [sp, #40]	; 0x28
 8006108:	18be      	adds	r6, r7, r2
 800610a:	9b04      	ldr	r3, [sp, #16]
 800610c:	42b7      	cmp	r7, r6
 800610e:	4415      	add	r5, r2
 8006110:	441d      	add	r5, r3
 8006112:	463b      	mov	r3, r7
 8006114:	bfa8      	it	ge
 8006116:	4633      	movge	r3, r6
 8006118:	42ab      	cmp	r3, r5
 800611a:	bfa8      	it	ge
 800611c:	462b      	movge	r3, r5
 800611e:	2b00      	cmp	r3, #0
 8006120:	bfc2      	ittt	gt
 8006122:	1af6      	subgt	r6, r6, r3
 8006124:	1aed      	subgt	r5, r5, r3
 8006126:	1aff      	subgt	r7, r7, r3
 8006128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800612a:	b1bb      	cbz	r3, 800615c <_strtod_l+0x724>
 800612c:	4641      	mov	r1, r8
 800612e:	461a      	mov	r2, r3
 8006130:	4648      	mov	r0, r9
 8006132:	f000 ff7f 	bl	8007034 <__pow5mult>
 8006136:	4680      	mov	r8, r0
 8006138:	2800      	cmp	r0, #0
 800613a:	f43f ae9b 	beq.w	8005e74 <_strtod_l+0x43c>
 800613e:	4601      	mov	r1, r0
 8006140:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006142:	4648      	mov	r0, r9
 8006144:	f000 fee0 	bl	8006f08 <__multiply>
 8006148:	900c      	str	r0, [sp, #48]	; 0x30
 800614a:	2800      	cmp	r0, #0
 800614c:	f43f ae92 	beq.w	8005e74 <_strtod_l+0x43c>
 8006150:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006152:	4648      	mov	r0, r9
 8006154:	f000 fdf1 	bl	8006d3a <_Bfree>
 8006158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800615a:	931c      	str	r3, [sp, #112]	; 0x70
 800615c:	2e00      	cmp	r6, #0
 800615e:	dc7a      	bgt.n	8006256 <_strtod_l+0x81e>
 8006160:	9b06      	ldr	r3, [sp, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	dd08      	ble.n	8006178 <_strtod_l+0x740>
 8006166:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006168:	9905      	ldr	r1, [sp, #20]
 800616a:	4648      	mov	r0, r9
 800616c:	f000 ff62 	bl	8007034 <__pow5mult>
 8006170:	9005      	str	r0, [sp, #20]
 8006172:	2800      	cmp	r0, #0
 8006174:	f43f ae7e 	beq.w	8005e74 <_strtod_l+0x43c>
 8006178:	2d00      	cmp	r5, #0
 800617a:	dd08      	ble.n	800618e <_strtod_l+0x756>
 800617c:	462a      	mov	r2, r5
 800617e:	9905      	ldr	r1, [sp, #20]
 8006180:	4648      	mov	r0, r9
 8006182:	f000 ffa5 	bl	80070d0 <__lshift>
 8006186:	9005      	str	r0, [sp, #20]
 8006188:	2800      	cmp	r0, #0
 800618a:	f43f ae73 	beq.w	8005e74 <_strtod_l+0x43c>
 800618e:	2f00      	cmp	r7, #0
 8006190:	dd08      	ble.n	80061a4 <_strtod_l+0x76c>
 8006192:	4641      	mov	r1, r8
 8006194:	463a      	mov	r2, r7
 8006196:	4648      	mov	r0, r9
 8006198:	f000 ff9a 	bl	80070d0 <__lshift>
 800619c:	4680      	mov	r8, r0
 800619e:	2800      	cmp	r0, #0
 80061a0:	f43f ae68 	beq.w	8005e74 <_strtod_l+0x43c>
 80061a4:	9a05      	ldr	r2, [sp, #20]
 80061a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80061a8:	4648      	mov	r0, r9
 80061aa:	f000 ffff 	bl	80071ac <__mdiff>
 80061ae:	4604      	mov	r4, r0
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f43f ae5f 	beq.w	8005e74 <_strtod_l+0x43c>
 80061b6:	68c3      	ldr	r3, [r0, #12]
 80061b8:	930c      	str	r3, [sp, #48]	; 0x30
 80061ba:	2300      	movs	r3, #0
 80061bc:	60c3      	str	r3, [r0, #12]
 80061be:	4641      	mov	r1, r8
 80061c0:	f000 ffda 	bl	8007178 <__mcmp>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	da55      	bge.n	8006274 <_strtod_l+0x83c>
 80061c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061ca:	b9e3      	cbnz	r3, 8006206 <_strtod_l+0x7ce>
 80061cc:	f1ba 0f00 	cmp.w	sl, #0
 80061d0:	d119      	bne.n	8006206 <_strtod_l+0x7ce>
 80061d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061d6:	b9b3      	cbnz	r3, 8006206 <_strtod_l+0x7ce>
 80061d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061dc:	0d1b      	lsrs	r3, r3, #20
 80061de:	051b      	lsls	r3, r3, #20
 80061e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80061e4:	d90f      	bls.n	8006206 <_strtod_l+0x7ce>
 80061e6:	6963      	ldr	r3, [r4, #20]
 80061e8:	b913      	cbnz	r3, 80061f0 <_strtod_l+0x7b8>
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	dd0a      	ble.n	8006206 <_strtod_l+0x7ce>
 80061f0:	4621      	mov	r1, r4
 80061f2:	2201      	movs	r2, #1
 80061f4:	4648      	mov	r0, r9
 80061f6:	f000 ff6b 	bl	80070d0 <__lshift>
 80061fa:	4641      	mov	r1, r8
 80061fc:	4604      	mov	r4, r0
 80061fe:	f000 ffbb 	bl	8007178 <__mcmp>
 8006202:	2800      	cmp	r0, #0
 8006204:	dc67      	bgt.n	80062d6 <_strtod_l+0x89e>
 8006206:	9b04      	ldr	r3, [sp, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d171      	bne.n	80062f0 <_strtod_l+0x8b8>
 800620c:	e63d      	b.n	8005e8a <_strtod_l+0x452>
 800620e:	f018 0f01 	tst.w	r8, #1
 8006212:	d004      	beq.n	800621e <_strtod_l+0x7e6>
 8006214:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006218:	f7fa f99a 	bl	8000550 <__aeabi_dmul>
 800621c:	2301      	movs	r3, #1
 800621e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006222:	3508      	adds	r5, #8
 8006224:	e6e5      	b.n	8005ff2 <_strtod_l+0x5ba>
 8006226:	f04f 32ff 	mov.w	r2, #4294967295
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	ea03 0a0a 	and.w	sl, r3, sl
 8006232:	e6ff      	b.n	8006034 <_strtod_l+0x5fc>
 8006234:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006238:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800623c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006240:	36e2      	adds	r6, #226	; 0xe2
 8006242:	fa01 f306 	lsl.w	r3, r1, r6
 8006246:	930a      	str	r3, [sp, #40]	; 0x28
 8006248:	910f      	str	r1, [sp, #60]	; 0x3c
 800624a:	e75d      	b.n	8006108 <_strtod_l+0x6d0>
 800624c:	2300      	movs	r3, #0
 800624e:	930a      	str	r3, [sp, #40]	; 0x28
 8006250:	2301      	movs	r3, #1
 8006252:	930f      	str	r3, [sp, #60]	; 0x3c
 8006254:	e758      	b.n	8006108 <_strtod_l+0x6d0>
 8006256:	4632      	mov	r2, r6
 8006258:	991c      	ldr	r1, [sp, #112]	; 0x70
 800625a:	4648      	mov	r0, r9
 800625c:	f000 ff38 	bl	80070d0 <__lshift>
 8006260:	901c      	str	r0, [sp, #112]	; 0x70
 8006262:	2800      	cmp	r0, #0
 8006264:	f47f af7c 	bne.w	8006160 <_strtod_l+0x728>
 8006268:	e604      	b.n	8005e74 <_strtod_l+0x43c>
 800626a:	bf00      	nop
 800626c:	08007678 	.word	0x08007678
 8006270:	fffffc02 	.word	0xfffffc02
 8006274:	465d      	mov	r5, fp
 8006276:	f040 8086 	bne.w	8006386 <_strtod_l+0x94e>
 800627a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800627c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006280:	b32a      	cbz	r2, 80062ce <_strtod_l+0x896>
 8006282:	4aaf      	ldr	r2, [pc, #700]	; (8006540 <_strtod_l+0xb08>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d153      	bne.n	8006330 <_strtod_l+0x8f8>
 8006288:	9b04      	ldr	r3, [sp, #16]
 800628a:	4650      	mov	r0, sl
 800628c:	b1d3      	cbz	r3, 80062c4 <_strtod_l+0x88c>
 800628e:	4aad      	ldr	r2, [pc, #692]	; (8006544 <_strtod_l+0xb0c>)
 8006290:	402a      	ands	r2, r5
 8006292:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006296:	f04f 31ff 	mov.w	r1, #4294967295
 800629a:	d816      	bhi.n	80062ca <_strtod_l+0x892>
 800629c:	0d12      	lsrs	r2, r2, #20
 800629e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80062a2:	fa01 f303 	lsl.w	r3, r1, r3
 80062a6:	4298      	cmp	r0, r3
 80062a8:	d142      	bne.n	8006330 <_strtod_l+0x8f8>
 80062aa:	4ba7      	ldr	r3, [pc, #668]	; (8006548 <_strtod_l+0xb10>)
 80062ac:	429d      	cmp	r5, r3
 80062ae:	d102      	bne.n	80062b6 <_strtod_l+0x87e>
 80062b0:	3001      	adds	r0, #1
 80062b2:	f43f addf 	beq.w	8005e74 <_strtod_l+0x43c>
 80062b6:	4ba3      	ldr	r3, [pc, #652]	; (8006544 <_strtod_l+0xb0c>)
 80062b8:	402b      	ands	r3, r5
 80062ba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80062be:	f04f 0a00 	mov.w	sl, #0
 80062c2:	e7a0      	b.n	8006206 <_strtod_l+0x7ce>
 80062c4:	f04f 33ff 	mov.w	r3, #4294967295
 80062c8:	e7ed      	b.n	80062a6 <_strtod_l+0x86e>
 80062ca:	460b      	mov	r3, r1
 80062cc:	e7eb      	b.n	80062a6 <_strtod_l+0x86e>
 80062ce:	bb7b      	cbnz	r3, 8006330 <_strtod_l+0x8f8>
 80062d0:	f1ba 0f00 	cmp.w	sl, #0
 80062d4:	d12c      	bne.n	8006330 <_strtod_l+0x8f8>
 80062d6:	9904      	ldr	r1, [sp, #16]
 80062d8:	4a9a      	ldr	r2, [pc, #616]	; (8006544 <_strtod_l+0xb0c>)
 80062da:	465b      	mov	r3, fp
 80062dc:	b1f1      	cbz	r1, 800631c <_strtod_l+0x8e4>
 80062de:	ea02 010b 	and.w	r1, r2, fp
 80062e2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80062e6:	dc19      	bgt.n	800631c <_strtod_l+0x8e4>
 80062e8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80062ec:	f77f ae5b 	ble.w	8005fa6 <_strtod_l+0x56e>
 80062f0:	4a96      	ldr	r2, [pc, #600]	; (800654c <_strtod_l+0xb14>)
 80062f2:	2300      	movs	r3, #0
 80062f4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80062f8:	4650      	mov	r0, sl
 80062fa:	4659      	mov	r1, fp
 80062fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006300:	f7fa f926 	bl	8000550 <__aeabi_dmul>
 8006304:	4682      	mov	sl, r0
 8006306:	468b      	mov	fp, r1
 8006308:	2900      	cmp	r1, #0
 800630a:	f47f adbe 	bne.w	8005e8a <_strtod_l+0x452>
 800630e:	2800      	cmp	r0, #0
 8006310:	f47f adbb 	bne.w	8005e8a <_strtod_l+0x452>
 8006314:	2322      	movs	r3, #34	; 0x22
 8006316:	f8c9 3000 	str.w	r3, [r9]
 800631a:	e5b6      	b.n	8005e8a <_strtod_l+0x452>
 800631c:	4013      	ands	r3, r2
 800631e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006322:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006326:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800632a:	f04f 3aff 	mov.w	sl, #4294967295
 800632e:	e76a      	b.n	8006206 <_strtod_l+0x7ce>
 8006330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006332:	b193      	cbz	r3, 800635a <_strtod_l+0x922>
 8006334:	422b      	tst	r3, r5
 8006336:	f43f af66 	beq.w	8006206 <_strtod_l+0x7ce>
 800633a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800633c:	9a04      	ldr	r2, [sp, #16]
 800633e:	4650      	mov	r0, sl
 8006340:	4659      	mov	r1, fp
 8006342:	b173      	cbz	r3, 8006362 <_strtod_l+0x92a>
 8006344:	f7ff fb5c 	bl	8005a00 <sulp>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006350:	f7f9 ff48 	bl	80001e4 <__adddf3>
 8006354:	4682      	mov	sl, r0
 8006356:	468b      	mov	fp, r1
 8006358:	e755      	b.n	8006206 <_strtod_l+0x7ce>
 800635a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800635c:	ea13 0f0a 	tst.w	r3, sl
 8006360:	e7e9      	b.n	8006336 <_strtod_l+0x8fe>
 8006362:	f7ff fb4d 	bl	8005a00 <sulp>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800636e:	f7f9 ff37 	bl	80001e0 <__aeabi_dsub>
 8006372:	2200      	movs	r2, #0
 8006374:	2300      	movs	r3, #0
 8006376:	4682      	mov	sl, r0
 8006378:	468b      	mov	fp, r1
 800637a:	f7fa fb51 	bl	8000a20 <__aeabi_dcmpeq>
 800637e:	2800      	cmp	r0, #0
 8006380:	f47f ae11 	bne.w	8005fa6 <_strtod_l+0x56e>
 8006384:	e73f      	b.n	8006206 <_strtod_l+0x7ce>
 8006386:	4641      	mov	r1, r8
 8006388:	4620      	mov	r0, r4
 800638a:	f001 f832 	bl	80073f2 <__ratio>
 800638e:	ec57 6b10 	vmov	r6, r7, d0
 8006392:	2200      	movs	r2, #0
 8006394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006398:	ee10 0a10 	vmov	r0, s0
 800639c:	4639      	mov	r1, r7
 800639e:	f7fa fb53 	bl	8000a48 <__aeabi_dcmple>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d077      	beq.n	8006496 <_strtod_l+0xa5e>
 80063a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d04a      	beq.n	8006442 <_strtod_l+0xa0a>
 80063ac:	4b68      	ldr	r3, [pc, #416]	; (8006550 <_strtod_l+0xb18>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80063b4:	4f66      	ldr	r7, [pc, #408]	; (8006550 <_strtod_l+0xb18>)
 80063b6:	2600      	movs	r6, #0
 80063b8:	4b62      	ldr	r3, [pc, #392]	; (8006544 <_strtod_l+0xb0c>)
 80063ba:	402b      	ands	r3, r5
 80063bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80063be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063c0:	4b64      	ldr	r3, [pc, #400]	; (8006554 <_strtod_l+0xb1c>)
 80063c2:	429a      	cmp	r2, r3
 80063c4:	f040 80ce 	bne.w	8006564 <_strtod_l+0xb2c>
 80063c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80063cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063d0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80063d4:	ec4b ab10 	vmov	d0, sl, fp
 80063d8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80063dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80063e0:	f000 ff42 	bl	8007268 <__ulp>
 80063e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063e8:	ec53 2b10 	vmov	r2, r3, d0
 80063ec:	f7fa f8b0 	bl	8000550 <__aeabi_dmul>
 80063f0:	4652      	mov	r2, sl
 80063f2:	465b      	mov	r3, fp
 80063f4:	f7f9 fef6 	bl	80001e4 <__adddf3>
 80063f8:	460b      	mov	r3, r1
 80063fa:	4952      	ldr	r1, [pc, #328]	; (8006544 <_strtod_l+0xb0c>)
 80063fc:	4a56      	ldr	r2, [pc, #344]	; (8006558 <_strtod_l+0xb20>)
 80063fe:	4019      	ands	r1, r3
 8006400:	4291      	cmp	r1, r2
 8006402:	4682      	mov	sl, r0
 8006404:	d95b      	bls.n	80064be <_strtod_l+0xa86>
 8006406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006408:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800640c:	4293      	cmp	r3, r2
 800640e:	d103      	bne.n	8006418 <_strtod_l+0x9e0>
 8006410:	9b08      	ldr	r3, [sp, #32]
 8006412:	3301      	adds	r3, #1
 8006414:	f43f ad2e 	beq.w	8005e74 <_strtod_l+0x43c>
 8006418:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006548 <_strtod_l+0xb10>
 800641c:	f04f 3aff 	mov.w	sl, #4294967295
 8006420:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006422:	4648      	mov	r0, r9
 8006424:	f000 fc89 	bl	8006d3a <_Bfree>
 8006428:	9905      	ldr	r1, [sp, #20]
 800642a:	4648      	mov	r0, r9
 800642c:	f000 fc85 	bl	8006d3a <_Bfree>
 8006430:	4641      	mov	r1, r8
 8006432:	4648      	mov	r0, r9
 8006434:	f000 fc81 	bl	8006d3a <_Bfree>
 8006438:	4621      	mov	r1, r4
 800643a:	4648      	mov	r0, r9
 800643c:	f000 fc7d 	bl	8006d3a <_Bfree>
 8006440:	e619      	b.n	8006076 <_strtod_l+0x63e>
 8006442:	f1ba 0f00 	cmp.w	sl, #0
 8006446:	d11a      	bne.n	800647e <_strtod_l+0xa46>
 8006448:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800644c:	b9eb      	cbnz	r3, 800648a <_strtod_l+0xa52>
 800644e:	2200      	movs	r2, #0
 8006450:	4b3f      	ldr	r3, [pc, #252]	; (8006550 <_strtod_l+0xb18>)
 8006452:	4630      	mov	r0, r6
 8006454:	4639      	mov	r1, r7
 8006456:	f7fa faed 	bl	8000a34 <__aeabi_dcmplt>
 800645a:	b9c8      	cbnz	r0, 8006490 <_strtod_l+0xa58>
 800645c:	4630      	mov	r0, r6
 800645e:	4639      	mov	r1, r7
 8006460:	2200      	movs	r2, #0
 8006462:	4b3e      	ldr	r3, [pc, #248]	; (800655c <_strtod_l+0xb24>)
 8006464:	f7fa f874 	bl	8000550 <__aeabi_dmul>
 8006468:	4606      	mov	r6, r0
 800646a:	460f      	mov	r7, r1
 800646c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006470:	9618      	str	r6, [sp, #96]	; 0x60
 8006472:	9319      	str	r3, [sp, #100]	; 0x64
 8006474:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006478:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800647c:	e79c      	b.n	80063b8 <_strtod_l+0x980>
 800647e:	f1ba 0f01 	cmp.w	sl, #1
 8006482:	d102      	bne.n	800648a <_strtod_l+0xa52>
 8006484:	2d00      	cmp	r5, #0
 8006486:	f43f ad8e 	beq.w	8005fa6 <_strtod_l+0x56e>
 800648a:	2200      	movs	r2, #0
 800648c:	4b34      	ldr	r3, [pc, #208]	; (8006560 <_strtod_l+0xb28>)
 800648e:	e78f      	b.n	80063b0 <_strtod_l+0x978>
 8006490:	2600      	movs	r6, #0
 8006492:	4f32      	ldr	r7, [pc, #200]	; (800655c <_strtod_l+0xb24>)
 8006494:	e7ea      	b.n	800646c <_strtod_l+0xa34>
 8006496:	4b31      	ldr	r3, [pc, #196]	; (800655c <_strtod_l+0xb24>)
 8006498:	4630      	mov	r0, r6
 800649a:	4639      	mov	r1, r7
 800649c:	2200      	movs	r2, #0
 800649e:	f7fa f857 	bl	8000550 <__aeabi_dmul>
 80064a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064a4:	4606      	mov	r6, r0
 80064a6:	460f      	mov	r7, r1
 80064a8:	b933      	cbnz	r3, 80064b8 <_strtod_l+0xa80>
 80064aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064ae:	9010      	str	r0, [sp, #64]	; 0x40
 80064b0:	9311      	str	r3, [sp, #68]	; 0x44
 80064b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064b6:	e7df      	b.n	8006478 <_strtod_l+0xa40>
 80064b8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80064bc:	e7f9      	b.n	80064b2 <_strtod_l+0xa7a>
 80064be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80064c2:	9b04      	ldr	r3, [sp, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1ab      	bne.n	8006420 <_strtod_l+0x9e8>
 80064c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80064cc:	0d1b      	lsrs	r3, r3, #20
 80064ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064d0:	051b      	lsls	r3, r3, #20
 80064d2:	429a      	cmp	r2, r3
 80064d4:	465d      	mov	r5, fp
 80064d6:	d1a3      	bne.n	8006420 <_strtod_l+0x9e8>
 80064d8:	4639      	mov	r1, r7
 80064da:	4630      	mov	r0, r6
 80064dc:	f7fa fad2 	bl	8000a84 <__aeabi_d2iz>
 80064e0:	f7f9 ffcc 	bl	800047c <__aeabi_i2d>
 80064e4:	460b      	mov	r3, r1
 80064e6:	4602      	mov	r2, r0
 80064e8:	4639      	mov	r1, r7
 80064ea:	4630      	mov	r0, r6
 80064ec:	f7f9 fe78 	bl	80001e0 <__aeabi_dsub>
 80064f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064f2:	4606      	mov	r6, r0
 80064f4:	460f      	mov	r7, r1
 80064f6:	b933      	cbnz	r3, 8006506 <_strtod_l+0xace>
 80064f8:	f1ba 0f00 	cmp.w	sl, #0
 80064fc:	d103      	bne.n	8006506 <_strtod_l+0xace>
 80064fe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8006502:	2d00      	cmp	r5, #0
 8006504:	d06d      	beq.n	80065e2 <_strtod_l+0xbaa>
 8006506:	a30a      	add	r3, pc, #40	; (adr r3, 8006530 <_strtod_l+0xaf8>)
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	4630      	mov	r0, r6
 800650e:	4639      	mov	r1, r7
 8006510:	f7fa fa90 	bl	8000a34 <__aeabi_dcmplt>
 8006514:	2800      	cmp	r0, #0
 8006516:	f47f acb8 	bne.w	8005e8a <_strtod_l+0x452>
 800651a:	a307      	add	r3, pc, #28	; (adr r3, 8006538 <_strtod_l+0xb00>)
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7fa faa4 	bl	8000a70 <__aeabi_dcmpgt>
 8006528:	2800      	cmp	r0, #0
 800652a:	f43f af79 	beq.w	8006420 <_strtod_l+0x9e8>
 800652e:	e4ac      	b.n	8005e8a <_strtod_l+0x452>
 8006530:	94a03595 	.word	0x94a03595
 8006534:	3fdfffff 	.word	0x3fdfffff
 8006538:	35afe535 	.word	0x35afe535
 800653c:	3fe00000 	.word	0x3fe00000
 8006540:	000fffff 	.word	0x000fffff
 8006544:	7ff00000 	.word	0x7ff00000
 8006548:	7fefffff 	.word	0x7fefffff
 800654c:	39500000 	.word	0x39500000
 8006550:	3ff00000 	.word	0x3ff00000
 8006554:	7fe00000 	.word	0x7fe00000
 8006558:	7c9fffff 	.word	0x7c9fffff
 800655c:	3fe00000 	.word	0x3fe00000
 8006560:	bff00000 	.word	0xbff00000
 8006564:	9b04      	ldr	r3, [sp, #16]
 8006566:	b333      	cbz	r3, 80065b6 <_strtod_l+0xb7e>
 8006568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800656a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800656e:	d822      	bhi.n	80065b6 <_strtod_l+0xb7e>
 8006570:	a327      	add	r3, pc, #156	; (adr r3, 8006610 <_strtod_l+0xbd8>)
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	4630      	mov	r0, r6
 8006578:	4639      	mov	r1, r7
 800657a:	f7fa fa65 	bl	8000a48 <__aeabi_dcmple>
 800657e:	b1a0      	cbz	r0, 80065aa <_strtod_l+0xb72>
 8006580:	4639      	mov	r1, r7
 8006582:	4630      	mov	r0, r6
 8006584:	f7fa faa6 	bl	8000ad4 <__aeabi_d2uiz>
 8006588:	2800      	cmp	r0, #0
 800658a:	bf08      	it	eq
 800658c:	2001      	moveq	r0, #1
 800658e:	f7f9 ff65 	bl	800045c <__aeabi_ui2d>
 8006592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006594:	4606      	mov	r6, r0
 8006596:	460f      	mov	r7, r1
 8006598:	bb03      	cbnz	r3, 80065dc <_strtod_l+0xba4>
 800659a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800659e:	9012      	str	r0, [sp, #72]	; 0x48
 80065a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80065a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80065a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80065aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065ae:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80065b6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80065ba:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80065be:	f000 fe53 	bl	8007268 <__ulp>
 80065c2:	4650      	mov	r0, sl
 80065c4:	ec53 2b10 	vmov	r2, r3, d0
 80065c8:	4659      	mov	r1, fp
 80065ca:	f7f9 ffc1 	bl	8000550 <__aeabi_dmul>
 80065ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065d2:	f7f9 fe07 	bl	80001e4 <__adddf3>
 80065d6:	4682      	mov	sl, r0
 80065d8:	468b      	mov	fp, r1
 80065da:	e772      	b.n	80064c2 <_strtod_l+0xa8a>
 80065dc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80065e0:	e7df      	b.n	80065a2 <_strtod_l+0xb6a>
 80065e2:	a30d      	add	r3, pc, #52	; (adr r3, 8006618 <_strtod_l+0xbe0>)
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f7fa fa24 	bl	8000a34 <__aeabi_dcmplt>
 80065ec:	e79c      	b.n	8006528 <_strtod_l+0xaf0>
 80065ee:	2300      	movs	r3, #0
 80065f0:	930d      	str	r3, [sp, #52]	; 0x34
 80065f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80065f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	f7ff ba61 	b.w	8005abe <_strtod_l+0x86>
 80065fc:	2b65      	cmp	r3, #101	; 0x65
 80065fe:	f04f 0200 	mov.w	r2, #0
 8006602:	f43f ab4e 	beq.w	8005ca2 <_strtod_l+0x26a>
 8006606:	2101      	movs	r1, #1
 8006608:	4614      	mov	r4, r2
 800660a:	9104      	str	r1, [sp, #16]
 800660c:	f7ff bacb 	b.w	8005ba6 <_strtod_l+0x16e>
 8006610:	ffc00000 	.word	0xffc00000
 8006614:	41dfffff 	.word	0x41dfffff
 8006618:	94a03595 	.word	0x94a03595
 800661c:	3fcfffff 	.word	0x3fcfffff

08006620 <strtod>:
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <strtod+0x20>)
 8006622:	4a08      	ldr	r2, [pc, #32]	; (8006644 <strtod+0x24>)
 8006624:	b410      	push	{r4}
 8006626:	681c      	ldr	r4, [r3, #0]
 8006628:	6a23      	ldr	r3, [r4, #32]
 800662a:	2b00      	cmp	r3, #0
 800662c:	bf08      	it	eq
 800662e:	4613      	moveq	r3, r2
 8006630:	460a      	mov	r2, r1
 8006632:	4601      	mov	r1, r0
 8006634:	4620      	mov	r0, r4
 8006636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800663a:	f7ff b9fd 	b.w	8005a38 <_strtod_l>
 800663e:	bf00      	nop
 8006640:	20000014 	.word	0x20000014
 8006644:	20000078 	.word	0x20000078

08006648 <rshift>:
 8006648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800664a:	6906      	ldr	r6, [r0, #16]
 800664c:	114b      	asrs	r3, r1, #5
 800664e:	429e      	cmp	r6, r3
 8006650:	f100 0414 	add.w	r4, r0, #20
 8006654:	dd30      	ble.n	80066b8 <rshift+0x70>
 8006656:	f011 011f 	ands.w	r1, r1, #31
 800665a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800665e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006662:	d108      	bne.n	8006676 <rshift+0x2e>
 8006664:	4621      	mov	r1, r4
 8006666:	42b2      	cmp	r2, r6
 8006668:	460b      	mov	r3, r1
 800666a:	d211      	bcs.n	8006690 <rshift+0x48>
 800666c:	f852 3b04 	ldr.w	r3, [r2], #4
 8006670:	f841 3b04 	str.w	r3, [r1], #4
 8006674:	e7f7      	b.n	8006666 <rshift+0x1e>
 8006676:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800667a:	f1c1 0c20 	rsb	ip, r1, #32
 800667e:	40cd      	lsrs	r5, r1
 8006680:	3204      	adds	r2, #4
 8006682:	4623      	mov	r3, r4
 8006684:	42b2      	cmp	r2, r6
 8006686:	4617      	mov	r7, r2
 8006688:	d30c      	bcc.n	80066a4 <rshift+0x5c>
 800668a:	601d      	str	r5, [r3, #0]
 800668c:	b105      	cbz	r5, 8006690 <rshift+0x48>
 800668e:	3304      	adds	r3, #4
 8006690:	1b1a      	subs	r2, r3, r4
 8006692:	42a3      	cmp	r3, r4
 8006694:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006698:	bf08      	it	eq
 800669a:	2300      	moveq	r3, #0
 800669c:	6102      	str	r2, [r0, #16]
 800669e:	bf08      	it	eq
 80066a0:	6143      	streq	r3, [r0, #20]
 80066a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066a4:	683f      	ldr	r7, [r7, #0]
 80066a6:	fa07 f70c 	lsl.w	r7, r7, ip
 80066aa:	433d      	orrs	r5, r7
 80066ac:	f843 5b04 	str.w	r5, [r3], #4
 80066b0:	f852 5b04 	ldr.w	r5, [r2], #4
 80066b4:	40cd      	lsrs	r5, r1
 80066b6:	e7e5      	b.n	8006684 <rshift+0x3c>
 80066b8:	4623      	mov	r3, r4
 80066ba:	e7e9      	b.n	8006690 <rshift+0x48>

080066bc <__hexdig_fun>:
 80066bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80066c0:	2b09      	cmp	r3, #9
 80066c2:	d802      	bhi.n	80066ca <__hexdig_fun+0xe>
 80066c4:	3820      	subs	r0, #32
 80066c6:	b2c0      	uxtb	r0, r0
 80066c8:	4770      	bx	lr
 80066ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80066ce:	2b05      	cmp	r3, #5
 80066d0:	d801      	bhi.n	80066d6 <__hexdig_fun+0x1a>
 80066d2:	3847      	subs	r0, #71	; 0x47
 80066d4:	e7f7      	b.n	80066c6 <__hexdig_fun+0xa>
 80066d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80066da:	2b05      	cmp	r3, #5
 80066dc:	d801      	bhi.n	80066e2 <__hexdig_fun+0x26>
 80066de:	3827      	subs	r0, #39	; 0x27
 80066e0:	e7f1      	b.n	80066c6 <__hexdig_fun+0xa>
 80066e2:	2000      	movs	r0, #0
 80066e4:	4770      	bx	lr

080066e6 <__gethex>:
 80066e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ea:	b08b      	sub	sp, #44	; 0x2c
 80066ec:	468a      	mov	sl, r1
 80066ee:	9002      	str	r0, [sp, #8]
 80066f0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80066f2:	9306      	str	r3, [sp, #24]
 80066f4:	4690      	mov	r8, r2
 80066f6:	f000 facd 	bl	8006c94 <__localeconv_l>
 80066fa:	6803      	ldr	r3, [r0, #0]
 80066fc:	9303      	str	r3, [sp, #12]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7f9 fd62 	bl	80001c8 <strlen>
 8006704:	9b03      	ldr	r3, [sp, #12]
 8006706:	9001      	str	r0, [sp, #4]
 8006708:	4403      	add	r3, r0
 800670a:	f04f 0b00 	mov.w	fp, #0
 800670e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006712:	9307      	str	r3, [sp, #28]
 8006714:	f8da 3000 	ldr.w	r3, [sl]
 8006718:	3302      	adds	r3, #2
 800671a:	461f      	mov	r7, r3
 800671c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006720:	2830      	cmp	r0, #48	; 0x30
 8006722:	d06c      	beq.n	80067fe <__gethex+0x118>
 8006724:	f7ff ffca 	bl	80066bc <__hexdig_fun>
 8006728:	4604      	mov	r4, r0
 800672a:	2800      	cmp	r0, #0
 800672c:	d16a      	bne.n	8006804 <__gethex+0x11e>
 800672e:	9a01      	ldr	r2, [sp, #4]
 8006730:	9903      	ldr	r1, [sp, #12]
 8006732:	4638      	mov	r0, r7
 8006734:	f000 ff44 	bl	80075c0 <strncmp>
 8006738:	2800      	cmp	r0, #0
 800673a:	d166      	bne.n	800680a <__gethex+0x124>
 800673c:	9b01      	ldr	r3, [sp, #4]
 800673e:	5cf8      	ldrb	r0, [r7, r3]
 8006740:	18fe      	adds	r6, r7, r3
 8006742:	f7ff ffbb 	bl	80066bc <__hexdig_fun>
 8006746:	2800      	cmp	r0, #0
 8006748:	d062      	beq.n	8006810 <__gethex+0x12a>
 800674a:	4633      	mov	r3, r6
 800674c:	7818      	ldrb	r0, [r3, #0]
 800674e:	2830      	cmp	r0, #48	; 0x30
 8006750:	461f      	mov	r7, r3
 8006752:	f103 0301 	add.w	r3, r3, #1
 8006756:	d0f9      	beq.n	800674c <__gethex+0x66>
 8006758:	f7ff ffb0 	bl	80066bc <__hexdig_fun>
 800675c:	fab0 f580 	clz	r5, r0
 8006760:	096d      	lsrs	r5, r5, #5
 8006762:	4634      	mov	r4, r6
 8006764:	f04f 0b01 	mov.w	fp, #1
 8006768:	463a      	mov	r2, r7
 800676a:	4616      	mov	r6, r2
 800676c:	3201      	adds	r2, #1
 800676e:	7830      	ldrb	r0, [r6, #0]
 8006770:	f7ff ffa4 	bl	80066bc <__hexdig_fun>
 8006774:	2800      	cmp	r0, #0
 8006776:	d1f8      	bne.n	800676a <__gethex+0x84>
 8006778:	9a01      	ldr	r2, [sp, #4]
 800677a:	9903      	ldr	r1, [sp, #12]
 800677c:	4630      	mov	r0, r6
 800677e:	f000 ff1f 	bl	80075c0 <strncmp>
 8006782:	b950      	cbnz	r0, 800679a <__gethex+0xb4>
 8006784:	b954      	cbnz	r4, 800679c <__gethex+0xb6>
 8006786:	9b01      	ldr	r3, [sp, #4]
 8006788:	18f4      	adds	r4, r6, r3
 800678a:	4622      	mov	r2, r4
 800678c:	4616      	mov	r6, r2
 800678e:	3201      	adds	r2, #1
 8006790:	7830      	ldrb	r0, [r6, #0]
 8006792:	f7ff ff93 	bl	80066bc <__hexdig_fun>
 8006796:	2800      	cmp	r0, #0
 8006798:	d1f8      	bne.n	800678c <__gethex+0xa6>
 800679a:	b10c      	cbz	r4, 80067a0 <__gethex+0xba>
 800679c:	1ba4      	subs	r4, r4, r6
 800679e:	00a4      	lsls	r4, r4, #2
 80067a0:	7833      	ldrb	r3, [r6, #0]
 80067a2:	2b50      	cmp	r3, #80	; 0x50
 80067a4:	d001      	beq.n	80067aa <__gethex+0xc4>
 80067a6:	2b70      	cmp	r3, #112	; 0x70
 80067a8:	d140      	bne.n	800682c <__gethex+0x146>
 80067aa:	7873      	ldrb	r3, [r6, #1]
 80067ac:	2b2b      	cmp	r3, #43	; 0x2b
 80067ae:	d031      	beq.n	8006814 <__gethex+0x12e>
 80067b0:	2b2d      	cmp	r3, #45	; 0x2d
 80067b2:	d033      	beq.n	800681c <__gethex+0x136>
 80067b4:	1c71      	adds	r1, r6, #1
 80067b6:	f04f 0900 	mov.w	r9, #0
 80067ba:	7808      	ldrb	r0, [r1, #0]
 80067bc:	f7ff ff7e 	bl	80066bc <__hexdig_fun>
 80067c0:	1e43      	subs	r3, r0, #1
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b18      	cmp	r3, #24
 80067c6:	d831      	bhi.n	800682c <__gethex+0x146>
 80067c8:	f1a0 0210 	sub.w	r2, r0, #16
 80067cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80067d0:	f7ff ff74 	bl	80066bc <__hexdig_fun>
 80067d4:	1e43      	subs	r3, r0, #1
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b18      	cmp	r3, #24
 80067da:	d922      	bls.n	8006822 <__gethex+0x13c>
 80067dc:	f1b9 0f00 	cmp.w	r9, #0
 80067e0:	d000      	beq.n	80067e4 <__gethex+0xfe>
 80067e2:	4252      	negs	r2, r2
 80067e4:	4414      	add	r4, r2
 80067e6:	f8ca 1000 	str.w	r1, [sl]
 80067ea:	b30d      	cbz	r5, 8006830 <__gethex+0x14a>
 80067ec:	f1bb 0f00 	cmp.w	fp, #0
 80067f0:	bf0c      	ite	eq
 80067f2:	2706      	moveq	r7, #6
 80067f4:	2700      	movne	r7, #0
 80067f6:	4638      	mov	r0, r7
 80067f8:	b00b      	add	sp, #44	; 0x2c
 80067fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fe:	f10b 0b01 	add.w	fp, fp, #1
 8006802:	e78a      	b.n	800671a <__gethex+0x34>
 8006804:	2500      	movs	r5, #0
 8006806:	462c      	mov	r4, r5
 8006808:	e7ae      	b.n	8006768 <__gethex+0x82>
 800680a:	463e      	mov	r6, r7
 800680c:	2501      	movs	r5, #1
 800680e:	e7c7      	b.n	80067a0 <__gethex+0xba>
 8006810:	4604      	mov	r4, r0
 8006812:	e7fb      	b.n	800680c <__gethex+0x126>
 8006814:	f04f 0900 	mov.w	r9, #0
 8006818:	1cb1      	adds	r1, r6, #2
 800681a:	e7ce      	b.n	80067ba <__gethex+0xd4>
 800681c:	f04f 0901 	mov.w	r9, #1
 8006820:	e7fa      	b.n	8006818 <__gethex+0x132>
 8006822:	230a      	movs	r3, #10
 8006824:	fb03 0202 	mla	r2, r3, r2, r0
 8006828:	3a10      	subs	r2, #16
 800682a:	e7cf      	b.n	80067cc <__gethex+0xe6>
 800682c:	4631      	mov	r1, r6
 800682e:	e7da      	b.n	80067e6 <__gethex+0x100>
 8006830:	1bf3      	subs	r3, r6, r7
 8006832:	3b01      	subs	r3, #1
 8006834:	4629      	mov	r1, r5
 8006836:	2b07      	cmp	r3, #7
 8006838:	dc49      	bgt.n	80068ce <__gethex+0x1e8>
 800683a:	9802      	ldr	r0, [sp, #8]
 800683c:	f000 fa49 	bl	8006cd2 <_Balloc>
 8006840:	9b01      	ldr	r3, [sp, #4]
 8006842:	f100 0914 	add.w	r9, r0, #20
 8006846:	f04f 0b00 	mov.w	fp, #0
 800684a:	f1c3 0301 	rsb	r3, r3, #1
 800684e:	4605      	mov	r5, r0
 8006850:	f8cd 9010 	str.w	r9, [sp, #16]
 8006854:	46da      	mov	sl, fp
 8006856:	9308      	str	r3, [sp, #32]
 8006858:	42b7      	cmp	r7, r6
 800685a:	d33b      	bcc.n	80068d4 <__gethex+0x1ee>
 800685c:	9804      	ldr	r0, [sp, #16]
 800685e:	f840 ab04 	str.w	sl, [r0], #4
 8006862:	eba0 0009 	sub.w	r0, r0, r9
 8006866:	1080      	asrs	r0, r0, #2
 8006868:	6128      	str	r0, [r5, #16]
 800686a:	0147      	lsls	r7, r0, #5
 800686c:	4650      	mov	r0, sl
 800686e:	f000 faf4 	bl	8006e5a <__hi0bits>
 8006872:	f8d8 6000 	ldr.w	r6, [r8]
 8006876:	1a3f      	subs	r7, r7, r0
 8006878:	42b7      	cmp	r7, r6
 800687a:	dd64      	ble.n	8006946 <__gethex+0x260>
 800687c:	1bbf      	subs	r7, r7, r6
 800687e:	4639      	mov	r1, r7
 8006880:	4628      	mov	r0, r5
 8006882:	f000 fe03 	bl	800748c <__any_on>
 8006886:	4682      	mov	sl, r0
 8006888:	b178      	cbz	r0, 80068aa <__gethex+0x1c4>
 800688a:	1e7b      	subs	r3, r7, #1
 800688c:	1159      	asrs	r1, r3, #5
 800688e:	f003 021f 	and.w	r2, r3, #31
 8006892:	f04f 0a01 	mov.w	sl, #1
 8006896:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800689a:	fa0a f202 	lsl.w	r2, sl, r2
 800689e:	420a      	tst	r2, r1
 80068a0:	d003      	beq.n	80068aa <__gethex+0x1c4>
 80068a2:	4553      	cmp	r3, sl
 80068a4:	dc46      	bgt.n	8006934 <__gethex+0x24e>
 80068a6:	f04f 0a02 	mov.w	sl, #2
 80068aa:	4639      	mov	r1, r7
 80068ac:	4628      	mov	r0, r5
 80068ae:	f7ff fecb 	bl	8006648 <rshift>
 80068b2:	443c      	add	r4, r7
 80068b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	da52      	bge.n	8006962 <__gethex+0x27c>
 80068bc:	4629      	mov	r1, r5
 80068be:	9802      	ldr	r0, [sp, #8]
 80068c0:	f000 fa3b 	bl	8006d3a <_Bfree>
 80068c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068c6:	2300      	movs	r3, #0
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	27a3      	movs	r7, #163	; 0xa3
 80068cc:	e793      	b.n	80067f6 <__gethex+0x110>
 80068ce:	3101      	adds	r1, #1
 80068d0:	105b      	asrs	r3, r3, #1
 80068d2:	e7b0      	b.n	8006836 <__gethex+0x150>
 80068d4:	1e73      	subs	r3, r6, #1
 80068d6:	9305      	str	r3, [sp, #20]
 80068d8:	9a07      	ldr	r2, [sp, #28]
 80068da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80068de:	4293      	cmp	r3, r2
 80068e0:	d018      	beq.n	8006914 <__gethex+0x22e>
 80068e2:	f1bb 0f20 	cmp.w	fp, #32
 80068e6:	d107      	bne.n	80068f8 <__gethex+0x212>
 80068e8:	9b04      	ldr	r3, [sp, #16]
 80068ea:	f8c3 a000 	str.w	sl, [r3]
 80068ee:	3304      	adds	r3, #4
 80068f0:	f04f 0a00 	mov.w	sl, #0
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	46d3      	mov	fp, sl
 80068f8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80068fc:	f7ff fede 	bl	80066bc <__hexdig_fun>
 8006900:	f000 000f 	and.w	r0, r0, #15
 8006904:	fa00 f00b 	lsl.w	r0, r0, fp
 8006908:	ea4a 0a00 	orr.w	sl, sl, r0
 800690c:	f10b 0b04 	add.w	fp, fp, #4
 8006910:	9b05      	ldr	r3, [sp, #20]
 8006912:	e00d      	b.n	8006930 <__gethex+0x24a>
 8006914:	9b05      	ldr	r3, [sp, #20]
 8006916:	9a08      	ldr	r2, [sp, #32]
 8006918:	4413      	add	r3, r2
 800691a:	42bb      	cmp	r3, r7
 800691c:	d3e1      	bcc.n	80068e2 <__gethex+0x1fc>
 800691e:	4618      	mov	r0, r3
 8006920:	9a01      	ldr	r2, [sp, #4]
 8006922:	9903      	ldr	r1, [sp, #12]
 8006924:	9309      	str	r3, [sp, #36]	; 0x24
 8006926:	f000 fe4b 	bl	80075c0 <strncmp>
 800692a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692c:	2800      	cmp	r0, #0
 800692e:	d1d8      	bne.n	80068e2 <__gethex+0x1fc>
 8006930:	461e      	mov	r6, r3
 8006932:	e791      	b.n	8006858 <__gethex+0x172>
 8006934:	1eb9      	subs	r1, r7, #2
 8006936:	4628      	mov	r0, r5
 8006938:	f000 fda8 	bl	800748c <__any_on>
 800693c:	2800      	cmp	r0, #0
 800693e:	d0b2      	beq.n	80068a6 <__gethex+0x1c0>
 8006940:	f04f 0a03 	mov.w	sl, #3
 8006944:	e7b1      	b.n	80068aa <__gethex+0x1c4>
 8006946:	da09      	bge.n	800695c <__gethex+0x276>
 8006948:	1bf7      	subs	r7, r6, r7
 800694a:	4629      	mov	r1, r5
 800694c:	463a      	mov	r2, r7
 800694e:	9802      	ldr	r0, [sp, #8]
 8006950:	f000 fbbe 	bl	80070d0 <__lshift>
 8006954:	1be4      	subs	r4, r4, r7
 8006956:	4605      	mov	r5, r0
 8006958:	f100 0914 	add.w	r9, r0, #20
 800695c:	f04f 0a00 	mov.w	sl, #0
 8006960:	e7a8      	b.n	80068b4 <__gethex+0x1ce>
 8006962:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006966:	42a0      	cmp	r0, r4
 8006968:	dd6a      	ble.n	8006a40 <__gethex+0x35a>
 800696a:	1b04      	subs	r4, r0, r4
 800696c:	42a6      	cmp	r6, r4
 800696e:	dc2e      	bgt.n	80069ce <__gethex+0x2e8>
 8006970:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006974:	2b02      	cmp	r3, #2
 8006976:	d022      	beq.n	80069be <__gethex+0x2d8>
 8006978:	2b03      	cmp	r3, #3
 800697a:	d024      	beq.n	80069c6 <__gethex+0x2e0>
 800697c:	2b01      	cmp	r3, #1
 800697e:	d115      	bne.n	80069ac <__gethex+0x2c6>
 8006980:	42a6      	cmp	r6, r4
 8006982:	d113      	bne.n	80069ac <__gethex+0x2c6>
 8006984:	2e01      	cmp	r6, #1
 8006986:	dc0b      	bgt.n	80069a0 <__gethex+0x2ba>
 8006988:	9a06      	ldr	r2, [sp, #24]
 800698a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	2301      	movs	r3, #1
 8006992:	612b      	str	r3, [r5, #16]
 8006994:	f8c9 3000 	str.w	r3, [r9]
 8006998:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800699a:	2762      	movs	r7, #98	; 0x62
 800699c:	601d      	str	r5, [r3, #0]
 800699e:	e72a      	b.n	80067f6 <__gethex+0x110>
 80069a0:	1e71      	subs	r1, r6, #1
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 fd72 	bl	800748c <__any_on>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d1ed      	bne.n	8006988 <__gethex+0x2a2>
 80069ac:	4629      	mov	r1, r5
 80069ae:	9802      	ldr	r0, [sp, #8]
 80069b0:	f000 f9c3 	bl	8006d3a <_Bfree>
 80069b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80069b6:	2300      	movs	r3, #0
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	2750      	movs	r7, #80	; 0x50
 80069bc:	e71b      	b.n	80067f6 <__gethex+0x110>
 80069be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0e1      	beq.n	8006988 <__gethex+0x2a2>
 80069c4:	e7f2      	b.n	80069ac <__gethex+0x2c6>
 80069c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1dd      	bne.n	8006988 <__gethex+0x2a2>
 80069cc:	e7ee      	b.n	80069ac <__gethex+0x2c6>
 80069ce:	1e67      	subs	r7, r4, #1
 80069d0:	f1ba 0f00 	cmp.w	sl, #0
 80069d4:	d131      	bne.n	8006a3a <__gethex+0x354>
 80069d6:	b127      	cbz	r7, 80069e2 <__gethex+0x2fc>
 80069d8:	4639      	mov	r1, r7
 80069da:	4628      	mov	r0, r5
 80069dc:	f000 fd56 	bl	800748c <__any_on>
 80069e0:	4682      	mov	sl, r0
 80069e2:	117a      	asrs	r2, r7, #5
 80069e4:	2301      	movs	r3, #1
 80069e6:	f007 071f 	and.w	r7, r7, #31
 80069ea:	fa03 f707 	lsl.w	r7, r3, r7
 80069ee:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80069f2:	4621      	mov	r1, r4
 80069f4:	421f      	tst	r7, r3
 80069f6:	4628      	mov	r0, r5
 80069f8:	bf18      	it	ne
 80069fa:	f04a 0a02 	orrne.w	sl, sl, #2
 80069fe:	1b36      	subs	r6, r6, r4
 8006a00:	f7ff fe22 	bl	8006648 <rshift>
 8006a04:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006a08:	2702      	movs	r7, #2
 8006a0a:	f1ba 0f00 	cmp.w	sl, #0
 8006a0e:	d048      	beq.n	8006aa2 <__gethex+0x3bc>
 8006a10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d015      	beq.n	8006a44 <__gethex+0x35e>
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d017      	beq.n	8006a4c <__gethex+0x366>
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d109      	bne.n	8006a34 <__gethex+0x34e>
 8006a20:	f01a 0f02 	tst.w	sl, #2
 8006a24:	d006      	beq.n	8006a34 <__gethex+0x34e>
 8006a26:	f8d9 3000 	ldr.w	r3, [r9]
 8006a2a:	ea4a 0a03 	orr.w	sl, sl, r3
 8006a2e:	f01a 0f01 	tst.w	sl, #1
 8006a32:	d10e      	bne.n	8006a52 <__gethex+0x36c>
 8006a34:	f047 0710 	orr.w	r7, r7, #16
 8006a38:	e033      	b.n	8006aa2 <__gethex+0x3bc>
 8006a3a:	f04f 0a01 	mov.w	sl, #1
 8006a3e:	e7d0      	b.n	80069e2 <__gethex+0x2fc>
 8006a40:	2701      	movs	r7, #1
 8006a42:	e7e2      	b.n	8006a0a <__gethex+0x324>
 8006a44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a46:	f1c3 0301 	rsb	r3, r3, #1
 8006a4a:	9315      	str	r3, [sp, #84]	; 0x54
 8006a4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0f0      	beq.n	8006a34 <__gethex+0x34e>
 8006a52:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006a56:	f105 0314 	add.w	r3, r5, #20
 8006a5a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006a5e:	eb03 010a 	add.w	r1, r3, sl
 8006a62:	f04f 0c00 	mov.w	ip, #0
 8006a66:	4618      	mov	r0, r3
 8006a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006a70:	d01c      	beq.n	8006aac <__gethex+0x3c6>
 8006a72:	3201      	adds	r2, #1
 8006a74:	6002      	str	r2, [r0, #0]
 8006a76:	2f02      	cmp	r7, #2
 8006a78:	f105 0314 	add.w	r3, r5, #20
 8006a7c:	d138      	bne.n	8006af0 <__gethex+0x40a>
 8006a7e:	f8d8 2000 	ldr.w	r2, [r8]
 8006a82:	3a01      	subs	r2, #1
 8006a84:	42b2      	cmp	r2, r6
 8006a86:	d10a      	bne.n	8006a9e <__gethex+0x3b8>
 8006a88:	1171      	asrs	r1, r6, #5
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f006 061f 	and.w	r6, r6, #31
 8006a90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a94:	fa02 f606 	lsl.w	r6, r2, r6
 8006a98:	421e      	tst	r6, r3
 8006a9a:	bf18      	it	ne
 8006a9c:	4617      	movne	r7, r2
 8006a9e:	f047 0720 	orr.w	r7, r7, #32
 8006aa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006aa4:	601d      	str	r5, [r3, #0]
 8006aa6:	9b06      	ldr	r3, [sp, #24]
 8006aa8:	601c      	str	r4, [r3, #0]
 8006aaa:	e6a4      	b.n	80067f6 <__gethex+0x110>
 8006aac:	4299      	cmp	r1, r3
 8006aae:	f843 cc04 	str.w	ip, [r3, #-4]
 8006ab2:	d8d8      	bhi.n	8006a66 <__gethex+0x380>
 8006ab4:	68ab      	ldr	r3, [r5, #8]
 8006ab6:	4599      	cmp	r9, r3
 8006ab8:	db12      	blt.n	8006ae0 <__gethex+0x3fa>
 8006aba:	6869      	ldr	r1, [r5, #4]
 8006abc:	9802      	ldr	r0, [sp, #8]
 8006abe:	3101      	adds	r1, #1
 8006ac0:	f000 f907 	bl	8006cd2 <_Balloc>
 8006ac4:	692a      	ldr	r2, [r5, #16]
 8006ac6:	3202      	adds	r2, #2
 8006ac8:	f105 010c 	add.w	r1, r5, #12
 8006acc:	4683      	mov	fp, r0
 8006ace:	0092      	lsls	r2, r2, #2
 8006ad0:	300c      	adds	r0, #12
 8006ad2:	f000 f8f3 	bl	8006cbc <memcpy>
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	9802      	ldr	r0, [sp, #8]
 8006ada:	f000 f92e 	bl	8006d3a <_Bfree>
 8006ade:	465d      	mov	r5, fp
 8006ae0:	692b      	ldr	r3, [r5, #16]
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006ae8:	612a      	str	r2, [r5, #16]
 8006aea:	2201      	movs	r2, #1
 8006aec:	615a      	str	r2, [r3, #20]
 8006aee:	e7c2      	b.n	8006a76 <__gethex+0x390>
 8006af0:	692a      	ldr	r2, [r5, #16]
 8006af2:	454a      	cmp	r2, r9
 8006af4:	dd0b      	ble.n	8006b0e <__gethex+0x428>
 8006af6:	2101      	movs	r1, #1
 8006af8:	4628      	mov	r0, r5
 8006afa:	f7ff fda5 	bl	8006648 <rshift>
 8006afe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b02:	3401      	adds	r4, #1
 8006b04:	42a3      	cmp	r3, r4
 8006b06:	f6ff aed9 	blt.w	80068bc <__gethex+0x1d6>
 8006b0a:	2701      	movs	r7, #1
 8006b0c:	e7c7      	b.n	8006a9e <__gethex+0x3b8>
 8006b0e:	f016 061f 	ands.w	r6, r6, #31
 8006b12:	d0fa      	beq.n	8006b0a <__gethex+0x424>
 8006b14:	449a      	add	sl, r3
 8006b16:	f1c6 0620 	rsb	r6, r6, #32
 8006b1a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006b1e:	f000 f99c 	bl	8006e5a <__hi0bits>
 8006b22:	42b0      	cmp	r0, r6
 8006b24:	dbe7      	blt.n	8006af6 <__gethex+0x410>
 8006b26:	e7f0      	b.n	8006b0a <__gethex+0x424>

08006b28 <L_shift>:
 8006b28:	f1c2 0208 	rsb	r2, r2, #8
 8006b2c:	0092      	lsls	r2, r2, #2
 8006b2e:	b570      	push	{r4, r5, r6, lr}
 8006b30:	f1c2 0620 	rsb	r6, r2, #32
 8006b34:	6843      	ldr	r3, [r0, #4]
 8006b36:	6804      	ldr	r4, [r0, #0]
 8006b38:	fa03 f506 	lsl.w	r5, r3, r6
 8006b3c:	432c      	orrs	r4, r5
 8006b3e:	40d3      	lsrs	r3, r2
 8006b40:	6004      	str	r4, [r0, #0]
 8006b42:	f840 3f04 	str.w	r3, [r0, #4]!
 8006b46:	4288      	cmp	r0, r1
 8006b48:	d3f4      	bcc.n	8006b34 <L_shift+0xc>
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}

08006b4c <__match>:
 8006b4c:	b530      	push	{r4, r5, lr}
 8006b4e:	6803      	ldr	r3, [r0, #0]
 8006b50:	3301      	adds	r3, #1
 8006b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b56:	b914      	cbnz	r4, 8006b5e <__match+0x12>
 8006b58:	6003      	str	r3, [r0, #0]
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	bd30      	pop	{r4, r5, pc}
 8006b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006b66:	2d19      	cmp	r5, #25
 8006b68:	bf98      	it	ls
 8006b6a:	3220      	addls	r2, #32
 8006b6c:	42a2      	cmp	r2, r4
 8006b6e:	d0f0      	beq.n	8006b52 <__match+0x6>
 8006b70:	2000      	movs	r0, #0
 8006b72:	e7f3      	b.n	8006b5c <__match+0x10>

08006b74 <__hexnan>:
 8006b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	680b      	ldr	r3, [r1, #0]
 8006b7a:	6801      	ldr	r1, [r0, #0]
 8006b7c:	115f      	asrs	r7, r3, #5
 8006b7e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006b82:	f013 031f 	ands.w	r3, r3, #31
 8006b86:	b087      	sub	sp, #28
 8006b88:	bf18      	it	ne
 8006b8a:	3704      	addne	r7, #4
 8006b8c:	2500      	movs	r5, #0
 8006b8e:	1f3e      	subs	r6, r7, #4
 8006b90:	4682      	mov	sl, r0
 8006b92:	4690      	mov	r8, r2
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	f847 5c04 	str.w	r5, [r7, #-4]
 8006b9a:	46b1      	mov	r9, r6
 8006b9c:	4634      	mov	r4, r6
 8006b9e:	9502      	str	r5, [sp, #8]
 8006ba0:	46ab      	mov	fp, r5
 8006ba2:	784a      	ldrb	r2, [r1, #1]
 8006ba4:	1c4b      	adds	r3, r1, #1
 8006ba6:	9303      	str	r3, [sp, #12]
 8006ba8:	b342      	cbz	r2, 8006bfc <__hexnan+0x88>
 8006baa:	4610      	mov	r0, r2
 8006bac:	9105      	str	r1, [sp, #20]
 8006bae:	9204      	str	r2, [sp, #16]
 8006bb0:	f7ff fd84 	bl	80066bc <__hexdig_fun>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d143      	bne.n	8006c40 <__hexnan+0xcc>
 8006bb8:	9a04      	ldr	r2, [sp, #16]
 8006bba:	9905      	ldr	r1, [sp, #20]
 8006bbc:	2a20      	cmp	r2, #32
 8006bbe:	d818      	bhi.n	8006bf2 <__hexnan+0x7e>
 8006bc0:	9b02      	ldr	r3, [sp, #8]
 8006bc2:	459b      	cmp	fp, r3
 8006bc4:	dd13      	ble.n	8006bee <__hexnan+0x7a>
 8006bc6:	454c      	cmp	r4, r9
 8006bc8:	d206      	bcs.n	8006bd8 <__hexnan+0x64>
 8006bca:	2d07      	cmp	r5, #7
 8006bcc:	dc04      	bgt.n	8006bd8 <__hexnan+0x64>
 8006bce:	462a      	mov	r2, r5
 8006bd0:	4649      	mov	r1, r9
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f7ff ffa8 	bl	8006b28 <L_shift>
 8006bd8:	4544      	cmp	r4, r8
 8006bda:	d944      	bls.n	8006c66 <__hexnan+0xf2>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f1a4 0904 	sub.w	r9, r4, #4
 8006be2:	f844 3c04 	str.w	r3, [r4, #-4]
 8006be6:	f8cd b008 	str.w	fp, [sp, #8]
 8006bea:	464c      	mov	r4, r9
 8006bec:	461d      	mov	r5, r3
 8006bee:	9903      	ldr	r1, [sp, #12]
 8006bf0:	e7d7      	b.n	8006ba2 <__hexnan+0x2e>
 8006bf2:	2a29      	cmp	r2, #41	; 0x29
 8006bf4:	d14a      	bne.n	8006c8c <__hexnan+0x118>
 8006bf6:	3102      	adds	r1, #2
 8006bf8:	f8ca 1000 	str.w	r1, [sl]
 8006bfc:	f1bb 0f00 	cmp.w	fp, #0
 8006c00:	d044      	beq.n	8006c8c <__hexnan+0x118>
 8006c02:	454c      	cmp	r4, r9
 8006c04:	d206      	bcs.n	8006c14 <__hexnan+0xa0>
 8006c06:	2d07      	cmp	r5, #7
 8006c08:	dc04      	bgt.n	8006c14 <__hexnan+0xa0>
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f7ff ff8a 	bl	8006b28 <L_shift>
 8006c14:	4544      	cmp	r4, r8
 8006c16:	d928      	bls.n	8006c6a <__hexnan+0xf6>
 8006c18:	4643      	mov	r3, r8
 8006c1a:	f854 2b04 	ldr.w	r2, [r4], #4
 8006c1e:	f843 2b04 	str.w	r2, [r3], #4
 8006c22:	42a6      	cmp	r6, r4
 8006c24:	d2f9      	bcs.n	8006c1a <__hexnan+0xa6>
 8006c26:	2200      	movs	r2, #0
 8006c28:	f843 2b04 	str.w	r2, [r3], #4
 8006c2c:	429e      	cmp	r6, r3
 8006c2e:	d2fb      	bcs.n	8006c28 <__hexnan+0xb4>
 8006c30:	6833      	ldr	r3, [r6, #0]
 8006c32:	b91b      	cbnz	r3, 8006c3c <__hexnan+0xc8>
 8006c34:	4546      	cmp	r6, r8
 8006c36:	d127      	bne.n	8006c88 <__hexnan+0x114>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	6033      	str	r3, [r6, #0]
 8006c3c:	2005      	movs	r0, #5
 8006c3e:	e026      	b.n	8006c8e <__hexnan+0x11a>
 8006c40:	3501      	adds	r5, #1
 8006c42:	2d08      	cmp	r5, #8
 8006c44:	f10b 0b01 	add.w	fp, fp, #1
 8006c48:	dd06      	ble.n	8006c58 <__hexnan+0xe4>
 8006c4a:	4544      	cmp	r4, r8
 8006c4c:	d9cf      	bls.n	8006bee <__hexnan+0x7a>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c54:	2501      	movs	r5, #1
 8006c56:	3c04      	subs	r4, #4
 8006c58:	6822      	ldr	r2, [r4, #0]
 8006c5a:	f000 000f 	and.w	r0, r0, #15
 8006c5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006c62:	6020      	str	r0, [r4, #0]
 8006c64:	e7c3      	b.n	8006bee <__hexnan+0x7a>
 8006c66:	2508      	movs	r5, #8
 8006c68:	e7c1      	b.n	8006bee <__hexnan+0x7a>
 8006c6a:	9b01      	ldr	r3, [sp, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0df      	beq.n	8006c30 <__hexnan+0xbc>
 8006c70:	f04f 32ff 	mov.w	r2, #4294967295
 8006c74:	f1c3 0320 	rsb	r3, r3, #32
 8006c78:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006c80:	401a      	ands	r2, r3
 8006c82:	f847 2c04 	str.w	r2, [r7, #-4]
 8006c86:	e7d3      	b.n	8006c30 <__hexnan+0xbc>
 8006c88:	3e04      	subs	r6, #4
 8006c8a:	e7d1      	b.n	8006c30 <__hexnan+0xbc>
 8006c8c:	2004      	movs	r0, #4
 8006c8e:	b007      	add	sp, #28
 8006c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c94 <__localeconv_l>:
 8006c94:	30f0      	adds	r0, #240	; 0xf0
 8006c96:	4770      	bx	lr

08006c98 <__ascii_mbtowc>:
 8006c98:	b082      	sub	sp, #8
 8006c9a:	b901      	cbnz	r1, 8006c9e <__ascii_mbtowc+0x6>
 8006c9c:	a901      	add	r1, sp, #4
 8006c9e:	b142      	cbz	r2, 8006cb2 <__ascii_mbtowc+0x1a>
 8006ca0:	b14b      	cbz	r3, 8006cb6 <__ascii_mbtowc+0x1e>
 8006ca2:	7813      	ldrb	r3, [r2, #0]
 8006ca4:	600b      	str	r3, [r1, #0]
 8006ca6:	7812      	ldrb	r2, [r2, #0]
 8006ca8:	1c10      	adds	r0, r2, #0
 8006caa:	bf18      	it	ne
 8006cac:	2001      	movne	r0, #1
 8006cae:	b002      	add	sp, #8
 8006cb0:	4770      	bx	lr
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	e7fb      	b.n	8006cae <__ascii_mbtowc+0x16>
 8006cb6:	f06f 0001 	mvn.w	r0, #1
 8006cba:	e7f8      	b.n	8006cae <__ascii_mbtowc+0x16>

08006cbc <memcpy>:
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	1e43      	subs	r3, r0, #1
 8006cc0:	440a      	add	r2, r1
 8006cc2:	4291      	cmp	r1, r2
 8006cc4:	d100      	bne.n	8006cc8 <memcpy+0xc>
 8006cc6:	bd10      	pop	{r4, pc}
 8006cc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cd0:	e7f7      	b.n	8006cc2 <memcpy+0x6>

08006cd2 <_Balloc>:
 8006cd2:	b570      	push	{r4, r5, r6, lr}
 8006cd4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	460e      	mov	r6, r1
 8006cda:	b93d      	cbnz	r5, 8006cec <_Balloc+0x1a>
 8006cdc:	2010      	movs	r0, #16
 8006cde:	f000 fc8f 	bl	8007600 <malloc>
 8006ce2:	6260      	str	r0, [r4, #36]	; 0x24
 8006ce4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ce8:	6005      	str	r5, [r0, #0]
 8006cea:	60c5      	str	r5, [r0, #12]
 8006cec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006cee:	68eb      	ldr	r3, [r5, #12]
 8006cf0:	b183      	cbz	r3, 8006d14 <_Balloc+0x42>
 8006cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006cfa:	b9b8      	cbnz	r0, 8006d2c <_Balloc+0x5a>
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	fa01 f506 	lsl.w	r5, r1, r6
 8006d02:	1d6a      	adds	r2, r5, #5
 8006d04:	0092      	lsls	r2, r2, #2
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 fbe1 	bl	80074ce <_calloc_r>
 8006d0c:	b160      	cbz	r0, 8006d28 <_Balloc+0x56>
 8006d0e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006d12:	e00e      	b.n	8006d32 <_Balloc+0x60>
 8006d14:	2221      	movs	r2, #33	; 0x21
 8006d16:	2104      	movs	r1, #4
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fbd8 	bl	80074ce <_calloc_r>
 8006d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d20:	60e8      	str	r0, [r5, #12]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e4      	bne.n	8006cf2 <_Balloc+0x20>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	6802      	ldr	r2, [r0, #0]
 8006d2e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006d32:	2300      	movs	r3, #0
 8006d34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d38:	e7f7      	b.n	8006d2a <_Balloc+0x58>

08006d3a <_Bfree>:
 8006d3a:	b570      	push	{r4, r5, r6, lr}
 8006d3c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006d3e:	4606      	mov	r6, r0
 8006d40:	460d      	mov	r5, r1
 8006d42:	b93c      	cbnz	r4, 8006d54 <_Bfree+0x1a>
 8006d44:	2010      	movs	r0, #16
 8006d46:	f000 fc5b 	bl	8007600 <malloc>
 8006d4a:	6270      	str	r0, [r6, #36]	; 0x24
 8006d4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d50:	6004      	str	r4, [r0, #0]
 8006d52:	60c4      	str	r4, [r0, #12]
 8006d54:	b13d      	cbz	r5, 8006d66 <_Bfree+0x2c>
 8006d56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006d58:	686a      	ldr	r2, [r5, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d60:	6029      	str	r1, [r5, #0]
 8006d62:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006d66:	bd70      	pop	{r4, r5, r6, pc}

08006d68 <__multadd>:
 8006d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6c:	690d      	ldr	r5, [r1, #16]
 8006d6e:	461f      	mov	r7, r3
 8006d70:	4606      	mov	r6, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	f101 0c14 	add.w	ip, r1, #20
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f8dc 0000 	ldr.w	r0, [ip]
 8006d7e:	b281      	uxth	r1, r0
 8006d80:	fb02 7101 	mla	r1, r2, r1, r7
 8006d84:	0c0f      	lsrs	r7, r1, #16
 8006d86:	0c00      	lsrs	r0, r0, #16
 8006d88:	fb02 7000 	mla	r0, r2, r0, r7
 8006d8c:	b289      	uxth	r1, r1
 8006d8e:	3301      	adds	r3, #1
 8006d90:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006d94:	429d      	cmp	r5, r3
 8006d96:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006d9a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d9e:	dcec      	bgt.n	8006d7a <__multadd+0x12>
 8006da0:	b1d7      	cbz	r7, 8006dd8 <__multadd+0x70>
 8006da2:	68a3      	ldr	r3, [r4, #8]
 8006da4:	42ab      	cmp	r3, r5
 8006da6:	dc12      	bgt.n	8006dce <__multadd+0x66>
 8006da8:	6861      	ldr	r1, [r4, #4]
 8006daa:	4630      	mov	r0, r6
 8006dac:	3101      	adds	r1, #1
 8006dae:	f7ff ff90 	bl	8006cd2 <_Balloc>
 8006db2:	6922      	ldr	r2, [r4, #16]
 8006db4:	3202      	adds	r2, #2
 8006db6:	f104 010c 	add.w	r1, r4, #12
 8006dba:	4680      	mov	r8, r0
 8006dbc:	0092      	lsls	r2, r2, #2
 8006dbe:	300c      	adds	r0, #12
 8006dc0:	f7ff ff7c 	bl	8006cbc <memcpy>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f7ff ffb7 	bl	8006d3a <_Bfree>
 8006dcc:	4644      	mov	r4, r8
 8006dce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dd2:	3501      	adds	r5, #1
 8006dd4:	615f      	str	r7, [r3, #20]
 8006dd6:	6125      	str	r5, [r4, #16]
 8006dd8:	4620      	mov	r0, r4
 8006dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006dde <__s2b>:
 8006dde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de2:	460c      	mov	r4, r1
 8006de4:	4615      	mov	r5, r2
 8006de6:	461f      	mov	r7, r3
 8006de8:	2209      	movs	r2, #9
 8006dea:	3308      	adds	r3, #8
 8006dec:	4606      	mov	r6, r0
 8006dee:	fb93 f3f2 	sdiv	r3, r3, r2
 8006df2:	2100      	movs	r1, #0
 8006df4:	2201      	movs	r2, #1
 8006df6:	429a      	cmp	r2, r3
 8006df8:	db20      	blt.n	8006e3c <__s2b+0x5e>
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	f7ff ff69 	bl	8006cd2 <_Balloc>
 8006e00:	9b08      	ldr	r3, [sp, #32]
 8006e02:	6143      	str	r3, [r0, #20]
 8006e04:	2d09      	cmp	r5, #9
 8006e06:	f04f 0301 	mov.w	r3, #1
 8006e0a:	6103      	str	r3, [r0, #16]
 8006e0c:	dd19      	ble.n	8006e42 <__s2b+0x64>
 8006e0e:	f104 0809 	add.w	r8, r4, #9
 8006e12:	46c1      	mov	r9, r8
 8006e14:	442c      	add	r4, r5
 8006e16:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006e1a:	4601      	mov	r1, r0
 8006e1c:	3b30      	subs	r3, #48	; 0x30
 8006e1e:	220a      	movs	r2, #10
 8006e20:	4630      	mov	r0, r6
 8006e22:	f7ff ffa1 	bl	8006d68 <__multadd>
 8006e26:	45a1      	cmp	r9, r4
 8006e28:	d1f5      	bne.n	8006e16 <__s2b+0x38>
 8006e2a:	eb08 0405 	add.w	r4, r8, r5
 8006e2e:	3c08      	subs	r4, #8
 8006e30:	1b2d      	subs	r5, r5, r4
 8006e32:	1963      	adds	r3, r4, r5
 8006e34:	42bb      	cmp	r3, r7
 8006e36:	db07      	blt.n	8006e48 <__s2b+0x6a>
 8006e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e3c:	0052      	lsls	r2, r2, #1
 8006e3e:	3101      	adds	r1, #1
 8006e40:	e7d9      	b.n	8006df6 <__s2b+0x18>
 8006e42:	340a      	adds	r4, #10
 8006e44:	2509      	movs	r5, #9
 8006e46:	e7f3      	b.n	8006e30 <__s2b+0x52>
 8006e48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e4c:	4601      	mov	r1, r0
 8006e4e:	3b30      	subs	r3, #48	; 0x30
 8006e50:	220a      	movs	r2, #10
 8006e52:	4630      	mov	r0, r6
 8006e54:	f7ff ff88 	bl	8006d68 <__multadd>
 8006e58:	e7eb      	b.n	8006e32 <__s2b+0x54>

08006e5a <__hi0bits>:
 8006e5a:	0c02      	lsrs	r2, r0, #16
 8006e5c:	0412      	lsls	r2, r2, #16
 8006e5e:	4603      	mov	r3, r0
 8006e60:	b9b2      	cbnz	r2, 8006e90 <__hi0bits+0x36>
 8006e62:	0403      	lsls	r3, r0, #16
 8006e64:	2010      	movs	r0, #16
 8006e66:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e6a:	bf04      	itt	eq
 8006e6c:	021b      	lsleq	r3, r3, #8
 8006e6e:	3008      	addeq	r0, #8
 8006e70:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006e74:	bf04      	itt	eq
 8006e76:	011b      	lsleq	r3, r3, #4
 8006e78:	3004      	addeq	r0, #4
 8006e7a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006e7e:	bf04      	itt	eq
 8006e80:	009b      	lsleq	r3, r3, #2
 8006e82:	3002      	addeq	r0, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	db06      	blt.n	8006e96 <__hi0bits+0x3c>
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	d503      	bpl.n	8006e94 <__hi0bits+0x3a>
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	4770      	bx	lr
 8006e90:	2000      	movs	r0, #0
 8006e92:	e7e8      	b.n	8006e66 <__hi0bits+0xc>
 8006e94:	2020      	movs	r0, #32
 8006e96:	4770      	bx	lr

08006e98 <__lo0bits>:
 8006e98:	6803      	ldr	r3, [r0, #0]
 8006e9a:	f013 0207 	ands.w	r2, r3, #7
 8006e9e:	4601      	mov	r1, r0
 8006ea0:	d00b      	beq.n	8006eba <__lo0bits+0x22>
 8006ea2:	07da      	lsls	r2, r3, #31
 8006ea4:	d423      	bmi.n	8006eee <__lo0bits+0x56>
 8006ea6:	0798      	lsls	r0, r3, #30
 8006ea8:	bf49      	itett	mi
 8006eaa:	085b      	lsrmi	r3, r3, #1
 8006eac:	089b      	lsrpl	r3, r3, #2
 8006eae:	2001      	movmi	r0, #1
 8006eb0:	600b      	strmi	r3, [r1, #0]
 8006eb2:	bf5c      	itt	pl
 8006eb4:	600b      	strpl	r3, [r1, #0]
 8006eb6:	2002      	movpl	r0, #2
 8006eb8:	4770      	bx	lr
 8006eba:	b298      	uxth	r0, r3
 8006ebc:	b9a8      	cbnz	r0, 8006eea <__lo0bits+0x52>
 8006ebe:	0c1b      	lsrs	r3, r3, #16
 8006ec0:	2010      	movs	r0, #16
 8006ec2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ec6:	bf04      	itt	eq
 8006ec8:	0a1b      	lsreq	r3, r3, #8
 8006eca:	3008      	addeq	r0, #8
 8006ecc:	071a      	lsls	r2, r3, #28
 8006ece:	bf04      	itt	eq
 8006ed0:	091b      	lsreq	r3, r3, #4
 8006ed2:	3004      	addeq	r0, #4
 8006ed4:	079a      	lsls	r2, r3, #30
 8006ed6:	bf04      	itt	eq
 8006ed8:	089b      	lsreq	r3, r3, #2
 8006eda:	3002      	addeq	r0, #2
 8006edc:	07da      	lsls	r2, r3, #31
 8006ede:	d402      	bmi.n	8006ee6 <__lo0bits+0x4e>
 8006ee0:	085b      	lsrs	r3, r3, #1
 8006ee2:	d006      	beq.n	8006ef2 <__lo0bits+0x5a>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	600b      	str	r3, [r1, #0]
 8006ee8:	4770      	bx	lr
 8006eea:	4610      	mov	r0, r2
 8006eec:	e7e9      	b.n	8006ec2 <__lo0bits+0x2a>
 8006eee:	2000      	movs	r0, #0
 8006ef0:	4770      	bx	lr
 8006ef2:	2020      	movs	r0, #32
 8006ef4:	4770      	bx	lr

08006ef6 <__i2b>:
 8006ef6:	b510      	push	{r4, lr}
 8006ef8:	460c      	mov	r4, r1
 8006efa:	2101      	movs	r1, #1
 8006efc:	f7ff fee9 	bl	8006cd2 <_Balloc>
 8006f00:	2201      	movs	r2, #1
 8006f02:	6144      	str	r4, [r0, #20]
 8006f04:	6102      	str	r2, [r0, #16]
 8006f06:	bd10      	pop	{r4, pc}

08006f08 <__multiply>:
 8006f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	690a      	ldr	r2, [r1, #16]
 8006f10:	6923      	ldr	r3, [r4, #16]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	bfb8      	it	lt
 8006f16:	460b      	movlt	r3, r1
 8006f18:	4688      	mov	r8, r1
 8006f1a:	bfbc      	itt	lt
 8006f1c:	46a0      	movlt	r8, r4
 8006f1e:	461c      	movlt	r4, r3
 8006f20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006f28:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f30:	eb07 0609 	add.w	r6, r7, r9
 8006f34:	42b3      	cmp	r3, r6
 8006f36:	bfb8      	it	lt
 8006f38:	3101      	addlt	r1, #1
 8006f3a:	f7ff feca 	bl	8006cd2 <_Balloc>
 8006f3e:	f100 0514 	add.w	r5, r0, #20
 8006f42:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006f46:	462b      	mov	r3, r5
 8006f48:	2200      	movs	r2, #0
 8006f4a:	4573      	cmp	r3, lr
 8006f4c:	d316      	bcc.n	8006f7c <__multiply+0x74>
 8006f4e:	f104 0214 	add.w	r2, r4, #20
 8006f52:	f108 0114 	add.w	r1, r8, #20
 8006f56:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006f5a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	9b00      	ldr	r3, [sp, #0]
 8006f62:	9201      	str	r2, [sp, #4]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d80c      	bhi.n	8006f82 <__multiply+0x7a>
 8006f68:	2e00      	cmp	r6, #0
 8006f6a:	dd03      	ble.n	8006f74 <__multiply+0x6c>
 8006f6c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d05d      	beq.n	8007030 <__multiply+0x128>
 8006f74:	6106      	str	r6, [r0, #16]
 8006f76:	b003      	add	sp, #12
 8006f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7c:	f843 2b04 	str.w	r2, [r3], #4
 8006f80:	e7e3      	b.n	8006f4a <__multiply+0x42>
 8006f82:	f8b2 b000 	ldrh.w	fp, [r2]
 8006f86:	f1bb 0f00 	cmp.w	fp, #0
 8006f8a:	d023      	beq.n	8006fd4 <__multiply+0xcc>
 8006f8c:	4689      	mov	r9, r1
 8006f8e:	46ac      	mov	ip, r5
 8006f90:	f04f 0800 	mov.w	r8, #0
 8006f94:	f859 4b04 	ldr.w	r4, [r9], #4
 8006f98:	f8dc a000 	ldr.w	sl, [ip]
 8006f9c:	b2a3      	uxth	r3, r4
 8006f9e:	fa1f fa8a 	uxth.w	sl, sl
 8006fa2:	fb0b a303 	mla	r3, fp, r3, sl
 8006fa6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006faa:	f8dc 4000 	ldr.w	r4, [ip]
 8006fae:	4443      	add	r3, r8
 8006fb0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006fb4:	fb0b 840a 	mla	r4, fp, sl, r8
 8006fb8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006fbc:	46e2      	mov	sl, ip
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006fc4:	454f      	cmp	r7, r9
 8006fc6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006fca:	f84a 3b04 	str.w	r3, [sl], #4
 8006fce:	d82b      	bhi.n	8007028 <__multiply+0x120>
 8006fd0:	f8cc 8004 	str.w	r8, [ip, #4]
 8006fd4:	9b01      	ldr	r3, [sp, #4]
 8006fd6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006fda:	3204      	adds	r2, #4
 8006fdc:	f1ba 0f00 	cmp.w	sl, #0
 8006fe0:	d020      	beq.n	8007024 <__multiply+0x11c>
 8006fe2:	682b      	ldr	r3, [r5, #0]
 8006fe4:	4689      	mov	r9, r1
 8006fe6:	46a8      	mov	r8, r5
 8006fe8:	f04f 0b00 	mov.w	fp, #0
 8006fec:	f8b9 c000 	ldrh.w	ip, [r9]
 8006ff0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006ff4:	fb0a 440c 	mla	r4, sl, ip, r4
 8006ff8:	445c      	add	r4, fp
 8006ffa:	46c4      	mov	ip, r8
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007002:	f84c 3b04 	str.w	r3, [ip], #4
 8007006:	f859 3b04 	ldr.w	r3, [r9], #4
 800700a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	fb0a b303 	mla	r3, sl, r3, fp
 8007014:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007018:	454f      	cmp	r7, r9
 800701a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800701e:	d805      	bhi.n	800702c <__multiply+0x124>
 8007020:	f8c8 3004 	str.w	r3, [r8, #4]
 8007024:	3504      	adds	r5, #4
 8007026:	e79b      	b.n	8006f60 <__multiply+0x58>
 8007028:	46d4      	mov	ip, sl
 800702a:	e7b3      	b.n	8006f94 <__multiply+0x8c>
 800702c:	46e0      	mov	r8, ip
 800702e:	e7dd      	b.n	8006fec <__multiply+0xe4>
 8007030:	3e01      	subs	r6, #1
 8007032:	e799      	b.n	8006f68 <__multiply+0x60>

08007034 <__pow5mult>:
 8007034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007038:	4615      	mov	r5, r2
 800703a:	f012 0203 	ands.w	r2, r2, #3
 800703e:	4606      	mov	r6, r0
 8007040:	460f      	mov	r7, r1
 8007042:	d007      	beq.n	8007054 <__pow5mult+0x20>
 8007044:	3a01      	subs	r2, #1
 8007046:	4c21      	ldr	r4, [pc, #132]	; (80070cc <__pow5mult+0x98>)
 8007048:	2300      	movs	r3, #0
 800704a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800704e:	f7ff fe8b 	bl	8006d68 <__multadd>
 8007052:	4607      	mov	r7, r0
 8007054:	10ad      	asrs	r5, r5, #2
 8007056:	d035      	beq.n	80070c4 <__pow5mult+0x90>
 8007058:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800705a:	b93c      	cbnz	r4, 800706c <__pow5mult+0x38>
 800705c:	2010      	movs	r0, #16
 800705e:	f000 facf 	bl	8007600 <malloc>
 8007062:	6270      	str	r0, [r6, #36]	; 0x24
 8007064:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007068:	6004      	str	r4, [r0, #0]
 800706a:	60c4      	str	r4, [r0, #12]
 800706c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007070:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007074:	b94c      	cbnz	r4, 800708a <__pow5mult+0x56>
 8007076:	f240 2171 	movw	r1, #625	; 0x271
 800707a:	4630      	mov	r0, r6
 800707c:	f7ff ff3b 	bl	8006ef6 <__i2b>
 8007080:	2300      	movs	r3, #0
 8007082:	f8c8 0008 	str.w	r0, [r8, #8]
 8007086:	4604      	mov	r4, r0
 8007088:	6003      	str	r3, [r0, #0]
 800708a:	f04f 0800 	mov.w	r8, #0
 800708e:	07eb      	lsls	r3, r5, #31
 8007090:	d50a      	bpl.n	80070a8 <__pow5mult+0x74>
 8007092:	4639      	mov	r1, r7
 8007094:	4622      	mov	r2, r4
 8007096:	4630      	mov	r0, r6
 8007098:	f7ff ff36 	bl	8006f08 <__multiply>
 800709c:	4639      	mov	r1, r7
 800709e:	4681      	mov	r9, r0
 80070a0:	4630      	mov	r0, r6
 80070a2:	f7ff fe4a 	bl	8006d3a <_Bfree>
 80070a6:	464f      	mov	r7, r9
 80070a8:	106d      	asrs	r5, r5, #1
 80070aa:	d00b      	beq.n	80070c4 <__pow5mult+0x90>
 80070ac:	6820      	ldr	r0, [r4, #0]
 80070ae:	b938      	cbnz	r0, 80070c0 <__pow5mult+0x8c>
 80070b0:	4622      	mov	r2, r4
 80070b2:	4621      	mov	r1, r4
 80070b4:	4630      	mov	r0, r6
 80070b6:	f7ff ff27 	bl	8006f08 <__multiply>
 80070ba:	6020      	str	r0, [r4, #0]
 80070bc:	f8c0 8000 	str.w	r8, [r0]
 80070c0:	4604      	mov	r4, r0
 80070c2:	e7e4      	b.n	800708e <__pow5mult+0x5a>
 80070c4:	4638      	mov	r0, r7
 80070c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ca:	bf00      	nop
 80070cc:	080077a0 	.word	0x080077a0

080070d0 <__lshift>:
 80070d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d4:	460c      	mov	r4, r1
 80070d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070da:	6923      	ldr	r3, [r4, #16]
 80070dc:	6849      	ldr	r1, [r1, #4]
 80070de:	eb0a 0903 	add.w	r9, sl, r3
 80070e2:	68a3      	ldr	r3, [r4, #8]
 80070e4:	4607      	mov	r7, r0
 80070e6:	4616      	mov	r6, r2
 80070e8:	f109 0501 	add.w	r5, r9, #1
 80070ec:	42ab      	cmp	r3, r5
 80070ee:	db32      	blt.n	8007156 <__lshift+0x86>
 80070f0:	4638      	mov	r0, r7
 80070f2:	f7ff fdee 	bl	8006cd2 <_Balloc>
 80070f6:	2300      	movs	r3, #0
 80070f8:	4680      	mov	r8, r0
 80070fa:	f100 0114 	add.w	r1, r0, #20
 80070fe:	461a      	mov	r2, r3
 8007100:	4553      	cmp	r3, sl
 8007102:	db2b      	blt.n	800715c <__lshift+0x8c>
 8007104:	6920      	ldr	r0, [r4, #16]
 8007106:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800710a:	f104 0314 	add.w	r3, r4, #20
 800710e:	f016 021f 	ands.w	r2, r6, #31
 8007112:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007116:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800711a:	d025      	beq.n	8007168 <__lshift+0x98>
 800711c:	f1c2 0e20 	rsb	lr, r2, #32
 8007120:	2000      	movs	r0, #0
 8007122:	681e      	ldr	r6, [r3, #0]
 8007124:	468a      	mov	sl, r1
 8007126:	4096      	lsls	r6, r2
 8007128:	4330      	orrs	r0, r6
 800712a:	f84a 0b04 	str.w	r0, [sl], #4
 800712e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007132:	459c      	cmp	ip, r3
 8007134:	fa20 f00e 	lsr.w	r0, r0, lr
 8007138:	d814      	bhi.n	8007164 <__lshift+0x94>
 800713a:	6048      	str	r0, [r1, #4]
 800713c:	b108      	cbz	r0, 8007142 <__lshift+0x72>
 800713e:	f109 0502 	add.w	r5, r9, #2
 8007142:	3d01      	subs	r5, #1
 8007144:	4638      	mov	r0, r7
 8007146:	f8c8 5010 	str.w	r5, [r8, #16]
 800714a:	4621      	mov	r1, r4
 800714c:	f7ff fdf5 	bl	8006d3a <_Bfree>
 8007150:	4640      	mov	r0, r8
 8007152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007156:	3101      	adds	r1, #1
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	e7c7      	b.n	80070ec <__lshift+0x1c>
 800715c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007160:	3301      	adds	r3, #1
 8007162:	e7cd      	b.n	8007100 <__lshift+0x30>
 8007164:	4651      	mov	r1, sl
 8007166:	e7dc      	b.n	8007122 <__lshift+0x52>
 8007168:	3904      	subs	r1, #4
 800716a:	f853 2b04 	ldr.w	r2, [r3], #4
 800716e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007172:	459c      	cmp	ip, r3
 8007174:	d8f9      	bhi.n	800716a <__lshift+0x9a>
 8007176:	e7e4      	b.n	8007142 <__lshift+0x72>

08007178 <__mcmp>:
 8007178:	6903      	ldr	r3, [r0, #16]
 800717a:	690a      	ldr	r2, [r1, #16]
 800717c:	1a9b      	subs	r3, r3, r2
 800717e:	b530      	push	{r4, r5, lr}
 8007180:	d10c      	bne.n	800719c <__mcmp+0x24>
 8007182:	0092      	lsls	r2, r2, #2
 8007184:	3014      	adds	r0, #20
 8007186:	3114      	adds	r1, #20
 8007188:	1884      	adds	r4, r0, r2
 800718a:	4411      	add	r1, r2
 800718c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007190:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007194:	4295      	cmp	r5, r2
 8007196:	d003      	beq.n	80071a0 <__mcmp+0x28>
 8007198:	d305      	bcc.n	80071a6 <__mcmp+0x2e>
 800719a:	2301      	movs	r3, #1
 800719c:	4618      	mov	r0, r3
 800719e:	bd30      	pop	{r4, r5, pc}
 80071a0:	42a0      	cmp	r0, r4
 80071a2:	d3f3      	bcc.n	800718c <__mcmp+0x14>
 80071a4:	e7fa      	b.n	800719c <__mcmp+0x24>
 80071a6:	f04f 33ff 	mov.w	r3, #4294967295
 80071aa:	e7f7      	b.n	800719c <__mcmp+0x24>

080071ac <__mdiff>:
 80071ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b0:	460d      	mov	r5, r1
 80071b2:	4607      	mov	r7, r0
 80071b4:	4611      	mov	r1, r2
 80071b6:	4628      	mov	r0, r5
 80071b8:	4614      	mov	r4, r2
 80071ba:	f7ff ffdd 	bl	8007178 <__mcmp>
 80071be:	1e06      	subs	r6, r0, #0
 80071c0:	d108      	bne.n	80071d4 <__mdiff+0x28>
 80071c2:	4631      	mov	r1, r6
 80071c4:	4638      	mov	r0, r7
 80071c6:	f7ff fd84 	bl	8006cd2 <_Balloc>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80071d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d4:	bfa4      	itt	ge
 80071d6:	4623      	movge	r3, r4
 80071d8:	462c      	movge	r4, r5
 80071da:	4638      	mov	r0, r7
 80071dc:	6861      	ldr	r1, [r4, #4]
 80071de:	bfa6      	itte	ge
 80071e0:	461d      	movge	r5, r3
 80071e2:	2600      	movge	r6, #0
 80071e4:	2601      	movlt	r6, #1
 80071e6:	f7ff fd74 	bl	8006cd2 <_Balloc>
 80071ea:	692b      	ldr	r3, [r5, #16]
 80071ec:	60c6      	str	r6, [r0, #12]
 80071ee:	6926      	ldr	r6, [r4, #16]
 80071f0:	f105 0914 	add.w	r9, r5, #20
 80071f4:	f104 0214 	add.w	r2, r4, #20
 80071f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80071fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007200:	f100 0514 	add.w	r5, r0, #20
 8007204:	f04f 0e00 	mov.w	lr, #0
 8007208:	f852 ab04 	ldr.w	sl, [r2], #4
 800720c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007210:	fa1e f18a 	uxtah	r1, lr, sl
 8007214:	b2a3      	uxth	r3, r4
 8007216:	1ac9      	subs	r1, r1, r3
 8007218:	0c23      	lsrs	r3, r4, #16
 800721a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800721e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007222:	b289      	uxth	r1, r1
 8007224:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007228:	45c8      	cmp	r8, r9
 800722a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800722e:	4694      	mov	ip, r2
 8007230:	f845 3b04 	str.w	r3, [r5], #4
 8007234:	d8e8      	bhi.n	8007208 <__mdiff+0x5c>
 8007236:	45bc      	cmp	ip, r7
 8007238:	d304      	bcc.n	8007244 <__mdiff+0x98>
 800723a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800723e:	b183      	cbz	r3, 8007262 <__mdiff+0xb6>
 8007240:	6106      	str	r6, [r0, #16]
 8007242:	e7c5      	b.n	80071d0 <__mdiff+0x24>
 8007244:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007248:	fa1e f381 	uxtah	r3, lr, r1
 800724c:	141a      	asrs	r2, r3, #16
 800724e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007252:	b29b      	uxth	r3, r3
 8007254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007258:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800725c:	f845 3b04 	str.w	r3, [r5], #4
 8007260:	e7e9      	b.n	8007236 <__mdiff+0x8a>
 8007262:	3e01      	subs	r6, #1
 8007264:	e7e9      	b.n	800723a <__mdiff+0x8e>
	...

08007268 <__ulp>:
 8007268:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <__ulp+0x4c>)
 800726a:	ee10 2a90 	vmov	r2, s1
 800726e:	401a      	ands	r2, r3
 8007270:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007274:	2b00      	cmp	r3, #0
 8007276:	dd04      	ble.n	8007282 <__ulp+0x1a>
 8007278:	2000      	movs	r0, #0
 800727a:	4619      	mov	r1, r3
 800727c:	ec41 0b10 	vmov	d0, r0, r1
 8007280:	4770      	bx	lr
 8007282:	425b      	negs	r3, r3
 8007284:	151b      	asrs	r3, r3, #20
 8007286:	2b13      	cmp	r3, #19
 8007288:	f04f 0000 	mov.w	r0, #0
 800728c:	f04f 0100 	mov.w	r1, #0
 8007290:	dc04      	bgt.n	800729c <__ulp+0x34>
 8007292:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007296:	fa42 f103 	asr.w	r1, r2, r3
 800729a:	e7ef      	b.n	800727c <__ulp+0x14>
 800729c:	3b14      	subs	r3, #20
 800729e:	2b1e      	cmp	r3, #30
 80072a0:	f04f 0201 	mov.w	r2, #1
 80072a4:	bfda      	itte	le
 80072a6:	f1c3 031f 	rsble	r3, r3, #31
 80072aa:	fa02 f303 	lslle.w	r3, r2, r3
 80072ae:	4613      	movgt	r3, r2
 80072b0:	4618      	mov	r0, r3
 80072b2:	e7e3      	b.n	800727c <__ulp+0x14>
 80072b4:	7ff00000 	.word	0x7ff00000

080072b8 <__b2d>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	6905      	ldr	r5, [r0, #16]
 80072bc:	f100 0714 	add.w	r7, r0, #20
 80072c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80072c4:	1f2e      	subs	r6, r5, #4
 80072c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80072ca:	4620      	mov	r0, r4
 80072cc:	f7ff fdc5 	bl	8006e5a <__hi0bits>
 80072d0:	f1c0 0320 	rsb	r3, r0, #32
 80072d4:	280a      	cmp	r0, #10
 80072d6:	600b      	str	r3, [r1, #0]
 80072d8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007350 <__b2d+0x98>
 80072dc:	dc14      	bgt.n	8007308 <__b2d+0x50>
 80072de:	f1c0 0e0b 	rsb	lr, r0, #11
 80072e2:	fa24 f10e 	lsr.w	r1, r4, lr
 80072e6:	42b7      	cmp	r7, r6
 80072e8:	ea41 030c 	orr.w	r3, r1, ip
 80072ec:	bf34      	ite	cc
 80072ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80072f2:	2100      	movcs	r1, #0
 80072f4:	3015      	adds	r0, #21
 80072f6:	fa04 f000 	lsl.w	r0, r4, r0
 80072fa:	fa21 f10e 	lsr.w	r1, r1, lr
 80072fe:	ea40 0201 	orr.w	r2, r0, r1
 8007302:	ec43 2b10 	vmov	d0, r2, r3
 8007306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007308:	42b7      	cmp	r7, r6
 800730a:	bf3a      	itte	cc
 800730c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007310:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007314:	2100      	movcs	r1, #0
 8007316:	380b      	subs	r0, #11
 8007318:	d015      	beq.n	8007346 <__b2d+0x8e>
 800731a:	4084      	lsls	r4, r0
 800731c:	f1c0 0520 	rsb	r5, r0, #32
 8007320:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007324:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007328:	42be      	cmp	r6, r7
 800732a:	fa21 fc05 	lsr.w	ip, r1, r5
 800732e:	ea44 030c 	orr.w	r3, r4, ip
 8007332:	bf8c      	ite	hi
 8007334:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007338:	2400      	movls	r4, #0
 800733a:	fa01 f000 	lsl.w	r0, r1, r0
 800733e:	40ec      	lsrs	r4, r5
 8007340:	ea40 0204 	orr.w	r2, r0, r4
 8007344:	e7dd      	b.n	8007302 <__b2d+0x4a>
 8007346:	ea44 030c 	orr.w	r3, r4, ip
 800734a:	460a      	mov	r2, r1
 800734c:	e7d9      	b.n	8007302 <__b2d+0x4a>
 800734e:	bf00      	nop
 8007350:	3ff00000 	.word	0x3ff00000

08007354 <__d2b>:
 8007354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007358:	460e      	mov	r6, r1
 800735a:	2101      	movs	r1, #1
 800735c:	ec59 8b10 	vmov	r8, r9, d0
 8007360:	4615      	mov	r5, r2
 8007362:	f7ff fcb6 	bl	8006cd2 <_Balloc>
 8007366:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800736a:	4607      	mov	r7, r0
 800736c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007370:	bb34      	cbnz	r4, 80073c0 <__d2b+0x6c>
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	f1b8 0300 	subs.w	r3, r8, #0
 8007378:	d027      	beq.n	80073ca <__d2b+0x76>
 800737a:	a802      	add	r0, sp, #8
 800737c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007380:	f7ff fd8a 	bl	8006e98 <__lo0bits>
 8007384:	9900      	ldr	r1, [sp, #0]
 8007386:	b1f0      	cbz	r0, 80073c6 <__d2b+0x72>
 8007388:	9a01      	ldr	r2, [sp, #4]
 800738a:	f1c0 0320 	rsb	r3, r0, #32
 800738e:	fa02 f303 	lsl.w	r3, r2, r3
 8007392:	430b      	orrs	r3, r1
 8007394:	40c2      	lsrs	r2, r0
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	9201      	str	r2, [sp, #4]
 800739a:	9b01      	ldr	r3, [sp, #4]
 800739c:	61bb      	str	r3, [r7, #24]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bf14      	ite	ne
 80073a2:	2102      	movne	r1, #2
 80073a4:	2101      	moveq	r1, #1
 80073a6:	6139      	str	r1, [r7, #16]
 80073a8:	b1c4      	cbz	r4, 80073dc <__d2b+0x88>
 80073aa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80073ae:	4404      	add	r4, r0
 80073b0:	6034      	str	r4, [r6, #0]
 80073b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073b6:	6028      	str	r0, [r5, #0]
 80073b8:	4638      	mov	r0, r7
 80073ba:	b003      	add	sp, #12
 80073bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073c4:	e7d5      	b.n	8007372 <__d2b+0x1e>
 80073c6:	6179      	str	r1, [r7, #20]
 80073c8:	e7e7      	b.n	800739a <__d2b+0x46>
 80073ca:	a801      	add	r0, sp, #4
 80073cc:	f7ff fd64 	bl	8006e98 <__lo0bits>
 80073d0:	9b01      	ldr	r3, [sp, #4]
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	2101      	movs	r1, #1
 80073d6:	6139      	str	r1, [r7, #16]
 80073d8:	3020      	adds	r0, #32
 80073da:	e7e5      	b.n	80073a8 <__d2b+0x54>
 80073dc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80073e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073e4:	6030      	str	r0, [r6, #0]
 80073e6:	6918      	ldr	r0, [r3, #16]
 80073e8:	f7ff fd37 	bl	8006e5a <__hi0bits>
 80073ec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80073f0:	e7e1      	b.n	80073b6 <__d2b+0x62>

080073f2 <__ratio>:
 80073f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f6:	4688      	mov	r8, r1
 80073f8:	4669      	mov	r1, sp
 80073fa:	4681      	mov	r9, r0
 80073fc:	f7ff ff5c 	bl	80072b8 <__b2d>
 8007400:	a901      	add	r1, sp, #4
 8007402:	4640      	mov	r0, r8
 8007404:	ec57 6b10 	vmov	r6, r7, d0
 8007408:	f7ff ff56 	bl	80072b8 <__b2d>
 800740c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007410:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007414:	eba3 0c02 	sub.w	ip, r3, r2
 8007418:	e9dd 3200 	ldrd	r3, r2, [sp]
 800741c:	1a9b      	subs	r3, r3, r2
 800741e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007422:	ec5b ab10 	vmov	sl, fp, d0
 8007426:	2b00      	cmp	r3, #0
 8007428:	bfce      	itee	gt
 800742a:	463a      	movgt	r2, r7
 800742c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007430:	465a      	movle	r2, fp
 8007432:	4659      	mov	r1, fp
 8007434:	463d      	mov	r5, r7
 8007436:	bfd4      	ite	le
 8007438:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800743c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007440:	4630      	mov	r0, r6
 8007442:	ee10 2a10 	vmov	r2, s0
 8007446:	460b      	mov	r3, r1
 8007448:	4629      	mov	r1, r5
 800744a:	f7f9 f9ab 	bl	80007a4 <__aeabi_ddiv>
 800744e:	ec41 0b10 	vmov	d0, r0, r1
 8007452:	b003      	add	sp, #12
 8007454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007458 <__copybits>:
 8007458:	3901      	subs	r1, #1
 800745a:	b510      	push	{r4, lr}
 800745c:	1149      	asrs	r1, r1, #5
 800745e:	6914      	ldr	r4, [r2, #16]
 8007460:	3101      	adds	r1, #1
 8007462:	f102 0314 	add.w	r3, r2, #20
 8007466:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800746a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800746e:	42a3      	cmp	r3, r4
 8007470:	4602      	mov	r2, r0
 8007472:	d303      	bcc.n	800747c <__copybits+0x24>
 8007474:	2300      	movs	r3, #0
 8007476:	428a      	cmp	r2, r1
 8007478:	d305      	bcc.n	8007486 <__copybits+0x2e>
 800747a:	bd10      	pop	{r4, pc}
 800747c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007480:	f840 2b04 	str.w	r2, [r0], #4
 8007484:	e7f3      	b.n	800746e <__copybits+0x16>
 8007486:	f842 3b04 	str.w	r3, [r2], #4
 800748a:	e7f4      	b.n	8007476 <__copybits+0x1e>

0800748c <__any_on>:
 800748c:	f100 0214 	add.w	r2, r0, #20
 8007490:	6900      	ldr	r0, [r0, #16]
 8007492:	114b      	asrs	r3, r1, #5
 8007494:	4298      	cmp	r0, r3
 8007496:	b510      	push	{r4, lr}
 8007498:	db11      	blt.n	80074be <__any_on+0x32>
 800749a:	dd0a      	ble.n	80074b2 <__any_on+0x26>
 800749c:	f011 011f 	ands.w	r1, r1, #31
 80074a0:	d007      	beq.n	80074b2 <__any_on+0x26>
 80074a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80074a6:	fa24 f001 	lsr.w	r0, r4, r1
 80074aa:	fa00 f101 	lsl.w	r1, r0, r1
 80074ae:	428c      	cmp	r4, r1
 80074b0:	d10b      	bne.n	80074ca <__any_on+0x3e>
 80074b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d803      	bhi.n	80074c2 <__any_on+0x36>
 80074ba:	2000      	movs	r0, #0
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	4603      	mov	r3, r0
 80074c0:	e7f7      	b.n	80074b2 <__any_on+0x26>
 80074c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074c6:	2900      	cmp	r1, #0
 80074c8:	d0f5      	beq.n	80074b6 <__any_on+0x2a>
 80074ca:	2001      	movs	r0, #1
 80074cc:	e7f6      	b.n	80074bc <__any_on+0x30>

080074ce <_calloc_r>:
 80074ce:	b538      	push	{r3, r4, r5, lr}
 80074d0:	fb02 f401 	mul.w	r4, r2, r1
 80074d4:	4621      	mov	r1, r4
 80074d6:	f000 f809 	bl	80074ec <_malloc_r>
 80074da:	4605      	mov	r5, r0
 80074dc:	b118      	cbz	r0, 80074e6 <_calloc_r+0x18>
 80074de:	4622      	mov	r2, r4
 80074e0:	2100      	movs	r1, #0
 80074e2:	f7fe fa85 	bl	80059f0 <memset>
 80074e6:	4628      	mov	r0, r5
 80074e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080074ec <_malloc_r>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	1ccd      	adds	r5, r1, #3
 80074f0:	f025 0503 	bic.w	r5, r5, #3
 80074f4:	3508      	adds	r5, #8
 80074f6:	2d0c      	cmp	r5, #12
 80074f8:	bf38      	it	cc
 80074fa:	250c      	movcc	r5, #12
 80074fc:	2d00      	cmp	r5, #0
 80074fe:	4606      	mov	r6, r0
 8007500:	db01      	blt.n	8007506 <_malloc_r+0x1a>
 8007502:	42a9      	cmp	r1, r5
 8007504:	d903      	bls.n	800750e <_malloc_r+0x22>
 8007506:	230c      	movs	r3, #12
 8007508:	6033      	str	r3, [r6, #0]
 800750a:	2000      	movs	r0, #0
 800750c:	bd70      	pop	{r4, r5, r6, pc}
 800750e:	f000 f87f 	bl	8007610 <__malloc_lock>
 8007512:	4a21      	ldr	r2, [pc, #132]	; (8007598 <_malloc_r+0xac>)
 8007514:	6814      	ldr	r4, [r2, #0]
 8007516:	4621      	mov	r1, r4
 8007518:	b991      	cbnz	r1, 8007540 <_malloc_r+0x54>
 800751a:	4c20      	ldr	r4, [pc, #128]	; (800759c <_malloc_r+0xb0>)
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	b91b      	cbnz	r3, 8007528 <_malloc_r+0x3c>
 8007520:	4630      	mov	r0, r6
 8007522:	f000 f83d 	bl	80075a0 <_sbrk_r>
 8007526:	6020      	str	r0, [r4, #0]
 8007528:	4629      	mov	r1, r5
 800752a:	4630      	mov	r0, r6
 800752c:	f000 f838 	bl	80075a0 <_sbrk_r>
 8007530:	1c43      	adds	r3, r0, #1
 8007532:	d124      	bne.n	800757e <_malloc_r+0x92>
 8007534:	230c      	movs	r3, #12
 8007536:	6033      	str	r3, [r6, #0]
 8007538:	4630      	mov	r0, r6
 800753a:	f000 f86a 	bl	8007612 <__malloc_unlock>
 800753e:	e7e4      	b.n	800750a <_malloc_r+0x1e>
 8007540:	680b      	ldr	r3, [r1, #0]
 8007542:	1b5b      	subs	r3, r3, r5
 8007544:	d418      	bmi.n	8007578 <_malloc_r+0x8c>
 8007546:	2b0b      	cmp	r3, #11
 8007548:	d90f      	bls.n	800756a <_malloc_r+0x7e>
 800754a:	600b      	str	r3, [r1, #0]
 800754c:	50cd      	str	r5, [r1, r3]
 800754e:	18cc      	adds	r4, r1, r3
 8007550:	4630      	mov	r0, r6
 8007552:	f000 f85e 	bl	8007612 <__malloc_unlock>
 8007556:	f104 000b 	add.w	r0, r4, #11
 800755a:	1d23      	adds	r3, r4, #4
 800755c:	f020 0007 	bic.w	r0, r0, #7
 8007560:	1ac3      	subs	r3, r0, r3
 8007562:	d0d3      	beq.n	800750c <_malloc_r+0x20>
 8007564:	425a      	negs	r2, r3
 8007566:	50e2      	str	r2, [r4, r3]
 8007568:	e7d0      	b.n	800750c <_malloc_r+0x20>
 800756a:	428c      	cmp	r4, r1
 800756c:	684b      	ldr	r3, [r1, #4]
 800756e:	bf16      	itet	ne
 8007570:	6063      	strne	r3, [r4, #4]
 8007572:	6013      	streq	r3, [r2, #0]
 8007574:	460c      	movne	r4, r1
 8007576:	e7eb      	b.n	8007550 <_malloc_r+0x64>
 8007578:	460c      	mov	r4, r1
 800757a:	6849      	ldr	r1, [r1, #4]
 800757c:	e7cc      	b.n	8007518 <_malloc_r+0x2c>
 800757e:	1cc4      	adds	r4, r0, #3
 8007580:	f024 0403 	bic.w	r4, r4, #3
 8007584:	42a0      	cmp	r0, r4
 8007586:	d005      	beq.n	8007594 <_malloc_r+0xa8>
 8007588:	1a21      	subs	r1, r4, r0
 800758a:	4630      	mov	r0, r6
 800758c:	f000 f808 	bl	80075a0 <_sbrk_r>
 8007590:	3001      	adds	r0, #1
 8007592:	d0cf      	beq.n	8007534 <_malloc_r+0x48>
 8007594:	6025      	str	r5, [r4, #0]
 8007596:	e7db      	b.n	8007550 <_malloc_r+0x64>
 8007598:	20000268 	.word	0x20000268
 800759c:	2000026c 	.word	0x2000026c

080075a0 <_sbrk_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4c06      	ldr	r4, [pc, #24]	; (80075bc <_sbrk_r+0x1c>)
 80075a4:	2300      	movs	r3, #0
 80075a6:	4605      	mov	r5, r0
 80075a8:	4608      	mov	r0, r1
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	f7fa fe00 	bl	80021b0 <_sbrk>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_sbrk_r+0x1a>
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_sbrk_r+0x1a>
 80075b8:	602b      	str	r3, [r5, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	2001d8d8 	.word	0x2001d8d8

080075c0 <strncmp>:
 80075c0:	b510      	push	{r4, lr}
 80075c2:	b16a      	cbz	r2, 80075e0 <strncmp+0x20>
 80075c4:	3901      	subs	r1, #1
 80075c6:	1884      	adds	r4, r0, r2
 80075c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80075cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d103      	bne.n	80075dc <strncmp+0x1c>
 80075d4:	42a0      	cmp	r0, r4
 80075d6:	d001      	beq.n	80075dc <strncmp+0x1c>
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1f5      	bne.n	80075c8 <strncmp+0x8>
 80075dc:	1a98      	subs	r0, r3, r2
 80075de:	bd10      	pop	{r4, pc}
 80075e0:	4610      	mov	r0, r2
 80075e2:	e7fc      	b.n	80075de <strncmp+0x1e>

080075e4 <__ascii_wctomb>:
 80075e4:	b149      	cbz	r1, 80075fa <__ascii_wctomb+0x16>
 80075e6:	2aff      	cmp	r2, #255	; 0xff
 80075e8:	bf85      	ittet	hi
 80075ea:	238a      	movhi	r3, #138	; 0x8a
 80075ec:	6003      	strhi	r3, [r0, #0]
 80075ee:	700a      	strbls	r2, [r1, #0]
 80075f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80075f4:	bf98      	it	ls
 80075f6:	2001      	movls	r0, #1
 80075f8:	4770      	bx	lr
 80075fa:	4608      	mov	r0, r1
 80075fc:	4770      	bx	lr
	...

08007600 <malloc>:
 8007600:	4b02      	ldr	r3, [pc, #8]	; (800760c <malloc+0xc>)
 8007602:	4601      	mov	r1, r0
 8007604:	6818      	ldr	r0, [r3, #0]
 8007606:	f7ff bf71 	b.w	80074ec <_malloc_r>
 800760a:	bf00      	nop
 800760c:	20000014 	.word	0x20000014

08007610 <__malloc_lock>:
 8007610:	4770      	bx	lr

08007612 <__malloc_unlock>:
 8007612:	4770      	bx	lr

08007614 <_init>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	bf00      	nop
 8007618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761a:	bc08      	pop	{r3}
 800761c:	469e      	mov	lr, r3
 800761e:	4770      	bx	lr

08007620 <_fini>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	bf00      	nop
 8007624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007626:	bc08      	pop	{r3}
 8007628:	469e      	mov	lr, r3
 800762a:	4770      	bx	lr
