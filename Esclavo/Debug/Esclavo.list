
Esclavo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ff4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08009180  08009180  00019180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009448  08009448  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009448  08009448  00019448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009450  08009450  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009450  08009450  00019450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009454  08009454  00019454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200001e8  0800963c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  0800963c  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010be1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002329  00000000  00000000  00030df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  00033120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  00033d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003997  00000000  00000000  000348f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab3b  00000000  00000000  0003828f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9eec  00000000  00000000  00042dca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010ccb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e28  00000000  00000000  0010cd34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e8 	.word	0x200001e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009164 	.word	0x08009164

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001ec 	.word	0x200001ec
 80001c4:	08009164 	.word	0x08009164

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <identificador>:
 *
 * Created: 11/12/2019 18:47:43
 *  Author: Rodrigo Goñi
 */
#include "identificador.h"
int identificador(char *str, double *instrucciones, int cont) {
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b0c5      	sub	sp, #276	; 0x114
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	6018      	str	r0, [r3, #0]
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	6019      	str	r1, [r3, #0]
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	601a      	str	r2, [r3, #0]
	char tmp[50] = { 0 };
 8000ef6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000efa:	2232      	movs	r2, #50	; 0x32
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f005 fac4 	bl	800648c <memset>
	double vec[20];
	char *puntero;
	int i = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	int j = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	int k = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	int l = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	int cont1 = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	double numero;
	while (i < cont) {
 8000f22:	e240      	b.n	80013a6 <identificador+0x4c6>
		switch (str[i]) {
 8000f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f28:	f107 020c 	add.w	r2, r7, #12
 8000f2c:	6812      	ldr	r2, [r2, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	3b41      	subs	r3, #65	; 0x41
 8000f34:	2b31      	cmp	r3, #49	; 0x31
 8000f36:	f200 8231 	bhi.w	800139c <identificador+0x4bc>
 8000f3a:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <identificador+0x60>)
 8000f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f40:	08001061 	.word	0x08001061
 8000f44:	0800139d 	.word	0x0800139d
 8000f48:	0800139d 	.word	0x0800139d
 8000f4c:	080010b9 	.word	0x080010b9
 8000f50:	08001165 	.word	0x08001165
 8000f54:	0800139d 	.word	0x0800139d
 8000f58:	0800139d 	.word	0x0800139d
 8000f5c:	0800110f 	.word	0x0800110f
 8000f60:	08001211 	.word	0x08001211
 8000f64:	0800139d 	.word	0x0800139d
 8000f68:	0800139d 	.word	0x0800139d
 8000f6c:	0800139d 	.word	0x0800139d
 8000f70:	0800139d 	.word	0x0800139d
 8000f74:	0800139d 	.word	0x0800139d
 8000f78:	0800139d 	.word	0x0800139d
 8000f7c:	080011bb 	.word	0x080011bb
 8000f80:	0800139d 	.word	0x0800139d
 8000f84:	08001009 	.word	0x08001009
 8000f88:	0800139d 	.word	0x0800139d
 8000f8c:	0800139d 	.word	0x0800139d
 8000f90:	0800139d 	.word	0x0800139d
 8000f94:	0800139d 	.word	0x0800139d
 8000f98:	0800139d 	.word	0x0800139d
 8000f9c:	0800139d 	.word	0x0800139d
 8000fa0:	0800139d 	.word	0x0800139d
 8000fa4:	0800139d 	.word	0x0800139d
 8000fa8:	0800139d 	.word	0x0800139d
 8000fac:	0800139d 	.word	0x0800139d
 8000fb0:	0800139d 	.word	0x0800139d
 8000fb4:	0800139d 	.word	0x0800139d
 8000fb8:	0800139d 	.word	0x0800139d
 8000fbc:	0800139d 	.word	0x0800139d
 8000fc0:	08001061 	.word	0x08001061
 8000fc4:	0800139d 	.word	0x0800139d
 8000fc8:	0800139d 	.word	0x0800139d
 8000fcc:	080010b9 	.word	0x080010b9
 8000fd0:	08001165 	.word	0x08001165
 8000fd4:	0800139d 	.word	0x0800139d
 8000fd8:	0800139d 	.word	0x0800139d
 8000fdc:	0800110f 	.word	0x0800110f
 8000fe0:	08001211 	.word	0x08001211
 8000fe4:	0800139d 	.word	0x0800139d
 8000fe8:	0800139d 	.word	0x0800139d
 8000fec:	0800139d 	.word	0x0800139d
 8000ff0:	0800139d 	.word	0x0800139d
 8000ff4:	0800139d 	.word	0x0800139d
 8000ff8:	0800139d 	.word	0x0800139d
 8000ffc:	080011bb 	.word	0x080011bb
 8001000:	0800139d 	.word	0x0800139d
 8001004:	08001009 	.word	0x08001009
		case 'r':
		case 'R':
			if (str[i + 1] == '/' || str[i + 1] == ':') {
 8001008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800100c:	3301      	adds	r3, #1
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b2f      	cmp	r3, #47	; 0x2f
 800101a:	d009      	beq.n	8001030 <identificador+0x150>
 800101c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001020:	3301      	adds	r3, #1
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	6812      	ldr	r2, [r2, #0]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b3a      	cmp	r3, #58	; 0x3a
 800102e:	d111      	bne.n	8001054 <identificador+0x174>
				instrucciones[j] = Estados;
 8001030:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	f107 0208 	add.w	r2, r7, #8
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	441a      	add	r2, r3
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001046:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 800104a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800104e:	3301      	adds	r3, #1
 8001050:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 8001054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001058:	3301      	adds	r3, #1
 800105a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 800105e:	e1a2      	b.n	80013a6 <identificador+0x4c6>
		case 'a':
		case 'A':
			if (str[i + 1] == '/' || str[i + 1] == ':') {
 8001060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001064:	3301      	adds	r3, #1
 8001066:	f107 020c 	add.w	r2, r7, #12
 800106a:	6812      	ldr	r2, [r2, #0]
 800106c:	4413      	add	r3, r2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b2f      	cmp	r3, #47	; 0x2f
 8001072:	d009      	beq.n	8001088 <identificador+0x1a8>
 8001074:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001078:	3301      	adds	r3, #1
 800107a:	f107 020c 	add.w	r2, r7, #12
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b3a      	cmp	r3, #58	; 0x3a
 8001086:	d111      	bne.n	80010ac <identificador+0x1cc>
				instrucciones[j] = Activar;
 8001088:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	f107 0208 	add.w	r2, r7, #8
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	441a      	add	r2, r3
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	f04f 0400 	mov.w	r4, #0
 800109e:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 80010a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80010a6:	3301      	adds	r3, #1
 80010a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 80010ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010b0:	3301      	adds	r3, #1
 80010b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 80010b6:	e176      	b.n	80013a6 <identificador+0x4c6>
		case 'd':
		case 'D':
			if (str[i + 1] == '/' || str[i + 1] == ':') {
 80010b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010bc:	3301      	adds	r3, #1
 80010be:	f107 020c 	add.w	r2, r7, #12
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b2f      	cmp	r3, #47	; 0x2f
 80010ca:	d009      	beq.n	80010e0 <identificador+0x200>
 80010cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010d0:	3301      	adds	r3, #1
 80010d2:	f107 020c 	add.w	r2, r7, #12
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b3a      	cmp	r3, #58	; 0x3a
 80010de:	d110      	bne.n	8001102 <identificador+0x222>
				instrucciones[j] = Desactivar;
 80010e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	f107 0208 	add.w	r2, r7, #8
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	441a      	add	r2, r3
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	4cb4      	ldr	r4, [pc, #720]	; (80013c4 <identificador+0x4e4>)
 80010f4:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 80010f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80010fc:	3301      	adds	r3, #1
 80010fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 8001102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001106:	3301      	adds	r3, #1
 8001108:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 800110c:	e14b      	b.n	80013a6 <identificador+0x4c6>
		case 'h':
		case 'H':
			if (str[i + 1] == '/' || str[i + 1] == ':') {
 800110e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001112:	3301      	adds	r3, #1
 8001114:	f107 020c 	add.w	r2, r7, #12
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b2f      	cmp	r3, #47	; 0x2f
 8001120:	d009      	beq.n	8001136 <identificador+0x256>
 8001122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001126:	3301      	adds	r3, #1
 8001128:	f107 020c 	add.w	r2, r7, #12
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	4413      	add	r3, r2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b3a      	cmp	r3, #58	; 0x3a
 8001134:	d110      	bne.n	8001158 <identificador+0x278>
				instrucciones[j] = Modo_homing;
 8001136:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	f107 0208 	add.w	r2, r7, #8
 8001140:	6812      	ldr	r2, [r2, #0]
 8001142:	441a      	add	r2, r3
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	4c9f      	ldr	r4, [pc, #636]	; (80013c8 <identificador+0x4e8>)
 800114a:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 800114e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001152:	3301      	adds	r3, #1
 8001154:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 8001158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800115c:	3301      	adds	r3, #1
 800115e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8001162:	e120      	b.n	80013a6 <identificador+0x4c6>
		case 'e':
		case 'E':
			if (str[i + 1] == '/' || str[i + 1] == ':') {
 8001164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001168:	3301      	adds	r3, #1
 800116a:	f107 020c 	add.w	r2, r7, #12
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	4413      	add	r3, r2
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b2f      	cmp	r3, #47	; 0x2f
 8001176:	d009      	beq.n	800118c <identificador+0x2ac>
 8001178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800117c:	3301      	adds	r3, #1
 800117e:	f107 020c 	add.w	r2, r7, #12
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b3a      	cmp	r3, #58	; 0x3a
 800118a:	d110      	bne.n	80011ae <identificador+0x2ce>
				instrucciones[j] = error;
 800118c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	f107 0208 	add.w	r2, r7, #8
 8001196:	6812      	ldr	r2, [r2, #0]
 8001198:	441a      	add	r2, r3
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	4c8b      	ldr	r4, [pc, #556]	; (80013cc <identificador+0x4ec>)
 80011a0:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 80011a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011a8:	3301      	adds	r3, #1
 80011aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 80011ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011b2:	3301      	adds	r3, #1
 80011b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 80011b8:	e0f5      	b.n	80013a6 <identificador+0x4c6>
		case 'p':
		case 'P':
			if (str[i + 1] == '/' || str[i + 1] == ':') {
 80011ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011be:	3301      	adds	r3, #1
 80011c0:	f107 020c 	add.w	r2, r7, #12
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b2f      	cmp	r3, #47	; 0x2f
 80011cc:	d009      	beq.n	80011e2 <identificador+0x302>
 80011ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011d2:	3301      	adds	r3, #1
 80011d4:	f107 020c 	add.w	r2, r7, #12
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b3a      	cmp	r3, #58	; 0x3a
 80011e0:	d110      	bne.n	8001204 <identificador+0x324>
				instrucciones[j] = Preguntar;
 80011e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	f107 0208 	add.w	r2, r7, #8
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	441a      	add	r2, r3
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	4c76      	ldr	r4, [pc, #472]	; (80013d0 <identificador+0x4f0>)
 80011f6:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 80011fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011fe:	3301      	adds	r3, #1
 8001200:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
			i++;
 8001204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001208:	3301      	adds	r3, #1
 800120a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 800120e:	e0ca      	b.n	80013a6 <identificador+0x4c6>
		case 'i':
		case 'I':
			i++;
 8001210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001214:	3301      	adds	r3, #1
 8001216:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			while ((str[i] != '/') && (i < cont)) {
 800121a:	e070      	b.n	80012fe <identificador+0x41e>
				k = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
				if (str[i] == '_') {
 8001222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001226:	f107 020c 	add.w	r2, r7, #12
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	4413      	add	r3, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b5f      	cmp	r3, #95	; 0x5f
 8001232:	d11d      	bne.n	8001270 <identificador+0x390>
					i++;
 8001234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001238:	3301      	adds	r3, #1
 800123a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				}
				while ((str[i] != '_') && (i < cont) && (str[i] != '/')) {
 800123e:	e017      	b.n	8001270 <identificador+0x390>
					tmp[k] = str[i];
 8001240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001244:	f107 020c 	add.w	r2, r7, #12
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	4413      	add	r3, r2
 800124c:	7819      	ldrb	r1, [r3, #0]
 800124e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001256:	4413      	add	r3, r2
 8001258:	460a      	mov	r2, r1
 800125a:	701a      	strb	r2, [r3, #0]
					k++;
 800125c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001260:	3301      	adds	r3, #1
 8001262:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
					i++;
 8001266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800126a:	3301      	adds	r3, #1
 800126c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				while ((str[i] != '_') && (i < cont) && (str[i] != '/')) {
 8001270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001274:	f107 020c 	add.w	r2, r7, #12
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b5f      	cmp	r3, #95	; 0x5f
 8001280:	d00e      	beq.n	80012a0 <identificador+0x3c0>
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	da08      	bge.n	80012a0 <identificador+0x3c0>
 800128e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001292:	f107 020c 	add.w	r2, r7, #12
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b2f      	cmp	r3, #47	; 0x2f
 800129e:	d1cf      	bne.n	8001240 <identificador+0x360>
				}
				numero = strtod(tmp, &puntero);
 80012a0:	f107 0214 	add.w	r2, r7, #20
 80012a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f005 ff08 	bl	80070c0 <strtod>
 80012b0:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
				vec[cont1] = numero;
 80012b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012be:	4413      	add	r3, r2
 80012c0:	f1a3 02f8 	sub.w	r2, r3, #248	; 0xf8
 80012c4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80012c8:	e9c2 3400 	strd	r3, r4, [r2]
				cont1++;
 80012cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012d0:	3301      	adds	r3, #1
 80012d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
				for (int m = 0; m <= 50; m++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80012dc:	e00b      	b.n	80012f6 <identificador+0x416>
					tmp[m] = 0;
 80012de:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80012e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012e6:	4413      	add	r3, r2
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
				for (int m = 0; m <= 50; m++) {
 80012ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012f0:	3301      	adds	r3, #1
 80012f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80012f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012fa:	2b32      	cmp	r3, #50	; 0x32
 80012fc:	ddef      	ble.n	80012de <identificador+0x3fe>
			while ((str[i] != '/') && (i < cont)) {
 80012fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001302:	f107 020c 	add.w	r2, r7, #12
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b2f      	cmp	r3, #47	; 0x2f
 800130e:	d006      	beq.n	800131e <identificador+0x43e>
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	f6ff af7f 	blt.w	800121c <identificador+0x33c>
				}
			}
			if (cont1 == 3) {
 800131e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001322:	2b03      	cmp	r3, #3
 8001324:	d136      	bne.n	8001394 <identificador+0x4b4>
				instrucciones[j] = Modo_ir;
 8001326:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	f107 0208 	add.w	r2, r7, #8
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	441a      	add	r2, r3
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	4c26      	ldr	r4, [pc, #152]	; (80013d4 <identificador+0x4f4>)
 800133a:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 800133e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001342:	3301      	adds	r3, #1
 8001344:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				for (l = 0; l < cont1; l++) {
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800134e:	e01b      	b.n	8001388 <identificador+0x4a8>
					instrucciones[j] = vec[l];
 8001350:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	f107 0208 	add.w	r2, r7, #8
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	441a      	add	r2, r3
 800135e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001368:	440b      	add	r3, r1
 800136a:	3bf8      	subs	r3, #248	; 0xf8
 800136c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001370:	e9c2 3400 	strd	r3, r4, [r2]
					j++;
 8001374:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001378:	3301      	adds	r3, #1
 800137a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				for (l = 0; l < cont1; l++) {
 800137e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001382:	3301      	adds	r3, #1
 8001384:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001388:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800138c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001390:	429a      	cmp	r2, r3
 8001392:	dbdd      	blt.n	8001350 <identificador+0x470>
				}
			}
			cont1 = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
			break;
 800139a:	e004      	b.n	80013a6 <identificador+0x4c6>
		default:
			i++;
 800139c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013a0:	3301      	adds	r3, #1
 80013a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	while (i < cont) {
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	f6ff adb8 	blt.w	8000f24 <identificador+0x44>
		}
	}
	return j;
 80013b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd90      	pop	{r4, r7, pc}
 80013c2:	bf00      	nop
 80013c4:	3ff00000 	.word	0x3ff00000
 80013c8:	40080000 	.word	0x40080000
 80013cc:	40140000 	.word	0x40140000
 80013d0:	40180000 	.word	0x40180000
 80013d4:	40100000 	.word	0x40100000

080013d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b43      	ldr	r3, [pc, #268]	; (8001500 <MX_GPIO_Init+0x128>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a42      	ldr	r2, [pc, #264]	; (8001500 <MX_GPIO_Init+0x128>)
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b40      	ldr	r3, [pc, #256]	; (8001500 <MX_GPIO_Init+0x128>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b3c      	ldr	r3, [pc, #240]	; (8001500 <MX_GPIO_Init+0x128>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a3b      	ldr	r2, [pc, #236]	; (8001500 <MX_GPIO_Init+0x128>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b39      	ldr	r3, [pc, #228]	; (8001500 <MX_GPIO_Init+0x128>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b35      	ldr	r3, [pc, #212]	; (8001500 <MX_GPIO_Init+0x128>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a34      	ldr	r2, [pc, #208]	; (8001500 <MX_GPIO_Init+0x128>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b32      	ldr	r3, [pc, #200]	; (8001500 <MX_GPIO_Init+0x128>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <MX_GPIO_Init+0x128>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a2d      	ldr	r2, [pc, #180]	; (8001500 <MX_GPIO_Init+0x128>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <MX_GPIO_Init+0x128>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, dir2_Pin|L298_ENA1_Pin|L298_ENA2_Pin|dir1_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	211e      	movs	r1, #30
 8001462:	4828      	ldr	r0, [pc, #160]	; (8001504 <MX_GPIO_Init+0x12c>)
 8001464:	f002 f968 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, out2_Pin|int1_M_cpt_t_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800146e:	4826      	ldr	r0, [pc, #152]	; (8001508 <MX_GPIO_Init+0x130>)
 8001470:	f002 f962 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = dir2_Pin|L298_ENA1_Pin|L298_ENA2_Pin|dir1_Pin;
 8001474:	231e      	movs	r3, #30
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	481e      	ldr	r0, [pc, #120]	; (8001504 <MX_GPIO_Init+0x12c>)
 800148c:	f001 ffa2 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = out2_Pin|int1_M_cpt_t_Pin;
 8001490:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4817      	ldr	r0, [pc, #92]	; (8001508 <MX_GPIO_Init+0x130>)
 80014aa:	f001 ff93 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = h1_inter_Pin|h2_inter_Pin|pin_error_Pin;
 80014ae:	230e      	movs	r3, #14
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <MX_GPIO_Init+0x134>)
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4813      	ldr	r0, [pc, #76]	; (8001510 <MX_GPIO_Init+0x138>)
 80014c2:	f001 ff87 	bl	80033d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2101      	movs	r1, #1
 80014ca:	2007      	movs	r0, #7
 80014cc:	f001 ff1b 	bl	8003306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014d0:	2007      	movs	r0, #7
 80014d2:	f001 ff34 	bl	800333e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2101      	movs	r1, #1
 80014da:	2008      	movs	r0, #8
 80014dc:	f001 ff13 	bl	8003306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80014e0:	2008      	movs	r0, #8
 80014e2:	f001 ff2c 	bl	800333e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2101      	movs	r1, #1
 80014ea:	2009      	movs	r0, #9
 80014ec:	f001 ff0b 	bl	8003306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014f0:	2009      	movs	r0, #9
 80014f2:	f001 ff24 	bl	800333e <HAL_NVIC_EnableIRQ>

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40021000 	.word	0x40021000
 8001508:	40020800 	.word	0x40020800
 800150c:	10110000 	.word	0x10110000
 8001510:	40020c00 	.word	0x40020c00
 8001514:	00000000 	.word	0x00000000

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800151c:	b0ed      	sub	sp, #436	; 0x1b4
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Declarar variables
	int cant = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	double instrucciones[50] = { };
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	4618      	mov	r0, r3
 800152c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001530:	461a      	mov	r2, r3
 8001532:	2100      	movs	r1, #0
 8001534:	f004 ffaa 	bl	800648c <memset>

	int comando;
	float Vmin;

	// init variables
	m1.p_ini = 0;
 8001538:	4bbd      	ldr	r3, [pc, #756]	; (8001830 <main+0x318>)
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
	PWM_config.OCMode = TIM_OCMODE_PWM1;
 8001540:	4bbc      	ldr	r3, [pc, #752]	; (8001834 <main+0x31c>)
 8001542:	2260      	movs	r2, #96	; 0x60
 8001544:	601a      	str	r2, [r3, #0]
	PWM_config.Pulse = 0;
 8001546:	4bbb      	ldr	r3, [pc, #748]	; (8001834 <main+0x31c>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
	PWM_config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800154c:	4bb9      	ldr	r3, [pc, #740]	; (8001834 <main+0x31c>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
	PWM_config.OCFastMode = TIM_OCFAST_DISABLE;
 8001552:	4bb8      	ldr	r3, [pc, #736]	; (8001834 <main+0x31c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
	flag_activacion = 0;
 8001558:	4bb7      	ldr	r3, [pc, #732]	; (8001838 <main+0x320>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
	flag_homing = 0;
 800155e:	4bb7      	ldr	r3, [pc, #732]	; (800183c <main+0x324>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
	m1.kp = 280;
 8001564:	4bb2      	ldr	r3, [pc, #712]	; (8001830 <main+0x318>)
 8001566:	4ab6      	ldr	r2, [pc, #728]	; (8001840 <main+0x328>)
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
	m1.kd = m1.kp / 3896.96;
 800156a:	4bb1      	ldr	r3, [pc, #708]	; (8001830 <main+0x318>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ff96 	bl	80004a0 <__aeabi_f2d>
 8001574:	a3a6      	add	r3, pc, #664	; (adr r3, 8001810 <main+0x2f8>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7ff f913 	bl	80007a4 <__aeabi_ddiv>
 800157e:	4603      	mov	r3, r0
 8001580:	460c      	mov	r4, r1
 8001582:	4618      	mov	r0, r3
 8001584:	4621      	mov	r1, r4
 8001586:	f7ff fadb 	bl	8000b40 <__aeabi_d2f>
 800158a:	4602      	mov	r2, r0
 800158c:	4ba8      	ldr	r3, [pc, #672]	; (8001830 <main+0x318>)
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
	m1.ki = m1.kp * 4.818;
 8001590:	4ba7      	ldr	r3, [pc, #668]	; (8001830 <main+0x318>)
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ff83 	bl	80004a0 <__aeabi_f2d>
 800159a:	a39f      	add	r3, pc, #636	; (adr r3, 8001818 <main+0x300>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7fe ffd6 	bl	8000550 <__aeabi_dmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	460c      	mov	r4, r1
 80015a8:	4618      	mov	r0, r3
 80015aa:	4621      	mov	r1, r4
 80015ac:	f7ff fac8 	bl	8000b40 <__aeabi_d2f>
 80015b0:	4602      	mov	r2, r0
 80015b2:	4b9f      	ldr	r3, [pc, #636]	; (8001830 <main+0x318>)
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
	m2.modo = M_listo;
 80015b6:	4ba3      	ldr	r3, [pc, #652]	; (8001844 <main+0x32c>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m1.modo = M_listo;
 80015be:	4b9c      	ldr	r3, [pc, #624]	; (8001830 <main+0x318>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c6:	f001 fd0d 	bl	8002fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ca:	f000 fbf7 	bl	8001dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ce:	f7ff ff03 	bl	80013d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80015d2:	f001 fa5d 	bl	8002a90 <MX_TIM1_Init>
  MX_TIM3_Init();
 80015d6:	f001 fab3 	bl	8002b40 <MX_TIM3_Init>
  MX_TIM9_Init();
 80015da:	f001 fb05 	bl	8002be8 <MX_TIM9_Init>
  MX_TIM12_Init();
 80015de:	f001 fb63 	bl	8002ca8 <MX_TIM12_Init>
  MX_SPI2_Init();
 80015e2:	f001 f8e3 	bl	80027ac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 80015e6:	2201      	movs	r2, #1
 80015e8:	4997      	ldr	r1, [pc, #604]	; (8001848 <main+0x330>)
 80015ea:	4898      	ldr	r0, [pc, #608]	; (800184c <main+0x334>)
 80015ec:	f002 fdea 	bl	80041c4 <HAL_SPI_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//Generar comando
		if (flag_mensaje_completo == 0) {
 80015f0:	4b97      	ldr	r3, [pc, #604]	; (8001850 <main+0x338>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10f      	bne.n	8001618 <main+0x100>
			cant = identificador(str, instrucciones, contador_instrucciones);
 80015f8:	4b96      	ldr	r3, [pc, #600]	; (8001854 <main+0x33c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4619      	mov	r1, r3
 8001602:	4895      	ldr	r0, [pc, #596]	; (8001858 <main+0x340>)
 8001604:	f7ff fc6c 	bl	8000ee0 <identificador>
 8001608:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
			flag_mensaje_completo = 1;
 800160c:	4b90      	ldr	r3, [pc, #576]	; (8001850 <main+0x338>)
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
			contador_instrucciones = 0;
 8001612:	4b90      	ldr	r3, [pc, #576]	; (8001854 <main+0x33c>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
		}
		// identificar comandos
		if (flag_mensaje_completo == 1) {
 8001618:	4b8d      	ldr	r3, [pc, #564]	; (8001850 <main+0x338>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	f040 8265 	bne.w	8001aec <main+0x5d4>
			for (int i = 0; i < cant; i++) {
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001628:	e253      	b.n	8001ad2 <main+0x5ba>
				comando = (int) instrucciones[i];
 800162a:	f107 0210 	add.w	r2, r7, #16
 800162e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4413      	add	r3, r2
 8001636:	e9d3 3400 	ldrd	r3, r4, [r3]
 800163a:	4618      	mov	r0, r3
 800163c:	4621      	mov	r1, r4
 800163e:	f7ff fa37 	bl	8000ab0 <__aeabi_d2iz>
 8001642:	4603      	mov	r3, r0
 8001644:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
				switch (comando) {
 8001648:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800164c:	2b06      	cmp	r3, #6
 800164e:	f200 823b 	bhi.w	8001ac8 <main+0x5b0>
 8001652:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <main+0x140>)
 8001654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001658:	080016c9 	.word	0x080016c9
 800165c:	08001675 	.word	0x08001675
 8001660:	08001ac9 	.word	0x08001ac9
 8001664:	080016f9 	.word	0x080016f9
 8001668:	08001711 	.word	0x08001711
 800166c:	080019d5 	.word	0x080019d5
 8001670:	080019ef 	.word	0x080019ef
				case Desactivar:
					//if (flag_activacion) {
						HAL_TIM_Base_Stop_IT(&htim9);
 8001674:	4879      	ldr	r0, [pc, #484]	; (800185c <main+0x344>)
 8001676:	f003 fdf6 	bl	8005266 <HAL_TIM_Base_Stop_IT>
						HAL_GPIO_WritePin(L298_ENA1_GPIO_Port, L298_ENA1_Pin,
 800167a:	2200      	movs	r2, #0
 800167c:	2108      	movs	r1, #8
 800167e:	4878      	ldr	r0, [pc, #480]	; (8001860 <main+0x348>)
 8001680:	f002 f85a 	bl	8003738 <HAL_GPIO_WritePin>
								GPIO_PIN_RESET);
						PWM_config.Pulse = 0;
 8001684:	4b6b      	ldr	r3, [pc, #428]	; (8001834 <main+0x31c>)
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
						HAL_TIM_PWM_ConfigChannel(&htim12, &PWM_config,
 800168a:	2200      	movs	r2, #0
 800168c:	4969      	ldr	r1, [pc, #420]	; (8001834 <main+0x31c>)
 800168e:	4875      	ldr	r0, [pc, #468]	; (8001864 <main+0x34c>)
 8001690:	f004 f98c 	bl	80059ac <HAL_TIM_PWM_ConfigChannel>
						TIM_CHANNEL_1);
						HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin,
 8001694:	2200      	movs	r2, #0
 8001696:	2102      	movs	r1, #2
 8001698:	4871      	ldr	r0, [pc, #452]	; (8001860 <main+0x348>)
 800169a:	f002 f84d 	bl	8003738 <HAL_GPIO_WritePin>
								GPIO_PIN_RESET);
						HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_ALL);
 800169e:	213c      	movs	r1, #60	; 0x3c
 80016a0:	4870      	ldr	r0, [pc, #448]	; (8001864 <main+0x34c>)
 80016a2:	f003 feb3 	bl	800540c <HAL_TIM_PWM_Stop>
						HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 80016a6:	213c      	movs	r1, #60	; 0x3c
 80016a8:	486f      	ldr	r0, [pc, #444]	; (8001868 <main+0x350>)
 80016aa:	f003 ffd0 	bl	800564e <HAL_TIM_Encoder_Stop>
						estado = Desactivado;
 80016ae:	4b6f      	ldr	r3, [pc, #444]	; (800186c <main+0x354>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
						flag_activacion = 0;
 80016b4:	4b60      	ldr	r3, [pc, #384]	; (8001838 <main+0x320>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
						flag_homing = 0;
 80016ba:	4b60      	ldr	r3, [pc, #384]	; (800183c <main+0x324>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
						flag_cambio = 1;
 80016c0:	4b6b      	ldr	r3, [pc, #428]	; (8001870 <main+0x358>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]

					//} else {
					//}
					break;
 80016c6:	e1ff      	b.n	8001ac8 <main+0x5b0>
				case Activar:
					if (!flag_activacion) {
 80016c8:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <main+0x320>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f040 81f6 	bne.w	8001abe <main+0x5a6>
						estado = Activado;
 80016d2:	4b66      	ldr	r3, [pc, #408]	; (800186c <main+0x354>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
						flag_activacion = 1;
 80016d8:	4b57      	ldr	r3, [pc, #348]	; (8001838 <main+0x320>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
						flag_cambio = 1;
 80016de:	4b64      	ldr	r3, [pc, #400]	; (8001870 <main+0x358>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(L298_ENA1_GPIO_Port, L298_ENA1_Pin,
 80016e4:	2201      	movs	r2, #1
 80016e6:	2108      	movs	r1, #8
 80016e8:	485d      	ldr	r0, [pc, #372]	; (8001860 <main+0x348>)
 80016ea:	f002 f825 	bl	8003738 <HAL_GPIO_WritePin>
								GPIO_PIN_SET);
						HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80016ee:	213c      	movs	r1, #60	; 0x3c
 80016f0:	485d      	ldr	r0, [pc, #372]	; (8001868 <main+0x350>)
 80016f2:	f003 ff75 	bl	80055e0 <HAL_TIM_Encoder_Start>
					} else {
					}
					break;
 80016f6:	e1e2      	b.n	8001abe <main+0x5a6>
				case Modo_homing:
					if (flag_activacion) {
 80016f8:	4b4f      	ldr	r3, [pc, #316]	; (8001838 <main+0x320>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 81e0 	beq.w	8001ac2 <main+0x5aa>
						flag_cambio = 1;
 8001702:	4b5b      	ldr	r3, [pc, #364]	; (8001870 <main+0x358>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
						estado = Modo_Homing;
 8001708:	4b58      	ldr	r3, [pc, #352]	; (800186c <main+0x354>)
 800170a:	2202      	movs	r2, #2
 800170c:	701a      	strb	r2, [r3, #0]
					}
					break;
 800170e:	e1d8      	b.n	8001ac2 <main+0x5aa>
				case Modo_ir:
					if (flag_activacion && flag_homing) {
 8001710:	4b49      	ldr	r3, [pc, #292]	; (8001838 <main+0x320>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 81d6 	beq.w	8001ac6 <main+0x5ae>
 800171a:	4b48      	ldr	r3, [pc, #288]	; (800183c <main+0x324>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 81d1 	beq.w	8001ac6 <main+0x5ae>
						cont_samp = 0;
 8001724:	4b53      	ldr	r3, [pc, #332]	; (8001874 <main+0x35c>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
						m1.p_fin = instrucciones[i + 1];
 800172a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800172e:	3301      	adds	r3, #1
 8001730:	f107 0210 	add.w	r2, r7, #16
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	e9d3 3400 	ldrd	r3, r4, [r3]
 800173c:	4618      	mov	r0, r3
 800173e:	4621      	mov	r1, r4
 8001740:	f7ff f9fe 	bl	8000b40 <__aeabi_d2f>
 8001744:	4602      	mov	r2, r0
 8001746:	4b3a      	ldr	r3, [pc, #232]	; (8001830 <main+0x318>)
 8001748:	609a      	str	r2, [r3, #8]
						error_pos = (m1.p_fin - m1.p_ini) / m1.p_ini * 100;
 800174a:	4b39      	ldr	r3, [pc, #228]	; (8001830 <main+0x318>)
 800174c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001750:	4b37      	ldr	r3, [pc, #220]	; (8001830 <main+0x318>)
 8001752:	edd3 7a03 	vldr	s15, [r3, #12]
 8001756:	ee77 6a67 	vsub.f32	s13, s14, s15
 800175a:	4b35      	ldr	r3, [pc, #212]	; (8001830 <main+0x318>)
 800175c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001764:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001878 <main+0x360>
 8001768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176c:	ee17 0a90 	vmov	r0, s15
 8001770:	f7fe fe96 	bl	80004a0 <__aeabi_f2d>
 8001774:	4603      	mov	r3, r0
 8001776:	460c      	mov	r4, r1
 8001778:	4a40      	ldr	r2, [pc, #256]	; (800187c <main+0x364>)
 800177a:	e9c2 3400 	strd	r3, r4, [r2]
						if (fabs(error_pos) > 0.001) {
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <main+0x364>)
 8001780:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001784:	461d      	mov	r5, r3
 8001786:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 800178a:	a325      	add	r3, pc, #148	; (adr r3, 8001820 <main+0x308>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	4628      	mov	r0, r5
 8001792:	4631      	mov	r1, r6
 8001794:	f7ff f96c 	bl	8000a70 <__aeabi_dcmpgt>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 8111 	beq.w	80019c2 <main+0x4aa>
							m1.t_tot = instrucciones[i + 3];
 80017a0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017a4:	3303      	adds	r3, #3
 80017a6:	f107 0210 	add.w	r2, r7, #16
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017b2:	4618      	mov	r0, r3
 80017b4:	4621      	mov	r1, r4
 80017b6:	f7ff f9c3 	bl	8000b40 <__aeabi_d2f>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <main+0x318>)
 80017be:	61da      	str	r2, [r3, #28]
							Vmin = fabs(m1.p_fin - m1.p_ini) / m1.t_tot;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <main+0x318>)
 80017c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <main+0x318>)
 80017c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80017cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d0:	eef0 6ae7 	vabs.f32	s13, s15
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <main+0x318>)
 80017d6:	ed93 7a07 	vldr	s14, [r3, #28]
 80017da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017de:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0
							if (VEL_MAX < Vmin) {
 80017e2:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 80017e6:	f7fe fe5b 	bl	80004a0 <__aeabi_f2d>
 80017ea:	a30f      	add	r3, pc, #60	; (adr r3, 8001828 <main+0x310>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7ff f93e 	bl	8000a70 <__aeabi_dcmpgt>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d042      	beq.n	8001880 <main+0x368>
								estado = Error;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <main+0x354>)
 80017fc:	2204      	movs	r2, #4
 80017fe:	701a      	strb	r2, [r3, #0]
								i += 3;
 8001800:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001804:	3303      	adds	r3, #3
 8001806:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
								break;
 800180a:	e15d      	b.n	8001ac8 <main+0x5b0>
 800180c:	f3af 8000 	nop.w
 8001810:	851eb852 	.word	0x851eb852
 8001814:	40ae71eb 	.word	0x40ae71eb
 8001818:	cac08312 	.word	0xcac08312
 800181c:	401345a1 	.word	0x401345a1
 8001820:	d2f1a9fc 	.word	0xd2f1a9fc
 8001824:	3f50624d 	.word	0x3f50624d
 8001828:	f9db22d1 	.word	0xf9db22d1
 800182c:	40278a7e 	.word	0x40278a7e
 8001830:	200002d4 	.word	0x200002d4
 8001834:	20000268 	.word	0x20000268
 8001838:	20000207 	.word	0x20000207
 800183c:	20000208 	.word	0x20000208
 8001840:	438c0000 	.word	0x438c0000
 8001844:	20000294 	.word	0x20000294
 8001848:	200002d0 	.word	0x200002d0
 800184c:	20000310 	.word	0x20000310
 8001850:	20000001 	.word	0x20000001
 8001854:	20000218 	.word	0x20000218
 8001858:	2000021c 	.word	0x2000021c
 800185c:	200003e8 	.word	0x200003e8
 8001860:	40021000 	.word	0x40021000
 8001864:	20000428 	.word	0x20000428
 8001868:	200003a8 	.word	0x200003a8
 800186c:	20000000 	.word	0x20000000
 8001870:	20000205 	.word	0x20000205
 8001874:	2000020c 	.word	0x2000020c
 8001878:	42c80000 	.word	0x42c80000
 800187c:	20000260 	.word	0x20000260
								//No puede realizarse
								__NOP();

							} else if (VEL_MAX > (2 * Vmin)) {
 8001880:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 8001884:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001888:	ee17 0a90 	vmov	r0, s15
 800188c:	f7fe fe08 	bl	80004a0 <__aeabi_f2d>
 8001890:	a3ab      	add	r3, pc, #684	; (adr r3, 8001b40 <main+0x628>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7ff f8cd 	bl	8000a34 <__aeabi_dcmplt>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d009      	beq.n	80018b4 <main+0x39c>
								m1.v_cru = 1.5 * Vmin;
 80018a0:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 80018a4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80018a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ac:	4ba8      	ldr	r3, [pc, #672]	; (8001b50 <main+0x638>)
 80018ae:	edc3 7a04 	vstr	s15, [r3, #16]
 80018b2:	e01e      	b.n	80018f2 <main+0x3da>
							} else if (VEL_MAX > Vmin
 80018b4:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 80018b8:	f7fe fdf2 	bl	80004a0 <__aeabi_f2d>
 80018bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8001b40 <main+0x628>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7ff f8b7 	bl	8000a34 <__aeabi_dcmplt>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d012      	beq.n	80018f2 <main+0x3da>
									&& VEL_MAX <= (2 * Vmin)) {
 80018cc:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 80018d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018d4:	ee17 0a90 	vmov	r0, s15
 80018d8:	f7fe fde2 	bl	80004a0 <__aeabi_f2d>
 80018dc:	a398      	add	r3, pc, #608	; (adr r3, 8001b40 <main+0x628>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7ff f8bb 	bl	8000a5c <__aeabi_dcmpge>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <main+0x3da>
								m1.v_cru = VEL_MAX;
 80018ec:	4b98      	ldr	r3, [pc, #608]	; (8001b50 <main+0x638>)
 80018ee:	4a99      	ldr	r2, [pc, #612]	; (8001b54 <main+0x63c>)
 80018f0:	611a      	str	r2, [r3, #16]
							}
							if ((m1.p_fin - m1.p_ini) < 0) {
 80018f2:	4b97      	ldr	r3, [pc, #604]	; (8001b50 <main+0x638>)
 80018f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80018f8:	4b95      	ldr	r3, [pc, #596]	; (8001b50 <main+0x638>)
 80018fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80018fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001902:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	d507      	bpl.n	800191c <main+0x404>
								m1.v_cru *= -1;
 800190c:	4b90      	ldr	r3, [pc, #576]	; (8001b50 <main+0x638>)
 800190e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001912:	eef1 7a67 	vneg.f32	s15, s15
 8001916:	4b8e      	ldr	r3, [pc, #568]	; (8001b50 <main+0x638>)
 8001918:	edc3 7a04 	vstr	s15, [r3, #16]
							}
							m1.tau = (m1.p_ini - m1.p_fin + m1.v_cru * m1.t_tot)
 800191c:	4b8c      	ldr	r3, [pc, #560]	; (8001b50 <main+0x638>)
 800191e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001922:	4b8b      	ldr	r3, [pc, #556]	; (8001b50 <main+0x638>)
 8001924:	edd3 7a02 	vldr	s15, [r3, #8]
 8001928:	ee37 7a67 	vsub.f32	s14, s14, s15
 800192c:	4b88      	ldr	r3, [pc, #544]	; (8001b50 <main+0x638>)
 800192e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001932:	4b87      	ldr	r3, [pc, #540]	; (8001b50 <main+0x638>)
 8001934:	edd3 7a07 	vldr	s15, [r3, #28]
 8001938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193c:	ee77 6a27 	vadd.f32	s13, s14, s15
									/ m1.v_cru;
 8001940:	4b83      	ldr	r3, [pc, #524]	; (8001b50 <main+0x638>)
 8001942:	ed93 7a04 	vldr	s14, [r3, #16]
 8001946:	eec6 7a87 	vdiv.f32	s15, s13, s14
							m1.tau = (m1.p_ini - m1.p_fin + m1.v_cru * m1.t_tot)
 800194a:	4b81      	ldr	r3, [pc, #516]	; (8001b50 <main+0x638>)
 800194c:	edc3 7a05 	vstr	s15, [r3, #20]
							m1.a_nes =
									pow(m1.v_cru, 2)
 8001950:	4b7f      	ldr	r3, [pc, #508]	; (8001b50 <main+0x638>)
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fda3 	bl	80004a0 <__aeabi_f2d>
 800195a:	4603      	mov	r3, r0
 800195c:	460c      	mov	r4, r1
 800195e:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8001b48 <main+0x630>
 8001962:	ec44 3b10 	vmov	d0, r3, r4
 8001966:	f006 fba5 	bl	80080b4 <pow>
 800196a:	ec59 8b10 	vmov	r8, r9, d0
											/ (m1.p_ini - m1.p_fin
 800196e:	4b78      	ldr	r3, [pc, #480]	; (8001b50 <main+0x638>)
 8001970:	ed93 7a03 	vldr	s14, [r3, #12]
 8001974:	4b76      	ldr	r3, [pc, #472]	; (8001b50 <main+0x638>)
 8001976:	edd3 7a02 	vldr	s15, [r3, #8]
 800197a:	ee37 7a67 	vsub.f32	s14, s14, s15
													+ m1.v_cru * m1.t_tot);
 800197e:	4b74      	ldr	r3, [pc, #464]	; (8001b50 <main+0x638>)
 8001980:	edd3 6a04 	vldr	s13, [r3, #16]
 8001984:	4b72      	ldr	r3, [pc, #456]	; (8001b50 <main+0x638>)
 8001986:	edd3 7a07 	vldr	s15, [r3, #28]
 800198a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	ee17 0a90 	vmov	r0, s15
 8001996:	f7fe fd83 	bl	80004a0 <__aeabi_f2d>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
											/ (m1.p_ini - m1.p_fin
 800199e:	461a      	mov	r2, r3
 80019a0:	4623      	mov	r3, r4
 80019a2:	4640      	mov	r0, r8
 80019a4:	4649      	mov	r1, r9
 80019a6:	f7fe fefd 	bl	80007a4 <__aeabi_ddiv>
 80019aa:	4603      	mov	r3, r0
 80019ac:	460c      	mov	r4, r1
 80019ae:	4618      	mov	r0, r3
 80019b0:	4621      	mov	r1, r4
 80019b2:	f7ff f8c5 	bl	8000b40 <__aeabi_d2f>
 80019b6:	4602      	mov	r2, r0
							m1.a_nes =
 80019b8:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <main+0x638>)
 80019ba:	619a      	str	r2, [r3, #24]

							flag_cambio = 1;
 80019bc:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <main+0x640>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
						}
						estado = Modo_Normal;
 80019c2:	4b66      	ldr	r3, [pc, #408]	; (8001b5c <main+0x644>)
 80019c4:	2203      	movs	r2, #3
 80019c6:	701a      	strb	r2, [r3, #0]
						i += 3;
 80019c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80019cc:	3303      	adds	r3, #3
 80019ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					}
					break;
 80019d2:	e078      	b.n	8001ac6 <main+0x5ae>
				case error:
					//apagar todo
					flag_homing = 0;
 80019d4:	4b62      	ldr	r3, [pc, #392]	; (8001b60 <main+0x648>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
					estado = Error;
 80019da:	4b60      	ldr	r3, [pc, #384]	; (8001b5c <main+0x644>)
 80019dc:	2204      	movs	r2, #4
 80019de:	701a      	strb	r2, [r3, #0]
					flag_activacion = 0;
 80019e0:	4b60      	ldr	r3, [pc, #384]	; (8001b64 <main+0x64c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
					flag_cambio = 1;
 80019e6:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <main+0x640>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
					break;
 80019ec:	e06c      	b.n	8001ac8 <main+0x5b0>
				case Preguntar:
					HAL_SPI_Abort_IT(&hspi2);
 80019ee:	485e      	ldr	r0, [pc, #376]	; (8001b68 <main+0x650>)
 80019f0:	f002 fd12 	bl	8004418 <HAL_SPI_Abort_IT>
					//Revisa el estado, interuumpe y guarada el estado en el puerto SP
					if (estado == Desactivado) {
 80019f4:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <main+0x644>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d108      	bne.n	8001a0e <main+0x4f6>
						pTxData = 'D';
 80019fc:	4b5b      	ldr	r3, [pc, #364]	; (8001b6c <main+0x654>)
 80019fe:	2244      	movs	r2, #68	; 0x44
 8001a00:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001a02:	2201      	movs	r2, #1
 8001a04:	4959      	ldr	r1, [pc, #356]	; (8001b6c <main+0x654>)
 8001a06:	4858      	ldr	r0, [pc, #352]	; (8001b68 <main+0x650>)
 8001a08:	f002 fb5a 	bl	80040c0 <HAL_SPI_Transmit_IT>
 8001a0c:	e032      	b.n	8001a74 <main+0x55c>
					} else if (estado == Activado) {
 8001a0e:	4b53      	ldr	r3, [pc, #332]	; (8001b5c <main+0x644>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <main+0x510>
						pTxData = 'A';
 8001a16:	4b55      	ldr	r3, [pc, #340]	; (8001b6c <main+0x654>)
 8001a18:	2241      	movs	r2, #65	; 0x41
 8001a1a:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4953      	ldr	r1, [pc, #332]	; (8001b6c <main+0x654>)
 8001a20:	4851      	ldr	r0, [pc, #324]	; (8001b68 <main+0x650>)
 8001a22:	f002 fb4d 	bl	80040c0 <HAL_SPI_Transmit_IT>
 8001a26:	e025      	b.n	8001a74 <main+0x55c>
					} else if (estado == Modo_Homing) {
 8001a28:	4b4c      	ldr	r3, [pc, #304]	; (8001b5c <main+0x644>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d108      	bne.n	8001a42 <main+0x52a>
						pTxData = 'H';
 8001a30:	4b4e      	ldr	r3, [pc, #312]	; (8001b6c <main+0x654>)
 8001a32:	2248      	movs	r2, #72	; 0x48
 8001a34:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001a36:	2201      	movs	r2, #1
 8001a38:	494c      	ldr	r1, [pc, #304]	; (8001b6c <main+0x654>)
 8001a3a:	484b      	ldr	r0, [pc, #300]	; (8001b68 <main+0x650>)
 8001a3c:	f002 fb40 	bl	80040c0 <HAL_SPI_Transmit_IT>
 8001a40:	e018      	b.n	8001a74 <main+0x55c>
					} else if (estado == Modo_Normal) {
 8001a42:	4b46      	ldr	r3, [pc, #280]	; (8001b5c <main+0x644>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d108      	bne.n	8001a5c <main+0x544>
						pTxData = 'N';
 8001a4a:	4b48      	ldr	r3, [pc, #288]	; (8001b6c <main+0x654>)
 8001a4c:	224e      	movs	r2, #78	; 0x4e
 8001a4e:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001a50:	2201      	movs	r2, #1
 8001a52:	4946      	ldr	r1, [pc, #280]	; (8001b6c <main+0x654>)
 8001a54:	4844      	ldr	r0, [pc, #272]	; (8001b68 <main+0x650>)
 8001a56:	f002 fb33 	bl	80040c0 <HAL_SPI_Transmit_IT>
 8001a5a:	e00b      	b.n	8001a74 <main+0x55c>
					} else if (estado == Error) {
 8001a5c:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <main+0x644>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d107      	bne.n	8001a74 <main+0x55c>
						pTxData = 'E';
 8001a64:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <main+0x654>)
 8001a66:	2245      	movs	r2, #69	; 0x45
 8001a68:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	493f      	ldr	r1, [pc, #252]	; (8001b6c <main+0x654>)
 8001a6e:	483e      	ldr	r0, [pc, #248]	; (8001b68 <main+0x650>)
 8001a70:	f002 fb26 	bl	80040c0 <HAL_SPI_Transmit_IT>
					}
					HAL_GPIO_WritePin(int1_M_cpt_t_GPIO_Port, int1_M_cpt_t_Pin,
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a7a:	483d      	ldr	r0, [pc, #244]	; (8001b70 <main+0x658>)
 8001a7c:	f001 fe5c 	bl	8003738 <HAL_GPIO_WritePin>
							GPIO_PIN_SET);
					HAL_GPIO_WritePin(int1_M_cpt_t_GPIO_Port, int1_M_cpt_t_Pin,
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a86:	483a      	ldr	r0, [pc, #232]	; (8001b70 <main+0x658>)
 8001a88:	f001 fe56 	bl	8003738 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					__HAL_SPI_CLEAR_OVRFLAG(&hspi2);
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <main+0x650>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <main+0x650>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	f107 030c 	add.w	r3, r7, #12
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	681b      	ldr	r3, [r3, #0]
					HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	492f      	ldr	r1, [pc, #188]	; (8001b74 <main+0x65c>)
 8001ab6:	482c      	ldr	r0, [pc, #176]	; (8001b68 <main+0x650>)
 8001ab8:	f002 fb84 	bl	80041c4 <HAL_SPI_Receive_IT>
					break;
 8001abc:	e004      	b.n	8001ac8 <main+0x5b0>
					break;
 8001abe:	bf00      	nop
 8001ac0:	e002      	b.n	8001ac8 <main+0x5b0>
					break;
 8001ac2:	bf00      	nop
 8001ac4:	e000      	b.n	8001ac8 <main+0x5b0>
					break;
 8001ac6:	bf00      	nop
			for (int i = 0; i < cant; i++) {
 8001ac8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001acc:	3301      	adds	r3, #1
 8001ace:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001ad2:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8001ad6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001ada:	429a      	cmp	r2, r3
 8001adc:	f6ff ada5 	blt.w	800162a <main+0x112>
					//Revisa el estado, interuumpe y guarada el estado en el puerto SP
					break;
				}

			}
			flag_mensaje_completo = 2;
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <main+0x660>)
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	701a      	strb	r2, [r3, #0]
			cant = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		}

		switch (estado) {
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <main+0x644>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	f63f ad7d 	bhi.w	80015f0 <main+0xd8>
 8001af6:	a201      	add	r2, pc, #4	; (adr r2, 8001afc <main+0x5e4>)
 8001af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afc:	08001b23 	.word	0x08001b23
 8001b00:	08001b11 	.word	0x08001b11
 8001b04:	08001b81 	.word	0x08001b81
 8001b08:	08001c4b 	.word	0x08001c4b
 8001b0c:	08001d4d 	.word	0x08001d4d
		//en la maquina de estado hace la gestion de cada motor los cuales sus datos estan guardados en un struk
		case Desactivado:
			if (flag_cambio == 1) {
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <main+0x640>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	f040 8120 	bne.w	8001d5a <main+0x842>
				flag_cambio = 0;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <main+0x640>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001b20:	e11b      	b.n	8001d5a <main+0x842>
		case Activado:
			if (flag_cambio == 1) {
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <main+0x640>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	f040 8119 	bne.w	8001d5e <main+0x846>
				HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001b2c:	213c      	movs	r1, #60	; 0x3c
 8001b2e:	4813      	ldr	r0, [pc, #76]	; (8001b7c <main+0x664>)
 8001b30:	f003 fd56 	bl	80055e0 <HAL_TIM_Encoder_Start>
				flag_cambio = 0;
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <main+0x640>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001b3a:	e110      	b.n	8001d5e <main+0x846>
 8001b3c:	f3af 8000 	nop.w
 8001b40:	f9db22d1 	.word	0xf9db22d1
 8001b44:	40278a7e 	.word	0x40278a7e
 8001b48:	00000000 	.word	0x00000000
 8001b4c:	40000000 	.word	0x40000000
 8001b50:	200002d4 	.word	0x200002d4
 8001b54:	413c53f8 	.word	0x413c53f8
 8001b58:	20000205 	.word	0x20000205
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000208 	.word	0x20000208
 8001b64:	20000207 	.word	0x20000207
 8001b68:	20000310 	.word	0x20000310
 8001b6c:	20000204 	.word	0x20000204
 8001b70:	40020800 	.word	0x40020800
 8001b74:	200002d0 	.word	0x200002d0
 8001b78:	20000001 	.word	0x20000001
 8001b7c:	200003a8 	.word	0x200003a8
		case Modo_Homing:
			if (flag_cambio == 1) {
 8001b80:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <main+0x858>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d11c      	bne.n	8001bc2 <main+0x6aa>
				m1.modo = M_realizando;
 8001b88:	4b7a      	ldr	r3, [pc, #488]	; (8001d74 <main+0x85c>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2102      	movs	r1, #2
 8001b94:	4878      	ldr	r0, [pc, #480]	; (8001d78 <main+0x860>)
 8001b96:	f001 fdcf 	bl	8003738 <HAL_GPIO_WritePin>
				PWM_config.Pulse = 1200;
 8001b9a:	4b78      	ldr	r3, [pc, #480]	; (8001d7c <main+0x864>)
 8001b9c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001ba0:	605a      	str	r2, [r3, #4]
				HAL_TIM_PWM_ConfigChannel(&htim12, &PWM_config,
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4975      	ldr	r1, [pc, #468]	; (8001d7c <main+0x864>)
 8001ba6:	4876      	ldr	r0, [pc, #472]	; (8001d80 <main+0x868>)
 8001ba8:	f003 ff00 	bl	80059ac <HAL_TIM_PWM_ConfigChannel>
				TIM_CHANNEL_1);
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001bac:	2100      	movs	r1, #0
 8001bae:	4874      	ldr	r0, [pc, #464]	; (8001d80 <main+0x868>)
 8001bb0:	f003 fbee 	bl	8005390 <HAL_TIM_PWM_Start>
				flag_cambio = 0;
 8001bb4:	4b6e      	ldr	r3, [pc, #440]	; (8001d70 <main+0x858>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
				m1.p_ini = 0;
 8001bba:	4b6e      	ldr	r3, [pc, #440]	; (8001d74 <main+0x85c>)
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
			}
			if (m1.modo == M_listo && m2.modo == M_listo && flag_cambio2) {
 8001bc2:	4b6c      	ldr	r3, [pc, #432]	; (8001d74 <main+0x85c>)
 8001bc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	f040 80ca 	bne.w	8001d62 <main+0x84a>
 8001bce:	4b6d      	ldr	r3, [pc, #436]	; (8001d84 <main+0x86c>)
 8001bd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f040 80c4 	bne.w	8001d62 <main+0x84a>
 8001bda:	4b6b      	ldr	r3, [pc, #428]	; (8001d88 <main+0x870>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80bf 	beq.w	8001d62 <main+0x84a>
				flag_cambio2 = 0;
 8001be4:	4b68      	ldr	r3, [pc, #416]	; (8001d88 <main+0x870>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Abort_IT(&hspi2);
 8001bea:	4868      	ldr	r0, [pc, #416]	; (8001d8c <main+0x874>)
 8001bec:	f002 fc14 	bl	8004418 <HAL_SPI_Abort_IT>
				pTxData = 'L';
 8001bf0:	4b67      	ldr	r3, [pc, #412]	; (8001d90 <main+0x878>)
 8001bf2:	224c      	movs	r2, #76	; 0x4c
 8001bf4:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4965      	ldr	r1, [pc, #404]	; (8001d90 <main+0x878>)
 8001bfa:	4864      	ldr	r0, [pc, #400]	; (8001d8c <main+0x874>)
 8001bfc:	f002 fa60 	bl	80040c0 <HAL_SPI_Transmit_IT>
				HAL_GPIO_WritePin(int1_M_cpt_t_GPIO_Port, int1_M_cpt_t_Pin,
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c06:	4863      	ldr	r0, [pc, #396]	; (8001d94 <main+0x87c>)
 8001c08:	f001 fd96 	bl	8003738 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				HAL_GPIO_WritePin(int1_M_cpt_t_GPIO_Port, int1_M_cpt_t_Pin,
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c12:	4860      	ldr	r0, [pc, #384]	; (8001d94 <main+0x87c>)
 8001c14:	f001 fd90 	bl	8003738 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				__HAL_SPI_CLEAR_OVRFLAG(&hspi2);
 8001c18:	f107 0308 	add.w	r3, r7, #8
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	4b5a      	ldr	r3, [pc, #360]	; (8001d8c <main+0x874>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <main+0x874>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	681b      	ldr	r3, [r3, #0]
				HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4955      	ldr	r1, [pc, #340]	; (8001d98 <main+0x880>)
 8001c42:	4852      	ldr	r0, [pc, #328]	; (8001d8c <main+0x874>)
 8001c44:	f002 fabe 	bl	80041c4 <HAL_SPI_Receive_IT>
			}
			break;
 8001c48:	e08b      	b.n	8001d62 <main+0x84a>
		case Modo_Normal:
			if (flag_cambio == 1) {
 8001c4a:	4b49      	ldr	r3, [pc, #292]	; (8001d70 <main+0x858>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d13f      	bne.n	8001cd2 <main+0x7ba>
				m1.modo = M_realizando;
 8001c52:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <main+0x85c>)
 8001c54:	2202      	movs	r2, #2
 8001c56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				Up = 0;
 8001c5a:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <main+0x884>)
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
				UPID = 0;
 8001c62:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <main+0x888>)
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
				Ui = 0;
 8001c6a:	4b4e      	ldr	r3, [pc, #312]	; (8001da4 <main+0x88c>)
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
				Ud = 0;
 8001c72:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <main+0x890>)
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
				Ui_ant = 0;
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <main+0x894>)
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
				error_ant_M = 0;
 8001c82:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <main+0x898>)
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
				cnt_lis = 0;
 8001c8a:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <main+0x89c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(L298_ENA1_GPIO_Port, L298_ENA1_Pin,
 8001c90:	2200      	movs	r2, #0
 8001c92:	2108      	movs	r1, #8
 8001c94:	4838      	ldr	r0, [pc, #224]	; (8001d78 <main+0x860>)
 8001c96:	f001 fd4f 	bl	8003738 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin, GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	4836      	ldr	r0, [pc, #216]	; (8001d78 <main+0x860>)
 8001ca0:	f001 fd4a 	bl	8003738 <HAL_GPIO_WritePin>
				PWM_config.Pulse = 0;
 8001ca4:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <main+0x864>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	605a      	str	r2, [r3, #4]
				HAL_TIM_PWM_ConfigChannel(&htim12, &PWM_config, TIM_CHANNEL_1);
 8001caa:	2200      	movs	r2, #0
 8001cac:	4933      	ldr	r1, [pc, #204]	; (8001d7c <main+0x864>)
 8001cae:	4834      	ldr	r0, [pc, #208]	; (8001d80 <main+0x868>)
 8001cb0:	f003 fe7c 	bl	80059ac <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4832      	ldr	r0, [pc, #200]	; (8001d80 <main+0x868>)
 8001cb8:	f003 fb6a 	bl	8005390 <HAL_TIM_PWM_Start>
				HAL_GPIO_WritePin(L298_ENA1_GPIO_Port, L298_ENA1_Pin,
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2108      	movs	r1, #8
 8001cc0:	482d      	ldr	r0, [pc, #180]	; (8001d78 <main+0x860>)
 8001cc2:	f001 fd39 	bl	8003738 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				HAL_TIM_Base_Start_IT(&htim9);
 8001cc6:	483c      	ldr	r0, [pc, #240]	; (8001db8 <main+0x8a0>)
 8001cc8:	f003 faa9 	bl	800521e <HAL_TIM_Base_Start_IT>
				flag_cambio = 0;
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <main+0x858>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
			}
			if (m1.modo == M_listo && m2.modo == M_listo && flag_cambio2) {
 8001cd2:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <main+0x85c>)
 8001cd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d144      	bne.n	8001d66 <main+0x84e>
 8001cdc:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <main+0x86c>)
 8001cde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d13f      	bne.n	8001d66 <main+0x84e>
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <main+0x870>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d03b      	beq.n	8001d66 <main+0x84e>
				flag_cambio2 = 0;
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <main+0x870>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Abort_IT(&hspi2);
 8001cf4:	4825      	ldr	r0, [pc, #148]	; (8001d8c <main+0x874>)
 8001cf6:	f002 fb8f 	bl	8004418 <HAL_SPI_Abort_IT>
				pTxData = 'L';
 8001cfa:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <main+0x878>)
 8001cfc:	224c      	movs	r2, #76	; 0x4c
 8001cfe:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001d00:	2201      	movs	r2, #1
 8001d02:	4923      	ldr	r1, [pc, #140]	; (8001d90 <main+0x878>)
 8001d04:	4821      	ldr	r0, [pc, #132]	; (8001d8c <main+0x874>)
 8001d06:	f002 f9db 	bl	80040c0 <HAL_SPI_Transmit_IT>
				HAL_GPIO_WritePin(int1_M_cpt_t_GPIO_Port, int1_M_cpt_t_Pin,
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d10:	4820      	ldr	r0, [pc, #128]	; (8001d94 <main+0x87c>)
 8001d12:	f001 fd11 	bl	8003738 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				HAL_GPIO_WritePin(int1_M_cpt_t_GPIO_Port, int1_M_cpt_t_Pin,
 8001d16:	2200      	movs	r2, #0
 8001d18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d1c:	481d      	ldr	r0, [pc, #116]	; (8001d94 <main+0x87c>)
 8001d1e:	f001 fd0b 	bl	8003738 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				__HAL_SPI_CLEAR_OVRFLAG(&hspi2);
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <main+0x874>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <main+0x874>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	681b      	ldr	r3, [r3, #0]
				HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 8001d40:	2201      	movs	r2, #1
 8001d42:	4915      	ldr	r1, [pc, #84]	; (8001d98 <main+0x880>)
 8001d44:	4811      	ldr	r0, [pc, #68]	; (8001d8c <main+0x874>)
 8001d46:	f002 fa3d 	bl	80041c4 <HAL_SPI_Receive_IT>
			}
			break;
 8001d4a:	e00c      	b.n	8001d66 <main+0x84e>
		case Error:
			if (flag_cambio) {
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <main+0x858>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00a      	beq.n	8001d6a <main+0x852>
				Error_Handler();
 8001d54:	f000 fcb2 	bl	80026bc <Error_Handler>
			}
			break;
 8001d58:	e007      	b.n	8001d6a <main+0x852>
			break;
 8001d5a:	bf00      	nop
 8001d5c:	e448      	b.n	80015f0 <main+0xd8>
			break;
 8001d5e:	bf00      	nop
 8001d60:	e446      	b.n	80015f0 <main+0xd8>
			break;
 8001d62:	bf00      	nop
 8001d64:	e444      	b.n	80015f0 <main+0xd8>
			break;
 8001d66:	bf00      	nop
 8001d68:	e442      	b.n	80015f0 <main+0xd8>
			break;
 8001d6a:	bf00      	nop
		if (flag_mensaje_completo == 0) {
 8001d6c:	e440      	b.n	80015f0 <main+0xd8>
 8001d6e:	bf00      	nop
 8001d70:	20000205 	.word	0x20000205
 8001d74:	200002d4 	.word	0x200002d4
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	20000268 	.word	0x20000268
 8001d80:	20000428 	.word	0x20000428
 8001d84:	20000294 	.word	0x20000294
 8001d88:	20000206 	.word	0x20000206
 8001d8c:	20000310 	.word	0x20000310
 8001d90:	20000204 	.word	0x20000204
 8001d94:	40020800 	.word	0x40020800
 8001d98:	200002d0 	.word	0x200002d0
 8001d9c:	200002c8 	.word	0x200002c8
 8001da0:	200002cc 	.word	0x200002cc
 8001da4:	20000254 	.word	0x20000254
 8001da8:	20000308 	.word	0x20000308
 8001dac:	20000258 	.word	0x20000258
 8001db0:	20000250 	.word	0x20000250
 8001db4:	20000290 	.word	0x20000290
 8001db8:	200003e8 	.word	0x200003e8

08001dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b094      	sub	sp, #80	; 0x50
 8001dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dc2:	f107 0320 	add.w	r3, r7, #32
 8001dc6:	2230      	movs	r2, #48	; 0x30
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f004 fb5e 	bl	800648c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <SystemClock_Config+0xcc>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	4a27      	ldr	r2, [pc, #156]	; (8001e88 <SystemClock_Config+0xcc>)
 8001dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dee:	6413      	str	r3, [r2, #64]	; 0x40
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <SystemClock_Config+0xcc>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <SystemClock_Config+0xd0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <SystemClock_Config+0xd0>)
 8001e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <SystemClock_Config+0xd0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e20:	2310      	movs	r3, #16
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e24:	2302      	movs	r3, #2
 8001e26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e30:	23a8      	movs	r3, #168	; 0xa8
 8001e32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e34:	2302      	movs	r3, #2
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e38:	2307      	movs	r3, #7
 8001e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e3c:	f107 0320 	add.w	r3, r7, #32
 8001e40:	4618      	mov	r0, r3
 8001e42:	f001 fcab 	bl	800379c <HAL_RCC_OscConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e4c:	f000 fc36 	bl	80026bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e50:	230f      	movs	r3, #15
 8001e52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e54:	2302      	movs	r3, #2
 8001e56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001e5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001e62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 ff04 	bl	8003c7c <HAL_RCC_ClockConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e7a:	f000 fc1f 	bl	80026bc <Error_Handler>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3750      	adds	r7, #80	; 0x50
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40007000 	.word	0x40007000

08001e90 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	cont_datos_SPI++;
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_SPI_RxCpltCallback+0x6c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	4a17      	ldr	r2, [pc, #92]	; (8001efc <HAL_SPI_RxCpltCallback+0x6c>)
 8001ea0:	6013      	str	r3, [r2, #0]
	str[cont_datos_SPI - 1] = dato_recepcion_SPI;
 8001ea2:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_SPI_RxCpltCallback+0x6c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <HAL_SPI_RxCpltCallback+0x70>)
 8001eaa:	7811      	ldrb	r1, [r2, #0]
 8001eac:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <HAL_SPI_RxCpltCallback+0x74>)
 8001eae:	54d1      	strb	r1, [r2, r3]
	if(str[cont_datos_SPI - 1]=='\0'){
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_SPI_RxCpltCallback+0x6c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <HAL_SPI_RxCpltCallback+0x74>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <HAL_SPI_RxCpltCallback+0x38>
		cont_datos_SPI--;
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_SPI_RxCpltCallback+0x6c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <HAL_SPI_RxCpltCallback+0x6c>)
 8001ec6:	6013      	str	r3, [r2, #0]
	}
	if (str[cont_datos_SPI - 1] == ':') {
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_SPI_RxCpltCallback+0x6c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <HAL_SPI_RxCpltCallback+0x74>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	2b3a      	cmp	r3, #58	; 0x3a
 8001ed4:	d109      	bne.n	8001eea <HAL_SPI_RxCpltCallback+0x5a>
		flag_mensaje_completo = 0;
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_SPI_RxCpltCallback+0x78>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
		contador_instrucciones = cont_datos_SPI;
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <HAL_SPI_RxCpltCallback+0x6c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_SPI_RxCpltCallback+0x7c>)
 8001ee2:	6013      	str	r3, [r2, #0]
		cont_datos_SPI = 0;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_SPI_RxCpltCallback+0x6c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
	}
	HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 8001eea:	2201      	movs	r2, #1
 8001eec:	4904      	ldr	r1, [pc, #16]	; (8001f00 <HAL_SPI_RxCpltCallback+0x70>)
 8001eee:	4808      	ldr	r0, [pc, #32]	; (8001f10 <HAL_SPI_RxCpltCallback+0x80>)
 8001ef0:	f002 f968 	bl	80041c4 <HAL_SPI_Receive_IT>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000214 	.word	0x20000214
 8001f00:	200002d0 	.word	0x200002d0
 8001f04:	2000021c 	.word	0x2000021c
 8001f08:	20000001 	.word	0x20000001
 8001f0c:	20000218 	.word	0x20000218
 8001f10:	20000310 	.word	0x20000310
 8001f14:	00000000 	.word	0x00000000

08001f18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {

	}
	if (htim->Instance == TIM3) {
	}
	if (htim->Instance == TIM9) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4ad2      	ldr	r2, [pc, #840]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	f040 8315 	bne.w	8002558 <HAL_TIM_PeriodElapsedCallback+0x640>
		cont_samp++;
 8001f2e:	4bd1      	ldr	r3, [pc, #836]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	4acf      	ldr	r2, [pc, #828]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001f36:	6013      	str	r3, [r2, #0]
		m1.t_act = TIEMPO_SAMP * cont_samp;
 8001f38:	4bce      	ldr	r3, [pc, #824]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fa8d 	bl	800045c <__aeabi_ui2d>
 8001f42:	a3c5      	add	r3, pc, #788	; (adr r3, 8002258 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe fb02 	bl	8000550 <__aeabi_dmul>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	460c      	mov	r4, r1
 8001f50:	4618      	mov	r0, r3
 8001f52:	4621      	mov	r1, r4
 8001f54:	f7fe fdf4 	bl	8000b40 <__aeabi_d2f>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4bc7      	ldr	r3, [pc, #796]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001f5c:	621a      	str	r2, [r3, #32]
		if (m1.t_act < m1.t_tot) {
 8001f5e:	4bc6      	ldr	r3, [pc, #792]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001f60:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f64:	4bc4      	ldr	r3, [pc, #784]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001f66:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f72:	f140 8152 	bpl.w	800221a <HAL_TIM_PeriodElapsedCallback+0x302>
			if (m1.t_act <= m1.tau) {
 8001f76:	4bc0      	ldr	r3, [pc, #768]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001f78:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f7c:	4bbe      	ldr	r3, [pc, #760]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001f7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8a:	d85f      	bhi.n	800204c <HAL_TIM_PeriodElapsedCallback+0x134>
				m1.p_obj = (m1.p_ini + m1.a_nes * pow(m1.t_act, 2) / 2) * 600
 8001f8c:	4bba      	ldr	r3, [pc, #744]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fa85 	bl	80004a0 <__aeabi_f2d>
 8001f96:	4604      	mov	r4, r0
 8001f98:	460d      	mov	r5, r1
 8001f9a:	4bb7      	ldr	r3, [pc, #732]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fa7e 	bl	80004a0 <__aeabi_f2d>
 8001fa4:	4680      	mov	r8, r0
 8001fa6:	4689      	mov	r9, r1
 8001fa8:	4bb3      	ldr	r3, [pc, #716]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fa77 	bl	80004a0 <__aeabi_f2d>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	ed9f 1baa 	vldr	d1, [pc, #680]	; 8002260 <HAL_TIM_PeriodElapsedCallback+0x348>
 8001fba:	ec43 2b10 	vmov	d0, r2, r3
 8001fbe:	f006 f879 	bl	80080b4 <pow>
 8001fc2:	ec53 2b10 	vmov	r2, r3, d0
 8001fc6:	4640      	mov	r0, r8
 8001fc8:	4649      	mov	r1, r9
 8001fca:	f7fe fac1 	bl	8000550 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fde:	f7fe fbe1 	bl	80007a4 <__aeabi_ddiv>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	4629      	mov	r1, r5
 8001fea:	f7fe f8fb 	bl	80001e4 <__adddf3>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	460c      	mov	r4, r1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	4ba0      	ldr	r3, [pc, #640]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001ffc:	f7fe faa8 	bl	8000550 <__aeabi_dmul>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	4618      	mov	r0, r3
 8002006:	4621      	mov	r1, r4
						/ 2 / M_PI + 800;
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002010:	f7fe fbc8 	bl	80007a4 <__aeabi_ddiv>
 8002014:	4603      	mov	r3, r0
 8002016:	460c      	mov	r4, r1
 8002018:	4618      	mov	r0, r3
 800201a:	4621      	mov	r1, r4
 800201c:	a392      	add	r3, pc, #584	; (adr r3, 8002268 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fbbf 	bl	80007a4 <__aeabi_ddiv>
 8002026:	4603      	mov	r3, r0
 8002028:	460c      	mov	r4, r1
 800202a:	4618      	mov	r0, r3
 800202c:	4621      	mov	r1, r4
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	4b93      	ldr	r3, [pc, #588]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002034:	f7fe f8d6 	bl	80001e4 <__adddf3>
 8002038:	4603      	mov	r3, r0
 800203a:	460c      	mov	r4, r1
 800203c:	4618      	mov	r0, r3
 800203e:	4621      	mov	r1, r4
 8002040:	f7fe fd7e 	bl	8000b40 <__aeabi_d2f>
 8002044:	4602      	mov	r2, r0
				m1.p_obj = (m1.p_ini + m1.a_nes * pow(m1.t_act, 2) / 2) * 600
 8002046:	4b8c      	ldr	r3, [pc, #560]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	e0da      	b.n	8002202 <HAL_TIM_PeriodElapsedCallback+0x2ea>
			} else if (m1.t_act > m1.tau && m1.t_act <= (m1.t_tot - m1.tau)) {
 800204c:	4b8a      	ldr	r3, [pc, #552]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800204e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002052:	4b89      	ldr	r3, [pc, #548]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002054:	edd3 7a05 	vldr	s15, [r3, #20]
 8002058:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800205c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002060:	dd4e      	ble.n	8002100 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8002062:	4b85      	ldr	r3, [pc, #532]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002064:	ed93 7a08 	vldr	s14, [r3, #32]
 8002068:	4b83      	ldr	r3, [pc, #524]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800206a:	edd3 6a07 	vldr	s13, [r3, #28]
 800206e:	4b82      	ldr	r3, [pc, #520]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002070:	edd3 7a05 	vldr	s15, [r3, #20]
 8002074:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002078:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800207c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002080:	d83e      	bhi.n	8002100 <HAL_TIM_PeriodElapsedCallback+0x1e8>
				m1.p_obj = (m1.p_ini
 8002082:	4b7d      	ldr	r3, [pc, #500]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002084:	ed93 7a03 	vldr	s14, [r3, #12]
						+ m1.a_nes * m1.tau * (m1.t_act - m1.tau / 2)) * 600 / 2
 8002088:	4b7b      	ldr	r3, [pc, #492]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800208a:	edd3 6a06 	vldr	s13, [r3, #24]
 800208e:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002090:	edd3 7a05 	vldr	s15, [r3, #20]
 8002094:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002098:	4b77      	ldr	r3, [pc, #476]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800209a:	ed93 6a08 	vldr	s12, [r3, #32]
 800209e:	4b76      	ldr	r3, [pc, #472]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80020a0:	edd3 5a05 	vldr	s11, [r3, #20]
 80020a4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80020a8:	eec5 7a85 	vdiv.f32	s15, s11, s10
 80020ac:	ee76 7a67 	vsub.f32	s15, s12, s15
 80020b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b8:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002284 <HAL_TIM_PeriodElapsedCallback+0x36c>
 80020bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80020c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020c8:	ee16 0a90 	vmov	r0, s13
 80020cc:	f7fe f9e8 	bl	80004a0 <__aeabi_f2d>
						/ M_PI + 800;
 80020d0:	a365      	add	r3, pc, #404	; (adr r3, 8002268 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	f7fe fb65 	bl	80007a4 <__aeabi_ddiv>
 80020da:	4603      	mov	r3, r0
 80020dc:	460c      	mov	r4, r1
 80020de:	4618      	mov	r0, r3
 80020e0:	4621      	mov	r1, r4
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	4b66      	ldr	r3, [pc, #408]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80020e8:	f7fe f87c 	bl	80001e4 <__adddf3>
 80020ec:	4603      	mov	r3, r0
 80020ee:	460c      	mov	r4, r1
 80020f0:	4618      	mov	r0, r3
 80020f2:	4621      	mov	r1, r4
 80020f4:	f7fe fd24 	bl	8000b40 <__aeabi_d2f>
 80020f8:	4602      	mov	r2, r0
				m1.p_obj = (m1.p_ini
 80020fa:	4b5f      	ldr	r3, [pc, #380]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e080      	b.n	8002202 <HAL_TIM_PeriodElapsedCallback+0x2ea>
			} else if (m1.t_act > (m1.t_tot - m1.tau) && m1.t_act < m1.t_tot) {
 8002100:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002102:	ed93 7a08 	vldr	s14, [r3, #32]
 8002106:	4b5c      	ldr	r3, [pc, #368]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002108:	edd3 6a07 	vldr	s13, [r3, #28]
 800210c:	4b5a      	ldr	r3, [pc, #360]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800210e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002112:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002116:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800211a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211e:	dd70      	ble.n	8002202 <HAL_TIM_PeriodElapsedCallback+0x2ea>
 8002120:	4b55      	ldr	r3, [pc, #340]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002122:	ed93 7a08 	vldr	s14, [r3, #32]
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002128:	edd3 7a07 	vldr	s15, [r3, #28]
 800212c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002134:	d565      	bpl.n	8002202 <HAL_TIM_PeriodElapsedCallback+0x2ea>
				m1.p_obj = (m1.p_fin
 8002136:	4b50      	ldr	r3, [pc, #320]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f9b0 	bl	80004a0 <__aeabi_f2d>
 8002140:	4604      	mov	r4, r0
 8002142:	460d      	mov	r5, r1
						- m1.a_nes * pow(m1.t_tot - m1.t_act, 2) / 2) * 600 / 2
 8002144:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe f9a9 	bl	80004a0 <__aeabi_f2d>
 800214e:	4680      	mov	r8, r0
 8002150:	4689      	mov	r9, r1
 8002152:	4b49      	ldr	r3, [pc, #292]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002154:	ed93 7a07 	vldr	s14, [r3, #28]
 8002158:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800215a:	edd3 7a08 	vldr	s15, [r3, #32]
 800215e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002162:	ee17 0a90 	vmov	r0, s15
 8002166:	f7fe f99b 	bl	80004a0 <__aeabi_f2d>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8002260 <HAL_TIM_PeriodElapsedCallback+0x348>
 8002172:	ec43 2b10 	vmov	d0, r2, r3
 8002176:	f005 ff9d 	bl	80080b4 <pow>
 800217a:	ec53 2b10 	vmov	r2, r3, d0
 800217e:	4640      	mov	r0, r8
 8002180:	4649      	mov	r1, r9
 8002182:	f7fe f9e5 	bl	8000550 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002196:	f7fe fb05 	bl	80007a4 <__aeabi_ddiv>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4620      	mov	r0, r4
 80021a0:	4629      	mov	r1, r5
 80021a2:	f7fe f81d 	bl	80001e0 <__aeabi_dsub>
 80021a6:	4603      	mov	r3, r0
 80021a8:	460c      	mov	r4, r1
 80021aa:	4618      	mov	r0, r3
 80021ac:	4621      	mov	r1, r4
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	4b32      	ldr	r3, [pc, #200]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x364>)
 80021b4:	f7fe f9cc 	bl	8000550 <__aeabi_dmul>
 80021b8:	4603      	mov	r3, r0
 80021ba:	460c      	mov	r4, r1
 80021bc:	4618      	mov	r0, r3
 80021be:	4621      	mov	r1, r4
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021c8:	f7fe faec 	bl	80007a4 <__aeabi_ddiv>
 80021cc:	4603      	mov	r3, r0
 80021ce:	460c      	mov	r4, r1
 80021d0:	4618      	mov	r0, r3
 80021d2:	4621      	mov	r1, r4
						/ M_PI + 800;
 80021d4:	a324      	add	r3, pc, #144	; (adr r3, 8002268 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	f7fe fae3 	bl	80007a4 <__aeabi_ddiv>
 80021de:	4603      	mov	r3, r0
 80021e0:	460c      	mov	r4, r1
 80021e2:	4618      	mov	r0, r3
 80021e4:	4621      	mov	r1, r4
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80021ec:	f7fd fffa 	bl	80001e4 <__adddf3>
 80021f0:	4603      	mov	r3, r0
 80021f2:	460c      	mov	r4, r1
 80021f4:	4618      	mov	r0, r3
 80021f6:	4621      	mov	r1, r4
 80021f8:	f7fe fca2 	bl	8000b40 <__aeabi_d2f>
 80021fc:	4602      	mov	r2, r0
				m1.p_obj = (m1.p_fin
 80021fe:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002200:	601a      	str	r2, [r3, #0]
			}
			error_M = (m1.p_obj - m1.p_act);
 8002202:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002204:	ed93 7a00 	vldr	s14, [r3]
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800220a:	edd3 7a01 	vldr	s15, [r3, #4]
 800220e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002214:	edc3 7a00 	vstr	s15, [r3]
 8002218:	e09b      	b.n	8002352 <HAL_TIM_PeriodElapsedCallback+0x43a>
		} else {
			error_M = (int) (m1.p_obj - m1.p_act);
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	4b15      	ldr	r3, [pc, #84]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002222:	edd3 7a01 	vldr	s15, [r3, #4]
 8002226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800222e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002234:	edc3 7a00 	vstr	s15, [r3]
			if (!error_M) {
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800223a:	edd3 7a00 	vldr	s15, [r3]
 800223e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002246:	d123      	bne.n	8002290 <HAL_TIM_PeriodElapsedCallback+0x378>
				cnt_lis++;
 8002248:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e024      	b.n	80022a0 <HAL_TIM_PeriodElapsedCallback+0x388>
 8002256:	bf00      	nop
 8002258:	eb1c432d 	.word	0xeb1c432d
 800225c:	3f2a36e2 	.word	0x3f2a36e2
 8002260:	00000000 	.word	0x00000000
 8002264:	40000000 	.word	0x40000000
 8002268:	54442d18 	.word	0x54442d18
 800226c:	400921fb 	.word	0x400921fb
 8002270:	40014000 	.word	0x40014000
 8002274:	2000020c 	.word	0x2000020c
 8002278:	200002d4 	.word	0x200002d4
 800227c:	4082c000 	.word	0x4082c000
 8002280:	40890000 	.word	0x40890000
 8002284:	44160000 	.word	0x44160000
 8002288:	2000030c 	.word	0x2000030c
 800228c:	20000290 	.word	0x20000290
			} else {
				cnt_lis = 0;
 8002290:	4bb7      	ldr	r3, [pc, #732]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
				cont_error++;
 8002296:	4bb7      	ldr	r3, [pc, #732]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3301      	adds	r3, #1
 800229c:	4ab5      	ldr	r2, [pc, #724]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800229e:	6013      	str	r3, [r2, #0]
			}
			if (cnt_lis == 15) {
 80022a0:	4bb3      	ldr	r3, [pc, #716]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x658>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d145      	bne.n	8002334 <HAL_TIM_PeriodElapsedCallback+0x41c>
				HAL_TIM_Base_Stop_IT(&htim9);
 80022a8:	48b3      	ldr	r0, [pc, #716]	; (8002578 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80022aa:	f002 ffdc 	bl	8005266 <HAL_TIM_Base_Stop_IT>
				m1.p_ini = (m1.p_obj - 800) * 2 * M_PI / 600;
 80022ae:	4bb3      	ldr	r3, [pc, #716]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x664>)
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8002580 <HAL_TIM_PeriodElapsedCallback+0x668>
 80022b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022c0:	ee17 0a90 	vmov	r0, s15
 80022c4:	f7fe f8ec 	bl	80004a0 <__aeabi_f2d>
 80022c8:	a3a5      	add	r3, pc, #660	; (adr r3, 8002560 <HAL_TIM_PeriodElapsedCallback+0x648>)
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	f7fe f93f 	bl	8000550 <__aeabi_dmul>
 80022d2:	4603      	mov	r3, r0
 80022d4:	460c      	mov	r4, r1
 80022d6:	4618      	mov	r0, r3
 80022d8:	4621      	mov	r1, r4
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	4ba9      	ldr	r3, [pc, #676]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 80022e0:	f7fe fa60 	bl	80007a4 <__aeabi_ddiv>
 80022e4:	4603      	mov	r3, r0
 80022e6:	460c      	mov	r4, r1
 80022e8:	4618      	mov	r0, r3
 80022ea:	4621      	mov	r1, r4
 80022ec:	f7fe fc28 	bl	8000b40 <__aeabi_d2f>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4ba2      	ldr	r3, [pc, #648]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x664>)
 80022f4:	60da      	str	r2, [r3, #12]
				PWM_config.Pulse = 0;
 80022f6:	4ba4      	ldr	r3, [pc, #656]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	605a      	str	r2, [r3, #4]
				HAL_TIM_PWM_ConfigChannel(&htim12, &PWM_config, TIM_CHANNEL_1);
 80022fc:	2200      	movs	r2, #0
 80022fe:	49a2      	ldr	r1, [pc, #648]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002300:	48a2      	ldr	r0, [pc, #648]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x674>)
 8002302:	f003 fb53 	bl	80059ac <HAL_TIM_PWM_ConfigChannel>
				HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	2102      	movs	r1, #2
 800230a:	48a1      	ldr	r0, [pc, #644]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x678>)
 800230c:	f001 fa14 	bl	8003738 <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002310:	2100      	movs	r1, #0
 8002312:	489e      	ldr	r0, [pc, #632]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x674>)
 8002314:	f003 f83c 	bl	8005390 <HAL_TIM_PWM_Start>
				m1.modo = M_listo;
 8002318:	4b98      	ldr	r3, [pc, #608]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x664>)
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				flag_cambio2 = 1;
 8002320:	4b9c      	ldr	r3, [pc, #624]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
				cont_error = 0;
 8002326:	4b93      	ldr	r3, [pc, #588]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
				cont_samp = 0;
 800232c:	4b9a      	ldr	r3, [pc, #616]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x680>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
				return;
 8002332:	e111      	b.n	8002558 <HAL_TIM_PeriodElapsedCallback+0x640>
			}
			if (cont_error > 100000) {
 8002334:	4b8f      	ldr	r3, [pc, #572]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a98      	ldr	r2, [pc, #608]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x684>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d909      	bls.n	8002352 <HAL_TIM_PeriodElapsedCallback+0x43a>
				HAL_TIM_Base_Stop_IT(&htim9);
 800233e:	488e      	ldr	r0, [pc, #568]	; (8002578 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8002340:	f002 ff91 	bl	8005266 <HAL_TIM_Base_Stop_IT>
				flag_cambio = 1;
 8002344:	4b96      	ldr	r3, [pc, #600]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
				estado = Error;
 800234a:	4b96      	ldr	r3, [pc, #600]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 800234c:	2204      	movs	r2, #4
 800234e:	701a      	strb	r2, [r3, #0]
				return;
 8002350:	e102      	b.n	8002558 <HAL_TIM_PeriodElapsedCallback+0x640>
			}
		}
		m1.p_act = TIM1->CNT;
 8002352:	4b95      	ldr	r3, [pc, #596]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	ee07 3a90 	vmov	s15, r3
 800235a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800235e:	4b87      	ldr	r3, [pc, #540]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x664>)
 8002360:	edc3 7a01 	vstr	s15, [r3, #4]
		Up = m1.kp * error_M;
 8002364:	4b85      	ldr	r3, [pc, #532]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x664>)
 8002366:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800236a:	4b90      	ldr	r3, [pc, #576]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x694>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002374:	4b8e      	ldr	r3, [pc, #568]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8002376:	edc3 7a00 	vstr	s15, [r3]
		Ui = Ui_ant + m1.ki * TIEMPO_SAMP * error_ant_M;
 800237a:	4b8e      	ldr	r3, [pc, #568]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f88e 	bl	80004a0 <__aeabi_f2d>
 8002384:	4604      	mov	r4, r0
 8002386:	460d      	mov	r5, r1
 8002388:	4b7c      	ldr	r3, [pc, #496]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x664>)
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f887 	bl	80004a0 <__aeabi_f2d>
 8002392:	a375      	add	r3, pc, #468	; (adr r3, 8002568 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	f7fe f8da 	bl	8000550 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4690      	mov	r8, r2
 80023a2:	4699      	mov	r9, r3
 80023a4:	4b84      	ldr	r3, [pc, #528]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f879 	bl	80004a0 <__aeabi_f2d>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4640      	mov	r0, r8
 80023b4:	4649      	mov	r1, r9
 80023b6:	f7fe f8cb 	bl	8000550 <__aeabi_dmul>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f7fd ff0f 	bl	80001e4 <__adddf3>
 80023c6:	4603      	mov	r3, r0
 80023c8:	460c      	mov	r4, r1
 80023ca:	4618      	mov	r0, r3
 80023cc:	4621      	mov	r1, r4
 80023ce:	f7fe fbb7 	bl	8000b40 <__aeabi_d2f>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b79      	ldr	r3, [pc, #484]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80023d6:	601a      	str	r2, [r3, #0]
		Ud = m1.kd / TIEMPO_SAMP * (error_M - error_ant_M);
 80023d8:	4b68      	ldr	r3, [pc, #416]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x664>)
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f85f 	bl	80004a0 <__aeabi_f2d>
 80023e2:	a361      	add	r3, pc, #388	; (adr r3, 8002568 <HAL_TIM_PeriodElapsedCallback+0x650>)
 80023e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e8:	f7fe f9dc 	bl	80007a4 <__aeabi_ddiv>
 80023ec:	4603      	mov	r3, r0
 80023ee:	460c      	mov	r4, r1
 80023f0:	4625      	mov	r5, r4
 80023f2:	461c      	mov	r4, r3
 80023f4:	4b6d      	ldr	r3, [pc, #436]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x694>)
 80023f6:	ed93 7a00 	vldr	s14, [r3]
 80023fa:	4b6f      	ldr	r3, [pc, #444]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80023fc:	edd3 7a00 	vldr	s15, [r3]
 8002400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002404:	ee17 0a90 	vmov	r0, s15
 8002408:	f7fe f84a 	bl	80004a0 <__aeabi_f2d>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fe f89c 	bl	8000550 <__aeabi_dmul>
 8002418:	4603      	mov	r3, r0
 800241a:	460c      	mov	r4, r1
 800241c:	4618      	mov	r0, r3
 800241e:	4621      	mov	r1, r4
 8002420:	f7fe fb8e 	bl	8000b40 <__aeabi_d2f>
 8002424:	4602      	mov	r2, r0
 8002426:	4b66      	ldr	r3, [pc, #408]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8002428:	601a      	str	r2, [r3, #0]
		UPID = Up + Ui + Ud;
 800242a:	4b61      	ldr	r3, [pc, #388]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x698>)
 800242c:	ed93 7a00 	vldr	s14, [r3]
 8002430:	4b62      	ldr	r3, [pc, #392]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8002432:	edd3 7a00 	vldr	s15, [r3]
 8002436:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243a:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002444:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8002446:	edc3 7a00 	vstr	s15, [r3]
		Ui_ant = Ui;
 800244a:	4b5c      	ldr	r3, [pc, #368]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a59      	ldr	r2, [pc, #356]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8002450:	6013      	str	r3, [r2, #0]
		error_ant_M = error_M;
 8002452:	4b56      	ldr	r3, [pc, #344]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x694>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8002458:	6013      	str	r3, [r2, #0]
		if (UPID > 0) {
 800245a:	4b5a      	ldr	r3, [pc, #360]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	dd3c      	ble.n	80024e4 <HAL_TIM_PeriodElapsedCallback+0x5cc>
			UPID += 400;
 800246a:	4b56      	ldr	r3, [pc, #344]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80025c8 <HAL_TIM_PeriodElapsedCallback+0x6b0>
 8002474:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002478:	4b52      	ldr	r3, [pc, #328]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 800247a:	edc3 7a00 	vstr	s15, [r3]
			if (UPID > 2799) {
 800247e:	4b51      	ldr	r3, [pc, #324]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80025cc <HAL_TIM_PeriodElapsedCallback+0x6b4>
 8002488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002490:	dd02      	ble.n	8002498 <HAL_TIM_PeriodElapsedCallback+0x580>
				UPID = 2799;
 8002492:	4b4c      	ldr	r3, [pc, #304]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8002494:	4a4e      	ldr	r2, [pc, #312]	; (80025d0 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8002496:	601a      	str	r2, [r3, #0]
			}
			PWM_config.Pulse = 2799 - UPID;
 8002498:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80025cc <HAL_TIM_PeriodElapsedCallback+0x6b4>
 80024a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024aa:	ee17 2a90 	vmov	r2, s15
 80024ae:	4b36      	ldr	r3, [pc, #216]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80024b0:	605a      	str	r2, [r3, #4]
			HAL_TIM_PWM_ConfigChannel(&htim12, &PWM_config, TIM_CHANNEL_1);
 80024b2:	2200      	movs	r2, #0
 80024b4:	4934      	ldr	r1, [pc, #208]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80024b6:	4835      	ldr	r0, [pc, #212]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x674>)
 80024b8:	f003 fa78 	bl	80059ac <HAL_TIM_PWM_ConfigChannel>
			HAL_GPIO_WritePin(L298_ENA1_GPIO_Port, L298_ENA1_Pin,
 80024bc:	2200      	movs	r2, #0
 80024be:	2108      	movs	r1, #8
 80024c0:	4833      	ldr	r0, [pc, #204]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80024c2:	f001 f939 	bl	8003738 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
			HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin, GPIO_PIN_SET);
 80024c6:	2201      	movs	r2, #1
 80024c8:	2102      	movs	r1, #2
 80024ca:	4831      	ldr	r0, [pc, #196]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80024cc:	f001 f934 	bl	8003738 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80024d0:	2100      	movs	r1, #0
 80024d2:	482e      	ldr	r0, [pc, #184]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x674>)
 80024d4:	f002 ff5c 	bl	8005390 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(L298_ENA1_GPIO_Port, L298_ENA1_Pin, GPIO_PIN_SET);
 80024d8:	2201      	movs	r2, #1
 80024da:	2108      	movs	r1, #8
 80024dc:	482c      	ldr	r0, [pc, #176]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80024de:	f001 f92b 	bl	8003738 <HAL_GPIO_WritePin>
 80024e2:	e039      	b.n	8002558 <HAL_TIM_PeriodElapsedCallback+0x640>
		} else {
			UPID -= 400;
 80024e4:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80025c8 <HAL_TIM_PeriodElapsedCallback+0x6b0>
 80024ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024f2:	4b34      	ldr	r3, [pc, #208]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80024f4:	edc3 7a00 	vstr	s15, [r3]
			if (UPID < -2799) {
 80024f8:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80025d4 <HAL_TIM_PeriodElapsedCallback+0x6bc>
 8002502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	d502      	bpl.n	8002512 <HAL_TIM_PeriodElapsedCallback+0x5fa>
				UPID = -2799;
 800250c:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 800250e:	4a32      	ldr	r2, [pc, #200]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002510:	601a      	str	r2, [r3, #0]
			}
			PWM_config.Pulse = -UPID;
 8002512:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8002514:	edd3 7a00 	vldr	s15, [r3]
 8002518:	eef1 7a67 	vneg.f32	s15, s15
 800251c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002520:	ee17 2a90 	vmov	r2, s15
 8002524:	4b18      	ldr	r3, [pc, #96]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002526:	605a      	str	r2, [r3, #4]

			HAL_TIM_PWM_ConfigChannel(&htim12, &PWM_config, TIM_CHANNEL_1);
 8002528:	2200      	movs	r2, #0
 800252a:	4917      	ldr	r1, [pc, #92]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800252c:	4817      	ldr	r0, [pc, #92]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x674>)
 800252e:	f003 fa3d 	bl	80059ac <HAL_TIM_PWM_ConfigChannel>
			HAL_GPIO_WritePin(L298_ENA1_GPIO_Port, L298_ENA1_Pin,
 8002532:	2200      	movs	r2, #0
 8002534:	2108      	movs	r1, #8
 8002536:	4816      	ldr	r0, [pc, #88]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8002538:	f001 f8fe 	bl	8003738 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
			HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin, GPIO_PIN_RESET);
 800253c:	2200      	movs	r2, #0
 800253e:	2102      	movs	r1, #2
 8002540:	4813      	ldr	r0, [pc, #76]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8002542:	f001 f8f9 	bl	8003738 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002546:	2100      	movs	r1, #0
 8002548:	4810      	ldr	r0, [pc, #64]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x674>)
 800254a:	f002 ff21 	bl	8005390 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(L298_ENA1_GPIO_Port, L298_ENA1_Pin, GPIO_PIN_SET);
 800254e:	2201      	movs	r2, #1
 8002550:	2108      	movs	r1, #8
 8002552:	480f      	ldr	r0, [pc, #60]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8002554:	f001 f8f0 	bl	8003738 <HAL_GPIO_WritePin>
		}

	}
	if (htim->Instance == TIM12) {
	}
}
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002560:	54442d18 	.word	0x54442d18
 8002564:	400921fb 	.word	0x400921fb
 8002568:	eb1c432d 	.word	0xeb1c432d
 800256c:	3f2a36e2 	.word	0x3f2a36e2
 8002570:	20000290 	.word	0x20000290
 8002574:	20000210 	.word	0x20000210
 8002578:	200003e8 	.word	0x200003e8
 800257c:	200002d4 	.word	0x200002d4
 8002580:	44480000 	.word	0x44480000
 8002584:	4082c000 	.word	0x4082c000
 8002588:	20000268 	.word	0x20000268
 800258c:	20000428 	.word	0x20000428
 8002590:	40021000 	.word	0x40021000
 8002594:	20000206 	.word	0x20000206
 8002598:	2000020c 	.word	0x2000020c
 800259c:	000186a0 	.word	0x000186a0
 80025a0:	20000205 	.word	0x20000205
 80025a4:	20000000 	.word	0x20000000
 80025a8:	40010000 	.word	0x40010000
 80025ac:	2000030c 	.word	0x2000030c
 80025b0:	200002c8 	.word	0x200002c8
 80025b4:	20000258 	.word	0x20000258
 80025b8:	20000250 	.word	0x20000250
 80025bc:	20000254 	.word	0x20000254
 80025c0:	20000308 	.word	0x20000308
 80025c4:	200002cc 	.word	0x200002cc
 80025c8:	43c80000 	.word	0x43c80000
 80025cc:	452ef000 	.word	0x452ef000
 80025d0:	452ef000 	.word	0x452ef000
 80025d4:	c52ef000 	.word	0xc52ef000
 80025d8:	c52ef000 	.word	0xc52ef000

080025dc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d04c      	beq.n	8002686 <HAL_GPIO_EXTI_Callback+0xaa>
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d043      	beq.n	8002678 <HAL_GPIO_EXTI_Callback+0x9c>
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d000      	beq.n	80025f6 <HAL_GPIO_EXTI_Callback+0x1a>
	case pin_error_Pin:
		flag_cambio = 1;
		estado = Error;
		break;
	}
}
 80025f4:	e048      	b.n	8002688 <HAL_GPIO_EXTI_Callback+0xac>
		PWM_config.Pulse = 2799 - 900;
 80025f6:	4b26      	ldr	r3, [pc, #152]	; (8002690 <HAL_GPIO_EXTI_Callback+0xb4>)
 80025f8:	f240 726b 	movw	r2, #1899	; 0x76b
 80025fc:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim12, &PWM_config, TIM_CHANNEL_1);
 80025fe:	2200      	movs	r2, #0
 8002600:	4923      	ldr	r1, [pc, #140]	; (8002690 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002602:	4824      	ldr	r0, [pc, #144]	; (8002694 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002604:	f003 f9d2 	bl	80059ac <HAL_TIM_PWM_ConfigChannel>
		HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin, GPIO_PIN_SET);
 8002608:	2201      	movs	r2, #1
 800260a:	2102      	movs	r1, #2
 800260c:	4822      	ldr	r0, [pc, #136]	; (8002698 <HAL_GPIO_EXTI_Callback+0xbc>)
 800260e:	f001 f893 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002612:	2100      	movs	r1, #0
 8002614:	481f      	ldr	r0, [pc, #124]	; (8002694 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002616:	f002 febb 	bl	8005390 <HAL_TIM_PWM_Start>
		while (HAL_GPIO_ReadPin(h1_inter_GPIO_Port, h1_inter_Pin)) {
 800261a:	bf00      	nop
 800261c:	2102      	movs	r1, #2
 800261e:	481f      	ldr	r0, [pc, #124]	; (800269c <HAL_GPIO_EXTI_Callback+0xc0>)
 8002620:	f001 f872 	bl	8003708 <HAL_GPIO_ReadPin>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f8      	bne.n	800261c <HAL_GPIO_EXTI_Callback+0x40>
		PWM_config.Pulse = 0;
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_GPIO_EXTI_Callback+0xb4>)
 800262c:	2200      	movs	r2, #0
 800262e:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim12, &PWM_config, TIM_CHANNEL_1);
 8002630:	2200      	movs	r2, #0
 8002632:	4917      	ldr	r1, [pc, #92]	; (8002690 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002634:	4817      	ldr	r0, [pc, #92]	; (8002694 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002636:	f003 f9b9 	bl	80059ac <HAL_TIM_PWM_ConfigChannel>
		HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin, GPIO_PIN_RESET);
 800263a:	2200      	movs	r2, #0
 800263c:	2102      	movs	r1, #2
 800263e:	4816      	ldr	r0, [pc, #88]	; (8002698 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002640:	f001 f87a 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8002644:	2100      	movs	r1, #0
 8002646:	4813      	ldr	r0, [pc, #76]	; (8002694 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002648:	f002 fee0 	bl	800540c <HAL_TIM_PWM_Stop>
		HAL_Delay(1);
 800264c:	2001      	movs	r0, #1
 800264e:	f000 fd3b 	bl	80030c8 <HAL_Delay>
		htim1.Instance->CNT = 500;
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800265a:	625a      	str	r2, [r3, #36]	; 0x24
		m1.p_ini = -M_PI;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_GPIO_EXTI_Callback+0xc8>)
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002660:	60da      	str	r2, [r3, #12]
		flag_homing = 1;
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_GPIO_EXTI_Callback+0xd0>)
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
		m1.modo = M_listo;
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_GPIO_EXTI_Callback+0xc8>)
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		flag_cambio2 = 1;
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
		break;
 8002676:	e007      	b.n	8002688 <HAL_GPIO_EXTI_Callback+0xac>
		flag_cambio = 1;
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_GPIO_EXTI_Callback+0xd8>)
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
		estado = Error;
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002680:	2204      	movs	r2, #4
 8002682:	701a      	strb	r2, [r3, #0]
		break;
 8002684:	e000      	b.n	8002688 <HAL_GPIO_EXTI_Callback+0xac>
		break;
 8002686:	bf00      	nop
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000268 	.word	0x20000268
 8002694:	20000428 	.word	0x20000428
 8002698:	40021000 	.word	0x40021000
 800269c:	40020c00 	.word	0x40020c00
 80026a0:	200003a8 	.word	0x200003a8
 80026a4:	200002d4 	.word	0x200002d4
 80026a8:	c0490fdb 	.word	0xc0490fdb
 80026ac:	20000208 	.word	0x20000208
 80026b0:	20000206 	.word	0x20000206
 80026b4:	20000205 	.word	0x20000205
 80026b8:	20000000 	.word	0x20000000

080026bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80026c2:	2007      	movs	r0, #7
 80026c4:	f000 fe49 	bl	800335a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80026c8:	2008      	movs	r0, #8
 80026ca:	f000 fe46 	bl	800335a <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_Stop_IT(&htim9);
 80026ce:	482a      	ldr	r0, [pc, #168]	; (8002778 <Error_Handler+0xbc>)
 80026d0:	f002 fdc9 	bl	8005266 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(L298_ENA1_GPIO_Port, L298_ENA1_Pin, GPIO_PIN_RESET);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2108      	movs	r1, #8
 80026d8:	4828      	ldr	r0, [pc, #160]	; (800277c <Error_Handler+0xc0>)
 80026da:	f001 f82d 	bl	8003738 <HAL_GPIO_WritePin>
	PWM_config.Pulse = 0;
 80026de:	4b28      	ldr	r3, [pc, #160]	; (8002780 <Error_Handler+0xc4>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_ConfigChannel(&htim12, &PWM_config,
 80026e4:	2200      	movs	r2, #0
 80026e6:	4926      	ldr	r1, [pc, #152]	; (8002780 <Error_Handler+0xc4>)
 80026e8:	4826      	ldr	r0, [pc, #152]	; (8002784 <Error_Handler+0xc8>)
 80026ea:	f003 f95f 	bl	80059ac <HAL_TIM_PWM_ConfigChannel>
	TIM_CHANNEL_1);
	HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin, GPIO_PIN_RESET);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2102      	movs	r1, #2
 80026f2:	4822      	ldr	r0, [pc, #136]	; (800277c <Error_Handler+0xc0>)
 80026f4:	f001 f820 	bl	8003738 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_ALL);
 80026f8:	213c      	movs	r1, #60	; 0x3c
 80026fa:	4822      	ldr	r0, [pc, #136]	; (8002784 <Error_Handler+0xc8>)
 80026fc:	f002 fe86 	bl	800540c <HAL_TIM_PWM_Stop>
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8002700:	213c      	movs	r1, #60	; 0x3c
 8002702:	4821      	ldr	r0, [pc, #132]	; (8002788 <Error_Handler+0xcc>)
 8002704:	f002 ffa3 	bl	800564e <HAL_TIM_Encoder_Stop>
	estado = Error;
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <Error_Handler+0xd0>)
 800270a:	2204      	movs	r2, #4
 800270c:	701a      	strb	r2, [r3, #0]
	flag_activacion = 0;
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <Error_Handler+0xd4>)
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
	flag_homing = 0;
 8002714:	4b1f      	ldr	r3, [pc, #124]	; (8002794 <Error_Handler+0xd8>)
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
	flag_cambio = 0;
 800271a:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <Error_Handler+0xdc>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Abort_IT(&hspi2);
 8002720:	481e      	ldr	r0, [pc, #120]	; (800279c <Error_Handler+0xe0>)
 8002722:	f001 fe79 	bl	8004418 <HAL_SPI_Abort_IT>
	pTxData = 'E';
 8002726:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <Error_Handler+0xe4>)
 8002728:	2245      	movs	r2, #69	; 0x45
 800272a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 800272c:	2201      	movs	r2, #1
 800272e:	491c      	ldr	r1, [pc, #112]	; (80027a0 <Error_Handler+0xe4>)
 8002730:	481a      	ldr	r0, [pc, #104]	; (800279c <Error_Handler+0xe0>)
 8002732:	f001 fcc5 	bl	80040c0 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(int1_M_cpt_t_GPIO_Port, int1_M_cpt_t_Pin, GPIO_PIN_SET);
 8002736:	2201      	movs	r2, #1
 8002738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800273c:	4819      	ldr	r0, [pc, #100]	; (80027a4 <Error_Handler+0xe8>)
 800273e:	f000 fffb 	bl	8003738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(int1_M_cpt_t_GPIO_Port, int1_M_cpt_t_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002748:	4816      	ldr	r0, [pc, #88]	; (80027a4 <Error_Handler+0xe8>)
 800274a:	f000 fff5 	bl	8003738 <HAL_GPIO_WritePin>
	__HAL_SPI_CLEAR_OVRFLAG(&hspi2);
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <Error_Handler+0xe0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <Error_Handler+0xe0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
	HAL_SPI_Receive_IT(&hspi2, &dato_recepcion_SPI, 1);
 8002764:	2201      	movs	r2, #1
 8002766:	4910      	ldr	r1, [pc, #64]	; (80027a8 <Error_Handler+0xec>)
 8002768:	480c      	ldr	r0, [pc, #48]	; (800279c <Error_Handler+0xe0>)
 800276a:	f001 fd2b 	bl	80041c4 <HAL_SPI_Receive_IT>
	HAL_SPI_Abort_IT(&hspi2);
 800276e:	480b      	ldr	r0, [pc, #44]	; (800279c <Error_Handler+0xe0>)
 8002770:	f001 fe52 	bl	8004418 <HAL_SPI_Abort_IT>
	while (1)
 8002774:	e7fe      	b.n	8002774 <Error_Handler+0xb8>
 8002776:	bf00      	nop
 8002778:	200003e8 	.word	0x200003e8
 800277c:	40021000 	.word	0x40021000
 8002780:	20000268 	.word	0x20000268
 8002784:	20000428 	.word	0x20000428
 8002788:	200003a8 	.word	0x200003a8
 800278c:	20000000 	.word	0x20000000
 8002790:	20000207 	.word	0x20000207
 8002794:	20000208 	.word	0x20000208
 8002798:	20000205 	.word	0x20000205
 800279c:	20000310 	.word	0x20000310
 80027a0:	20000204 	.word	0x20000204
 80027a4:	40020800 	.word	0x40020800
 80027a8:	200002d0 	.word	0x200002d0

080027ac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80027b0:	4b15      	ldr	r3, [pc, #84]	; (8002808 <MX_SPI2_Init+0x5c>)
 80027b2:	4a16      	ldr	r2, [pc, #88]	; (800280c <MX_SPI2_Init+0x60>)
 80027b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <MX_SPI2_Init+0x5c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <MX_SPI2_Init+0x5c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027c2:	4b11      	ldr	r3, [pc, #68]	; (8002808 <MX_SPI2_Init+0x5c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c8:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <MX_SPI2_Init+0x5c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <MX_SPI2_Init+0x5c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <MX_SPI2_Init+0x5c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <MX_SPI2_Init+0x5c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027e0:	4b09      	ldr	r3, [pc, #36]	; (8002808 <MX_SPI2_Init+0x5c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <MX_SPI2_Init+0x5c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <MX_SPI2_Init+0x5c>)
 80027ee:	220a      	movs	r2, #10
 80027f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <MX_SPI2_Init+0x5c>)
 80027f4:	f001 fc00 	bl	8003ff8 <HAL_SPI_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 80027fe:	f7ff ff5d 	bl	80026bc <Error_Handler>
  }

}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000310 	.word	0x20000310
 800280c:	40003800 	.word	0x40003800

08002810 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a2c      	ldr	r2, [pc, #176]	; (80028e0 <HAL_SPI_MspInit+0xd0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d152      	bne.n	80028d8 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <HAL_SPI_MspInit+0xd4>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <HAL_SPI_MspInit+0xd4>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
 8002842:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <HAL_SPI_MspInit+0xd4>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <HAL_SPI_MspInit+0xd4>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a23      	ldr	r2, [pc, #140]	; (80028e4 <HAL_SPI_MspInit+0xd4>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <HAL_SPI_MspInit+0xd4>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_SPI_MspInit+0xd4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_SPI_MspInit+0xd4>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <HAL_SPI_MspInit+0xd4>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002886:	230c      	movs	r3, #12
 8002888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002896:	2305      	movs	r3, #5
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4619      	mov	r1, r3
 80028a0:	4811      	ldr	r0, [pc, #68]	; (80028e8 <HAL_SPI_MspInit+0xd8>)
 80028a2:	f000 fd97 	bl	80033d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80028a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028b8:	2305      	movs	r3, #5
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	480a      	ldr	r0, [pc, #40]	; (80028ec <HAL_SPI_MspInit+0xdc>)
 80028c4:	f000 fd86 	bl	80033d4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2101      	movs	r1, #1
 80028cc:	2024      	movs	r0, #36	; 0x24
 80028ce:	f000 fd1a 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80028d2:	2024      	movs	r0, #36	; 0x24
 80028d4:	f000 fd33 	bl	800333e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80028d8:	bf00      	nop
 80028da:	3728      	adds	r7, #40	; 0x28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40003800 	.word	0x40003800
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40020800 	.word	0x40020800
 80028ec:	40020400 	.word	0x40020400

080028f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_MspInit+0x4c>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4a0f      	ldr	r2, [pc, #60]	; (800293c <HAL_MspInit+0x4c>)
 8002900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002904:	6453      	str	r3, [r2, #68]	; 0x44
 8002906:	4b0d      	ldr	r3, [pc, #52]	; (800293c <HAL_MspInit+0x4c>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_MspInit+0x4c>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a08      	ldr	r2, [pc, #32]	; (800293c <HAL_MspInit+0x4c>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_MspInit+0x4c>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800

08002940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002952:	e7fe      	b.n	8002952 <HardFault_Handler+0x4>

08002954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <MemManage_Handler+0x4>

0800295a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800295e:	e7fe      	b.n	800295e <BusFault_Handler+0x4>

08002960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002964:	e7fe      	b.n	8002964 <UsageFault_Handler+0x4>

08002966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002994:	f000 fb78 	bl	8003088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}

0800299c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80029a0:	2002      	movs	r0, #2
 80029a2:	f000 fee3 	bl	800376c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}

080029aa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80029ae:	2004      	movs	r0, #4
 80029b0:	f000 fedc 	bl	800376c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80029bc:	2008      	movs	r0, #8
 80029be:	f000 fed5 	bl	800376c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029cc:	4803      	ldr	r0, [pc, #12]	; (80029dc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80029ce:	f002 fe85 	bl	80056dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80029d2:	4803      	ldr	r0, [pc, #12]	; (80029e0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80029d4:	f002 fe82 	bl	80056dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200003a8 	.word	0x200003a8
 80029e0:	200003e8 	.word	0x200003e8

080029e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <TIM3_IRQHandler+0x10>)
 80029ea:	f002 fe77 	bl	80056dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000368 	.word	0x20000368

080029f8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <SPI2_IRQHandler+0x10>)
 80029fe:	f001 fe05 	bl	800460c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000310 	.word	0x20000310

08002a0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <_sbrk+0x50>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <_sbrk+0x16>
		heap_end = &end;
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <_sbrk+0x50>)
 8002a1e:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <_sbrk+0x54>)
 8002a20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <_sbrk+0x50>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <_sbrk+0x50>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	466a      	mov	r2, sp
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d907      	bls.n	8002a46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002a36:	f003 fcff 	bl	8006438 <__errno>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	230c      	movs	r3, #12
 8002a3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
 8002a44:	e006      	b.n	8002a54 <_sbrk+0x48>
	}

	heap_end += incr;
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <_sbrk+0x50>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <_sbrk+0x50>)
 8002a50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002a52:	68fb      	ldr	r3, [r7, #12]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000284 	.word	0x20000284
 8002a60:	20000470 	.word	0x20000470

08002a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a68:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <SystemInit+0x28>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <SystemInit+0x28>)
 8002a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <SystemInit+0x28>)
 8002a7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a7e:	609a      	str	r2, [r3, #8]
#endif
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08c      	sub	sp, #48	; 0x30
 8002a94:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a96:	f107 030c 	add.w	r3, r7, #12
 8002a9a:	2224      	movs	r2, #36	; 0x24
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f003 fcf4 	bl	800648c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <MX_TIM1_Init+0xa8>)
 8002aae:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <MX_TIM1_Init+0xac>)
 8002ab0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8002ab2:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <MX_TIM1_Init+0xa8>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab8:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <MX_TIM1_Init+0xa8>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002abe:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <MX_TIM1_Init+0xa8>)
 8002ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ac4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <MX_TIM1_Init+0xa8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <MX_TIM1_Init+0xa8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ad2:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <MX_TIM1_Init+0xa8>)
 8002ad4:	2280      	movs	r2, #128	; 0x80
 8002ad6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002aec:	2300      	movs	r3, #0
 8002aee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002af0:	2301      	movs	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002af4:	2300      	movs	r3, #0
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002afc:	f107 030c 	add.w	r3, r7, #12
 8002b00:	4619      	mov	r1, r3
 8002b02:	480d      	ldr	r0, [pc, #52]	; (8002b38 <MX_TIM1_Init+0xa8>)
 8002b04:	f002 fcda 	bl	80054bc <HAL_TIM_Encoder_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002b0e:	f7ff fdd5 	bl	80026bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4806      	ldr	r0, [pc, #24]	; (8002b38 <MX_TIM1_Init+0xa8>)
 8002b20:	f003 fbfa 	bl	8006318 <HAL_TIMEx_MasterConfigSynchronization>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002b2a:	f7ff fdc7 	bl	80026bc <Error_Handler>
  }

}
 8002b2e:	bf00      	nop
 8002b30:	3730      	adds	r7, #48	; 0x30
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200003a8 	.word	0x200003a8
 8002b3c:	40010000 	.word	0x40010000

08002b40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08c      	sub	sp, #48	; 0x30
 8002b44:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b46:	f107 030c 	add.w	r3, r7, #12
 8002b4a:	2224      	movs	r2, #36	; 0x24
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f003 fc9c 	bl	800648c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <MX_TIM3_Init+0xa0>)
 8002b5e:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <MX_TIM3_Init+0xa4>)
 8002b60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <MX_TIM3_Init+0xa0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <MX_TIM3_Init+0xa0>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <MX_TIM3_Init+0xa0>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b74:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <MX_TIM3_Init+0xa0>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b7a:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <MX_TIM3_Init+0xa0>)
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b80:	2301      	movs	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002ba4:	f107 030c 	add.w	r3, r7, #12
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480d      	ldr	r0, [pc, #52]	; (8002be0 <MX_TIM3_Init+0xa0>)
 8002bac:	f002 fc86 	bl	80054bc <HAL_TIM_Encoder_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002bb6:	f7ff fd81 	bl	80026bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8002bba:	2350      	movs	r3, #80	; 0x50
 8002bbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4806      	ldr	r0, [pc, #24]	; (8002be0 <MX_TIM3_Init+0xa0>)
 8002bc8:	f003 fba6 	bl	8006318 <HAL_TIMEx_MasterConfigSynchronization>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002bd2:	f7ff fd73 	bl	80026bc <Error_Handler>
  }

}
 8002bd6:	bf00      	nop
 8002bd8:	3730      	adds	r7, #48	; 0x30
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000368 	.word	0x20000368
 8002be4:	40000400 	.word	0x40000400

08002be8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08c      	sub	sp, #48	; 0x30
 8002bec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bee:	f107 0320 	add.w	r3, r7, #32
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	611a      	str	r2, [r3, #16]
 8002c0a:	615a      	str	r2, [r3, #20]
 8002c0c:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 8002c0e:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <MX_TIM9_Init+0xb8>)
 8002c10:	4a24      	ldr	r2, [pc, #144]	; (8002ca4 <MX_TIM9_Init+0xbc>)
 8002c12:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1;
 8002c14:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <MX_TIM9_Init+0xb8>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <MX_TIM9_Init+0xb8>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4199;
 8002c20:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <MX_TIM9_Init+0xb8>)
 8002c22:	f241 0267 	movw	r2, #4199	; 0x1067
 8002c26:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <MX_TIM9_Init+0xb8>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <MX_TIM9_Init+0xb8>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002c34:	481a      	ldr	r0, [pc, #104]	; (8002ca0 <MX_TIM9_Init+0xb8>)
 8002c36:	f002 fac7 	bl	80051c8 <HAL_TIM_Base_Init>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002c40:	f7ff fd3c 	bl	80026bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c48:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002c4a:	f107 0320 	add.w	r3, r7, #32
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4813      	ldr	r0, [pc, #76]	; (8002ca0 <MX_TIM9_Init+0xb8>)
 8002c52:	f002 ff71 	bl	8005b38 <HAL_TIM_ConfigClockSource>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8002c5c:	f7ff fd2e 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8002c60:	480f      	ldr	r0, [pc, #60]	; (8002ca0 <MX_TIM9_Init+0xb8>)
 8002c62:	f002 fb2b 	bl	80052bc <HAL_TIM_OC_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8002c6c:	f7ff fd26 	bl	80026bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002c70:	2300      	movs	r3, #0
 8002c72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	2200      	movs	r2, #0
 8002c84:	4619      	mov	r1, r3
 8002c86:	4806      	ldr	r0, [pc, #24]	; (8002ca0 <MX_TIM9_Init+0xb8>)
 8002c88:	f002 fe30 	bl	80058ec <HAL_TIM_OC_ConfigChannel>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8002c92:	f7ff fd13 	bl	80026bc <Error_Handler>
  }

}
 8002c96:	bf00      	nop
 8002c98:	3730      	adds	r7, #48	; 0x30
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200003e8 	.word	0x200003e8
 8002ca4:	40014000 	.word	0x40014000

08002ca8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cae:	f107 0320 	add.w	r3, r7, #32
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	605a      	str	r2, [r3, #4]
 8002cb8:	609a      	str	r2, [r3, #8]
 8002cba:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	60da      	str	r2, [r3, #12]
 8002cc8:	611a      	str	r2, [r3, #16]
 8002cca:	615a      	str	r2, [r3, #20]
 8002ccc:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8002cce:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <MX_TIM12_Init+0xd4>)
 8002cd0:	4a2b      	ldr	r2, [pc, #172]	; (8002d80 <MX_TIM12_Init+0xd8>)
 8002cd2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8002cd4:	4b29      	ldr	r3, [pc, #164]	; (8002d7c <MX_TIM12_Init+0xd4>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cda:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <MX_TIM12_Init+0xd4>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2799;
 8002ce0:	4b26      	ldr	r3, [pc, #152]	; (8002d7c <MX_TIM12_Init+0xd4>)
 8002ce2:	f640 22ef 	movw	r2, #2799	; 0xaef
 8002ce6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce8:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <MX_TIM12_Init+0xd4>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cee:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <MX_TIM12_Init+0xd4>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002cf4:	4821      	ldr	r0, [pc, #132]	; (8002d7c <MX_TIM12_Init+0xd4>)
 8002cf6:	f002 fa67 	bl	80051c8 <HAL_TIM_Base_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002d00:	f7ff fcdc 	bl	80026bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d08:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002d0a:	f107 0320 	add.w	r3, r7, #32
 8002d0e:	4619      	mov	r1, r3
 8002d10:	481a      	ldr	r0, [pc, #104]	; (8002d7c <MX_TIM12_Init+0xd4>)
 8002d12:	f002 ff11 	bl	8005b38 <HAL_TIM_ConfigClockSource>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002d1c:	f7ff fcce 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002d20:	4816      	ldr	r0, [pc, #88]	; (8002d7c <MX_TIM12_Init+0xd4>)
 8002d22:	f002 fb00 	bl	8005326 <HAL_TIM_PWM_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002d2c:	f7ff fcc6 	bl	80026bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d30:	2360      	movs	r3, #96	; 0x60
 8002d32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	2200      	movs	r2, #0
 8002d44:	4619      	mov	r1, r3
 8002d46:	480d      	ldr	r0, [pc, #52]	; (8002d7c <MX_TIM12_Init+0xd4>)
 8002d48:	f002 fe30 	bl	80059ac <HAL_TIM_PWM_ConfigChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002d52:	f7ff fcb3 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	2204      	movs	r2, #4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4807      	ldr	r0, [pc, #28]	; (8002d7c <MX_TIM12_Init+0xd4>)
 8002d5e:	f002 fe25 	bl	80059ac <HAL_TIM_PWM_ConfigChannel>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8002d68:	f7ff fca8 	bl	80026bc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8002d6c:	4803      	ldr	r0, [pc, #12]	; (8002d7c <MX_TIM12_Init+0xd4>)
 8002d6e:	f000 f8d5 	bl	8002f1c <HAL_TIM_MspPostInit>

}
 8002d72:	bf00      	nop
 8002d74:	3730      	adds	r7, #48	; 0x30
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000428 	.word	0x20000428
 8002d80:	40001800 	.word	0x40001800

08002d84 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08c      	sub	sp, #48	; 0x30
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	f107 031c 	add.w	r3, r7, #28
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a3a      	ldr	r2, [pc, #232]	; (8002e8c <HAL_TIM_Encoder_MspInit+0x108>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d135      	bne.n	8002e12 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	4a38      	ldr	r2, [pc, #224]	; (8002e90 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6453      	str	r3, [r2, #68]	; 0x44
 8002db6:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a31      	ldr	r2, [pc, #196]	; (8002e90 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002dcc:	f043 0310 	orr.w	r3, r3, #16
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002dde:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de8:	2301      	movs	r3, #1
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dec:	2302      	movs	r3, #2
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002df0:	2301      	movs	r3, #1
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002df4:	f107 031c 	add.w	r3, r7, #28
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4826      	ldr	r0, [pc, #152]	; (8002e94 <HAL_TIM_Encoder_MspInit+0x110>)
 8002dfc:	f000 faea 	bl	80033d4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 8002e00:	2200      	movs	r2, #0
 8002e02:	2101      	movs	r1, #1
 8002e04:	2018      	movs	r0, #24
 8002e06:	f000 fa7e 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002e0a:	2018      	movs	r0, #24
 8002e0c:	f000 fa97 	bl	800333e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e10:	e038      	b.n	8002e84 <HAL_TIM_Encoder_MspInit+0x100>
  else if(tim_encoderHandle->Instance==TIM3)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a20      	ldr	r2, [pc, #128]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x114>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d133      	bne.n	8002e84 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e26:	f043 0302 	orr.w	r3, r3, #2
 8002e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e42:	f043 0304 	orr.w	r3, r3, #4
 8002e46:	6313      	str	r3, [r2, #48]	; 0x30
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e54:	23c0      	movs	r3, #192	; 0xc0
 8002e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e60:	2302      	movs	r3, #2
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e64:	2302      	movs	r3, #2
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e68:	f107 031c 	add.w	r3, r7, #28
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	480b      	ldr	r0, [pc, #44]	; (8002e9c <HAL_TIM_Encoder_MspInit+0x118>)
 8002e70:	f000 fab0 	bl	80033d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002e74:	2200      	movs	r2, #0
 8002e76:	2101      	movs	r1, #1
 8002e78:	201d      	movs	r0, #29
 8002e7a:	f000 fa44 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e7e:	201d      	movs	r0, #29
 8002e80:	f000 fa5d 	bl	800333e <HAL_NVIC_EnableIRQ>
}
 8002e84:	bf00      	nop
 8002e86:	3730      	adds	r7, #48	; 0x30
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	40020800 	.word	0x40020800

08002ea0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <HAL_TIM_Base_MspInit+0x70>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d116      	bne.n	8002ee0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <HAL_TIM_Base_MspInit+0x74>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4a16      	ldr	r2, [pc, #88]	; (8002f14 <HAL_TIM_Base_MspInit+0x74>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_TIM_Base_MspInit+0x74>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	2018      	movs	r0, #24
 8002ed4:	f000 fa17 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002ed8:	2018      	movs	r0, #24
 8002eda:	f000 fa30 	bl	800333e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002ede:	e012      	b.n	8002f06 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM12)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <HAL_TIM_Base_MspInit+0x78>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10d      	bne.n	8002f06 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_TIM_Base_MspInit+0x74>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a08      	ldr	r2, [pc, #32]	; (8002f14 <HAL_TIM_Base_MspInit+0x74>)
 8002ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_TIM_Base_MspInit+0x74>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40014000 	.word	0x40014000
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40001800 	.word	0x40001800

08002f1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	f107 030c 	add.w	r3, r7, #12
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <HAL_TIM_MspPostInit+0x68>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d11e      	bne.n	8002f7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <HAL_TIM_MspPostInit+0x6c>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <HAL_TIM_MspPostInit+0x6c>)
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <HAL_TIM_MspPostInit+0x6c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration    
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002f5a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f60:	2302      	movs	r3, #2
 8002f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002f6c:	2309      	movs	r3, #9
 8002f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	4619      	mov	r1, r3
 8002f76:	4805      	ldr	r0, [pc, #20]	; (8002f8c <HAL_TIM_MspPostInit+0x70>)
 8002f78:	f000 fa2c 	bl	80033d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002f7c:	bf00      	nop
 8002f7e:	3720      	adds	r7, #32
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40001800 	.word	0x40001800
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40020400 	.word	0x40020400

08002f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f96:	e003      	b.n	8002fa0 <LoopCopyDataInit>

08002f98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f9e:	3104      	adds	r1, #4

08002fa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fa0:	480b      	ldr	r0, [pc, #44]	; (8002fd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fa8:	d3f6      	bcc.n	8002f98 <CopyDataInit>
  ldr  r2, =_sbss
 8002faa:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fac:	e002      	b.n	8002fb4 <LoopFillZerobss>

08002fae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fb0:	f842 3b04 	str.w	r3, [r2], #4

08002fb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fb8:	d3f9      	bcc.n	8002fae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fba:	f7ff fd53 	bl	8002a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fbe:	f003 fa41 	bl	8006444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fc2:	f7fe faa9 	bl	8001518 <main>
  bx  lr    
 8002fc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002fcc:	08009458 	.word	0x08009458
  ldr  r0, =_sdata
 8002fd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fd4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002fd8:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002fdc:	20000470 	.word	0x20000470

08002fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fe0:	e7fe      	b.n	8002fe0 <ADC_IRQHandler>
	...

08002fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <HAL_Init+0x40>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <HAL_Init+0x40>)
 8002fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_Init+0x40>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <HAL_Init+0x40>)
 8002ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_Init+0x40>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a07      	ldr	r2, [pc, #28]	; (8003024 <HAL_Init+0x40>)
 8003006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800300c:	2003      	movs	r0, #3
 800300e:	f000 f96f 	bl	80032f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003012:	2000      	movs	r0, #0
 8003014:	f000 f808 	bl	8003028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003018:	f7ff fc6a 	bl	80028f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023c00 	.word	0x40023c00

08003028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_InitTick+0x54>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_InitTick+0x58>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	4619      	mov	r1, r3
 800303a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800303e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f995 	bl	8003376 <HAL_SYSTICK_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e00e      	b.n	8003074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b0f      	cmp	r3, #15
 800305a:	d80a      	bhi.n	8003072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800305c:	2200      	movs	r2, #0
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	f000 f94f 	bl	8003306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003068:	4a06      	ldr	r2, [pc, #24]	; (8003084 <HAL_InitTick+0x5c>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000004 	.word	0x20000004
 8003080:	2000000c 	.word	0x2000000c
 8003084:	20000008 	.word	0x20000008

08003088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_IncTick+0x20>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_IncTick+0x24>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4413      	add	r3, r2
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <HAL_IncTick+0x24>)
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	2000000c 	.word	0x2000000c
 80030ac:	20000468 	.word	0x20000468

080030b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return uwTick;
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <HAL_GetTick+0x14>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20000468 	.word	0x20000468

080030c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7ff ffee 	bl	80030b0 <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d005      	beq.n	80030ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_Delay+0x40>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ee:	bf00      	nop
 80030f0:	f7ff ffde 	bl	80030b0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d8f7      	bhi.n	80030f0 <HAL_Delay+0x28>
  {
  }
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	2000000c 	.word	0x2000000c

0800310c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313e:	4a04      	ldr	r2, [pc, #16]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	60d3      	str	r3, [r2, #12]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <__NVIC_GetPriorityGrouping+0x18>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0307 	and.w	r3, r3, #7
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	2b00      	cmp	r3, #0
 8003180:	db0b      	blt.n	800319a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	4907      	ldr	r1, [pc, #28]	; (80031a8 <__NVIC_EnableIRQ+0x38>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2001      	movs	r0, #1
 8003192:	fa00 f202 	lsl.w	r2, r0, r2
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100

080031ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	db10      	blt.n	80031e0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	f003 021f 	and.w	r2, r3, #31
 80031c4:	4909      	ldr	r1, [pc, #36]	; (80031ec <__NVIC_DisableIRQ+0x40>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2001      	movs	r0, #1
 80031ce:	fa00 f202 	lsl.w	r2, r0, r2
 80031d2:	3320      	adds	r3, #32
 80031d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80031dc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000e100 	.word	0xe000e100

080031f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003200:	2b00      	cmp	r3, #0
 8003202:	db0a      	blt.n	800321a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	490c      	ldr	r1, [pc, #48]	; (800323c <__NVIC_SetPriority+0x4c>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	0112      	lsls	r2, r2, #4
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	440b      	add	r3, r1
 8003214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003218:	e00a      	b.n	8003230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4908      	ldr	r1, [pc, #32]	; (8003240 <__NVIC_SetPriority+0x50>)
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	3b04      	subs	r3, #4
 8003228:	0112      	lsls	r2, r2, #4
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	440b      	add	r3, r1
 800322e:	761a      	strb	r2, [r3, #24]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000e100 	.word	0xe000e100
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f1c3 0307 	rsb	r3, r3, #7
 800325e:	2b04      	cmp	r3, #4
 8003260:	bf28      	it	cs
 8003262:	2304      	movcs	r3, #4
 8003264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3304      	adds	r3, #4
 800326a:	2b06      	cmp	r3, #6
 800326c:	d902      	bls.n	8003274 <NVIC_EncodePriority+0x30>
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3b03      	subs	r3, #3
 8003272:	e000      	b.n	8003276 <NVIC_EncodePriority+0x32>
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	f04f 32ff 	mov.w	r2, #4294967295
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43da      	mvns	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	401a      	ands	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800328c:	f04f 31ff 	mov.w	r1, #4294967295
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43d9      	mvns	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800329c:	4313      	orrs	r3, r2
         );
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3724      	adds	r7, #36	; 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032bc:	d301      	bcc.n	80032c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032be:	2301      	movs	r3, #1
 80032c0:	e00f      	b.n	80032e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032c2:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <SysTick_Config+0x40>)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ca:	210f      	movs	r1, #15
 80032cc:	f04f 30ff 	mov.w	r0, #4294967295
 80032d0:	f7ff ff8e 	bl	80031f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <SysTick_Config+0x40>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032da:	4b04      	ldr	r3, [pc, #16]	; (80032ec <SysTick_Config+0x40>)
 80032dc:	2207      	movs	r2, #7
 80032de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	e000e010 	.word	0xe000e010

080032f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ff07 	bl	800310c <__NVIC_SetPriorityGrouping>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	4603      	mov	r3, r0
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003318:	f7ff ff1c 	bl	8003154 <__NVIC_GetPriorityGrouping>
 800331c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	6978      	ldr	r0, [r7, #20]
 8003324:	f7ff ff8e 	bl	8003244 <NVIC_EncodePriority>
 8003328:	4602      	mov	r2, r0
 800332a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff5d 	bl	80031f0 <__NVIC_SetPriority>
}
 8003336:	bf00      	nop
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	4603      	mov	r3, r0
 8003346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff ff0f 	bl	8003170 <__NVIC_EnableIRQ>
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff1f 	bl	80031ac <__NVIC_DisableIRQ>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ff94 	bl	80032ac <SysTick_Config>
 8003384:	4603      	mov	r3, r0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d004      	beq.n	80033ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e00c      	b.n	80033c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2205      	movs	r2, #5
 80033b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	e16b      	b.n	80036c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033f0:	2201      	movs	r2, #1
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	429a      	cmp	r2, r3
 800340a:	f040 815a 	bne.w	80036c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d00b      	beq.n	800342e <HAL_GPIO_Init+0x5a>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d007      	beq.n	800342e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003422:	2b11      	cmp	r3, #17
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b12      	cmp	r3, #18
 800342c:	d130      	bne.n	8003490 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	2203      	movs	r2, #3
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003464:	2201      	movs	r2, #1
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 0201 	and.w	r2, r3, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0xfc>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b12      	cmp	r3, #18
 80034ce:	d123      	bne.n	8003518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	08da      	lsrs	r2, r3, #3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3208      	adds	r2, #8
 80034d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	220f      	movs	r2, #15
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	08da      	lsrs	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3208      	adds	r2, #8
 8003512:	69b9      	ldr	r1, [r7, #24]
 8003514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	2203      	movs	r2, #3
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0203 	and.w	r2, r3, #3
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80b4 	beq.w	80036c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	4b5f      	ldr	r3, [pc, #380]	; (80036dc <HAL_GPIO_Init+0x308>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	4a5e      	ldr	r2, [pc, #376]	; (80036dc <HAL_GPIO_Init+0x308>)
 8003564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003568:	6453      	str	r3, [r2, #68]	; 0x44
 800356a:	4b5c      	ldr	r3, [pc, #368]	; (80036dc <HAL_GPIO_Init+0x308>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003576:	4a5a      	ldr	r2, [pc, #360]	; (80036e0 <HAL_GPIO_Init+0x30c>)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	3302      	adds	r3, #2
 800357e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	220f      	movs	r2, #15
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a51      	ldr	r2, [pc, #324]	; (80036e4 <HAL_GPIO_Init+0x310>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d02b      	beq.n	80035fa <HAL_GPIO_Init+0x226>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a50      	ldr	r2, [pc, #320]	; (80036e8 <HAL_GPIO_Init+0x314>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d025      	beq.n	80035f6 <HAL_GPIO_Init+0x222>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4f      	ldr	r2, [pc, #316]	; (80036ec <HAL_GPIO_Init+0x318>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01f      	beq.n	80035f2 <HAL_GPIO_Init+0x21e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4e      	ldr	r2, [pc, #312]	; (80036f0 <HAL_GPIO_Init+0x31c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d019      	beq.n	80035ee <HAL_GPIO_Init+0x21a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4d      	ldr	r2, [pc, #308]	; (80036f4 <HAL_GPIO_Init+0x320>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_GPIO_Init+0x216>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a4c      	ldr	r2, [pc, #304]	; (80036f8 <HAL_GPIO_Init+0x324>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00d      	beq.n	80035e6 <HAL_GPIO_Init+0x212>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a4b      	ldr	r2, [pc, #300]	; (80036fc <HAL_GPIO_Init+0x328>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d007      	beq.n	80035e2 <HAL_GPIO_Init+0x20e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a4a      	ldr	r2, [pc, #296]	; (8003700 <HAL_GPIO_Init+0x32c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <HAL_GPIO_Init+0x20a>
 80035da:	2307      	movs	r3, #7
 80035dc:	e00e      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035de:	2308      	movs	r3, #8
 80035e0:	e00c      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035e2:	2306      	movs	r3, #6
 80035e4:	e00a      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035e6:	2305      	movs	r3, #5
 80035e8:	e008      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035ea:	2304      	movs	r3, #4
 80035ec:	e006      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035ee:	2303      	movs	r3, #3
 80035f0:	e004      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e002      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_GPIO_Init+0x228>
 80035fa:	2300      	movs	r3, #0
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	f002 0203 	and.w	r2, r2, #3
 8003602:	0092      	lsls	r2, r2, #2
 8003604:	4093      	lsls	r3, r2
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800360c:	4934      	ldr	r1, [pc, #208]	; (80036e0 <HAL_GPIO_Init+0x30c>)
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	089b      	lsrs	r3, r3, #2
 8003612:	3302      	adds	r3, #2
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800361a:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <HAL_GPIO_Init+0x330>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800363e:	4a31      	ldr	r2, [pc, #196]	; (8003704 <HAL_GPIO_Init+0x330>)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003644:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <HAL_GPIO_Init+0x330>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003668:	4a26      	ldr	r2, [pc, #152]	; (8003704 <HAL_GPIO_Init+0x330>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800366e:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_GPIO_Init+0x330>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003692:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_GPIO_Init+0x330>)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <HAL_GPIO_Init+0x330>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036bc:	4a11      	ldr	r2, [pc, #68]	; (8003704 <HAL_GPIO_Init+0x330>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3301      	adds	r3, #1
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2b0f      	cmp	r3, #15
 80036cc:	f67f ae90 	bls.w	80033f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036d0:	bf00      	nop
 80036d2:	3724      	adds	r7, #36	; 0x24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40013800 	.word	0x40013800
 80036e4:	40020000 	.word	0x40020000
 80036e8:	40020400 	.word	0x40020400
 80036ec:	40020800 	.word	0x40020800
 80036f0:	40020c00 	.word	0x40020c00
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40021400 	.word	0x40021400
 80036fc:	40021800 	.word	0x40021800
 8003700:	40021c00 	.word	0x40021c00
 8003704:	40013c00 	.word	0x40013c00

08003708 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	887b      	ldrh	r3, [r7, #2]
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e001      	b.n	800372a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
 8003744:	4613      	mov	r3, r2
 8003746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003748:	787b      	ldrb	r3, [r7, #1]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003754:	e003      	b.n	800375e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	041a      	lsls	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	619a      	str	r2, [r3, #24]
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003776:	4b08      	ldr	r3, [pc, #32]	; (8003798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d006      	beq.n	8003790 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003782:	4a05      	ldr	r2, [pc, #20]	; (8003798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe ff26 	bl	80025dc <HAL_GPIO_EXTI_Callback>
  }
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40013c00 	.word	0x40013c00

0800379c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e25b      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d075      	beq.n	80038a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ba:	4ba3      	ldr	r3, [pc, #652]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d00c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c6:	4ba0      	ldr	r3, [pc, #640]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d112      	bne.n	80037f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d2:	4b9d      	ldr	r3, [pc, #628]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037de:	d10b      	bne.n	80037f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e0:	4b99      	ldr	r3, [pc, #612]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d05b      	beq.n	80038a4 <HAL_RCC_OscConfig+0x108>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d157      	bne.n	80038a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e236      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003800:	d106      	bne.n	8003810 <HAL_RCC_OscConfig+0x74>
 8003802:	4b91      	ldr	r3, [pc, #580]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a90      	ldr	r2, [pc, #576]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e01d      	b.n	800384c <HAL_RCC_OscConfig+0xb0>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003818:	d10c      	bne.n	8003834 <HAL_RCC_OscConfig+0x98>
 800381a:	4b8b      	ldr	r3, [pc, #556]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a8a      	ldr	r2, [pc, #552]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b88      	ldr	r3, [pc, #544]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a87      	ldr	r2, [pc, #540]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e00b      	b.n	800384c <HAL_RCC_OscConfig+0xb0>
 8003834:	4b84      	ldr	r3, [pc, #528]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a83      	ldr	r2, [pc, #524]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 800383a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b81      	ldr	r3, [pc, #516]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a80      	ldr	r2, [pc, #512]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d013      	beq.n	800387c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7ff fc2c 	bl	80030b0 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800385c:	f7ff fc28 	bl	80030b0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	; 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e1fb      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4b76      	ldr	r3, [pc, #472]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0xc0>
 800387a:	e014      	b.n	80038a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7ff fc18 	bl	80030b0 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003884:	f7ff fc14 	bl	80030b0 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e1e7      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003896:	4b6c      	ldr	r3, [pc, #432]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0xe8>
 80038a2:	e000      	b.n	80038a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d063      	beq.n	800397a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038b2:	4b65      	ldr	r3, [pc, #404]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038be:	4b62      	ldr	r3, [pc, #392]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d11c      	bne.n	8003904 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ca:	4b5f      	ldr	r3, [pc, #380]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d116      	bne.n	8003904 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d6:	4b5c      	ldr	r3, [pc, #368]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_RCC_OscConfig+0x152>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e1bb      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	4b56      	ldr	r3, [pc, #344]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4952      	ldr	r1, [pc, #328]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	e03a      	b.n	800397a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d020      	beq.n	800394e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800390c:	4b4f      	ldr	r3, [pc, #316]	; (8003a4c <HAL_RCC_OscConfig+0x2b0>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003912:	f7ff fbcd 	bl	80030b0 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800391a:	f7ff fbc9 	bl	80030b0 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e19c      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392c:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003938:	4b43      	ldr	r3, [pc, #268]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4940      	ldr	r1, [pc, #256]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
 800394c:	e015      	b.n	800397a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394e:	4b3f      	ldr	r3, [pc, #252]	; (8003a4c <HAL_RCC_OscConfig+0x2b0>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7ff fbac 	bl	80030b0 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800395c:	f7ff fba8 	bl	80030b0 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e17b      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396e:	4b36      	ldr	r3, [pc, #216]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d030      	beq.n	80039e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d016      	beq.n	80039bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800398e:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <HAL_RCC_OscConfig+0x2b4>)
 8003990:	2201      	movs	r2, #1
 8003992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7ff fb8c 	bl	80030b0 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399c:	f7ff fb88 	bl	80030b0 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e15b      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ae:	4b26      	ldr	r3, [pc, #152]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0x200>
 80039ba:	e015      	b.n	80039e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039bc:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_RCC_OscConfig+0x2b4>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c2:	f7ff fb75 	bl	80030b0 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ca:	f7ff fb71 	bl	80030b0 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e144      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80039de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a0 	beq.w	8003b36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fa:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10f      	bne.n	8003a26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	4a0e      	ldr	r2, [pc, #56]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_OscConfig+0x2b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d121      	bne.n	8003a76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <HAL_RCC_OscConfig+0x2b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a07      	ldr	r2, [pc, #28]	; (8003a54 <HAL_RCC_OscConfig+0x2b8>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3e:	f7ff fb37 	bl	80030b0 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	e011      	b.n	8003a6a <HAL_RCC_OscConfig+0x2ce>
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	42470000 	.word	0x42470000
 8003a50:	42470e80 	.word	0x42470e80
 8003a54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a58:	f7ff fb2a 	bl	80030b0 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e0fd      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6a:	4b81      	ldr	r3, [pc, #516]	; (8003c70 <HAL_RCC_OscConfig+0x4d4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCC_OscConfig+0x2f0>
 8003a7e:	4b7d      	ldr	r3, [pc, #500]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a7c      	ldr	r2, [pc, #496]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8a:	e01c      	b.n	8003ac6 <HAL_RCC_OscConfig+0x32a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b05      	cmp	r3, #5
 8003a92:	d10c      	bne.n	8003aae <HAL_RCC_OscConfig+0x312>
 8003a94:	4b77      	ldr	r3, [pc, #476]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	4a76      	ldr	r2, [pc, #472]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003a9a:	f043 0304 	orr.w	r3, r3, #4
 8003a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa0:	4b74      	ldr	r3, [pc, #464]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a73      	ldr	r2, [pc, #460]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003aac:	e00b      	b.n	8003ac6 <HAL_RCC_OscConfig+0x32a>
 8003aae:	4b71      	ldr	r3, [pc, #452]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	4a70      	ldr	r2, [pc, #448]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aba:	4b6e      	ldr	r3, [pc, #440]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	4a6d      	ldr	r2, [pc, #436]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003ac0:	f023 0304 	bic.w	r3, r3, #4
 8003ac4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d015      	beq.n	8003afa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7ff faef 	bl	80030b0 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad4:	e00a      	b.n	8003aec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7ff faeb 	bl	80030b0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e0bc      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aec:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0ee      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x33a>
 8003af8:	e014      	b.n	8003b24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afa:	f7ff fad9 	bl	80030b0 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b00:	e00a      	b.n	8003b18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7ff fad5 	bl	80030b0 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e0a6      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b18:	4b56      	ldr	r3, [pc, #344]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ee      	bne.n	8003b02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d105      	bne.n	8003b36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2a:	4b52      	ldr	r3, [pc, #328]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	4a51      	ldr	r2, [pc, #324]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8092 	beq.w	8003c64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b40:	4b4c      	ldr	r3, [pc, #304]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d05c      	beq.n	8003c06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d141      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b54:	4b48      	ldr	r3, [pc, #288]	; (8003c78 <HAL_RCC_OscConfig+0x4dc>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7ff faa9 	bl	80030b0 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b62:	f7ff faa5 	bl	80030b0 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e078      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b74:	4b3f      	ldr	r3, [pc, #252]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f0      	bne.n	8003b62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	019b      	lsls	r3, r3, #6
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	061b      	lsls	r3, r3, #24
 8003ba4:	4933      	ldr	r1, [pc, #204]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003baa:	4b33      	ldr	r3, [pc, #204]	; (8003c78 <HAL_RCC_OscConfig+0x4dc>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7ff fa7e 	bl	80030b0 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7ff fa7a 	bl	80030b0 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e04d      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x41c>
 8003bd6:	e045      	b.n	8003c64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd8:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <HAL_RCC_OscConfig+0x4dc>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7ff fa67 	bl	80030b0 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be6:	f7ff fa63 	bl	80030b0 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e036      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf8:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <HAL_RCC_OscConfig+0x44a>
 8003c04:	e02e      	b.n	8003c64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e029      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <HAL_RCC_OscConfig+0x4d8>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d11c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d115      	bne.n	8003c60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d10d      	bne.n	8003c60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d106      	bne.n	8003c60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40007000 	.word	0x40007000
 8003c74:	40023800 	.word	0x40023800
 8003c78:	42470060 	.word	0x42470060

08003c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0cc      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c90:	4b68      	ldr	r3, [pc, #416]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d90c      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9e:	4b65      	ldr	r3, [pc, #404]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b63      	ldr	r3, [pc, #396]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0b8      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd0:	4b59      	ldr	r3, [pc, #356]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a58      	ldr	r2, [pc, #352]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce8:	4b53      	ldr	r3, [pc, #332]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf4:	4b50      	ldr	r3, [pc, #320]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	494d      	ldr	r1, [pc, #308]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d044      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b47      	ldr	r3, [pc, #284]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d119      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e07f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3a:	4b3f      	ldr	r3, [pc, #252]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e06f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e067      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5a:	4b37      	ldr	r3, [pc, #220]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f023 0203 	bic.w	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4934      	ldr	r1, [pc, #208]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d6c:	f7ff f9a0 	bl	80030b0 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	e00a      	b.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d74:	f7ff f99c 	bl	80030b0 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e04f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	4b2b      	ldr	r3, [pc, #172]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 020c 	and.w	r2, r3, #12
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d1eb      	bne.n	8003d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d20c      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b22      	ldr	r3, [pc, #136]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e032      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd0:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4916      	ldr	r1, [pc, #88]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	490e      	ldr	r1, [pc, #56]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e02:	f000 f821 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8003e06:	4601      	mov	r1, r0
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <HAL_RCC_ClockConfig+0x1c0>)
 8003e14:	5cd3      	ldrb	r3, [r2, r3]
 8003e16:	fa21 f303 	lsr.w	r3, r1, r3
 8003e1a:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff f900 	bl	8003028 <HAL_InitTick>

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023c00 	.word	0x40023c00
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	08009180 	.word	0x08009180
 8003e40:	20000004 	.word	0x20000004
 8003e44:	20000008 	.word	0x20000008

08003e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	2300      	movs	r3, #0
 8003e58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e5e:	4b63      	ldr	r3, [pc, #396]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d007      	beq.n	8003e7a <HAL_RCC_GetSysClockFreq+0x32>
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d008      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x38>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 80b4 	bne.w	8003fdc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e74:	4b5e      	ldr	r3, [pc, #376]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e76:	60bb      	str	r3, [r7, #8]
       break;
 8003e78:	e0b3      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e7a:	4b5e      	ldr	r3, [pc, #376]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003e7c:	60bb      	str	r3, [r7, #8]
      break;
 8003e7e:	e0b0      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e80:	4b5a      	ldr	r3, [pc, #360]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e8a:	4b58      	ldr	r3, [pc, #352]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d04a      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e96:	4b55      	ldr	r3, [pc, #340]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	099b      	lsrs	r3, r3, #6
 8003e9c:	f04f 0400 	mov.w	r4, #0
 8003ea0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	ea03 0501 	and.w	r5, r3, r1
 8003eac:	ea04 0602 	and.w	r6, r4, r2
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	4632      	mov	r2, r6
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	f04f 0400 	mov.w	r4, #0
 8003ebc:	0154      	lsls	r4, r2, #5
 8003ebe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ec2:	014b      	lsls	r3, r1, #5
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	1b49      	subs	r1, r1, r5
 8003eca:	eb62 0206 	sbc.w	r2, r2, r6
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	f04f 0400 	mov.w	r4, #0
 8003ed6:	0194      	lsls	r4, r2, #6
 8003ed8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003edc:	018b      	lsls	r3, r1, #6
 8003ede:	1a5b      	subs	r3, r3, r1
 8003ee0:	eb64 0402 	sbc.w	r4, r4, r2
 8003ee4:	f04f 0100 	mov.w	r1, #0
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	00e2      	lsls	r2, r4, #3
 8003eee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ef2:	00d9      	lsls	r1, r3, #3
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4614      	mov	r4, r2
 8003ef8:	195b      	adds	r3, r3, r5
 8003efa:	eb44 0406 	adc.w	r4, r4, r6
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	0262      	lsls	r2, r4, #9
 8003f08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f0c:	0259      	lsls	r1, r3, #9
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4614      	mov	r4, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	4621      	mov	r1, r4
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f04f 0400 	mov.w	r4, #0
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4623      	mov	r3, r4
 8003f20:	f7fc fe5e 	bl	8000be0 <__aeabi_uldivmod>
 8003f24:	4603      	mov	r3, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	e049      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f2c:	4b2f      	ldr	r3, [pc, #188]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	099b      	lsrs	r3, r3, #6
 8003f32:	f04f 0400 	mov.w	r4, #0
 8003f36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	ea03 0501 	and.w	r5, r3, r1
 8003f42:	ea04 0602 	and.w	r6, r4, r2
 8003f46:	4629      	mov	r1, r5
 8003f48:	4632      	mov	r2, r6
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	f04f 0400 	mov.w	r4, #0
 8003f52:	0154      	lsls	r4, r2, #5
 8003f54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f58:	014b      	lsls	r3, r1, #5
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	1b49      	subs	r1, r1, r5
 8003f60:	eb62 0206 	sbc.w	r2, r2, r6
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	f04f 0400 	mov.w	r4, #0
 8003f6c:	0194      	lsls	r4, r2, #6
 8003f6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f72:	018b      	lsls	r3, r1, #6
 8003f74:	1a5b      	subs	r3, r3, r1
 8003f76:	eb64 0402 	sbc.w	r4, r4, r2
 8003f7a:	f04f 0100 	mov.w	r1, #0
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	00e2      	lsls	r2, r4, #3
 8003f84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f88:	00d9      	lsls	r1, r3, #3
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4614      	mov	r4, r2
 8003f8e:	195b      	adds	r3, r3, r5
 8003f90:	eb44 0406 	adc.w	r4, r4, r6
 8003f94:	f04f 0100 	mov.w	r1, #0
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	02a2      	lsls	r2, r4, #10
 8003f9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003fa2:	0299      	lsls	r1, r3, #10
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4614      	mov	r4, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	4621      	mov	r1, r4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f04f 0400 	mov.w	r4, #0
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4623      	mov	r3, r4
 8003fb6:	f7fc fe13 	bl	8000be0 <__aeabi_uldivmod>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	460c      	mov	r4, r1
 8003fbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	60bb      	str	r3, [r7, #8]
      break;
 8003fda:	e002      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fde:	60bb      	str	r3, [r7, #8]
      break;
 8003fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	00f42400 	.word	0x00f42400
 8003ff4:	007a1200 	.word	0x007a1200

08003ff8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e056      	b.n	80040b8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fe fbf3 	bl	8002810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004040:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	ea42 0103 	orr.w	r1, r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	f003 0104 	and.w	r1, r3, #4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69da      	ldr	r2, [r3, #28]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	4613      	mov	r3, r2
 80040cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_SPI_Transmit_IT+0x20>
 80040dc:	2302      	movs	r3, #2
 80040de:	e067      	b.n	80041b0 <HAL_SPI_Transmit_IT+0xf0>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_SPI_Transmit_IT+0x34>
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040f8:	e055      	b.n	80041a6 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b01      	cmp	r3, #1
 8004104:	d002      	beq.n	800410c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004106:	2302      	movs	r3, #2
 8004108:	75fb      	strb	r3, [r7, #23]
    goto error;
 800410a:	e04c      	b.n	80041a6 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2203      	movs	r2, #3
 8004110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	88fa      	ldrh	r2, [r7, #6]
 8004124:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	88fa      	ldrh	r2, [r7, #6]
 800412a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4a1b      	ldr	r2, [pc, #108]	; (80041bc <HAL_SPI_Transmit_IT+0xfc>)
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
 8004152:	e002      	b.n	800415a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4a1a      	ldr	r2, [pc, #104]	; (80041c0 <HAL_SPI_Transmit_IT+0x100>)
 8004158:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004162:	d107      	bne.n	8004174 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004172:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004182:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d008      	beq.n	80041a4 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	e000      	b.n	80041a6 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 80041a4:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	08004c71 	.word	0x08004c71
 80041c0:	08004c2b 	.word	0x08004c2b

080041c4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d110      	bne.n	8004200 <HAL_SPI_Receive_IT+0x3c>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041e6:	d10b      	bne.n	8004200 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2204      	movs	r2, #4
 80041ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f87a 	bl	80042f0 <HAL_SPI_TransmitReceive_IT>
 80041fc:	4603      	mov	r3, r0
 80041fe:	e06e      	b.n	80042de <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_SPI_Receive_IT+0x4a>
 800420a:	2302      	movs	r3, #2
 800420c:	e067      	b.n	80042de <HAL_SPI_Receive_IT+0x11a>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d002      	beq.n	8004228 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8004222:	2302      	movs	r3, #2
 8004224:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004226:	e055      	b.n	80042d4 <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_SPI_Receive_IT+0x70>
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004238:	e04c      	b.n	80042d4 <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2204      	movs	r2, #4
 800423e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	88fa      	ldrh	r2, [r7, #6]
 8004252:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	88fa      	ldrh	r2, [r7, #6]
 8004258:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4a1a      	ldr	r2, [pc, #104]	; (80042e8 <HAL_SPI_Receive_IT+0x124>)
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
 8004280:	e002      	b.n	8004288 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4a19      	ldr	r2, [pc, #100]	; (80042ec <HAL_SPI_Receive_IT+0x128>)
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004290:	d107      	bne.n	80042a2 <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80042b0:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	d008      	beq.n	80042d2 <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	e000      	b.n	80042d4 <HAL_SPI_Receive_IT+0x110>
  }

error :
 80042d2:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	08004be5 	.word	0x08004be5
 80042ec:	08004b9b 	.word	0x08004b9b

080042f0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_SPI_TransmitReceive_IT+0x20>
 800430c:	2302      	movs	r3, #2
 800430e:	e075      	b.n	80043fc <HAL_SPI_TransmitReceive_IT+0x10c>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800431e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004326:	7dbb      	ldrb	r3, [r7, #22]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d00d      	beq.n	8004348 <HAL_SPI_TransmitReceive_IT+0x58>
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004332:	d106      	bne.n	8004342 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d102      	bne.n	8004342 <HAL_SPI_TransmitReceive_IT+0x52>
 800433c:	7dbb      	ldrb	r3, [r7, #22]
 800433e:	2b04      	cmp	r3, #4
 8004340:	d002      	beq.n	8004348 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004342:	2302      	movs	r3, #2
 8004344:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004346:	e054      	b.n	80043f2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_SPI_TransmitReceive_IT+0x6a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_SPI_TransmitReceive_IT+0x6a>
 8004354:	887b      	ldrh	r3, [r7, #2]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d102      	bne.n	8004360 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800435e:	e048      	b.n	80043f2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b04      	cmp	r3, #4
 800436a:	d003      	beq.n	8004374 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2205      	movs	r2, #5
 8004370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	887a      	ldrh	r2, [r7, #2]
 8004384:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	887a      	ldrh	r2, [r7, #2]
 800438a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	887a      	ldrh	r2, [r7, #2]
 8004396:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	887a      	ldrh	r2, [r7, #2]
 800439c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d006      	beq.n	80043b4 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4a17      	ldr	r2, [pc, #92]	; (8004408 <HAL_SPI_TransmitReceive_IT+0x118>)
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a17      	ldr	r2, [pc, #92]	; (800440c <HAL_SPI_TransmitReceive_IT+0x11c>)
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44
 80043b2:	e005      	b.n	80043c0 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a16      	ldr	r2, [pc, #88]	; (8004410 <HAL_SPI_TransmitReceive_IT+0x120>)
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4a15      	ldr	r2, [pc, #84]	; (8004414 <HAL_SPI_TransmitReceive_IT+0x124>)
 80043be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80043ce:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b40      	cmp	r3, #64	; 0x40
 80043dc:	d008      	beq.n	80043f0 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	e000      	b.n	80043f2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80043f0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	08004add 	.word	0x08004add
 800440c:	08004b3d 	.word	0x08004b3d
 8004410:	08004a19 	.word	0x08004a19
 8004414:	08004a7d 	.word	0x08004a7d

08004418 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8004424:	2301      	movs	r3, #1
 8004426:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004428:	4b72      	ldr	r3, [pc, #456]	; (80045f4 <HAL_SPI_Abort_IT+0x1dc>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a72      	ldr	r2, [pc, #456]	; (80045f8 <HAL_SPI_Abort_IT+0x1e0>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	0a5b      	lsrs	r3, r3, #9
 8004434:	2264      	movs	r2, #100	; 0x64
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	613b      	str	r3, [r7, #16]
  count = resetcount;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0220 	bic.w	r2, r2, #32
 800444e:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445a:	2b80      	cmp	r3, #128	; 0x80
 800445c:	d117      	bne.n	800448e <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a66      	ldr	r2, [pc, #408]	; (80045fc <HAL_SPI_Abort_IT+0x1e4>)
 8004462:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004476:	e008      	b.n	800448a <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	3b01      	subs	r3, #1
 800447c:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b07      	cmp	r3, #7
 8004488:	d1ec      	bne.n	8004464 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d117      	bne.n	80044cc <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a58      	ldr	r2, [pc, #352]	; (8004600 <HAL_SPI_Abort_IT+0x1e8>)
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d106      	bne.n	80044b6 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80044b4:	e008      	b.n	80044c8 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b07      	cmp	r3, #7
 80044c6:	d1ec      	bne.n	80044a2 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00f      	beq.n	80044f4 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d104      	bne.n	80044ec <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e6:	4a47      	ldr	r2, [pc, #284]	; (8004604 <HAL_SPI_Abort_IT+0x1ec>)
 80044e8:	651a      	str	r2, [r3, #80]	; 0x50
 80044ea:	e003      	b.n	80044f4 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f0:	2200      	movs	r2, #0
 80044f2:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00f      	beq.n	800451c <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b01      	cmp	r3, #1
 8004508:	d104      	bne.n	8004514 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450e:	4a3e      	ldr	r2, [pc, #248]	; (8004608 <HAL_SPI_Abort_IT+0x1f0>)
 8004510:	651a      	str	r2, [r3, #80]	; 0x50
 8004512:	e003      	b.n	800451c <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004518:	2200      	movs	r2, #0
 800451a:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b02      	cmp	r3, #2
 8004528:	d115      	bne.n	8004556 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452e:	2b00      	cmp	r3, #0
 8004530:	d011      	beq.n	8004556 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe ff29 	bl	800338e <HAL_DMA_Abort_IT>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004546:	2200      	movs	r2, #0
 8004548:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2240      	movs	r2, #64	; 0x40
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
 8004550:	e001      	b.n	8004556 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b01      	cmp	r3, #1
 8004562:	d115      	bne.n	8004590 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d011      	beq.n	8004590 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe ff0c 	bl	800338e <HAL_DMA_Abort_IT>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004580:	2200      	movs	r2, #0
 8004582:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2240      	movs	r2, #64	; 0x40
 8004588:	655a      	str	r2, [r3, #84]	; 0x54
 800458a:	e001      	b.n	8004590 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d128      	bne.n	80045e8 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d102      	bne.n	80045b0 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e002      	b.n	80045b6 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80045cc:	2300      	movs	r3, #0
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f930 	bl	8004848 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 80045e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3720      	adds	r7, #32
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000004 	.word	0x20000004
 80045f8:	057619f1 	.word	0x057619f1
 80045fc:	0800518d 	.word	0x0800518d
 8004600:	08005105 	.word	0x08005105
 8004604:	08004885 	.word	0x08004885
 8004608:	08004959 	.word	0x08004959

0800460c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	099b      	lsrs	r3, r3, #6
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10f      	bne.n	8004650 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	099b      	lsrs	r3, r3, #6
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
    return;
 800464e:	e0d8      	b.n	8004802 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_SPI_IRQHandler+0x66>
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	09db      	lsrs	r3, r3, #7
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d004      	beq.n	8004672 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4798      	blx	r3
    return;
 8004670:	e0c7      	b.n	8004802 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10c      	bne.n	8004698 <HAL_SPI_IRQHandler+0x8c>
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	099b      	lsrs	r3, r3, #6
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	0a1b      	lsrs	r3, r3, #8
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80b5 	beq.w	8004802 <HAL_SPI_IRQHandler+0x1f6>
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80ae 	beq.w	8004802 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	099b      	lsrs	r3, r3, #6
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d023      	beq.n	80046fa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d011      	beq.n	80046e2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c2:	f043 0204 	orr.w	r2, r3, #4
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	e00b      	b.n	80046fa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046e2:	2300      	movs	r3, #0
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	693b      	ldr	r3, [r7, #16]
        return;
 80046f8:	e083      	b.n	8004802 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d014      	beq.n	8004730 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	f043 0201 	orr.w	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	0a1b      	lsrs	r3, r3, #8
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00c      	beq.n	8004756 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	f043 0208 	orr.w	r2, r3, #8
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004748:	2300      	movs	r3, #0
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	2b00      	cmp	r3, #0
 800475c:	d050      	beq.n	8004800 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800476c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <HAL_SPI_IRQHandler+0x17e>
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d034      	beq.n	80047f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0203 	bic.w	r2, r2, #3
 8004798:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d011      	beq.n	80047c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a6:	4a18      	ldr	r2, [pc, #96]	; (8004808 <HAL_SPI_IRQHandler+0x1fc>)
 80047a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fded 	bl	800338e <HAL_DMA_Abort_IT>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d016      	beq.n	80047fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d2:	4a0d      	ldr	r2, [pc, #52]	; (8004808 <HAL_SPI_IRQHandler+0x1fc>)
 80047d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fe fdd7 	bl	800338e <HAL_DMA_Abort_IT>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80047f2:	e003      	b.n	80047fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f81d 	bl	8004834 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80047fa:	e000      	b.n	80047fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80047fc:	bf00      	nop
    return;
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
  }
}
 8004802:	3720      	adds	r7, #32
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	0800485d 	.word	0x0800485d

0800480c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff ffdc 	bl	8004834 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004896:	2200      	movs	r2, #0
 8004898:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800489a:	4b2d      	ldr	r3, [pc, #180]	; (8004950 <SPI_DMATxAbortCallback+0xcc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a2d      	ldr	r2, [pc, #180]	; (8004954 <SPI_DMATxAbortCallback+0xd0>)
 80048a0:	fba2 2303 	umull	r2, r3, r2, r3
 80048a4:	0a5b      	lsrs	r3, r3, #9
 80048a6:	2264      	movs	r2, #100	; 0x64
 80048a8:	fb02 f303 	mul.w	r3, r2, r3
 80048ac:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0202 	bic.w	r2, r2, #2
 80048bc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d106      	bne.n	80048d2 <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048d0:	e009      	b.n	80048e6 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0eb      	beq.n	80048be <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d004      	beq.n	80048f8 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d126      	bne.n	8004946 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2200      	movs	r2, #0
 80048fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2200      	movs	r2, #0
 8004902:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004908:	2b40      	cmp	r3, #64	; 0x40
 800490a:	d002      	beq.n	8004912 <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2200      	movs	r2, #0
 8004910:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004928:	2300      	movs	r3, #0
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 800493e:	6978      	ldr	r0, [r7, #20]
 8004940:	f7ff ff82 	bl	8004848 <HAL_SPI_AbortCpltCallback>
 8004944:	e000      	b.n	8004948 <SPI_DMATxAbortCallback+0xc4>
      return;
 8004946:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000004 	.word	0x20000004
 8004954:	057619f1 	.word	0x057619f1

08004958 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004974:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497a:	2200      	movs	r2, #0
 800497c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800498e:	f7fe fb8f 	bl	80030b0 <HAL_GetTick>
 8004992:	4603      	mov	r3, r0
 8004994:	461a      	mov	r2, r3
 8004996:	2164      	movs	r1, #100	; 0x64
 8004998:	6978      	ldr	r0, [r7, #20]
 800499a:	f000 fa5b 	bl	8004e54 <SPI_EndRxTxTransaction>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d126      	bne.n	8004a10 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2200      	movs	r2, #0
 80049c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2200      	movs	r2, #0
 80049cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	2b40      	cmp	r3, #64	; 0x40
 80049d4:	d002      	beq.n	80049dc <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2200      	movs	r2, #0
 80049da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049dc:	2300      	movs	r3, #0
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8004a08:	6978      	ldr	r0, [r7, #20]
 8004a0a:	f7ff ff1d 	bl	8004848 <HAL_SPI_AbortCpltCallback>
 8004a0e:	e000      	b.n	8004a12 <SPI_DMARxAbortCallback+0xba>
      return;
 8004a10:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f103 020c 	add.w	r2, r3, #12
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	7812      	ldrb	r2, [r2, #0]
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10f      	bne.n	8004a74 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a62:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa32 	bl	8004ed8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	7812      	ldrb	r2, [r2, #0]
 8004a90:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10f      	bne.n	8004ad4 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fa02 	bl	8004ed8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	b292      	uxth	r2, r2
 8004af0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	1c9a      	adds	r2, r3, #2
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10f      	bne.n	8004b34 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b22:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d102      	bne.n	8004b34 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f9d2 	bl	8004ed8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	881a      	ldrh	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	1c9a      	adds	r2, r3, #2
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10f      	bne.n	8004b92 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b80:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f9a3 	bl	8004ed8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f103 020c 	add.w	r2, r3, #12
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	7812      	ldrb	r2, [r2, #0]
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f9f2 	bl	8004fc0 <SPI_CloseRx_ISR>
  }
}
 8004bdc:	bf00      	nop
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	b292      	uxth	r2, r2
 8004bf8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	1c9a      	adds	r2, r3, #2
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d102      	bne.n	8004c22 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f9cf 	bl	8004fc0 <SPI_CloseRx_ISR>
  }
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	7812      	ldrb	r2, [r2, #0]
 8004c3e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f9ec 	bl	8005040 <SPI_CloseTx_ISR>
  }
}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	881a      	ldrh	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	1c9a      	adds	r2, r3, #2
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f9ca 	bl	8005040 <SPI_CloseTx_ISR>
  }
}
 8004cac:	bf00      	nop
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cc4:	e04c      	b.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d048      	beq.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004cce:	f7fe f9ef 	bl	80030b0 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d902      	bls.n	8004ce4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d13d      	bne.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cf2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfc:	d111      	bne.n	8004d22 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d06:	d004      	beq.n	8004d12 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d10:	d107      	bne.n	8004d22 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2a:	d10f      	bne.n	8004d4c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e00f      	b.n	8004d80 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d1a3      	bne.n	8004cc6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d9c:	d111      	bne.n	8004dc2 <SPI_EndRxTransaction+0x3a>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da6:	d004      	beq.n	8004db2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db0:	d107      	bne.n	8004dc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dca:	d12a      	bne.n	8004e22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd4:	d012      	beq.n	8004dfc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2180      	movs	r1, #128	; 0x80
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f7ff ff67 	bl	8004cb4 <SPI_WaitFlagStateUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d02d      	beq.n	8004e48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e026      	b.n	8004e4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2200      	movs	r2, #0
 8004e04:	2101      	movs	r1, #1
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7ff ff54 	bl	8004cb4 <SPI_WaitFlagStateUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01a      	beq.n	8004e48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e013      	b.n	8004e4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7ff ff41 	bl	8004cb4 <SPI_WaitFlagStateUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e000      	b.n	8004e4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e60:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <SPI_EndRxTxTransaction+0x7c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1b      	ldr	r2, [pc, #108]	; (8004ed4 <SPI_EndRxTxTransaction+0x80>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	0d5b      	lsrs	r3, r3, #21
 8004e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e70:	fb02 f303 	mul.w	r3, r2, r3
 8004e74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e7e:	d112      	bne.n	8004ea6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2200      	movs	r2, #0
 8004e88:	2180      	movs	r1, #128	; 0x80
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff ff12 	bl	8004cb4 <SPI_WaitFlagStateUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d016      	beq.n	8004ec4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	f043 0220 	orr.w	r2, r3, #32
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e00f      	b.n	8004ec6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebc:	2b80      	cmp	r3, #128	; 0x80
 8004ebe:	d0f2      	beq.n	8004ea6 <SPI_EndRxTxTransaction+0x52>
 8004ec0:	e000      	b.n	8004ec4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ec2:	bf00      	nop
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000004 	.word	0x20000004
 8004ed4:	165e9f81 	.word	0x165e9f81

08004ed8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004ee0:	4b35      	ldr	r3, [pc, #212]	; (8004fb8 <SPI_CloseRxTx_ISR+0xe0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a35      	ldr	r2, [pc, #212]	; (8004fbc <SPI_CloseRxTx_ISR+0xe4>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	0a5b      	lsrs	r3, r3, #9
 8004eec:	2264      	movs	r2, #100	; 0x64
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ef4:	f7fe f8dc 	bl	80030b0 <HAL_GetTick>
 8004ef8:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0220 	bic.w	r2, r2, #32
 8004f08:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d106      	bne.n	8004f1e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f14:	f043 0220 	orr.w	r2, r3, #32
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f1c:	e009      	b.n	8004f32 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0eb      	beq.n	8004f0a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	2164      	movs	r1, #100	; 0x64
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff ff8c 	bl	8004e54 <SPI_EndRxTxTransaction>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	f043 0220 	orr.w	r2, r3, #32
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d115      	bne.n	8004fa0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d107      	bne.n	8004f90 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7fc ff81 	bl	8001e90 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004f8e:	e00e      	b.n	8004fae <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fc41 	bl	8004820 <HAL_SPI_TxRxCpltCallback>
}
 8004f9e:	e006      	b.n	8004fae <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff fc43 	bl	8004834 <HAL_SPI_ErrorCallback>
}
 8004fae:	bf00      	nop
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000004 	.word	0x20000004
 8004fbc:	057619f1 	.word	0x057619f1

08004fc0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fd6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004fd8:	f7fe f86a 	bl	80030b0 <HAL_GetTick>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2164      	movs	r1, #100	; 0x64
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff fed0 	bl	8004d88 <SPI_EndRxTransaction>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	f043 0220 	orr.w	r2, r3, #32
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005024:	2b00      	cmp	r3, #0
 8005026:	d103      	bne.n	8005030 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7fc ff31 	bl	8001e90 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800502e:	e002      	b.n	8005036 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff fbff 	bl	8004834 <HAL_SPI_ErrorCallback>
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005048:	4b2c      	ldr	r3, [pc, #176]	; (80050fc <SPI_CloseTx_ISR+0xbc>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a2c      	ldr	r2, [pc, #176]	; (8005100 <SPI_CloseTx_ISR+0xc0>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	0a5b      	lsrs	r3, r3, #9
 8005054:	2264      	movs	r2, #100	; 0x64
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800505c:	f7fe f828 	bl	80030b0 <HAL_GetTick>
 8005060:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005074:	e009      	b.n	800508a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	3b01      	subs	r3, #1
 800507a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0eb      	beq.n	8005062 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005098:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	2164      	movs	r1, #100	; 0x64
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff fed8 	bl	8004e54 <SPI_EndRxTxTransaction>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ae:	f043 0220 	orr.w	r2, r3, #32
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff fba5 	bl	8004834 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80050ea:	e002      	b.n	80050f2 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fb8d 	bl	800480c <HAL_SPI_TxCpltCallback>
}
 80050f2:	bf00      	nop
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000004 	.word	0x20000004
 8005100:	057619f1 	.word	0x057619f1

08005104 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800510c:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <SPI_AbortRx_ISR+0x80>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1d      	ldr	r2, [pc, #116]	; (8005188 <SPI_AbortRx_ISR+0x84>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	0a5b      	lsrs	r3, r3, #9
 8005118:	2264      	movs	r2, #100	; 0x64
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005132:	e009      	b.n	8005148 <SPI_AbortRx_ISR+0x44>
    }
    count--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3b01      	subs	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0eb      	beq.n	8005120 <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005156:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005166:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2207      	movs	r2, #7
 8005172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20000004 	.word	0x20000004
 8005188:	057619f1 	.word	0x057619f1

0800518c <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051a2:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b2:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2207      	movs	r2, #7
 80051b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e01d      	b.n	8005216 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fd fe56 	bl	8002ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f000 fd76 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0201 	orr.w	r2, r2, #1
 8005234:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b06      	cmp	r3, #6
 8005246:	d007      	beq.n	8005258 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6a1a      	ldr	r2, [r3, #32]
 8005284:	f241 1311 	movw	r3, #4369	; 0x1111
 8005288:	4013      	ands	r3, r2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <HAL_TIM_Base_Stop_IT+0x48>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6a1a      	ldr	r2, [r3, #32]
 8005294:	f240 4344 	movw	r3, #1092	; 0x444
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d107      	bne.n	80052ae <HAL_TIM_Base_Stop_IT+0x48>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0201 	bic.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e01d      	b.n	800530a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f815 	bl	8005312 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3304      	adds	r3, #4
 80052f8:	4619      	mov	r1, r3
 80052fa:	4610      	mov	r0, r2
 80052fc:	f000 fcfc 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e01d      	b.n	8005374 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f815 	bl	800537c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3304      	adds	r3, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f000 fcc7 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2201      	movs	r2, #1
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 ff92 	bl	80062cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a15      	ldr	r2, [pc, #84]	; (8005404 <HAL_TIM_PWM_Start+0x74>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d004      	beq.n	80053bc <HAL_TIM_PWM_Start+0x2c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a14      	ldr	r2, [pc, #80]	; (8005408 <HAL_TIM_PWM_Start+0x78>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d101      	bne.n	80053c0 <HAL_TIM_PWM_Start+0x30>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <HAL_TIM_PWM_Start+0x32>
 80053c0:	2300      	movs	r3, #0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b06      	cmp	r3, #6
 80053e6:	d007      	beq.n	80053f8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40010000 	.word	0x40010000
 8005408:	40010400 	.word	0x40010400

0800540c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2200      	movs	r2, #0
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f000 ff54 	bl	80062cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a22      	ldr	r2, [pc, #136]	; (80054b4 <HAL_TIM_PWM_Stop+0xa8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d004      	beq.n	8005438 <HAL_TIM_PWM_Stop+0x2c>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a21      	ldr	r2, [pc, #132]	; (80054b8 <HAL_TIM_PWM_Stop+0xac>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d101      	bne.n	800543c <HAL_TIM_PWM_Stop+0x30>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <HAL_TIM_PWM_Stop+0x32>
 800543c:	2300      	movs	r3, #0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d017      	beq.n	8005472 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a1a      	ldr	r2, [r3, #32]
 8005448:	f241 1311 	movw	r3, #4369	; 0x1111
 800544c:	4013      	ands	r3, r2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10f      	bne.n	8005472 <HAL_TIM_PWM_Stop+0x66>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6a1a      	ldr	r2, [r3, #32]
 8005458:	f240 4344 	movw	r3, #1092	; 0x444
 800545c:	4013      	ands	r3, r2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d107      	bne.n	8005472 <HAL_TIM_PWM_Stop+0x66>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005470:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6a1a      	ldr	r2, [r3, #32]
 8005478:	f241 1311 	movw	r3, #4369	; 0x1111
 800547c:	4013      	ands	r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10f      	bne.n	80054a2 <HAL_TIM_PWM_Stop+0x96>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	f240 4344 	movw	r3, #1092	; 0x444
 800548c:	4013      	ands	r3, r2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d107      	bne.n	80054a2 <HAL_TIM_PWM_Stop+0x96>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40010000 	.word	0x40010000
 80054b8:	40010400 	.word	0x40010400

080054bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e083      	b.n	80055d8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fd fc4d 	bl	8002d84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6812      	ldr	r2, [r2, #0]
 80054fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005500:	f023 0307 	bic.w	r3, r3, #7
 8005504:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3304      	adds	r3, #4
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f000 fbf1 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553e:	f023 0303 	bic.w	r3, r3, #3
 8005542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	4313      	orrs	r3, r2
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800555c:	f023 030c 	bic.w	r3, r3, #12
 8005560:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005568:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800556c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	4313      	orrs	r3, r2
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	011a      	lsls	r2, r3, #4
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	031b      	lsls	r3, r3, #12
 800558c:	4313      	orrs	r3, r2
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800559a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	4313      	orrs	r3, r2
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_TIM_Encoder_Start+0x16>
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d008      	beq.n	8005606 <HAL_TIM_Encoder_Start+0x26>
 80055f4:	e00f      	b.n	8005616 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2201      	movs	r2, #1
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fe64 	bl	80062cc <TIM_CCxChannelCmd>
      break;
 8005604:	e016      	b.n	8005634 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2201      	movs	r2, #1
 800560c:	2104      	movs	r1, #4
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fe5c 	bl	80062cc <TIM_CCxChannelCmd>
      break;
 8005614:	e00e      	b.n	8005634 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2201      	movs	r2, #1
 800561c:	2100      	movs	r1, #0
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fe54 	bl	80062cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2201      	movs	r2, #1
 800562a:	2104      	movs	r1, #4
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fe4d 	bl	80062cc <TIM_CCxChannelCmd>
      break;
 8005632:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_TIM_Encoder_Stop+0x16>
 800565e:	2b04      	cmp	r3, #4
 8005660:	d008      	beq.n	8005674 <HAL_TIM_Encoder_Stop+0x26>
 8005662:	e00f      	b.n	8005684 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2200      	movs	r2, #0
 800566a:	2100      	movs	r1, #0
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fe2d 	bl	80062cc <TIM_CCxChannelCmd>
      break;
 8005672:	e016      	b.n	80056a2 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2200      	movs	r2, #0
 800567a:	2104      	movs	r1, #4
 800567c:	4618      	mov	r0, r3
 800567e:	f000 fe25 	bl	80062cc <TIM_CCxChannelCmd>
      break;
 8005682:	e00e      	b.n	80056a2 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2200      	movs	r2, #0
 800568a:	2100      	movs	r1, #0
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fe1d 	bl	80062cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2200      	movs	r2, #0
 8005698:	2104      	movs	r1, #4
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fe16 	bl	80062cc <TIM_CCxChannelCmd>
      break;
 80056a0:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6a1a      	ldr	r2, [r3, #32]
 80056a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10f      	bne.n	80056d2 <HAL_TIM_Encoder_Stop+0x84>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1a      	ldr	r2, [r3, #32]
 80056b8:	f240 4344 	movw	r3, #1092	; 0x444
 80056bc:	4013      	ands	r3, r2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d107      	bne.n	80056d2 <HAL_TIM_Encoder_Stop+0x84>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0201 	bic.w	r2, r2, #1
 80056d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d122      	bne.n	8005738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d11b      	bne.n	8005738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0202 	mvn.w	r2, #2
 8005708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 facb 	bl	8005cba <HAL_TIM_IC_CaptureCallback>
 8005724:	e005      	b.n	8005732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fabd 	bl	8005ca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 face 	bl	8005cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b04      	cmp	r3, #4
 8005744:	d122      	bne.n	800578c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b04      	cmp	r3, #4
 8005752:	d11b      	bne.n	800578c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0204 	mvn.w	r2, #4
 800575c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2202      	movs	r2, #2
 8005762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 faa1 	bl	8005cba <HAL_TIM_IC_CaptureCallback>
 8005778:	e005      	b.n	8005786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fa93 	bl	8005ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 faa4 	bl	8005cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b08      	cmp	r3, #8
 8005798:	d122      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d11b      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f06f 0208 	mvn.w	r2, #8
 80057b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2204      	movs	r2, #4
 80057b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fa77 	bl	8005cba <HAL_TIM_IC_CaptureCallback>
 80057cc:	e005      	b.n	80057da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fa69 	bl	8005ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fa7a 	bl	8005cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f003 0310 	and.w	r3, r3, #16
 80057ea:	2b10      	cmp	r3, #16
 80057ec:	d122      	bne.n	8005834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d11b      	bne.n	8005834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0210 	mvn.w	r2, #16
 8005804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2208      	movs	r2, #8
 800580a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fa4d 	bl	8005cba <HAL_TIM_IC_CaptureCallback>
 8005820:	e005      	b.n	800582e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa3f 	bl	8005ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fa50 	bl	8005cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b01      	cmp	r3, #1
 8005840:	d10e      	bne.n	8005860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b01      	cmp	r3, #1
 800584e:	d107      	bne.n	8005860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0201 	mvn.w	r2, #1
 8005858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc fb5c 	bl	8001f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586a:	2b80      	cmp	r3, #128	; 0x80
 800586c:	d10e      	bne.n	800588c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005878:	2b80      	cmp	r3, #128	; 0x80
 800587a:	d107      	bne.n	800588c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fdcc 	bl	8006424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d10e      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	d107      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fa15 	bl	8005ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d10e      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d107      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0220 	mvn.w	r2, #32
 80058dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fd96 	bl	8006410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058e4:	bf00      	nop
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005902:	2302      	movs	r3, #2
 8005904:	e04e      	b.n	80059a4 <HAL_TIM_OC_ConfigChannel+0xb8>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b0c      	cmp	r3, #12
 800591a:	d839      	bhi.n	8005990 <HAL_TIM_OC_ConfigChannel+0xa4>
 800591c:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <HAL_TIM_OC_ConfigChannel+0x38>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005959 	.word	0x08005959
 8005928:	08005991 	.word	0x08005991
 800592c:	08005991 	.word	0x08005991
 8005930:	08005991 	.word	0x08005991
 8005934:	08005967 	.word	0x08005967
 8005938:	08005991 	.word	0x08005991
 800593c:	08005991 	.word	0x08005991
 8005940:	08005991 	.word	0x08005991
 8005944:	08005975 	.word	0x08005975
 8005948:	08005991 	.word	0x08005991
 800594c:	08005991 	.word	0x08005991
 8005950:	08005991 	.word	0x08005991
 8005954:	08005983 	.word	0x08005983
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fa6a 	bl	8005e38 <TIM_OC1_SetConfig>
      break;
 8005964:	e015      	b.n	8005992 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fad3 	bl	8005f18 <TIM_OC2_SetConfig>
      break;
 8005972:	e00e      	b.n	8005992 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fb42 	bl	8006004 <TIM_OC3_SetConfig>
      break;
 8005980:	e007      	b.n	8005992 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fbaf 	bl	80060ec <TIM_OC4_SetConfig>
      break;
 800598e:	e000      	b.n	8005992 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005990:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e0b4      	b.n	8005b30 <HAL_TIM_PWM_ConfigChannel+0x184>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2202      	movs	r2, #2
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b0c      	cmp	r3, #12
 80059da:	f200 809f 	bhi.w	8005b1c <HAL_TIM_PWM_ConfigChannel+0x170>
 80059de:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	08005a19 	.word	0x08005a19
 80059e8:	08005b1d 	.word	0x08005b1d
 80059ec:	08005b1d 	.word	0x08005b1d
 80059f0:	08005b1d 	.word	0x08005b1d
 80059f4:	08005a59 	.word	0x08005a59
 80059f8:	08005b1d 	.word	0x08005b1d
 80059fc:	08005b1d 	.word	0x08005b1d
 8005a00:	08005b1d 	.word	0x08005b1d
 8005a04:	08005a9b 	.word	0x08005a9b
 8005a08:	08005b1d 	.word	0x08005b1d
 8005a0c:	08005b1d 	.word	0x08005b1d
 8005a10:	08005b1d 	.word	0x08005b1d
 8005a14:	08005adb 	.word	0x08005adb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fa0a 	bl	8005e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0208 	orr.w	r2, r2, #8
 8005a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0204 	bic.w	r2, r2, #4
 8005a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6999      	ldr	r1, [r3, #24]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	619a      	str	r2, [r3, #24]
      break;
 8005a56:	e062      	b.n	8005b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fa5a 	bl	8005f18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6999      	ldr	r1, [r3, #24]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	021a      	lsls	r2, r3, #8
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	619a      	str	r2, [r3, #24]
      break;
 8005a98:	e041      	b.n	8005b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68b9      	ldr	r1, [r7, #8]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 faaf 	bl	8006004 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0208 	orr.w	r2, r2, #8
 8005ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0204 	bic.w	r2, r2, #4
 8005ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69d9      	ldr	r1, [r3, #28]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	61da      	str	r2, [r3, #28]
      break;
 8005ad8:	e021      	b.n	8005b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fb03 	bl	80060ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69d9      	ldr	r1, [r3, #28]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	021a      	lsls	r2, r3, #8
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	61da      	str	r2, [r3, #28]
      break;
 8005b1a:	e000      	b.n	8005b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005b1c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d101      	bne.n	8005b50 <HAL_TIM_ConfigClockSource+0x18>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e0a6      	b.n	8005c9e <HAL_TIM_ConfigClockSource+0x166>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b40      	cmp	r3, #64	; 0x40
 8005b86:	d067      	beq.n	8005c58 <HAL_TIM_ConfigClockSource+0x120>
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	d80b      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x6c>
 8005b8c:	2b10      	cmp	r3, #16
 8005b8e:	d073      	beq.n	8005c78 <HAL_TIM_ConfigClockSource+0x140>
 8005b90:	2b10      	cmp	r3, #16
 8005b92:	d802      	bhi.n	8005b9a <HAL_TIM_ConfigClockSource+0x62>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d06f      	beq.n	8005c78 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b98:	e078      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d06c      	beq.n	8005c78 <HAL_TIM_ConfigClockSource+0x140>
 8005b9e:	2b30      	cmp	r3, #48	; 0x30
 8005ba0:	d06a      	beq.n	8005c78 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005ba2:	e073      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ba4:	2b70      	cmp	r3, #112	; 0x70
 8005ba6:	d00d      	beq.n	8005bc4 <HAL_TIM_ConfigClockSource+0x8c>
 8005ba8:	2b70      	cmp	r3, #112	; 0x70
 8005baa:	d804      	bhi.n	8005bb6 <HAL_TIM_ConfigClockSource+0x7e>
 8005bac:	2b50      	cmp	r3, #80	; 0x50
 8005bae:	d033      	beq.n	8005c18 <HAL_TIM_ConfigClockSource+0xe0>
 8005bb0:	2b60      	cmp	r3, #96	; 0x60
 8005bb2:	d041      	beq.n	8005c38 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005bb4:	e06a      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bba:	d066      	beq.n	8005c8a <HAL_TIM_ConfigClockSource+0x152>
 8005bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc0:	d017      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005bc2:	e063      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6899      	ldr	r1, [r3, #8]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f000 fb5a 	bl	800628c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005be6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	609a      	str	r2, [r3, #8]
      break;
 8005bf0:	e04c      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6899      	ldr	r1, [r3, #8]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f000 fb43 	bl	800628c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c14:	609a      	str	r2, [r3, #8]
      break;
 8005c16:	e039      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6818      	ldr	r0, [r3, #0]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	6859      	ldr	r1, [r3, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	461a      	mov	r2, r3
 8005c26:	f000 fab7 	bl	8006198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2150      	movs	r1, #80	; 0x50
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fb10 	bl	8006256 <TIM_ITRx_SetConfig>
      break;
 8005c36:	e029      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	6859      	ldr	r1, [r3, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	461a      	mov	r2, r3
 8005c46:	f000 fad6 	bl	80061f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2160      	movs	r1, #96	; 0x60
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fb00 	bl	8006256 <TIM_ITRx_SetConfig>
      break;
 8005c56:	e019      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	6859      	ldr	r1, [r3, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	461a      	mov	r2, r3
 8005c66:	f000 fa97 	bl	8006198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2140      	movs	r1, #64	; 0x40
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 faf0 	bl	8006256 <TIM_ITRx_SetConfig>
      break;
 8005c76:	e009      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f000 fae7 	bl	8006256 <TIM_ITRx_SetConfig>
      break;
 8005c88:	e000      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005c8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a40      	ldr	r2, [pc, #256]	; (8005e0c <TIM_Base_SetConfig+0x114>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d16:	d00f      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a3d      	ldr	r2, [pc, #244]	; (8005e10 <TIM_Base_SetConfig+0x118>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00b      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a3c      	ldr	r2, [pc, #240]	; (8005e14 <TIM_Base_SetConfig+0x11c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a3b      	ldr	r2, [pc, #236]	; (8005e18 <TIM_Base_SetConfig+0x120>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a3a      	ldr	r2, [pc, #232]	; (8005e1c <TIM_Base_SetConfig+0x124>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d108      	bne.n	8005d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a2f      	ldr	r2, [pc, #188]	; (8005e0c <TIM_Base_SetConfig+0x114>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d02b      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d58:	d027      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a2c      	ldr	r2, [pc, #176]	; (8005e10 <TIM_Base_SetConfig+0x118>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d023      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2b      	ldr	r2, [pc, #172]	; (8005e14 <TIM_Base_SetConfig+0x11c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01f      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a2a      	ldr	r2, [pc, #168]	; (8005e18 <TIM_Base_SetConfig+0x120>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01b      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a29      	ldr	r2, [pc, #164]	; (8005e1c <TIM_Base_SetConfig+0x124>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d017      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a28      	ldr	r2, [pc, #160]	; (8005e20 <TIM_Base_SetConfig+0x128>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a27      	ldr	r2, [pc, #156]	; (8005e24 <TIM_Base_SetConfig+0x12c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00f      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a26      	ldr	r2, [pc, #152]	; (8005e28 <TIM_Base_SetConfig+0x130>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00b      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a25      	ldr	r2, [pc, #148]	; (8005e2c <TIM_Base_SetConfig+0x134>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d007      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a24      	ldr	r2, [pc, #144]	; (8005e30 <TIM_Base_SetConfig+0x138>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a23      	ldr	r2, [pc, #140]	; (8005e34 <TIM_Base_SetConfig+0x13c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d108      	bne.n	8005dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <TIM_Base_SetConfig+0x114>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_Base_SetConfig+0xf8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a0c      	ldr	r2, [pc, #48]	; (8005e1c <TIM_Base_SetConfig+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d103      	bne.n	8005df8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	615a      	str	r2, [r3, #20]
}
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40010000 	.word	0x40010000
 8005e10:	40000400 	.word	0x40000400
 8005e14:	40000800 	.word	0x40000800
 8005e18:	40000c00 	.word	0x40000c00
 8005e1c:	40010400 	.word	0x40010400
 8005e20:	40014000 	.word	0x40014000
 8005e24:	40014400 	.word	0x40014400
 8005e28:	40014800 	.word	0x40014800
 8005e2c:	40001800 	.word	0x40001800
 8005e30:	40001c00 	.word	0x40001c00
 8005e34:	40002000 	.word	0x40002000

08005e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f023 0201 	bic.w	r2, r3, #1
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f023 0302 	bic.w	r3, r3, #2
 8005e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a20      	ldr	r2, [pc, #128]	; (8005f10 <TIM_OC1_SetConfig+0xd8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_OC1_SetConfig+0x64>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a1f      	ldr	r2, [pc, #124]	; (8005f14 <TIM_OC1_SetConfig+0xdc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d10c      	bne.n	8005eb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f023 0308 	bic.w	r3, r3, #8
 8005ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f023 0304 	bic.w	r3, r3, #4
 8005eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a15      	ldr	r2, [pc, #84]	; (8005f10 <TIM_OC1_SetConfig+0xd8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d003      	beq.n	8005ec6 <TIM_OC1_SetConfig+0x8e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <TIM_OC1_SetConfig+0xdc>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d111      	bne.n	8005eea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	621a      	str	r2, [r3, #32]
}
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	40010000 	.word	0x40010000
 8005f14:	40010400 	.word	0x40010400

08005f18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f023 0210 	bic.w	r2, r3, #16
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f023 0320 	bic.w	r3, r3, #32
 8005f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a22      	ldr	r2, [pc, #136]	; (8005ffc <TIM_OC2_SetConfig+0xe4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_OC2_SetConfig+0x68>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a21      	ldr	r2, [pc, #132]	; (8006000 <TIM_OC2_SetConfig+0xe8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d10d      	bne.n	8005f9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a17      	ldr	r2, [pc, #92]	; (8005ffc <TIM_OC2_SetConfig+0xe4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d003      	beq.n	8005fac <TIM_OC2_SetConfig+0x94>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a16      	ldr	r2, [pc, #88]	; (8006000 <TIM_OC2_SetConfig+0xe8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d113      	bne.n	8005fd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	621a      	str	r2, [r3, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40010400 	.word	0x40010400

08006004 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0303 	bic.w	r3, r3, #3
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800604c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a21      	ldr	r2, [pc, #132]	; (80060e4 <TIM_OC3_SetConfig+0xe0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <TIM_OC3_SetConfig+0x66>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a20      	ldr	r2, [pc, #128]	; (80060e8 <TIM_OC3_SetConfig+0xe4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d10d      	bne.n	8006086 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	021b      	lsls	r3, r3, #8
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a16      	ldr	r2, [pc, #88]	; (80060e4 <TIM_OC3_SetConfig+0xe0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d003      	beq.n	8006096 <TIM_OC3_SetConfig+0x92>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a15      	ldr	r2, [pc, #84]	; (80060e8 <TIM_OC3_SetConfig+0xe4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d113      	bne.n	80060be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800609c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	621a      	str	r2, [r3, #32]
}
 80060d8:	bf00      	nop
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40010400 	.word	0x40010400

080060ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	031b      	lsls	r3, r3, #12
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a12      	ldr	r2, [pc, #72]	; (8006190 <TIM_OC4_SetConfig+0xa4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_OC4_SetConfig+0x68>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a11      	ldr	r2, [pc, #68]	; (8006194 <TIM_OC4_SetConfig+0xa8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d109      	bne.n	8006168 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	019b      	lsls	r3, r3, #6
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40010000 	.word	0x40010000
 8006194:	40010400 	.word	0x40010400

08006198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f023 0201 	bic.w	r2, r3, #1
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f023 030a 	bic.w	r3, r3, #10
 80061d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4313      	orrs	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	621a      	str	r2, [r3, #32]
}
 80061ea:	bf00      	nop
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b087      	sub	sp, #28
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f023 0210 	bic.w	r2, r3, #16
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	031b      	lsls	r3, r3, #12
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006232:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	621a      	str	r2, [r3, #32]
}
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	f043 0307 	orr.w	r3, r3, #7
 8006278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	609a      	str	r2, [r3, #8]
}
 8006280:	bf00      	nop
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	021a      	lsls	r2, r3, #8
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	609a      	str	r2, [r3, #8]
}
 80062c0:	bf00      	nop
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f003 031f 	and.w	r3, r3, #31
 80062de:	2201      	movs	r2, #1
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a1a      	ldr	r2, [r3, #32]
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	43db      	mvns	r3, r3
 80062ee:	401a      	ands	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a1a      	ldr	r2, [r3, #32]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	fa01 f303 	lsl.w	r3, r1, r3
 8006304:	431a      	orrs	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800632c:	2302      	movs	r3, #2
 800632e:	e05a      	b.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d022      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637c:	d01d      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1d      	ldr	r2, [pc, #116]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d018      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1b      	ldr	r2, [pc, #108]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d013      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1a      	ldr	r2, [pc, #104]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00e      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a18      	ldr	r2, [pc, #96]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d009      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a17      	ldr	r2, [pc, #92]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d004      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a15      	ldr	r2, [pc, #84]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d10c      	bne.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40010000 	.word	0x40010000
 80063f8:	40000400 	.word	0x40000400
 80063fc:	40000800 	.word	0x40000800
 8006400:	40000c00 	.word	0x40000c00
 8006404:	40010400 	.word	0x40010400
 8006408:	40014000 	.word	0x40014000
 800640c:	40001800 	.word	0x40001800

08006410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <__errno>:
 8006438:	4b01      	ldr	r3, [pc, #4]	; (8006440 <__errno+0x8>)
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	20000010 	.word	0x20000010

08006444 <__libc_init_array>:
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	4e0d      	ldr	r6, [pc, #52]	; (800647c <__libc_init_array+0x38>)
 8006448:	4c0d      	ldr	r4, [pc, #52]	; (8006480 <__libc_init_array+0x3c>)
 800644a:	1ba4      	subs	r4, r4, r6
 800644c:	10a4      	asrs	r4, r4, #2
 800644e:	2500      	movs	r5, #0
 8006450:	42a5      	cmp	r5, r4
 8006452:	d109      	bne.n	8006468 <__libc_init_array+0x24>
 8006454:	4e0b      	ldr	r6, [pc, #44]	; (8006484 <__libc_init_array+0x40>)
 8006456:	4c0c      	ldr	r4, [pc, #48]	; (8006488 <__libc_init_array+0x44>)
 8006458:	f002 fe84 	bl	8009164 <_init>
 800645c:	1ba4      	subs	r4, r4, r6
 800645e:	10a4      	asrs	r4, r4, #2
 8006460:	2500      	movs	r5, #0
 8006462:	42a5      	cmp	r5, r4
 8006464:	d105      	bne.n	8006472 <__libc_init_array+0x2e>
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800646c:	4798      	blx	r3
 800646e:	3501      	adds	r5, #1
 8006470:	e7ee      	b.n	8006450 <__libc_init_array+0xc>
 8006472:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006476:	4798      	blx	r3
 8006478:	3501      	adds	r5, #1
 800647a:	e7f2      	b.n	8006462 <__libc_init_array+0x1e>
 800647c:	08009450 	.word	0x08009450
 8006480:	08009450 	.word	0x08009450
 8006484:	08009450 	.word	0x08009450
 8006488:	08009454 	.word	0x08009454

0800648c <memset>:
 800648c:	4402      	add	r2, r0
 800648e:	4603      	mov	r3, r0
 8006490:	4293      	cmp	r3, r2
 8006492:	d100      	bne.n	8006496 <memset+0xa>
 8006494:	4770      	bx	lr
 8006496:	f803 1b01 	strb.w	r1, [r3], #1
 800649a:	e7f9      	b.n	8006490 <memset+0x4>

0800649c <sulp>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	4604      	mov	r4, r0
 80064a0:	460d      	mov	r5, r1
 80064a2:	ec45 4b10 	vmov	d0, r4, r5
 80064a6:	4616      	mov	r6, r2
 80064a8:	f001 fc2e 	bl	8007d08 <__ulp>
 80064ac:	ec51 0b10 	vmov	r0, r1, d0
 80064b0:	b17e      	cbz	r6, 80064d2 <sulp+0x36>
 80064b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80064b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dd09      	ble.n	80064d2 <sulp+0x36>
 80064be:	051b      	lsls	r3, r3, #20
 80064c0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80064c4:	2400      	movs	r4, #0
 80064c6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80064ca:	4622      	mov	r2, r4
 80064cc:	462b      	mov	r3, r5
 80064ce:	f7fa f83f 	bl	8000550 <__aeabi_dmul>
 80064d2:	bd70      	pop	{r4, r5, r6, pc}
 80064d4:	0000      	movs	r0, r0
	...

080064d8 <_strtod_l>:
 80064d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064dc:	461f      	mov	r7, r3
 80064de:	b0a1      	sub	sp, #132	; 0x84
 80064e0:	2300      	movs	r3, #0
 80064e2:	4681      	mov	r9, r0
 80064e4:	4638      	mov	r0, r7
 80064e6:	460e      	mov	r6, r1
 80064e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80064ea:	931c      	str	r3, [sp, #112]	; 0x70
 80064ec:	f001 f922 	bl	8007734 <__localeconv_l>
 80064f0:	4680      	mov	r8, r0
 80064f2:	6800      	ldr	r0, [r0, #0]
 80064f4:	f7f9 fe68 	bl	80001c8 <strlen>
 80064f8:	f04f 0a00 	mov.w	sl, #0
 80064fc:	4604      	mov	r4, r0
 80064fe:	f04f 0b00 	mov.w	fp, #0
 8006502:	961b      	str	r6, [sp, #108]	; 0x6c
 8006504:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006506:	781a      	ldrb	r2, [r3, #0]
 8006508:	2a0d      	cmp	r2, #13
 800650a:	d832      	bhi.n	8006572 <_strtod_l+0x9a>
 800650c:	2a09      	cmp	r2, #9
 800650e:	d236      	bcs.n	800657e <_strtod_l+0xa6>
 8006510:	2a00      	cmp	r2, #0
 8006512:	d03e      	beq.n	8006592 <_strtod_l+0xba>
 8006514:	2300      	movs	r3, #0
 8006516:	930d      	str	r3, [sp, #52]	; 0x34
 8006518:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800651a:	782b      	ldrb	r3, [r5, #0]
 800651c:	2b30      	cmp	r3, #48	; 0x30
 800651e:	f040 80ac 	bne.w	800667a <_strtod_l+0x1a2>
 8006522:	786b      	ldrb	r3, [r5, #1]
 8006524:	2b58      	cmp	r3, #88	; 0x58
 8006526:	d001      	beq.n	800652c <_strtod_l+0x54>
 8006528:	2b78      	cmp	r3, #120	; 0x78
 800652a:	d167      	bne.n	80065fc <_strtod_l+0x124>
 800652c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	ab1c      	add	r3, sp, #112	; 0x70
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	9702      	str	r7, [sp, #8]
 8006536:	ab1d      	add	r3, sp, #116	; 0x74
 8006538:	4a88      	ldr	r2, [pc, #544]	; (800675c <_strtod_l+0x284>)
 800653a:	a91b      	add	r1, sp, #108	; 0x6c
 800653c:	4648      	mov	r0, r9
 800653e:	f000 fe22 	bl	8007186 <__gethex>
 8006542:	f010 0407 	ands.w	r4, r0, #7
 8006546:	4606      	mov	r6, r0
 8006548:	d005      	beq.n	8006556 <_strtod_l+0x7e>
 800654a:	2c06      	cmp	r4, #6
 800654c:	d12b      	bne.n	80065a6 <_strtod_l+0xce>
 800654e:	3501      	adds	r5, #1
 8006550:	2300      	movs	r3, #0
 8006552:	951b      	str	r5, [sp, #108]	; 0x6c
 8006554:	930d      	str	r3, [sp, #52]	; 0x34
 8006556:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006558:	2b00      	cmp	r3, #0
 800655a:	f040 859a 	bne.w	8007092 <_strtod_l+0xbba>
 800655e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006560:	b1e3      	cbz	r3, 800659c <_strtod_l+0xc4>
 8006562:	4652      	mov	r2, sl
 8006564:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006568:	ec43 2b10 	vmov	d0, r2, r3
 800656c:	b021      	add	sp, #132	; 0x84
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	2a2b      	cmp	r2, #43	; 0x2b
 8006574:	d015      	beq.n	80065a2 <_strtod_l+0xca>
 8006576:	2a2d      	cmp	r2, #45	; 0x2d
 8006578:	d004      	beq.n	8006584 <_strtod_l+0xac>
 800657a:	2a20      	cmp	r2, #32
 800657c:	d1ca      	bne.n	8006514 <_strtod_l+0x3c>
 800657e:	3301      	adds	r3, #1
 8006580:	931b      	str	r3, [sp, #108]	; 0x6c
 8006582:	e7bf      	b.n	8006504 <_strtod_l+0x2c>
 8006584:	2201      	movs	r2, #1
 8006586:	920d      	str	r2, [sp, #52]	; 0x34
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	921b      	str	r2, [sp, #108]	; 0x6c
 800658c:	785b      	ldrb	r3, [r3, #1]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1c2      	bne.n	8006518 <_strtod_l+0x40>
 8006592:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006594:	961b      	str	r6, [sp, #108]	; 0x6c
 8006596:	2b00      	cmp	r3, #0
 8006598:	f040 8579 	bne.w	800708e <_strtod_l+0xbb6>
 800659c:	4652      	mov	r2, sl
 800659e:	465b      	mov	r3, fp
 80065a0:	e7e2      	b.n	8006568 <_strtod_l+0x90>
 80065a2:	2200      	movs	r2, #0
 80065a4:	e7ef      	b.n	8006586 <_strtod_l+0xae>
 80065a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80065a8:	b13a      	cbz	r2, 80065ba <_strtod_l+0xe2>
 80065aa:	2135      	movs	r1, #53	; 0x35
 80065ac:	a81e      	add	r0, sp, #120	; 0x78
 80065ae:	f001 fca3 	bl	8007ef8 <__copybits>
 80065b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80065b4:	4648      	mov	r0, r9
 80065b6:	f001 f910 	bl	80077da <_Bfree>
 80065ba:	3c01      	subs	r4, #1
 80065bc:	2c04      	cmp	r4, #4
 80065be:	d806      	bhi.n	80065ce <_strtod_l+0xf6>
 80065c0:	e8df f004 	tbb	[pc, r4]
 80065c4:	1714030a 	.word	0x1714030a
 80065c8:	0a          	.byte	0x0a
 80065c9:	00          	.byte	0x00
 80065ca:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80065ce:	0730      	lsls	r0, r6, #28
 80065d0:	d5c1      	bpl.n	8006556 <_strtod_l+0x7e>
 80065d2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80065d6:	e7be      	b.n	8006556 <_strtod_l+0x7e>
 80065d8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80065dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80065de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80065e2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80065e6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80065ea:	e7f0      	b.n	80065ce <_strtod_l+0xf6>
 80065ec:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006760 <_strtod_l+0x288>
 80065f0:	e7ed      	b.n	80065ce <_strtod_l+0xf6>
 80065f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80065f6:	f04f 3aff 	mov.w	sl, #4294967295
 80065fa:	e7e8      	b.n	80065ce <_strtod_l+0xf6>
 80065fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	921b      	str	r2, [sp, #108]	; 0x6c
 8006602:	785b      	ldrb	r3, [r3, #1]
 8006604:	2b30      	cmp	r3, #48	; 0x30
 8006606:	d0f9      	beq.n	80065fc <_strtod_l+0x124>
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0a4      	beq.n	8006556 <_strtod_l+0x7e>
 800660c:	2301      	movs	r3, #1
 800660e:	2500      	movs	r5, #0
 8006610:	9306      	str	r3, [sp, #24]
 8006612:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006614:	9308      	str	r3, [sp, #32]
 8006616:	9507      	str	r5, [sp, #28]
 8006618:	9505      	str	r5, [sp, #20]
 800661a:	220a      	movs	r2, #10
 800661c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800661e:	7807      	ldrb	r7, [r0, #0]
 8006620:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006624:	b2d9      	uxtb	r1, r3
 8006626:	2909      	cmp	r1, #9
 8006628:	d929      	bls.n	800667e <_strtod_l+0x1a6>
 800662a:	4622      	mov	r2, r4
 800662c:	f8d8 1000 	ldr.w	r1, [r8]
 8006630:	f001 fd16 	bl	8008060 <strncmp>
 8006634:	2800      	cmp	r0, #0
 8006636:	d031      	beq.n	800669c <_strtod_l+0x1c4>
 8006638:	2000      	movs	r0, #0
 800663a:	9c05      	ldr	r4, [sp, #20]
 800663c:	9004      	str	r0, [sp, #16]
 800663e:	463b      	mov	r3, r7
 8006640:	4602      	mov	r2, r0
 8006642:	2b65      	cmp	r3, #101	; 0x65
 8006644:	d001      	beq.n	800664a <_strtod_l+0x172>
 8006646:	2b45      	cmp	r3, #69	; 0x45
 8006648:	d114      	bne.n	8006674 <_strtod_l+0x19c>
 800664a:	b924      	cbnz	r4, 8006656 <_strtod_l+0x17e>
 800664c:	b910      	cbnz	r0, 8006654 <_strtod_l+0x17c>
 800664e:	9b06      	ldr	r3, [sp, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d09e      	beq.n	8006592 <_strtod_l+0xba>
 8006654:	2400      	movs	r4, #0
 8006656:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006658:	1c73      	adds	r3, r6, #1
 800665a:	931b      	str	r3, [sp, #108]	; 0x6c
 800665c:	7873      	ldrb	r3, [r6, #1]
 800665e:	2b2b      	cmp	r3, #43	; 0x2b
 8006660:	d078      	beq.n	8006754 <_strtod_l+0x27c>
 8006662:	2b2d      	cmp	r3, #45	; 0x2d
 8006664:	d070      	beq.n	8006748 <_strtod_l+0x270>
 8006666:	f04f 0c00 	mov.w	ip, #0
 800666a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800666e:	2f09      	cmp	r7, #9
 8006670:	d97c      	bls.n	800676c <_strtod_l+0x294>
 8006672:	961b      	str	r6, [sp, #108]	; 0x6c
 8006674:	f04f 0e00 	mov.w	lr, #0
 8006678:	e09a      	b.n	80067b0 <_strtod_l+0x2d8>
 800667a:	2300      	movs	r3, #0
 800667c:	e7c7      	b.n	800660e <_strtod_l+0x136>
 800667e:	9905      	ldr	r1, [sp, #20]
 8006680:	2908      	cmp	r1, #8
 8006682:	bfdd      	ittte	le
 8006684:	9907      	ldrle	r1, [sp, #28]
 8006686:	fb02 3301 	mlale	r3, r2, r1, r3
 800668a:	9307      	strle	r3, [sp, #28]
 800668c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006690:	9b05      	ldr	r3, [sp, #20]
 8006692:	3001      	adds	r0, #1
 8006694:	3301      	adds	r3, #1
 8006696:	9305      	str	r3, [sp, #20]
 8006698:	901b      	str	r0, [sp, #108]	; 0x6c
 800669a:	e7bf      	b.n	800661c <_strtod_l+0x144>
 800669c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800669e:	191a      	adds	r2, r3, r4
 80066a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80066a2:	9a05      	ldr	r2, [sp, #20]
 80066a4:	5d1b      	ldrb	r3, [r3, r4]
 80066a6:	2a00      	cmp	r2, #0
 80066a8:	d037      	beq.n	800671a <_strtod_l+0x242>
 80066aa:	9c05      	ldr	r4, [sp, #20]
 80066ac:	4602      	mov	r2, r0
 80066ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80066b2:	2909      	cmp	r1, #9
 80066b4:	d913      	bls.n	80066de <_strtod_l+0x206>
 80066b6:	2101      	movs	r1, #1
 80066b8:	9104      	str	r1, [sp, #16]
 80066ba:	e7c2      	b.n	8006642 <_strtod_l+0x16a>
 80066bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80066c2:	785b      	ldrb	r3, [r3, #1]
 80066c4:	3001      	adds	r0, #1
 80066c6:	2b30      	cmp	r3, #48	; 0x30
 80066c8:	d0f8      	beq.n	80066bc <_strtod_l+0x1e4>
 80066ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80066ce:	2a08      	cmp	r2, #8
 80066d0:	f200 84e4 	bhi.w	800709c <_strtod_l+0xbc4>
 80066d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80066d6:	9208      	str	r2, [sp, #32]
 80066d8:	4602      	mov	r2, r0
 80066da:	2000      	movs	r0, #0
 80066dc:	4604      	mov	r4, r0
 80066de:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80066e2:	f100 0101 	add.w	r1, r0, #1
 80066e6:	d012      	beq.n	800670e <_strtod_l+0x236>
 80066e8:	440a      	add	r2, r1
 80066ea:	eb00 0c04 	add.w	ip, r0, r4
 80066ee:	4621      	mov	r1, r4
 80066f0:	270a      	movs	r7, #10
 80066f2:	458c      	cmp	ip, r1
 80066f4:	d113      	bne.n	800671e <_strtod_l+0x246>
 80066f6:	1821      	adds	r1, r4, r0
 80066f8:	2908      	cmp	r1, #8
 80066fa:	f104 0401 	add.w	r4, r4, #1
 80066fe:	4404      	add	r4, r0
 8006700:	dc19      	bgt.n	8006736 <_strtod_l+0x25e>
 8006702:	9b07      	ldr	r3, [sp, #28]
 8006704:	210a      	movs	r1, #10
 8006706:	fb01 e303 	mla	r3, r1, r3, lr
 800670a:	9307      	str	r3, [sp, #28]
 800670c:	2100      	movs	r1, #0
 800670e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006710:	1c58      	adds	r0, r3, #1
 8006712:	901b      	str	r0, [sp, #108]	; 0x6c
 8006714:	785b      	ldrb	r3, [r3, #1]
 8006716:	4608      	mov	r0, r1
 8006718:	e7c9      	b.n	80066ae <_strtod_l+0x1d6>
 800671a:	9805      	ldr	r0, [sp, #20]
 800671c:	e7d3      	b.n	80066c6 <_strtod_l+0x1ee>
 800671e:	2908      	cmp	r1, #8
 8006720:	f101 0101 	add.w	r1, r1, #1
 8006724:	dc03      	bgt.n	800672e <_strtod_l+0x256>
 8006726:	9b07      	ldr	r3, [sp, #28]
 8006728:	437b      	muls	r3, r7
 800672a:	9307      	str	r3, [sp, #28]
 800672c:	e7e1      	b.n	80066f2 <_strtod_l+0x21a>
 800672e:	2910      	cmp	r1, #16
 8006730:	bfd8      	it	le
 8006732:	437d      	mulle	r5, r7
 8006734:	e7dd      	b.n	80066f2 <_strtod_l+0x21a>
 8006736:	2c10      	cmp	r4, #16
 8006738:	bfdc      	itt	le
 800673a:	210a      	movle	r1, #10
 800673c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006740:	e7e4      	b.n	800670c <_strtod_l+0x234>
 8006742:	2301      	movs	r3, #1
 8006744:	9304      	str	r3, [sp, #16]
 8006746:	e781      	b.n	800664c <_strtod_l+0x174>
 8006748:	f04f 0c01 	mov.w	ip, #1
 800674c:	1cb3      	adds	r3, r6, #2
 800674e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006750:	78b3      	ldrb	r3, [r6, #2]
 8006752:	e78a      	b.n	800666a <_strtod_l+0x192>
 8006754:	f04f 0c00 	mov.w	ip, #0
 8006758:	e7f8      	b.n	800674c <_strtod_l+0x274>
 800675a:	bf00      	nop
 800675c:	0800919c 	.word	0x0800919c
 8006760:	7ff00000 	.word	0x7ff00000
 8006764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006766:	1c5f      	adds	r7, r3, #1
 8006768:	971b      	str	r7, [sp, #108]	; 0x6c
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b30      	cmp	r3, #48	; 0x30
 800676e:	d0f9      	beq.n	8006764 <_strtod_l+0x28c>
 8006770:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006774:	2f08      	cmp	r7, #8
 8006776:	f63f af7d 	bhi.w	8006674 <_strtod_l+0x19c>
 800677a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800677e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006780:	930a      	str	r3, [sp, #40]	; 0x28
 8006782:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006784:	1c5f      	adds	r7, r3, #1
 8006786:	971b      	str	r7, [sp, #108]	; 0x6c
 8006788:	785b      	ldrb	r3, [r3, #1]
 800678a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800678e:	f1b8 0f09 	cmp.w	r8, #9
 8006792:	d937      	bls.n	8006804 <_strtod_l+0x32c>
 8006794:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006796:	1a7f      	subs	r7, r7, r1
 8006798:	2f08      	cmp	r7, #8
 800679a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800679e:	dc37      	bgt.n	8006810 <_strtod_l+0x338>
 80067a0:	45be      	cmp	lr, r7
 80067a2:	bfa8      	it	ge
 80067a4:	46be      	movge	lr, r7
 80067a6:	f1bc 0f00 	cmp.w	ip, #0
 80067aa:	d001      	beq.n	80067b0 <_strtod_l+0x2d8>
 80067ac:	f1ce 0e00 	rsb	lr, lr, #0
 80067b0:	2c00      	cmp	r4, #0
 80067b2:	d151      	bne.n	8006858 <_strtod_l+0x380>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	f47f aece 	bne.w	8006556 <_strtod_l+0x7e>
 80067ba:	9a06      	ldr	r2, [sp, #24]
 80067bc:	2a00      	cmp	r2, #0
 80067be:	f47f aeca 	bne.w	8006556 <_strtod_l+0x7e>
 80067c2:	9a04      	ldr	r2, [sp, #16]
 80067c4:	2a00      	cmp	r2, #0
 80067c6:	f47f aee4 	bne.w	8006592 <_strtod_l+0xba>
 80067ca:	2b4e      	cmp	r3, #78	; 0x4e
 80067cc:	d027      	beq.n	800681e <_strtod_l+0x346>
 80067ce:	dc21      	bgt.n	8006814 <_strtod_l+0x33c>
 80067d0:	2b49      	cmp	r3, #73	; 0x49
 80067d2:	f47f aede 	bne.w	8006592 <_strtod_l+0xba>
 80067d6:	49a0      	ldr	r1, [pc, #640]	; (8006a58 <_strtod_l+0x580>)
 80067d8:	a81b      	add	r0, sp, #108	; 0x6c
 80067da:	f000 ff07 	bl	80075ec <__match>
 80067de:	2800      	cmp	r0, #0
 80067e0:	f43f aed7 	beq.w	8006592 <_strtod_l+0xba>
 80067e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067e6:	499d      	ldr	r1, [pc, #628]	; (8006a5c <_strtod_l+0x584>)
 80067e8:	3b01      	subs	r3, #1
 80067ea:	a81b      	add	r0, sp, #108	; 0x6c
 80067ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80067ee:	f000 fefd 	bl	80075ec <__match>
 80067f2:	b910      	cbnz	r0, 80067fa <_strtod_l+0x322>
 80067f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067f6:	3301      	adds	r3, #1
 80067f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80067fa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006a70 <_strtod_l+0x598>
 80067fe:	f04f 0a00 	mov.w	sl, #0
 8006802:	e6a8      	b.n	8006556 <_strtod_l+0x7e>
 8006804:	210a      	movs	r1, #10
 8006806:	fb01 3e0e 	mla	lr, r1, lr, r3
 800680a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800680e:	e7b8      	b.n	8006782 <_strtod_l+0x2aa>
 8006810:	46be      	mov	lr, r7
 8006812:	e7c8      	b.n	80067a6 <_strtod_l+0x2ce>
 8006814:	2b69      	cmp	r3, #105	; 0x69
 8006816:	d0de      	beq.n	80067d6 <_strtod_l+0x2fe>
 8006818:	2b6e      	cmp	r3, #110	; 0x6e
 800681a:	f47f aeba 	bne.w	8006592 <_strtod_l+0xba>
 800681e:	4990      	ldr	r1, [pc, #576]	; (8006a60 <_strtod_l+0x588>)
 8006820:	a81b      	add	r0, sp, #108	; 0x6c
 8006822:	f000 fee3 	bl	80075ec <__match>
 8006826:	2800      	cmp	r0, #0
 8006828:	f43f aeb3 	beq.w	8006592 <_strtod_l+0xba>
 800682c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b28      	cmp	r3, #40	; 0x28
 8006832:	d10e      	bne.n	8006852 <_strtod_l+0x37a>
 8006834:	aa1e      	add	r2, sp, #120	; 0x78
 8006836:	498b      	ldr	r1, [pc, #556]	; (8006a64 <_strtod_l+0x58c>)
 8006838:	a81b      	add	r0, sp, #108	; 0x6c
 800683a:	f000 feeb 	bl	8007614 <__hexnan>
 800683e:	2805      	cmp	r0, #5
 8006840:	d107      	bne.n	8006852 <_strtod_l+0x37a>
 8006842:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006844:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006848:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800684c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006850:	e681      	b.n	8006556 <_strtod_l+0x7e>
 8006852:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006a78 <_strtod_l+0x5a0>
 8006856:	e7d2      	b.n	80067fe <_strtod_l+0x326>
 8006858:	ebae 0302 	sub.w	r3, lr, r2
 800685c:	9306      	str	r3, [sp, #24]
 800685e:	9b05      	ldr	r3, [sp, #20]
 8006860:	9807      	ldr	r0, [sp, #28]
 8006862:	2b00      	cmp	r3, #0
 8006864:	bf08      	it	eq
 8006866:	4623      	moveq	r3, r4
 8006868:	2c10      	cmp	r4, #16
 800686a:	9305      	str	r3, [sp, #20]
 800686c:	46a0      	mov	r8, r4
 800686e:	bfa8      	it	ge
 8006870:	f04f 0810 	movge.w	r8, #16
 8006874:	f7f9 fdf2 	bl	800045c <__aeabi_ui2d>
 8006878:	2c09      	cmp	r4, #9
 800687a:	4682      	mov	sl, r0
 800687c:	468b      	mov	fp, r1
 800687e:	dc13      	bgt.n	80068a8 <_strtod_l+0x3d0>
 8006880:	9b06      	ldr	r3, [sp, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f43f ae67 	beq.w	8006556 <_strtod_l+0x7e>
 8006888:	9b06      	ldr	r3, [sp, #24]
 800688a:	dd7a      	ble.n	8006982 <_strtod_l+0x4aa>
 800688c:	2b16      	cmp	r3, #22
 800688e:	dc61      	bgt.n	8006954 <_strtod_l+0x47c>
 8006890:	4a75      	ldr	r2, [pc, #468]	; (8006a68 <_strtod_l+0x590>)
 8006892:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006896:	e9de 0100 	ldrd	r0, r1, [lr]
 800689a:	4652      	mov	r2, sl
 800689c:	465b      	mov	r3, fp
 800689e:	f7f9 fe57 	bl	8000550 <__aeabi_dmul>
 80068a2:	4682      	mov	sl, r0
 80068a4:	468b      	mov	fp, r1
 80068a6:	e656      	b.n	8006556 <_strtod_l+0x7e>
 80068a8:	4b6f      	ldr	r3, [pc, #444]	; (8006a68 <_strtod_l+0x590>)
 80068aa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80068ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80068b2:	f7f9 fe4d 	bl	8000550 <__aeabi_dmul>
 80068b6:	4606      	mov	r6, r0
 80068b8:	4628      	mov	r0, r5
 80068ba:	460f      	mov	r7, r1
 80068bc:	f7f9 fdce 	bl	800045c <__aeabi_ui2d>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4630      	mov	r0, r6
 80068c6:	4639      	mov	r1, r7
 80068c8:	f7f9 fc8c 	bl	80001e4 <__adddf3>
 80068cc:	2c0f      	cmp	r4, #15
 80068ce:	4682      	mov	sl, r0
 80068d0:	468b      	mov	fp, r1
 80068d2:	ddd5      	ble.n	8006880 <_strtod_l+0x3a8>
 80068d4:	9b06      	ldr	r3, [sp, #24]
 80068d6:	eba4 0808 	sub.w	r8, r4, r8
 80068da:	4498      	add	r8, r3
 80068dc:	f1b8 0f00 	cmp.w	r8, #0
 80068e0:	f340 8096 	ble.w	8006a10 <_strtod_l+0x538>
 80068e4:	f018 030f 	ands.w	r3, r8, #15
 80068e8:	d00a      	beq.n	8006900 <_strtod_l+0x428>
 80068ea:	495f      	ldr	r1, [pc, #380]	; (8006a68 <_strtod_l+0x590>)
 80068ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068f0:	4652      	mov	r2, sl
 80068f2:	465b      	mov	r3, fp
 80068f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068f8:	f7f9 fe2a 	bl	8000550 <__aeabi_dmul>
 80068fc:	4682      	mov	sl, r0
 80068fe:	468b      	mov	fp, r1
 8006900:	f038 080f 	bics.w	r8, r8, #15
 8006904:	d073      	beq.n	80069ee <_strtod_l+0x516>
 8006906:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800690a:	dd47      	ble.n	800699c <_strtod_l+0x4c4>
 800690c:	2400      	movs	r4, #0
 800690e:	46a0      	mov	r8, r4
 8006910:	9407      	str	r4, [sp, #28]
 8006912:	9405      	str	r4, [sp, #20]
 8006914:	2322      	movs	r3, #34	; 0x22
 8006916:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006a70 <_strtod_l+0x598>
 800691a:	f8c9 3000 	str.w	r3, [r9]
 800691e:	f04f 0a00 	mov.w	sl, #0
 8006922:	9b07      	ldr	r3, [sp, #28]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f43f ae16 	beq.w	8006556 <_strtod_l+0x7e>
 800692a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800692c:	4648      	mov	r0, r9
 800692e:	f000 ff54 	bl	80077da <_Bfree>
 8006932:	9905      	ldr	r1, [sp, #20]
 8006934:	4648      	mov	r0, r9
 8006936:	f000 ff50 	bl	80077da <_Bfree>
 800693a:	4641      	mov	r1, r8
 800693c:	4648      	mov	r0, r9
 800693e:	f000 ff4c 	bl	80077da <_Bfree>
 8006942:	9907      	ldr	r1, [sp, #28]
 8006944:	4648      	mov	r0, r9
 8006946:	f000 ff48 	bl	80077da <_Bfree>
 800694a:	4621      	mov	r1, r4
 800694c:	4648      	mov	r0, r9
 800694e:	f000 ff44 	bl	80077da <_Bfree>
 8006952:	e600      	b.n	8006556 <_strtod_l+0x7e>
 8006954:	9a06      	ldr	r2, [sp, #24]
 8006956:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800695a:	4293      	cmp	r3, r2
 800695c:	dbba      	blt.n	80068d4 <_strtod_l+0x3fc>
 800695e:	4d42      	ldr	r5, [pc, #264]	; (8006a68 <_strtod_l+0x590>)
 8006960:	f1c4 040f 	rsb	r4, r4, #15
 8006964:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006968:	4652      	mov	r2, sl
 800696a:	465b      	mov	r3, fp
 800696c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006970:	f7f9 fdee 	bl	8000550 <__aeabi_dmul>
 8006974:	9b06      	ldr	r3, [sp, #24]
 8006976:	1b1c      	subs	r4, r3, r4
 8006978:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800697c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006980:	e78d      	b.n	800689e <_strtod_l+0x3c6>
 8006982:	f113 0f16 	cmn.w	r3, #22
 8006986:	dba5      	blt.n	80068d4 <_strtod_l+0x3fc>
 8006988:	4a37      	ldr	r2, [pc, #220]	; (8006a68 <_strtod_l+0x590>)
 800698a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800698e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006992:	4650      	mov	r0, sl
 8006994:	4659      	mov	r1, fp
 8006996:	f7f9 ff05 	bl	80007a4 <__aeabi_ddiv>
 800699a:	e782      	b.n	80068a2 <_strtod_l+0x3ca>
 800699c:	2300      	movs	r3, #0
 800699e:	4e33      	ldr	r6, [pc, #204]	; (8006a6c <_strtod_l+0x594>)
 80069a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80069a4:	4650      	mov	r0, sl
 80069a6:	4659      	mov	r1, fp
 80069a8:	461d      	mov	r5, r3
 80069aa:	f1b8 0f01 	cmp.w	r8, #1
 80069ae:	dc21      	bgt.n	80069f4 <_strtod_l+0x51c>
 80069b0:	b10b      	cbz	r3, 80069b6 <_strtod_l+0x4de>
 80069b2:	4682      	mov	sl, r0
 80069b4:	468b      	mov	fp, r1
 80069b6:	4b2d      	ldr	r3, [pc, #180]	; (8006a6c <_strtod_l+0x594>)
 80069b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80069bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80069c0:	4652      	mov	r2, sl
 80069c2:	465b      	mov	r3, fp
 80069c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80069c8:	f7f9 fdc2 	bl	8000550 <__aeabi_dmul>
 80069cc:	4b28      	ldr	r3, [pc, #160]	; (8006a70 <_strtod_l+0x598>)
 80069ce:	460a      	mov	r2, r1
 80069d0:	400b      	ands	r3, r1
 80069d2:	4928      	ldr	r1, [pc, #160]	; (8006a74 <_strtod_l+0x59c>)
 80069d4:	428b      	cmp	r3, r1
 80069d6:	4682      	mov	sl, r0
 80069d8:	d898      	bhi.n	800690c <_strtod_l+0x434>
 80069da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80069de:	428b      	cmp	r3, r1
 80069e0:	bf86      	itte	hi
 80069e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006a7c <_strtod_l+0x5a4>
 80069e6:	f04f 3aff 	movhi.w	sl, #4294967295
 80069ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80069ee:	2300      	movs	r3, #0
 80069f0:	9304      	str	r3, [sp, #16]
 80069f2:	e077      	b.n	8006ae4 <_strtod_l+0x60c>
 80069f4:	f018 0f01 	tst.w	r8, #1
 80069f8:	d006      	beq.n	8006a08 <_strtod_l+0x530>
 80069fa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	f7f9 fda5 	bl	8000550 <__aeabi_dmul>
 8006a06:	2301      	movs	r3, #1
 8006a08:	3501      	adds	r5, #1
 8006a0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006a0e:	e7cc      	b.n	80069aa <_strtod_l+0x4d2>
 8006a10:	d0ed      	beq.n	80069ee <_strtod_l+0x516>
 8006a12:	f1c8 0800 	rsb	r8, r8, #0
 8006a16:	f018 020f 	ands.w	r2, r8, #15
 8006a1a:	d00a      	beq.n	8006a32 <_strtod_l+0x55a>
 8006a1c:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <_strtod_l+0x590>)
 8006a1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a22:	4650      	mov	r0, sl
 8006a24:	4659      	mov	r1, fp
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	f7f9 febb 	bl	80007a4 <__aeabi_ddiv>
 8006a2e:	4682      	mov	sl, r0
 8006a30:	468b      	mov	fp, r1
 8006a32:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006a36:	d0da      	beq.n	80069ee <_strtod_l+0x516>
 8006a38:	f1b8 0f1f 	cmp.w	r8, #31
 8006a3c:	dd20      	ble.n	8006a80 <_strtod_l+0x5a8>
 8006a3e:	2400      	movs	r4, #0
 8006a40:	46a0      	mov	r8, r4
 8006a42:	9407      	str	r4, [sp, #28]
 8006a44:	9405      	str	r4, [sp, #20]
 8006a46:	2322      	movs	r3, #34	; 0x22
 8006a48:	f04f 0a00 	mov.w	sl, #0
 8006a4c:	f04f 0b00 	mov.w	fp, #0
 8006a50:	f8c9 3000 	str.w	r3, [r9]
 8006a54:	e765      	b.n	8006922 <_strtod_l+0x44a>
 8006a56:	bf00      	nop
 8006a58:	08009190 	.word	0x08009190
 8006a5c:	08009193 	.word	0x08009193
 8006a60:	08009199 	.word	0x08009199
 8006a64:	080091b0 	.word	0x080091b0
 8006a68:	08009228 	.word	0x08009228
 8006a6c:	08009200 	.word	0x08009200
 8006a70:	7ff00000 	.word	0x7ff00000
 8006a74:	7ca00000 	.word	0x7ca00000
 8006a78:	fff80000 	.word	0xfff80000
 8006a7c:	7fefffff 	.word	0x7fefffff
 8006a80:	f018 0310 	ands.w	r3, r8, #16
 8006a84:	bf18      	it	ne
 8006a86:	236a      	movne	r3, #106	; 0x6a
 8006a88:	4da0      	ldr	r5, [pc, #640]	; (8006d0c <_strtod_l+0x834>)
 8006a8a:	9304      	str	r3, [sp, #16]
 8006a8c:	4650      	mov	r0, sl
 8006a8e:	4659      	mov	r1, fp
 8006a90:	2300      	movs	r3, #0
 8006a92:	f1b8 0f00 	cmp.w	r8, #0
 8006a96:	f300 810a 	bgt.w	8006cae <_strtod_l+0x7d6>
 8006a9a:	b10b      	cbz	r3, 8006aa0 <_strtod_l+0x5c8>
 8006a9c:	4682      	mov	sl, r0
 8006a9e:	468b      	mov	fp, r1
 8006aa0:	9b04      	ldr	r3, [sp, #16]
 8006aa2:	b1bb      	cbz	r3, 8006ad4 <_strtod_l+0x5fc>
 8006aa4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006aa8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	4659      	mov	r1, fp
 8006ab0:	dd10      	ble.n	8006ad4 <_strtod_l+0x5fc>
 8006ab2:	2b1f      	cmp	r3, #31
 8006ab4:	f340 8107 	ble.w	8006cc6 <_strtod_l+0x7ee>
 8006ab8:	2b34      	cmp	r3, #52	; 0x34
 8006aba:	bfde      	ittt	le
 8006abc:	3b20      	suble	r3, #32
 8006abe:	f04f 32ff 	movle.w	r2, #4294967295
 8006ac2:	fa02 f303 	lslle.w	r3, r2, r3
 8006ac6:	f04f 0a00 	mov.w	sl, #0
 8006aca:	bfcc      	ite	gt
 8006acc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006ad0:	ea03 0b01 	andle.w	fp, r3, r1
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	4650      	mov	r0, sl
 8006ada:	4659      	mov	r1, fp
 8006adc:	f7f9 ffa0 	bl	8000a20 <__aeabi_dcmpeq>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	d1ac      	bne.n	8006a3e <_strtod_l+0x566>
 8006ae4:	9b07      	ldr	r3, [sp, #28]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	9a05      	ldr	r2, [sp, #20]
 8006aea:	9908      	ldr	r1, [sp, #32]
 8006aec:	4623      	mov	r3, r4
 8006aee:	4648      	mov	r0, r9
 8006af0:	f000 fec5 	bl	800787e <__s2b>
 8006af4:	9007      	str	r0, [sp, #28]
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f43f af08 	beq.w	800690c <_strtod_l+0x434>
 8006afc:	9a06      	ldr	r2, [sp, #24]
 8006afe:	9b06      	ldr	r3, [sp, #24]
 8006b00:	2a00      	cmp	r2, #0
 8006b02:	f1c3 0300 	rsb	r3, r3, #0
 8006b06:	bfa8      	it	ge
 8006b08:	2300      	movge	r3, #0
 8006b0a:	930e      	str	r3, [sp, #56]	; 0x38
 8006b0c:	2400      	movs	r4, #0
 8006b0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006b12:	9316      	str	r3, [sp, #88]	; 0x58
 8006b14:	46a0      	mov	r8, r4
 8006b16:	9b07      	ldr	r3, [sp, #28]
 8006b18:	4648      	mov	r0, r9
 8006b1a:	6859      	ldr	r1, [r3, #4]
 8006b1c:	f000 fe29 	bl	8007772 <_Balloc>
 8006b20:	9005      	str	r0, [sp, #20]
 8006b22:	2800      	cmp	r0, #0
 8006b24:	f43f aef6 	beq.w	8006914 <_strtod_l+0x43c>
 8006b28:	9b07      	ldr	r3, [sp, #28]
 8006b2a:	691a      	ldr	r2, [r3, #16]
 8006b2c:	3202      	adds	r2, #2
 8006b2e:	f103 010c 	add.w	r1, r3, #12
 8006b32:	0092      	lsls	r2, r2, #2
 8006b34:	300c      	adds	r0, #12
 8006b36:	f000 fe11 	bl	800775c <memcpy>
 8006b3a:	aa1e      	add	r2, sp, #120	; 0x78
 8006b3c:	a91d      	add	r1, sp, #116	; 0x74
 8006b3e:	ec4b ab10 	vmov	d0, sl, fp
 8006b42:	4648      	mov	r0, r9
 8006b44:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006b48:	f001 f954 	bl	8007df4 <__d2b>
 8006b4c:	901c      	str	r0, [sp, #112]	; 0x70
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	f43f aee0 	beq.w	8006914 <_strtod_l+0x43c>
 8006b54:	2101      	movs	r1, #1
 8006b56:	4648      	mov	r0, r9
 8006b58:	f000 ff1d 	bl	8007996 <__i2b>
 8006b5c:	4680      	mov	r8, r0
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	f43f aed8 	beq.w	8006914 <_strtod_l+0x43c>
 8006b64:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006b66:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006b68:	2e00      	cmp	r6, #0
 8006b6a:	bfab      	itete	ge
 8006b6c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006b6e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006b70:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006b72:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006b74:	bfac      	ite	ge
 8006b76:	18f7      	addge	r7, r6, r3
 8006b78:	1b9d      	sublt	r5, r3, r6
 8006b7a:	9b04      	ldr	r3, [sp, #16]
 8006b7c:	1af6      	subs	r6, r6, r3
 8006b7e:	4416      	add	r6, r2
 8006b80:	4b63      	ldr	r3, [pc, #396]	; (8006d10 <_strtod_l+0x838>)
 8006b82:	3e01      	subs	r6, #1
 8006b84:	429e      	cmp	r6, r3
 8006b86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006b8a:	f280 80af 	bge.w	8006cec <_strtod_l+0x814>
 8006b8e:	1b9b      	subs	r3, r3, r6
 8006b90:	2b1f      	cmp	r3, #31
 8006b92:	eba2 0203 	sub.w	r2, r2, r3
 8006b96:	f04f 0101 	mov.w	r1, #1
 8006b9a:	f300 809b 	bgt.w	8006cd4 <_strtod_l+0x7fc>
 8006b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba2:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ba8:	18be      	adds	r6, r7, r2
 8006baa:	9b04      	ldr	r3, [sp, #16]
 8006bac:	42b7      	cmp	r7, r6
 8006bae:	4415      	add	r5, r2
 8006bb0:	441d      	add	r5, r3
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	bfa8      	it	ge
 8006bb6:	4633      	movge	r3, r6
 8006bb8:	42ab      	cmp	r3, r5
 8006bba:	bfa8      	it	ge
 8006bbc:	462b      	movge	r3, r5
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bfc2      	ittt	gt
 8006bc2:	1af6      	subgt	r6, r6, r3
 8006bc4:	1aed      	subgt	r5, r5, r3
 8006bc6:	1aff      	subgt	r7, r7, r3
 8006bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bca:	b1bb      	cbz	r3, 8006bfc <_strtod_l+0x724>
 8006bcc:	4641      	mov	r1, r8
 8006bce:	461a      	mov	r2, r3
 8006bd0:	4648      	mov	r0, r9
 8006bd2:	f000 ff7f 	bl	8007ad4 <__pow5mult>
 8006bd6:	4680      	mov	r8, r0
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	f43f ae9b 	beq.w	8006914 <_strtod_l+0x43c>
 8006bde:	4601      	mov	r1, r0
 8006be0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006be2:	4648      	mov	r0, r9
 8006be4:	f000 fee0 	bl	80079a8 <__multiply>
 8006be8:	900c      	str	r0, [sp, #48]	; 0x30
 8006bea:	2800      	cmp	r0, #0
 8006bec:	f43f ae92 	beq.w	8006914 <_strtod_l+0x43c>
 8006bf0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006bf2:	4648      	mov	r0, r9
 8006bf4:	f000 fdf1 	bl	80077da <_Bfree>
 8006bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bfa:	931c      	str	r3, [sp, #112]	; 0x70
 8006bfc:	2e00      	cmp	r6, #0
 8006bfe:	dc7a      	bgt.n	8006cf6 <_strtod_l+0x81e>
 8006c00:	9b06      	ldr	r3, [sp, #24]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	dd08      	ble.n	8006c18 <_strtod_l+0x740>
 8006c06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006c08:	9905      	ldr	r1, [sp, #20]
 8006c0a:	4648      	mov	r0, r9
 8006c0c:	f000 ff62 	bl	8007ad4 <__pow5mult>
 8006c10:	9005      	str	r0, [sp, #20]
 8006c12:	2800      	cmp	r0, #0
 8006c14:	f43f ae7e 	beq.w	8006914 <_strtod_l+0x43c>
 8006c18:	2d00      	cmp	r5, #0
 8006c1a:	dd08      	ble.n	8006c2e <_strtod_l+0x756>
 8006c1c:	462a      	mov	r2, r5
 8006c1e:	9905      	ldr	r1, [sp, #20]
 8006c20:	4648      	mov	r0, r9
 8006c22:	f000 ffa5 	bl	8007b70 <__lshift>
 8006c26:	9005      	str	r0, [sp, #20]
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	f43f ae73 	beq.w	8006914 <_strtod_l+0x43c>
 8006c2e:	2f00      	cmp	r7, #0
 8006c30:	dd08      	ble.n	8006c44 <_strtod_l+0x76c>
 8006c32:	4641      	mov	r1, r8
 8006c34:	463a      	mov	r2, r7
 8006c36:	4648      	mov	r0, r9
 8006c38:	f000 ff9a 	bl	8007b70 <__lshift>
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	f43f ae68 	beq.w	8006914 <_strtod_l+0x43c>
 8006c44:	9a05      	ldr	r2, [sp, #20]
 8006c46:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c48:	4648      	mov	r0, r9
 8006c4a:	f000 ffff 	bl	8007c4c <__mdiff>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	2800      	cmp	r0, #0
 8006c52:	f43f ae5f 	beq.w	8006914 <_strtod_l+0x43c>
 8006c56:	68c3      	ldr	r3, [r0, #12]
 8006c58:	930c      	str	r3, [sp, #48]	; 0x30
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60c3      	str	r3, [r0, #12]
 8006c5e:	4641      	mov	r1, r8
 8006c60:	f000 ffda 	bl	8007c18 <__mcmp>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	da55      	bge.n	8006d14 <_strtod_l+0x83c>
 8006c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c6a:	b9e3      	cbnz	r3, 8006ca6 <_strtod_l+0x7ce>
 8006c6c:	f1ba 0f00 	cmp.w	sl, #0
 8006c70:	d119      	bne.n	8006ca6 <_strtod_l+0x7ce>
 8006c72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c76:	b9b3      	cbnz	r3, 8006ca6 <_strtod_l+0x7ce>
 8006c78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c7c:	0d1b      	lsrs	r3, r3, #20
 8006c7e:	051b      	lsls	r3, r3, #20
 8006c80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006c84:	d90f      	bls.n	8006ca6 <_strtod_l+0x7ce>
 8006c86:	6963      	ldr	r3, [r4, #20]
 8006c88:	b913      	cbnz	r3, 8006c90 <_strtod_l+0x7b8>
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	dd0a      	ble.n	8006ca6 <_strtod_l+0x7ce>
 8006c90:	4621      	mov	r1, r4
 8006c92:	2201      	movs	r2, #1
 8006c94:	4648      	mov	r0, r9
 8006c96:	f000 ff6b 	bl	8007b70 <__lshift>
 8006c9a:	4641      	mov	r1, r8
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	f000 ffbb 	bl	8007c18 <__mcmp>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	dc67      	bgt.n	8006d76 <_strtod_l+0x89e>
 8006ca6:	9b04      	ldr	r3, [sp, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d171      	bne.n	8006d90 <_strtod_l+0x8b8>
 8006cac:	e63d      	b.n	800692a <_strtod_l+0x452>
 8006cae:	f018 0f01 	tst.w	r8, #1
 8006cb2:	d004      	beq.n	8006cbe <_strtod_l+0x7e6>
 8006cb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cb8:	f7f9 fc4a 	bl	8000550 <__aeabi_dmul>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006cc2:	3508      	adds	r5, #8
 8006cc4:	e6e5      	b.n	8006a92 <_strtod_l+0x5ba>
 8006cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cca:	fa02 f303 	lsl.w	r3, r2, r3
 8006cce:	ea03 0a0a 	and.w	sl, r3, sl
 8006cd2:	e6ff      	b.n	8006ad4 <_strtod_l+0x5fc>
 8006cd4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006cd8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006cdc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006ce0:	36e2      	adds	r6, #226	; 0xe2
 8006ce2:	fa01 f306 	lsl.w	r3, r1, r6
 8006ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ce8:	910f      	str	r1, [sp, #60]	; 0x3c
 8006cea:	e75d      	b.n	8006ba8 <_strtod_l+0x6d0>
 8006cec:	2300      	movs	r3, #0
 8006cee:	930a      	str	r3, [sp, #40]	; 0x28
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cf4:	e758      	b.n	8006ba8 <_strtod_l+0x6d0>
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006cfa:	4648      	mov	r0, r9
 8006cfc:	f000 ff38 	bl	8007b70 <__lshift>
 8006d00:	901c      	str	r0, [sp, #112]	; 0x70
 8006d02:	2800      	cmp	r0, #0
 8006d04:	f47f af7c 	bne.w	8006c00 <_strtod_l+0x728>
 8006d08:	e604      	b.n	8006914 <_strtod_l+0x43c>
 8006d0a:	bf00      	nop
 8006d0c:	080091c8 	.word	0x080091c8
 8006d10:	fffffc02 	.word	0xfffffc02
 8006d14:	465d      	mov	r5, fp
 8006d16:	f040 8086 	bne.w	8006e26 <_strtod_l+0x94e>
 8006d1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d20:	b32a      	cbz	r2, 8006d6e <_strtod_l+0x896>
 8006d22:	4aaf      	ldr	r2, [pc, #700]	; (8006fe0 <_strtod_l+0xb08>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d153      	bne.n	8006dd0 <_strtod_l+0x8f8>
 8006d28:	9b04      	ldr	r3, [sp, #16]
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	b1d3      	cbz	r3, 8006d64 <_strtod_l+0x88c>
 8006d2e:	4aad      	ldr	r2, [pc, #692]	; (8006fe4 <_strtod_l+0xb0c>)
 8006d30:	402a      	ands	r2, r5
 8006d32:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006d36:	f04f 31ff 	mov.w	r1, #4294967295
 8006d3a:	d816      	bhi.n	8006d6a <_strtod_l+0x892>
 8006d3c:	0d12      	lsrs	r2, r2, #20
 8006d3e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006d42:	fa01 f303 	lsl.w	r3, r1, r3
 8006d46:	4298      	cmp	r0, r3
 8006d48:	d142      	bne.n	8006dd0 <_strtod_l+0x8f8>
 8006d4a:	4ba7      	ldr	r3, [pc, #668]	; (8006fe8 <_strtod_l+0xb10>)
 8006d4c:	429d      	cmp	r5, r3
 8006d4e:	d102      	bne.n	8006d56 <_strtod_l+0x87e>
 8006d50:	3001      	adds	r0, #1
 8006d52:	f43f addf 	beq.w	8006914 <_strtod_l+0x43c>
 8006d56:	4ba3      	ldr	r3, [pc, #652]	; (8006fe4 <_strtod_l+0xb0c>)
 8006d58:	402b      	ands	r3, r5
 8006d5a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006d5e:	f04f 0a00 	mov.w	sl, #0
 8006d62:	e7a0      	b.n	8006ca6 <_strtod_l+0x7ce>
 8006d64:	f04f 33ff 	mov.w	r3, #4294967295
 8006d68:	e7ed      	b.n	8006d46 <_strtod_l+0x86e>
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	e7eb      	b.n	8006d46 <_strtod_l+0x86e>
 8006d6e:	bb7b      	cbnz	r3, 8006dd0 <_strtod_l+0x8f8>
 8006d70:	f1ba 0f00 	cmp.w	sl, #0
 8006d74:	d12c      	bne.n	8006dd0 <_strtod_l+0x8f8>
 8006d76:	9904      	ldr	r1, [sp, #16]
 8006d78:	4a9a      	ldr	r2, [pc, #616]	; (8006fe4 <_strtod_l+0xb0c>)
 8006d7a:	465b      	mov	r3, fp
 8006d7c:	b1f1      	cbz	r1, 8006dbc <_strtod_l+0x8e4>
 8006d7e:	ea02 010b 	and.w	r1, r2, fp
 8006d82:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d86:	dc19      	bgt.n	8006dbc <_strtod_l+0x8e4>
 8006d88:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d8c:	f77f ae5b 	ble.w	8006a46 <_strtod_l+0x56e>
 8006d90:	4a96      	ldr	r2, [pc, #600]	; (8006fec <_strtod_l+0xb14>)
 8006d92:	2300      	movs	r3, #0
 8006d94:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006d98:	4650      	mov	r0, sl
 8006d9a:	4659      	mov	r1, fp
 8006d9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006da0:	f7f9 fbd6 	bl	8000550 <__aeabi_dmul>
 8006da4:	4682      	mov	sl, r0
 8006da6:	468b      	mov	fp, r1
 8006da8:	2900      	cmp	r1, #0
 8006daa:	f47f adbe 	bne.w	800692a <_strtod_l+0x452>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	f47f adbb 	bne.w	800692a <_strtod_l+0x452>
 8006db4:	2322      	movs	r3, #34	; 0x22
 8006db6:	f8c9 3000 	str.w	r3, [r9]
 8006dba:	e5b6      	b.n	800692a <_strtod_l+0x452>
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006dc2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006dc6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006dca:	f04f 3aff 	mov.w	sl, #4294967295
 8006dce:	e76a      	b.n	8006ca6 <_strtod_l+0x7ce>
 8006dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd2:	b193      	cbz	r3, 8006dfa <_strtod_l+0x922>
 8006dd4:	422b      	tst	r3, r5
 8006dd6:	f43f af66 	beq.w	8006ca6 <_strtod_l+0x7ce>
 8006dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ddc:	9a04      	ldr	r2, [sp, #16]
 8006dde:	4650      	mov	r0, sl
 8006de0:	4659      	mov	r1, fp
 8006de2:	b173      	cbz	r3, 8006e02 <_strtod_l+0x92a>
 8006de4:	f7ff fb5a 	bl	800649c <sulp>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006df0:	f7f9 f9f8 	bl	80001e4 <__adddf3>
 8006df4:	4682      	mov	sl, r0
 8006df6:	468b      	mov	fp, r1
 8006df8:	e755      	b.n	8006ca6 <_strtod_l+0x7ce>
 8006dfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dfc:	ea13 0f0a 	tst.w	r3, sl
 8006e00:	e7e9      	b.n	8006dd6 <_strtod_l+0x8fe>
 8006e02:	f7ff fb4b 	bl	800649c <sulp>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e0e:	f7f9 f9e7 	bl	80001e0 <__aeabi_dsub>
 8006e12:	2200      	movs	r2, #0
 8006e14:	2300      	movs	r3, #0
 8006e16:	4682      	mov	sl, r0
 8006e18:	468b      	mov	fp, r1
 8006e1a:	f7f9 fe01 	bl	8000a20 <__aeabi_dcmpeq>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	f47f ae11 	bne.w	8006a46 <_strtod_l+0x56e>
 8006e24:	e73f      	b.n	8006ca6 <_strtod_l+0x7ce>
 8006e26:	4641      	mov	r1, r8
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f001 f832 	bl	8007e92 <__ratio>
 8006e2e:	ec57 6b10 	vmov	r6, r7, d0
 8006e32:	2200      	movs	r2, #0
 8006e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e38:	ee10 0a10 	vmov	r0, s0
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	f7f9 fe03 	bl	8000a48 <__aeabi_dcmple>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d077      	beq.n	8006f36 <_strtod_l+0xa5e>
 8006e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d04a      	beq.n	8006ee2 <_strtod_l+0xa0a>
 8006e4c:	4b68      	ldr	r3, [pc, #416]	; (8006ff0 <_strtod_l+0xb18>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006e54:	4f66      	ldr	r7, [pc, #408]	; (8006ff0 <_strtod_l+0xb18>)
 8006e56:	2600      	movs	r6, #0
 8006e58:	4b62      	ldr	r3, [pc, #392]	; (8006fe4 <_strtod_l+0xb0c>)
 8006e5a:	402b      	ands	r3, r5
 8006e5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e60:	4b64      	ldr	r3, [pc, #400]	; (8006ff4 <_strtod_l+0xb1c>)
 8006e62:	429a      	cmp	r2, r3
 8006e64:	f040 80ce 	bne.w	8007004 <_strtod_l+0xb2c>
 8006e68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e70:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8006e74:	ec4b ab10 	vmov	d0, sl, fp
 8006e78:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006e7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e80:	f000 ff42 	bl	8007d08 <__ulp>
 8006e84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e88:	ec53 2b10 	vmov	r2, r3, d0
 8006e8c:	f7f9 fb60 	bl	8000550 <__aeabi_dmul>
 8006e90:	4652      	mov	r2, sl
 8006e92:	465b      	mov	r3, fp
 8006e94:	f7f9 f9a6 	bl	80001e4 <__adddf3>
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4952      	ldr	r1, [pc, #328]	; (8006fe4 <_strtod_l+0xb0c>)
 8006e9c:	4a56      	ldr	r2, [pc, #344]	; (8006ff8 <_strtod_l+0xb20>)
 8006e9e:	4019      	ands	r1, r3
 8006ea0:	4291      	cmp	r1, r2
 8006ea2:	4682      	mov	sl, r0
 8006ea4:	d95b      	bls.n	8006f5e <_strtod_l+0xa86>
 8006ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d103      	bne.n	8006eb8 <_strtod_l+0x9e0>
 8006eb0:	9b08      	ldr	r3, [sp, #32]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	f43f ad2e 	beq.w	8006914 <_strtod_l+0x43c>
 8006eb8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006fe8 <_strtod_l+0xb10>
 8006ebc:	f04f 3aff 	mov.w	sl, #4294967295
 8006ec0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ec2:	4648      	mov	r0, r9
 8006ec4:	f000 fc89 	bl	80077da <_Bfree>
 8006ec8:	9905      	ldr	r1, [sp, #20]
 8006eca:	4648      	mov	r0, r9
 8006ecc:	f000 fc85 	bl	80077da <_Bfree>
 8006ed0:	4641      	mov	r1, r8
 8006ed2:	4648      	mov	r0, r9
 8006ed4:	f000 fc81 	bl	80077da <_Bfree>
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4648      	mov	r0, r9
 8006edc:	f000 fc7d 	bl	80077da <_Bfree>
 8006ee0:	e619      	b.n	8006b16 <_strtod_l+0x63e>
 8006ee2:	f1ba 0f00 	cmp.w	sl, #0
 8006ee6:	d11a      	bne.n	8006f1e <_strtod_l+0xa46>
 8006ee8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006eec:	b9eb      	cbnz	r3, 8006f2a <_strtod_l+0xa52>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	4b3f      	ldr	r3, [pc, #252]	; (8006ff0 <_strtod_l+0xb18>)
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	4639      	mov	r1, r7
 8006ef6:	f7f9 fd9d 	bl	8000a34 <__aeabi_dcmplt>
 8006efa:	b9c8      	cbnz	r0, 8006f30 <_strtod_l+0xa58>
 8006efc:	4630      	mov	r0, r6
 8006efe:	4639      	mov	r1, r7
 8006f00:	2200      	movs	r2, #0
 8006f02:	4b3e      	ldr	r3, [pc, #248]	; (8006ffc <_strtod_l+0xb24>)
 8006f04:	f7f9 fb24 	bl	8000550 <__aeabi_dmul>
 8006f08:	4606      	mov	r6, r0
 8006f0a:	460f      	mov	r7, r1
 8006f0c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006f10:	9618      	str	r6, [sp, #96]	; 0x60
 8006f12:	9319      	str	r3, [sp, #100]	; 0x64
 8006f14:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006f18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006f1c:	e79c      	b.n	8006e58 <_strtod_l+0x980>
 8006f1e:	f1ba 0f01 	cmp.w	sl, #1
 8006f22:	d102      	bne.n	8006f2a <_strtod_l+0xa52>
 8006f24:	2d00      	cmp	r5, #0
 8006f26:	f43f ad8e 	beq.w	8006a46 <_strtod_l+0x56e>
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	4b34      	ldr	r3, [pc, #208]	; (8007000 <_strtod_l+0xb28>)
 8006f2e:	e78f      	b.n	8006e50 <_strtod_l+0x978>
 8006f30:	2600      	movs	r6, #0
 8006f32:	4f32      	ldr	r7, [pc, #200]	; (8006ffc <_strtod_l+0xb24>)
 8006f34:	e7ea      	b.n	8006f0c <_strtod_l+0xa34>
 8006f36:	4b31      	ldr	r3, [pc, #196]	; (8006ffc <_strtod_l+0xb24>)
 8006f38:	4630      	mov	r0, r6
 8006f3a:	4639      	mov	r1, r7
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f7f9 fb07 	bl	8000550 <__aeabi_dmul>
 8006f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f44:	4606      	mov	r6, r0
 8006f46:	460f      	mov	r7, r1
 8006f48:	b933      	cbnz	r3, 8006f58 <_strtod_l+0xa80>
 8006f4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f4e:	9010      	str	r0, [sp, #64]	; 0x40
 8006f50:	9311      	str	r3, [sp, #68]	; 0x44
 8006f52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f56:	e7df      	b.n	8006f18 <_strtod_l+0xa40>
 8006f58:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006f5c:	e7f9      	b.n	8006f52 <_strtod_l+0xa7a>
 8006f5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006f62:	9b04      	ldr	r3, [sp, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1ab      	bne.n	8006ec0 <_strtod_l+0x9e8>
 8006f68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f6c:	0d1b      	lsrs	r3, r3, #20
 8006f6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f70:	051b      	lsls	r3, r3, #20
 8006f72:	429a      	cmp	r2, r3
 8006f74:	465d      	mov	r5, fp
 8006f76:	d1a3      	bne.n	8006ec0 <_strtod_l+0x9e8>
 8006f78:	4639      	mov	r1, r7
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f7f9 fd98 	bl	8000ab0 <__aeabi_d2iz>
 8006f80:	f7f9 fa7c 	bl	800047c <__aeabi_i2d>
 8006f84:	460b      	mov	r3, r1
 8006f86:	4602      	mov	r2, r0
 8006f88:	4639      	mov	r1, r7
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	f7f9 f928 	bl	80001e0 <__aeabi_dsub>
 8006f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f92:	4606      	mov	r6, r0
 8006f94:	460f      	mov	r7, r1
 8006f96:	b933      	cbnz	r3, 8006fa6 <_strtod_l+0xace>
 8006f98:	f1ba 0f00 	cmp.w	sl, #0
 8006f9c:	d103      	bne.n	8006fa6 <_strtod_l+0xace>
 8006f9e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8006fa2:	2d00      	cmp	r5, #0
 8006fa4:	d06d      	beq.n	8007082 <_strtod_l+0xbaa>
 8006fa6:	a30a      	add	r3, pc, #40	; (adr r3, 8006fd0 <_strtod_l+0xaf8>)
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	4630      	mov	r0, r6
 8006fae:	4639      	mov	r1, r7
 8006fb0:	f7f9 fd40 	bl	8000a34 <__aeabi_dcmplt>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	f47f acb8 	bne.w	800692a <_strtod_l+0x452>
 8006fba:	a307      	add	r3, pc, #28	; (adr r3, 8006fd8 <_strtod_l+0xb00>)
 8006fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	4639      	mov	r1, r7
 8006fc4:	f7f9 fd54 	bl	8000a70 <__aeabi_dcmpgt>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	f43f af79 	beq.w	8006ec0 <_strtod_l+0x9e8>
 8006fce:	e4ac      	b.n	800692a <_strtod_l+0x452>
 8006fd0:	94a03595 	.word	0x94a03595
 8006fd4:	3fdfffff 	.word	0x3fdfffff
 8006fd8:	35afe535 	.word	0x35afe535
 8006fdc:	3fe00000 	.word	0x3fe00000
 8006fe0:	000fffff 	.word	0x000fffff
 8006fe4:	7ff00000 	.word	0x7ff00000
 8006fe8:	7fefffff 	.word	0x7fefffff
 8006fec:	39500000 	.word	0x39500000
 8006ff0:	3ff00000 	.word	0x3ff00000
 8006ff4:	7fe00000 	.word	0x7fe00000
 8006ff8:	7c9fffff 	.word	0x7c9fffff
 8006ffc:	3fe00000 	.word	0x3fe00000
 8007000:	bff00000 	.word	0xbff00000
 8007004:	9b04      	ldr	r3, [sp, #16]
 8007006:	b333      	cbz	r3, 8007056 <_strtod_l+0xb7e>
 8007008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800700a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800700e:	d822      	bhi.n	8007056 <_strtod_l+0xb7e>
 8007010:	a327      	add	r3, pc, #156	; (adr r3, 80070b0 <_strtod_l+0xbd8>)
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	4630      	mov	r0, r6
 8007018:	4639      	mov	r1, r7
 800701a:	f7f9 fd15 	bl	8000a48 <__aeabi_dcmple>
 800701e:	b1a0      	cbz	r0, 800704a <_strtod_l+0xb72>
 8007020:	4639      	mov	r1, r7
 8007022:	4630      	mov	r0, r6
 8007024:	f7f9 fd6c 	bl	8000b00 <__aeabi_d2uiz>
 8007028:	2800      	cmp	r0, #0
 800702a:	bf08      	it	eq
 800702c:	2001      	moveq	r0, #1
 800702e:	f7f9 fa15 	bl	800045c <__aeabi_ui2d>
 8007032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007034:	4606      	mov	r6, r0
 8007036:	460f      	mov	r7, r1
 8007038:	bb03      	cbnz	r3, 800707c <_strtod_l+0xba4>
 800703a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800703e:	9012      	str	r0, [sp, #72]	; 0x48
 8007040:	9313      	str	r3, [sp, #76]	; 0x4c
 8007042:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007046:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800704a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800704c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800704e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007052:	1a9b      	subs	r3, r3, r2
 8007054:	930b      	str	r3, [sp, #44]	; 0x2c
 8007056:	ed9d 0b08 	vldr	d0, [sp, #32]
 800705a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800705e:	f000 fe53 	bl	8007d08 <__ulp>
 8007062:	4650      	mov	r0, sl
 8007064:	ec53 2b10 	vmov	r2, r3, d0
 8007068:	4659      	mov	r1, fp
 800706a:	f7f9 fa71 	bl	8000550 <__aeabi_dmul>
 800706e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007072:	f7f9 f8b7 	bl	80001e4 <__adddf3>
 8007076:	4682      	mov	sl, r0
 8007078:	468b      	mov	fp, r1
 800707a:	e772      	b.n	8006f62 <_strtod_l+0xa8a>
 800707c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007080:	e7df      	b.n	8007042 <_strtod_l+0xb6a>
 8007082:	a30d      	add	r3, pc, #52	; (adr r3, 80070b8 <_strtod_l+0xbe0>)
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f7f9 fcd4 	bl	8000a34 <__aeabi_dcmplt>
 800708c:	e79c      	b.n	8006fc8 <_strtod_l+0xaf0>
 800708e:	2300      	movs	r3, #0
 8007090:	930d      	str	r3, [sp, #52]	; 0x34
 8007092:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007094:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	f7ff ba61 	b.w	800655e <_strtod_l+0x86>
 800709c:	2b65      	cmp	r3, #101	; 0x65
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	f43f ab4e 	beq.w	8006742 <_strtod_l+0x26a>
 80070a6:	2101      	movs	r1, #1
 80070a8:	4614      	mov	r4, r2
 80070aa:	9104      	str	r1, [sp, #16]
 80070ac:	f7ff bacb 	b.w	8006646 <_strtod_l+0x16e>
 80070b0:	ffc00000 	.word	0xffc00000
 80070b4:	41dfffff 	.word	0x41dfffff
 80070b8:	94a03595 	.word	0x94a03595
 80070bc:	3fcfffff 	.word	0x3fcfffff

080070c0 <strtod>:
 80070c0:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <strtod+0x20>)
 80070c2:	4a08      	ldr	r2, [pc, #32]	; (80070e4 <strtod+0x24>)
 80070c4:	b410      	push	{r4}
 80070c6:	681c      	ldr	r4, [r3, #0]
 80070c8:	6a23      	ldr	r3, [r4, #32]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	bf08      	it	eq
 80070ce:	4613      	moveq	r3, r2
 80070d0:	460a      	mov	r2, r1
 80070d2:	4601      	mov	r1, r0
 80070d4:	4620      	mov	r0, r4
 80070d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070da:	f7ff b9fd 	b.w	80064d8 <_strtod_l>
 80070de:	bf00      	nop
 80070e0:	20000010 	.word	0x20000010
 80070e4:	20000074 	.word	0x20000074

080070e8 <rshift>:
 80070e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ea:	6906      	ldr	r6, [r0, #16]
 80070ec:	114b      	asrs	r3, r1, #5
 80070ee:	429e      	cmp	r6, r3
 80070f0:	f100 0414 	add.w	r4, r0, #20
 80070f4:	dd30      	ble.n	8007158 <rshift+0x70>
 80070f6:	f011 011f 	ands.w	r1, r1, #31
 80070fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80070fe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007102:	d108      	bne.n	8007116 <rshift+0x2e>
 8007104:	4621      	mov	r1, r4
 8007106:	42b2      	cmp	r2, r6
 8007108:	460b      	mov	r3, r1
 800710a:	d211      	bcs.n	8007130 <rshift+0x48>
 800710c:	f852 3b04 	ldr.w	r3, [r2], #4
 8007110:	f841 3b04 	str.w	r3, [r1], #4
 8007114:	e7f7      	b.n	8007106 <rshift+0x1e>
 8007116:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800711a:	f1c1 0c20 	rsb	ip, r1, #32
 800711e:	40cd      	lsrs	r5, r1
 8007120:	3204      	adds	r2, #4
 8007122:	4623      	mov	r3, r4
 8007124:	42b2      	cmp	r2, r6
 8007126:	4617      	mov	r7, r2
 8007128:	d30c      	bcc.n	8007144 <rshift+0x5c>
 800712a:	601d      	str	r5, [r3, #0]
 800712c:	b105      	cbz	r5, 8007130 <rshift+0x48>
 800712e:	3304      	adds	r3, #4
 8007130:	1b1a      	subs	r2, r3, r4
 8007132:	42a3      	cmp	r3, r4
 8007134:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007138:	bf08      	it	eq
 800713a:	2300      	moveq	r3, #0
 800713c:	6102      	str	r2, [r0, #16]
 800713e:	bf08      	it	eq
 8007140:	6143      	streq	r3, [r0, #20]
 8007142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007144:	683f      	ldr	r7, [r7, #0]
 8007146:	fa07 f70c 	lsl.w	r7, r7, ip
 800714a:	433d      	orrs	r5, r7
 800714c:	f843 5b04 	str.w	r5, [r3], #4
 8007150:	f852 5b04 	ldr.w	r5, [r2], #4
 8007154:	40cd      	lsrs	r5, r1
 8007156:	e7e5      	b.n	8007124 <rshift+0x3c>
 8007158:	4623      	mov	r3, r4
 800715a:	e7e9      	b.n	8007130 <rshift+0x48>

0800715c <__hexdig_fun>:
 800715c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007160:	2b09      	cmp	r3, #9
 8007162:	d802      	bhi.n	800716a <__hexdig_fun+0xe>
 8007164:	3820      	subs	r0, #32
 8007166:	b2c0      	uxtb	r0, r0
 8007168:	4770      	bx	lr
 800716a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800716e:	2b05      	cmp	r3, #5
 8007170:	d801      	bhi.n	8007176 <__hexdig_fun+0x1a>
 8007172:	3847      	subs	r0, #71	; 0x47
 8007174:	e7f7      	b.n	8007166 <__hexdig_fun+0xa>
 8007176:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800717a:	2b05      	cmp	r3, #5
 800717c:	d801      	bhi.n	8007182 <__hexdig_fun+0x26>
 800717e:	3827      	subs	r0, #39	; 0x27
 8007180:	e7f1      	b.n	8007166 <__hexdig_fun+0xa>
 8007182:	2000      	movs	r0, #0
 8007184:	4770      	bx	lr

08007186 <__gethex>:
 8007186:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718a:	b08b      	sub	sp, #44	; 0x2c
 800718c:	468a      	mov	sl, r1
 800718e:	9002      	str	r0, [sp, #8]
 8007190:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007192:	9306      	str	r3, [sp, #24]
 8007194:	4690      	mov	r8, r2
 8007196:	f000 facd 	bl	8007734 <__localeconv_l>
 800719a:	6803      	ldr	r3, [r0, #0]
 800719c:	9303      	str	r3, [sp, #12]
 800719e:	4618      	mov	r0, r3
 80071a0:	f7f9 f812 	bl	80001c8 <strlen>
 80071a4:	9b03      	ldr	r3, [sp, #12]
 80071a6:	9001      	str	r0, [sp, #4]
 80071a8:	4403      	add	r3, r0
 80071aa:	f04f 0b00 	mov.w	fp, #0
 80071ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80071b2:	9307      	str	r3, [sp, #28]
 80071b4:	f8da 3000 	ldr.w	r3, [sl]
 80071b8:	3302      	adds	r3, #2
 80071ba:	461f      	mov	r7, r3
 80071bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80071c0:	2830      	cmp	r0, #48	; 0x30
 80071c2:	d06c      	beq.n	800729e <__gethex+0x118>
 80071c4:	f7ff ffca 	bl	800715c <__hexdig_fun>
 80071c8:	4604      	mov	r4, r0
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d16a      	bne.n	80072a4 <__gethex+0x11e>
 80071ce:	9a01      	ldr	r2, [sp, #4]
 80071d0:	9903      	ldr	r1, [sp, #12]
 80071d2:	4638      	mov	r0, r7
 80071d4:	f000 ff44 	bl	8008060 <strncmp>
 80071d8:	2800      	cmp	r0, #0
 80071da:	d166      	bne.n	80072aa <__gethex+0x124>
 80071dc:	9b01      	ldr	r3, [sp, #4]
 80071de:	5cf8      	ldrb	r0, [r7, r3]
 80071e0:	18fe      	adds	r6, r7, r3
 80071e2:	f7ff ffbb 	bl	800715c <__hexdig_fun>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d062      	beq.n	80072b0 <__gethex+0x12a>
 80071ea:	4633      	mov	r3, r6
 80071ec:	7818      	ldrb	r0, [r3, #0]
 80071ee:	2830      	cmp	r0, #48	; 0x30
 80071f0:	461f      	mov	r7, r3
 80071f2:	f103 0301 	add.w	r3, r3, #1
 80071f6:	d0f9      	beq.n	80071ec <__gethex+0x66>
 80071f8:	f7ff ffb0 	bl	800715c <__hexdig_fun>
 80071fc:	fab0 f580 	clz	r5, r0
 8007200:	096d      	lsrs	r5, r5, #5
 8007202:	4634      	mov	r4, r6
 8007204:	f04f 0b01 	mov.w	fp, #1
 8007208:	463a      	mov	r2, r7
 800720a:	4616      	mov	r6, r2
 800720c:	3201      	adds	r2, #1
 800720e:	7830      	ldrb	r0, [r6, #0]
 8007210:	f7ff ffa4 	bl	800715c <__hexdig_fun>
 8007214:	2800      	cmp	r0, #0
 8007216:	d1f8      	bne.n	800720a <__gethex+0x84>
 8007218:	9a01      	ldr	r2, [sp, #4]
 800721a:	9903      	ldr	r1, [sp, #12]
 800721c:	4630      	mov	r0, r6
 800721e:	f000 ff1f 	bl	8008060 <strncmp>
 8007222:	b950      	cbnz	r0, 800723a <__gethex+0xb4>
 8007224:	b954      	cbnz	r4, 800723c <__gethex+0xb6>
 8007226:	9b01      	ldr	r3, [sp, #4]
 8007228:	18f4      	adds	r4, r6, r3
 800722a:	4622      	mov	r2, r4
 800722c:	4616      	mov	r6, r2
 800722e:	3201      	adds	r2, #1
 8007230:	7830      	ldrb	r0, [r6, #0]
 8007232:	f7ff ff93 	bl	800715c <__hexdig_fun>
 8007236:	2800      	cmp	r0, #0
 8007238:	d1f8      	bne.n	800722c <__gethex+0xa6>
 800723a:	b10c      	cbz	r4, 8007240 <__gethex+0xba>
 800723c:	1ba4      	subs	r4, r4, r6
 800723e:	00a4      	lsls	r4, r4, #2
 8007240:	7833      	ldrb	r3, [r6, #0]
 8007242:	2b50      	cmp	r3, #80	; 0x50
 8007244:	d001      	beq.n	800724a <__gethex+0xc4>
 8007246:	2b70      	cmp	r3, #112	; 0x70
 8007248:	d140      	bne.n	80072cc <__gethex+0x146>
 800724a:	7873      	ldrb	r3, [r6, #1]
 800724c:	2b2b      	cmp	r3, #43	; 0x2b
 800724e:	d031      	beq.n	80072b4 <__gethex+0x12e>
 8007250:	2b2d      	cmp	r3, #45	; 0x2d
 8007252:	d033      	beq.n	80072bc <__gethex+0x136>
 8007254:	1c71      	adds	r1, r6, #1
 8007256:	f04f 0900 	mov.w	r9, #0
 800725a:	7808      	ldrb	r0, [r1, #0]
 800725c:	f7ff ff7e 	bl	800715c <__hexdig_fun>
 8007260:	1e43      	subs	r3, r0, #1
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b18      	cmp	r3, #24
 8007266:	d831      	bhi.n	80072cc <__gethex+0x146>
 8007268:	f1a0 0210 	sub.w	r2, r0, #16
 800726c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007270:	f7ff ff74 	bl	800715c <__hexdig_fun>
 8007274:	1e43      	subs	r3, r0, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b18      	cmp	r3, #24
 800727a:	d922      	bls.n	80072c2 <__gethex+0x13c>
 800727c:	f1b9 0f00 	cmp.w	r9, #0
 8007280:	d000      	beq.n	8007284 <__gethex+0xfe>
 8007282:	4252      	negs	r2, r2
 8007284:	4414      	add	r4, r2
 8007286:	f8ca 1000 	str.w	r1, [sl]
 800728a:	b30d      	cbz	r5, 80072d0 <__gethex+0x14a>
 800728c:	f1bb 0f00 	cmp.w	fp, #0
 8007290:	bf0c      	ite	eq
 8007292:	2706      	moveq	r7, #6
 8007294:	2700      	movne	r7, #0
 8007296:	4638      	mov	r0, r7
 8007298:	b00b      	add	sp, #44	; 0x2c
 800729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729e:	f10b 0b01 	add.w	fp, fp, #1
 80072a2:	e78a      	b.n	80071ba <__gethex+0x34>
 80072a4:	2500      	movs	r5, #0
 80072a6:	462c      	mov	r4, r5
 80072a8:	e7ae      	b.n	8007208 <__gethex+0x82>
 80072aa:	463e      	mov	r6, r7
 80072ac:	2501      	movs	r5, #1
 80072ae:	e7c7      	b.n	8007240 <__gethex+0xba>
 80072b0:	4604      	mov	r4, r0
 80072b2:	e7fb      	b.n	80072ac <__gethex+0x126>
 80072b4:	f04f 0900 	mov.w	r9, #0
 80072b8:	1cb1      	adds	r1, r6, #2
 80072ba:	e7ce      	b.n	800725a <__gethex+0xd4>
 80072bc:	f04f 0901 	mov.w	r9, #1
 80072c0:	e7fa      	b.n	80072b8 <__gethex+0x132>
 80072c2:	230a      	movs	r3, #10
 80072c4:	fb03 0202 	mla	r2, r3, r2, r0
 80072c8:	3a10      	subs	r2, #16
 80072ca:	e7cf      	b.n	800726c <__gethex+0xe6>
 80072cc:	4631      	mov	r1, r6
 80072ce:	e7da      	b.n	8007286 <__gethex+0x100>
 80072d0:	1bf3      	subs	r3, r6, r7
 80072d2:	3b01      	subs	r3, #1
 80072d4:	4629      	mov	r1, r5
 80072d6:	2b07      	cmp	r3, #7
 80072d8:	dc49      	bgt.n	800736e <__gethex+0x1e8>
 80072da:	9802      	ldr	r0, [sp, #8]
 80072dc:	f000 fa49 	bl	8007772 <_Balloc>
 80072e0:	9b01      	ldr	r3, [sp, #4]
 80072e2:	f100 0914 	add.w	r9, r0, #20
 80072e6:	f04f 0b00 	mov.w	fp, #0
 80072ea:	f1c3 0301 	rsb	r3, r3, #1
 80072ee:	4605      	mov	r5, r0
 80072f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80072f4:	46da      	mov	sl, fp
 80072f6:	9308      	str	r3, [sp, #32]
 80072f8:	42b7      	cmp	r7, r6
 80072fa:	d33b      	bcc.n	8007374 <__gethex+0x1ee>
 80072fc:	9804      	ldr	r0, [sp, #16]
 80072fe:	f840 ab04 	str.w	sl, [r0], #4
 8007302:	eba0 0009 	sub.w	r0, r0, r9
 8007306:	1080      	asrs	r0, r0, #2
 8007308:	6128      	str	r0, [r5, #16]
 800730a:	0147      	lsls	r7, r0, #5
 800730c:	4650      	mov	r0, sl
 800730e:	f000 faf4 	bl	80078fa <__hi0bits>
 8007312:	f8d8 6000 	ldr.w	r6, [r8]
 8007316:	1a3f      	subs	r7, r7, r0
 8007318:	42b7      	cmp	r7, r6
 800731a:	dd64      	ble.n	80073e6 <__gethex+0x260>
 800731c:	1bbf      	subs	r7, r7, r6
 800731e:	4639      	mov	r1, r7
 8007320:	4628      	mov	r0, r5
 8007322:	f000 fe03 	bl	8007f2c <__any_on>
 8007326:	4682      	mov	sl, r0
 8007328:	b178      	cbz	r0, 800734a <__gethex+0x1c4>
 800732a:	1e7b      	subs	r3, r7, #1
 800732c:	1159      	asrs	r1, r3, #5
 800732e:	f003 021f 	and.w	r2, r3, #31
 8007332:	f04f 0a01 	mov.w	sl, #1
 8007336:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800733a:	fa0a f202 	lsl.w	r2, sl, r2
 800733e:	420a      	tst	r2, r1
 8007340:	d003      	beq.n	800734a <__gethex+0x1c4>
 8007342:	4553      	cmp	r3, sl
 8007344:	dc46      	bgt.n	80073d4 <__gethex+0x24e>
 8007346:	f04f 0a02 	mov.w	sl, #2
 800734a:	4639      	mov	r1, r7
 800734c:	4628      	mov	r0, r5
 800734e:	f7ff fecb 	bl	80070e8 <rshift>
 8007352:	443c      	add	r4, r7
 8007354:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007358:	42a3      	cmp	r3, r4
 800735a:	da52      	bge.n	8007402 <__gethex+0x27c>
 800735c:	4629      	mov	r1, r5
 800735e:	9802      	ldr	r0, [sp, #8]
 8007360:	f000 fa3b 	bl	80077da <_Bfree>
 8007364:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007366:	2300      	movs	r3, #0
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	27a3      	movs	r7, #163	; 0xa3
 800736c:	e793      	b.n	8007296 <__gethex+0x110>
 800736e:	3101      	adds	r1, #1
 8007370:	105b      	asrs	r3, r3, #1
 8007372:	e7b0      	b.n	80072d6 <__gethex+0x150>
 8007374:	1e73      	subs	r3, r6, #1
 8007376:	9305      	str	r3, [sp, #20]
 8007378:	9a07      	ldr	r2, [sp, #28]
 800737a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800737e:	4293      	cmp	r3, r2
 8007380:	d018      	beq.n	80073b4 <__gethex+0x22e>
 8007382:	f1bb 0f20 	cmp.w	fp, #32
 8007386:	d107      	bne.n	8007398 <__gethex+0x212>
 8007388:	9b04      	ldr	r3, [sp, #16]
 800738a:	f8c3 a000 	str.w	sl, [r3]
 800738e:	3304      	adds	r3, #4
 8007390:	f04f 0a00 	mov.w	sl, #0
 8007394:	9304      	str	r3, [sp, #16]
 8007396:	46d3      	mov	fp, sl
 8007398:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800739c:	f7ff fede 	bl	800715c <__hexdig_fun>
 80073a0:	f000 000f 	and.w	r0, r0, #15
 80073a4:	fa00 f00b 	lsl.w	r0, r0, fp
 80073a8:	ea4a 0a00 	orr.w	sl, sl, r0
 80073ac:	f10b 0b04 	add.w	fp, fp, #4
 80073b0:	9b05      	ldr	r3, [sp, #20]
 80073b2:	e00d      	b.n	80073d0 <__gethex+0x24a>
 80073b4:	9b05      	ldr	r3, [sp, #20]
 80073b6:	9a08      	ldr	r2, [sp, #32]
 80073b8:	4413      	add	r3, r2
 80073ba:	42bb      	cmp	r3, r7
 80073bc:	d3e1      	bcc.n	8007382 <__gethex+0x1fc>
 80073be:	4618      	mov	r0, r3
 80073c0:	9a01      	ldr	r2, [sp, #4]
 80073c2:	9903      	ldr	r1, [sp, #12]
 80073c4:	9309      	str	r3, [sp, #36]	; 0x24
 80073c6:	f000 fe4b 	bl	8008060 <strncmp>
 80073ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d1d8      	bne.n	8007382 <__gethex+0x1fc>
 80073d0:	461e      	mov	r6, r3
 80073d2:	e791      	b.n	80072f8 <__gethex+0x172>
 80073d4:	1eb9      	subs	r1, r7, #2
 80073d6:	4628      	mov	r0, r5
 80073d8:	f000 fda8 	bl	8007f2c <__any_on>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d0b2      	beq.n	8007346 <__gethex+0x1c0>
 80073e0:	f04f 0a03 	mov.w	sl, #3
 80073e4:	e7b1      	b.n	800734a <__gethex+0x1c4>
 80073e6:	da09      	bge.n	80073fc <__gethex+0x276>
 80073e8:	1bf7      	subs	r7, r6, r7
 80073ea:	4629      	mov	r1, r5
 80073ec:	463a      	mov	r2, r7
 80073ee:	9802      	ldr	r0, [sp, #8]
 80073f0:	f000 fbbe 	bl	8007b70 <__lshift>
 80073f4:	1be4      	subs	r4, r4, r7
 80073f6:	4605      	mov	r5, r0
 80073f8:	f100 0914 	add.w	r9, r0, #20
 80073fc:	f04f 0a00 	mov.w	sl, #0
 8007400:	e7a8      	b.n	8007354 <__gethex+0x1ce>
 8007402:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007406:	42a0      	cmp	r0, r4
 8007408:	dd6a      	ble.n	80074e0 <__gethex+0x35a>
 800740a:	1b04      	subs	r4, r0, r4
 800740c:	42a6      	cmp	r6, r4
 800740e:	dc2e      	bgt.n	800746e <__gethex+0x2e8>
 8007410:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007414:	2b02      	cmp	r3, #2
 8007416:	d022      	beq.n	800745e <__gethex+0x2d8>
 8007418:	2b03      	cmp	r3, #3
 800741a:	d024      	beq.n	8007466 <__gethex+0x2e0>
 800741c:	2b01      	cmp	r3, #1
 800741e:	d115      	bne.n	800744c <__gethex+0x2c6>
 8007420:	42a6      	cmp	r6, r4
 8007422:	d113      	bne.n	800744c <__gethex+0x2c6>
 8007424:	2e01      	cmp	r6, #1
 8007426:	dc0b      	bgt.n	8007440 <__gethex+0x2ba>
 8007428:	9a06      	ldr	r2, [sp, #24]
 800742a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	2301      	movs	r3, #1
 8007432:	612b      	str	r3, [r5, #16]
 8007434:	f8c9 3000 	str.w	r3, [r9]
 8007438:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800743a:	2762      	movs	r7, #98	; 0x62
 800743c:	601d      	str	r5, [r3, #0]
 800743e:	e72a      	b.n	8007296 <__gethex+0x110>
 8007440:	1e71      	subs	r1, r6, #1
 8007442:	4628      	mov	r0, r5
 8007444:	f000 fd72 	bl	8007f2c <__any_on>
 8007448:	2800      	cmp	r0, #0
 800744a:	d1ed      	bne.n	8007428 <__gethex+0x2a2>
 800744c:	4629      	mov	r1, r5
 800744e:	9802      	ldr	r0, [sp, #8]
 8007450:	f000 f9c3 	bl	80077da <_Bfree>
 8007454:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007456:	2300      	movs	r3, #0
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	2750      	movs	r7, #80	; 0x50
 800745c:	e71b      	b.n	8007296 <__gethex+0x110>
 800745e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0e1      	beq.n	8007428 <__gethex+0x2a2>
 8007464:	e7f2      	b.n	800744c <__gethex+0x2c6>
 8007466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1dd      	bne.n	8007428 <__gethex+0x2a2>
 800746c:	e7ee      	b.n	800744c <__gethex+0x2c6>
 800746e:	1e67      	subs	r7, r4, #1
 8007470:	f1ba 0f00 	cmp.w	sl, #0
 8007474:	d131      	bne.n	80074da <__gethex+0x354>
 8007476:	b127      	cbz	r7, 8007482 <__gethex+0x2fc>
 8007478:	4639      	mov	r1, r7
 800747a:	4628      	mov	r0, r5
 800747c:	f000 fd56 	bl	8007f2c <__any_on>
 8007480:	4682      	mov	sl, r0
 8007482:	117a      	asrs	r2, r7, #5
 8007484:	2301      	movs	r3, #1
 8007486:	f007 071f 	and.w	r7, r7, #31
 800748a:	fa03 f707 	lsl.w	r7, r3, r7
 800748e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007492:	4621      	mov	r1, r4
 8007494:	421f      	tst	r7, r3
 8007496:	4628      	mov	r0, r5
 8007498:	bf18      	it	ne
 800749a:	f04a 0a02 	orrne.w	sl, sl, #2
 800749e:	1b36      	subs	r6, r6, r4
 80074a0:	f7ff fe22 	bl	80070e8 <rshift>
 80074a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80074a8:	2702      	movs	r7, #2
 80074aa:	f1ba 0f00 	cmp.w	sl, #0
 80074ae:	d048      	beq.n	8007542 <__gethex+0x3bc>
 80074b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d015      	beq.n	80074e4 <__gethex+0x35e>
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d017      	beq.n	80074ec <__gethex+0x366>
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d109      	bne.n	80074d4 <__gethex+0x34e>
 80074c0:	f01a 0f02 	tst.w	sl, #2
 80074c4:	d006      	beq.n	80074d4 <__gethex+0x34e>
 80074c6:	f8d9 3000 	ldr.w	r3, [r9]
 80074ca:	ea4a 0a03 	orr.w	sl, sl, r3
 80074ce:	f01a 0f01 	tst.w	sl, #1
 80074d2:	d10e      	bne.n	80074f2 <__gethex+0x36c>
 80074d4:	f047 0710 	orr.w	r7, r7, #16
 80074d8:	e033      	b.n	8007542 <__gethex+0x3bc>
 80074da:	f04f 0a01 	mov.w	sl, #1
 80074de:	e7d0      	b.n	8007482 <__gethex+0x2fc>
 80074e0:	2701      	movs	r7, #1
 80074e2:	e7e2      	b.n	80074aa <__gethex+0x324>
 80074e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074e6:	f1c3 0301 	rsb	r3, r3, #1
 80074ea:	9315      	str	r3, [sp, #84]	; 0x54
 80074ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0f0      	beq.n	80074d4 <__gethex+0x34e>
 80074f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80074f6:	f105 0314 	add.w	r3, r5, #20
 80074fa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80074fe:	eb03 010a 	add.w	r1, r3, sl
 8007502:	f04f 0c00 	mov.w	ip, #0
 8007506:	4618      	mov	r0, r3
 8007508:	f853 2b04 	ldr.w	r2, [r3], #4
 800750c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007510:	d01c      	beq.n	800754c <__gethex+0x3c6>
 8007512:	3201      	adds	r2, #1
 8007514:	6002      	str	r2, [r0, #0]
 8007516:	2f02      	cmp	r7, #2
 8007518:	f105 0314 	add.w	r3, r5, #20
 800751c:	d138      	bne.n	8007590 <__gethex+0x40a>
 800751e:	f8d8 2000 	ldr.w	r2, [r8]
 8007522:	3a01      	subs	r2, #1
 8007524:	42b2      	cmp	r2, r6
 8007526:	d10a      	bne.n	800753e <__gethex+0x3b8>
 8007528:	1171      	asrs	r1, r6, #5
 800752a:	2201      	movs	r2, #1
 800752c:	f006 061f 	and.w	r6, r6, #31
 8007530:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007534:	fa02 f606 	lsl.w	r6, r2, r6
 8007538:	421e      	tst	r6, r3
 800753a:	bf18      	it	ne
 800753c:	4617      	movne	r7, r2
 800753e:	f047 0720 	orr.w	r7, r7, #32
 8007542:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007544:	601d      	str	r5, [r3, #0]
 8007546:	9b06      	ldr	r3, [sp, #24]
 8007548:	601c      	str	r4, [r3, #0]
 800754a:	e6a4      	b.n	8007296 <__gethex+0x110>
 800754c:	4299      	cmp	r1, r3
 800754e:	f843 cc04 	str.w	ip, [r3, #-4]
 8007552:	d8d8      	bhi.n	8007506 <__gethex+0x380>
 8007554:	68ab      	ldr	r3, [r5, #8]
 8007556:	4599      	cmp	r9, r3
 8007558:	db12      	blt.n	8007580 <__gethex+0x3fa>
 800755a:	6869      	ldr	r1, [r5, #4]
 800755c:	9802      	ldr	r0, [sp, #8]
 800755e:	3101      	adds	r1, #1
 8007560:	f000 f907 	bl	8007772 <_Balloc>
 8007564:	692a      	ldr	r2, [r5, #16]
 8007566:	3202      	adds	r2, #2
 8007568:	f105 010c 	add.w	r1, r5, #12
 800756c:	4683      	mov	fp, r0
 800756e:	0092      	lsls	r2, r2, #2
 8007570:	300c      	adds	r0, #12
 8007572:	f000 f8f3 	bl	800775c <memcpy>
 8007576:	4629      	mov	r1, r5
 8007578:	9802      	ldr	r0, [sp, #8]
 800757a:	f000 f92e 	bl	80077da <_Bfree>
 800757e:	465d      	mov	r5, fp
 8007580:	692b      	ldr	r3, [r5, #16]
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007588:	612a      	str	r2, [r5, #16]
 800758a:	2201      	movs	r2, #1
 800758c:	615a      	str	r2, [r3, #20]
 800758e:	e7c2      	b.n	8007516 <__gethex+0x390>
 8007590:	692a      	ldr	r2, [r5, #16]
 8007592:	454a      	cmp	r2, r9
 8007594:	dd0b      	ble.n	80075ae <__gethex+0x428>
 8007596:	2101      	movs	r1, #1
 8007598:	4628      	mov	r0, r5
 800759a:	f7ff fda5 	bl	80070e8 <rshift>
 800759e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075a2:	3401      	adds	r4, #1
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	f6ff aed9 	blt.w	800735c <__gethex+0x1d6>
 80075aa:	2701      	movs	r7, #1
 80075ac:	e7c7      	b.n	800753e <__gethex+0x3b8>
 80075ae:	f016 061f 	ands.w	r6, r6, #31
 80075b2:	d0fa      	beq.n	80075aa <__gethex+0x424>
 80075b4:	449a      	add	sl, r3
 80075b6:	f1c6 0620 	rsb	r6, r6, #32
 80075ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80075be:	f000 f99c 	bl	80078fa <__hi0bits>
 80075c2:	42b0      	cmp	r0, r6
 80075c4:	dbe7      	blt.n	8007596 <__gethex+0x410>
 80075c6:	e7f0      	b.n	80075aa <__gethex+0x424>

080075c8 <L_shift>:
 80075c8:	f1c2 0208 	rsb	r2, r2, #8
 80075cc:	0092      	lsls	r2, r2, #2
 80075ce:	b570      	push	{r4, r5, r6, lr}
 80075d0:	f1c2 0620 	rsb	r6, r2, #32
 80075d4:	6843      	ldr	r3, [r0, #4]
 80075d6:	6804      	ldr	r4, [r0, #0]
 80075d8:	fa03 f506 	lsl.w	r5, r3, r6
 80075dc:	432c      	orrs	r4, r5
 80075de:	40d3      	lsrs	r3, r2
 80075e0:	6004      	str	r4, [r0, #0]
 80075e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80075e6:	4288      	cmp	r0, r1
 80075e8:	d3f4      	bcc.n	80075d4 <L_shift+0xc>
 80075ea:	bd70      	pop	{r4, r5, r6, pc}

080075ec <__match>:
 80075ec:	b530      	push	{r4, r5, lr}
 80075ee:	6803      	ldr	r3, [r0, #0]
 80075f0:	3301      	adds	r3, #1
 80075f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075f6:	b914      	cbnz	r4, 80075fe <__match+0x12>
 80075f8:	6003      	str	r3, [r0, #0]
 80075fa:	2001      	movs	r0, #1
 80075fc:	bd30      	pop	{r4, r5, pc}
 80075fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007602:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007606:	2d19      	cmp	r5, #25
 8007608:	bf98      	it	ls
 800760a:	3220      	addls	r2, #32
 800760c:	42a2      	cmp	r2, r4
 800760e:	d0f0      	beq.n	80075f2 <__match+0x6>
 8007610:	2000      	movs	r0, #0
 8007612:	e7f3      	b.n	80075fc <__match+0x10>

08007614 <__hexnan>:
 8007614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	680b      	ldr	r3, [r1, #0]
 800761a:	6801      	ldr	r1, [r0, #0]
 800761c:	115f      	asrs	r7, r3, #5
 800761e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007622:	f013 031f 	ands.w	r3, r3, #31
 8007626:	b087      	sub	sp, #28
 8007628:	bf18      	it	ne
 800762a:	3704      	addne	r7, #4
 800762c:	2500      	movs	r5, #0
 800762e:	1f3e      	subs	r6, r7, #4
 8007630:	4682      	mov	sl, r0
 8007632:	4690      	mov	r8, r2
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	f847 5c04 	str.w	r5, [r7, #-4]
 800763a:	46b1      	mov	r9, r6
 800763c:	4634      	mov	r4, r6
 800763e:	9502      	str	r5, [sp, #8]
 8007640:	46ab      	mov	fp, r5
 8007642:	784a      	ldrb	r2, [r1, #1]
 8007644:	1c4b      	adds	r3, r1, #1
 8007646:	9303      	str	r3, [sp, #12]
 8007648:	b342      	cbz	r2, 800769c <__hexnan+0x88>
 800764a:	4610      	mov	r0, r2
 800764c:	9105      	str	r1, [sp, #20]
 800764e:	9204      	str	r2, [sp, #16]
 8007650:	f7ff fd84 	bl	800715c <__hexdig_fun>
 8007654:	2800      	cmp	r0, #0
 8007656:	d143      	bne.n	80076e0 <__hexnan+0xcc>
 8007658:	9a04      	ldr	r2, [sp, #16]
 800765a:	9905      	ldr	r1, [sp, #20]
 800765c:	2a20      	cmp	r2, #32
 800765e:	d818      	bhi.n	8007692 <__hexnan+0x7e>
 8007660:	9b02      	ldr	r3, [sp, #8]
 8007662:	459b      	cmp	fp, r3
 8007664:	dd13      	ble.n	800768e <__hexnan+0x7a>
 8007666:	454c      	cmp	r4, r9
 8007668:	d206      	bcs.n	8007678 <__hexnan+0x64>
 800766a:	2d07      	cmp	r5, #7
 800766c:	dc04      	bgt.n	8007678 <__hexnan+0x64>
 800766e:	462a      	mov	r2, r5
 8007670:	4649      	mov	r1, r9
 8007672:	4620      	mov	r0, r4
 8007674:	f7ff ffa8 	bl	80075c8 <L_shift>
 8007678:	4544      	cmp	r4, r8
 800767a:	d944      	bls.n	8007706 <__hexnan+0xf2>
 800767c:	2300      	movs	r3, #0
 800767e:	f1a4 0904 	sub.w	r9, r4, #4
 8007682:	f844 3c04 	str.w	r3, [r4, #-4]
 8007686:	f8cd b008 	str.w	fp, [sp, #8]
 800768a:	464c      	mov	r4, r9
 800768c:	461d      	mov	r5, r3
 800768e:	9903      	ldr	r1, [sp, #12]
 8007690:	e7d7      	b.n	8007642 <__hexnan+0x2e>
 8007692:	2a29      	cmp	r2, #41	; 0x29
 8007694:	d14a      	bne.n	800772c <__hexnan+0x118>
 8007696:	3102      	adds	r1, #2
 8007698:	f8ca 1000 	str.w	r1, [sl]
 800769c:	f1bb 0f00 	cmp.w	fp, #0
 80076a0:	d044      	beq.n	800772c <__hexnan+0x118>
 80076a2:	454c      	cmp	r4, r9
 80076a4:	d206      	bcs.n	80076b4 <__hexnan+0xa0>
 80076a6:	2d07      	cmp	r5, #7
 80076a8:	dc04      	bgt.n	80076b4 <__hexnan+0xa0>
 80076aa:	462a      	mov	r2, r5
 80076ac:	4649      	mov	r1, r9
 80076ae:	4620      	mov	r0, r4
 80076b0:	f7ff ff8a 	bl	80075c8 <L_shift>
 80076b4:	4544      	cmp	r4, r8
 80076b6:	d928      	bls.n	800770a <__hexnan+0xf6>
 80076b8:	4643      	mov	r3, r8
 80076ba:	f854 2b04 	ldr.w	r2, [r4], #4
 80076be:	f843 2b04 	str.w	r2, [r3], #4
 80076c2:	42a6      	cmp	r6, r4
 80076c4:	d2f9      	bcs.n	80076ba <__hexnan+0xa6>
 80076c6:	2200      	movs	r2, #0
 80076c8:	f843 2b04 	str.w	r2, [r3], #4
 80076cc:	429e      	cmp	r6, r3
 80076ce:	d2fb      	bcs.n	80076c8 <__hexnan+0xb4>
 80076d0:	6833      	ldr	r3, [r6, #0]
 80076d2:	b91b      	cbnz	r3, 80076dc <__hexnan+0xc8>
 80076d4:	4546      	cmp	r6, r8
 80076d6:	d127      	bne.n	8007728 <__hexnan+0x114>
 80076d8:	2301      	movs	r3, #1
 80076da:	6033      	str	r3, [r6, #0]
 80076dc:	2005      	movs	r0, #5
 80076de:	e026      	b.n	800772e <__hexnan+0x11a>
 80076e0:	3501      	adds	r5, #1
 80076e2:	2d08      	cmp	r5, #8
 80076e4:	f10b 0b01 	add.w	fp, fp, #1
 80076e8:	dd06      	ble.n	80076f8 <__hexnan+0xe4>
 80076ea:	4544      	cmp	r4, r8
 80076ec:	d9cf      	bls.n	800768e <__hexnan+0x7a>
 80076ee:	2300      	movs	r3, #0
 80076f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80076f4:	2501      	movs	r5, #1
 80076f6:	3c04      	subs	r4, #4
 80076f8:	6822      	ldr	r2, [r4, #0]
 80076fa:	f000 000f 	and.w	r0, r0, #15
 80076fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007702:	6020      	str	r0, [r4, #0]
 8007704:	e7c3      	b.n	800768e <__hexnan+0x7a>
 8007706:	2508      	movs	r5, #8
 8007708:	e7c1      	b.n	800768e <__hexnan+0x7a>
 800770a:	9b01      	ldr	r3, [sp, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0df      	beq.n	80076d0 <__hexnan+0xbc>
 8007710:	f04f 32ff 	mov.w	r2, #4294967295
 8007714:	f1c3 0320 	rsb	r3, r3, #32
 8007718:	fa22 f303 	lsr.w	r3, r2, r3
 800771c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007720:	401a      	ands	r2, r3
 8007722:	f847 2c04 	str.w	r2, [r7, #-4]
 8007726:	e7d3      	b.n	80076d0 <__hexnan+0xbc>
 8007728:	3e04      	subs	r6, #4
 800772a:	e7d1      	b.n	80076d0 <__hexnan+0xbc>
 800772c:	2004      	movs	r0, #4
 800772e:	b007      	add	sp, #28
 8007730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007734 <__localeconv_l>:
 8007734:	30f0      	adds	r0, #240	; 0xf0
 8007736:	4770      	bx	lr

08007738 <__ascii_mbtowc>:
 8007738:	b082      	sub	sp, #8
 800773a:	b901      	cbnz	r1, 800773e <__ascii_mbtowc+0x6>
 800773c:	a901      	add	r1, sp, #4
 800773e:	b142      	cbz	r2, 8007752 <__ascii_mbtowc+0x1a>
 8007740:	b14b      	cbz	r3, 8007756 <__ascii_mbtowc+0x1e>
 8007742:	7813      	ldrb	r3, [r2, #0]
 8007744:	600b      	str	r3, [r1, #0]
 8007746:	7812      	ldrb	r2, [r2, #0]
 8007748:	1c10      	adds	r0, r2, #0
 800774a:	bf18      	it	ne
 800774c:	2001      	movne	r0, #1
 800774e:	b002      	add	sp, #8
 8007750:	4770      	bx	lr
 8007752:	4610      	mov	r0, r2
 8007754:	e7fb      	b.n	800774e <__ascii_mbtowc+0x16>
 8007756:	f06f 0001 	mvn.w	r0, #1
 800775a:	e7f8      	b.n	800774e <__ascii_mbtowc+0x16>

0800775c <memcpy>:
 800775c:	b510      	push	{r4, lr}
 800775e:	1e43      	subs	r3, r0, #1
 8007760:	440a      	add	r2, r1
 8007762:	4291      	cmp	r1, r2
 8007764:	d100      	bne.n	8007768 <memcpy+0xc>
 8007766:	bd10      	pop	{r4, pc}
 8007768:	f811 4b01 	ldrb.w	r4, [r1], #1
 800776c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007770:	e7f7      	b.n	8007762 <memcpy+0x6>

08007772 <_Balloc>:
 8007772:	b570      	push	{r4, r5, r6, lr}
 8007774:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007776:	4604      	mov	r4, r0
 8007778:	460e      	mov	r6, r1
 800777a:	b93d      	cbnz	r5, 800778c <_Balloc+0x1a>
 800777c:	2010      	movs	r0, #16
 800777e:	f000 fc8f 	bl	80080a0 <malloc>
 8007782:	6260      	str	r0, [r4, #36]	; 0x24
 8007784:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007788:	6005      	str	r5, [r0, #0]
 800778a:	60c5      	str	r5, [r0, #12]
 800778c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800778e:	68eb      	ldr	r3, [r5, #12]
 8007790:	b183      	cbz	r3, 80077b4 <_Balloc+0x42>
 8007792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800779a:	b9b8      	cbnz	r0, 80077cc <_Balloc+0x5a>
 800779c:	2101      	movs	r1, #1
 800779e:	fa01 f506 	lsl.w	r5, r1, r6
 80077a2:	1d6a      	adds	r2, r5, #5
 80077a4:	0092      	lsls	r2, r2, #2
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 fbe1 	bl	8007f6e <_calloc_r>
 80077ac:	b160      	cbz	r0, 80077c8 <_Balloc+0x56>
 80077ae:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80077b2:	e00e      	b.n	80077d2 <_Balloc+0x60>
 80077b4:	2221      	movs	r2, #33	; 0x21
 80077b6:	2104      	movs	r1, #4
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 fbd8 	bl	8007f6e <_calloc_r>
 80077be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077c0:	60e8      	str	r0, [r5, #12]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e4      	bne.n	8007792 <_Balloc+0x20>
 80077c8:	2000      	movs	r0, #0
 80077ca:	bd70      	pop	{r4, r5, r6, pc}
 80077cc:	6802      	ldr	r2, [r0, #0]
 80077ce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80077d2:	2300      	movs	r3, #0
 80077d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077d8:	e7f7      	b.n	80077ca <_Balloc+0x58>

080077da <_Bfree>:
 80077da:	b570      	push	{r4, r5, r6, lr}
 80077dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80077de:	4606      	mov	r6, r0
 80077e0:	460d      	mov	r5, r1
 80077e2:	b93c      	cbnz	r4, 80077f4 <_Bfree+0x1a>
 80077e4:	2010      	movs	r0, #16
 80077e6:	f000 fc5b 	bl	80080a0 <malloc>
 80077ea:	6270      	str	r0, [r6, #36]	; 0x24
 80077ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077f0:	6004      	str	r4, [r0, #0]
 80077f2:	60c4      	str	r4, [r0, #12]
 80077f4:	b13d      	cbz	r5, 8007806 <_Bfree+0x2c>
 80077f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80077f8:	686a      	ldr	r2, [r5, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007800:	6029      	str	r1, [r5, #0]
 8007802:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007806:	bd70      	pop	{r4, r5, r6, pc}

08007808 <__multadd>:
 8007808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800780c:	690d      	ldr	r5, [r1, #16]
 800780e:	461f      	mov	r7, r3
 8007810:	4606      	mov	r6, r0
 8007812:	460c      	mov	r4, r1
 8007814:	f101 0c14 	add.w	ip, r1, #20
 8007818:	2300      	movs	r3, #0
 800781a:	f8dc 0000 	ldr.w	r0, [ip]
 800781e:	b281      	uxth	r1, r0
 8007820:	fb02 7101 	mla	r1, r2, r1, r7
 8007824:	0c0f      	lsrs	r7, r1, #16
 8007826:	0c00      	lsrs	r0, r0, #16
 8007828:	fb02 7000 	mla	r0, r2, r0, r7
 800782c:	b289      	uxth	r1, r1
 800782e:	3301      	adds	r3, #1
 8007830:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007834:	429d      	cmp	r5, r3
 8007836:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800783a:	f84c 1b04 	str.w	r1, [ip], #4
 800783e:	dcec      	bgt.n	800781a <__multadd+0x12>
 8007840:	b1d7      	cbz	r7, 8007878 <__multadd+0x70>
 8007842:	68a3      	ldr	r3, [r4, #8]
 8007844:	42ab      	cmp	r3, r5
 8007846:	dc12      	bgt.n	800786e <__multadd+0x66>
 8007848:	6861      	ldr	r1, [r4, #4]
 800784a:	4630      	mov	r0, r6
 800784c:	3101      	adds	r1, #1
 800784e:	f7ff ff90 	bl	8007772 <_Balloc>
 8007852:	6922      	ldr	r2, [r4, #16]
 8007854:	3202      	adds	r2, #2
 8007856:	f104 010c 	add.w	r1, r4, #12
 800785a:	4680      	mov	r8, r0
 800785c:	0092      	lsls	r2, r2, #2
 800785e:	300c      	adds	r0, #12
 8007860:	f7ff ff7c 	bl	800775c <memcpy>
 8007864:	4621      	mov	r1, r4
 8007866:	4630      	mov	r0, r6
 8007868:	f7ff ffb7 	bl	80077da <_Bfree>
 800786c:	4644      	mov	r4, r8
 800786e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007872:	3501      	adds	r5, #1
 8007874:	615f      	str	r7, [r3, #20]
 8007876:	6125      	str	r5, [r4, #16]
 8007878:	4620      	mov	r0, r4
 800787a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800787e <__s2b>:
 800787e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007882:	460c      	mov	r4, r1
 8007884:	4615      	mov	r5, r2
 8007886:	461f      	mov	r7, r3
 8007888:	2209      	movs	r2, #9
 800788a:	3308      	adds	r3, #8
 800788c:	4606      	mov	r6, r0
 800788e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007892:	2100      	movs	r1, #0
 8007894:	2201      	movs	r2, #1
 8007896:	429a      	cmp	r2, r3
 8007898:	db20      	blt.n	80078dc <__s2b+0x5e>
 800789a:	4630      	mov	r0, r6
 800789c:	f7ff ff69 	bl	8007772 <_Balloc>
 80078a0:	9b08      	ldr	r3, [sp, #32]
 80078a2:	6143      	str	r3, [r0, #20]
 80078a4:	2d09      	cmp	r5, #9
 80078a6:	f04f 0301 	mov.w	r3, #1
 80078aa:	6103      	str	r3, [r0, #16]
 80078ac:	dd19      	ble.n	80078e2 <__s2b+0x64>
 80078ae:	f104 0809 	add.w	r8, r4, #9
 80078b2:	46c1      	mov	r9, r8
 80078b4:	442c      	add	r4, r5
 80078b6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80078ba:	4601      	mov	r1, r0
 80078bc:	3b30      	subs	r3, #48	; 0x30
 80078be:	220a      	movs	r2, #10
 80078c0:	4630      	mov	r0, r6
 80078c2:	f7ff ffa1 	bl	8007808 <__multadd>
 80078c6:	45a1      	cmp	r9, r4
 80078c8:	d1f5      	bne.n	80078b6 <__s2b+0x38>
 80078ca:	eb08 0405 	add.w	r4, r8, r5
 80078ce:	3c08      	subs	r4, #8
 80078d0:	1b2d      	subs	r5, r5, r4
 80078d2:	1963      	adds	r3, r4, r5
 80078d4:	42bb      	cmp	r3, r7
 80078d6:	db07      	blt.n	80078e8 <__s2b+0x6a>
 80078d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078dc:	0052      	lsls	r2, r2, #1
 80078de:	3101      	adds	r1, #1
 80078e0:	e7d9      	b.n	8007896 <__s2b+0x18>
 80078e2:	340a      	adds	r4, #10
 80078e4:	2509      	movs	r5, #9
 80078e6:	e7f3      	b.n	80078d0 <__s2b+0x52>
 80078e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80078ec:	4601      	mov	r1, r0
 80078ee:	3b30      	subs	r3, #48	; 0x30
 80078f0:	220a      	movs	r2, #10
 80078f2:	4630      	mov	r0, r6
 80078f4:	f7ff ff88 	bl	8007808 <__multadd>
 80078f8:	e7eb      	b.n	80078d2 <__s2b+0x54>

080078fa <__hi0bits>:
 80078fa:	0c02      	lsrs	r2, r0, #16
 80078fc:	0412      	lsls	r2, r2, #16
 80078fe:	4603      	mov	r3, r0
 8007900:	b9b2      	cbnz	r2, 8007930 <__hi0bits+0x36>
 8007902:	0403      	lsls	r3, r0, #16
 8007904:	2010      	movs	r0, #16
 8007906:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800790a:	bf04      	itt	eq
 800790c:	021b      	lsleq	r3, r3, #8
 800790e:	3008      	addeq	r0, #8
 8007910:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007914:	bf04      	itt	eq
 8007916:	011b      	lsleq	r3, r3, #4
 8007918:	3004      	addeq	r0, #4
 800791a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800791e:	bf04      	itt	eq
 8007920:	009b      	lsleq	r3, r3, #2
 8007922:	3002      	addeq	r0, #2
 8007924:	2b00      	cmp	r3, #0
 8007926:	db06      	blt.n	8007936 <__hi0bits+0x3c>
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	d503      	bpl.n	8007934 <__hi0bits+0x3a>
 800792c:	3001      	adds	r0, #1
 800792e:	4770      	bx	lr
 8007930:	2000      	movs	r0, #0
 8007932:	e7e8      	b.n	8007906 <__hi0bits+0xc>
 8007934:	2020      	movs	r0, #32
 8007936:	4770      	bx	lr

08007938 <__lo0bits>:
 8007938:	6803      	ldr	r3, [r0, #0]
 800793a:	f013 0207 	ands.w	r2, r3, #7
 800793e:	4601      	mov	r1, r0
 8007940:	d00b      	beq.n	800795a <__lo0bits+0x22>
 8007942:	07da      	lsls	r2, r3, #31
 8007944:	d423      	bmi.n	800798e <__lo0bits+0x56>
 8007946:	0798      	lsls	r0, r3, #30
 8007948:	bf49      	itett	mi
 800794a:	085b      	lsrmi	r3, r3, #1
 800794c:	089b      	lsrpl	r3, r3, #2
 800794e:	2001      	movmi	r0, #1
 8007950:	600b      	strmi	r3, [r1, #0]
 8007952:	bf5c      	itt	pl
 8007954:	600b      	strpl	r3, [r1, #0]
 8007956:	2002      	movpl	r0, #2
 8007958:	4770      	bx	lr
 800795a:	b298      	uxth	r0, r3
 800795c:	b9a8      	cbnz	r0, 800798a <__lo0bits+0x52>
 800795e:	0c1b      	lsrs	r3, r3, #16
 8007960:	2010      	movs	r0, #16
 8007962:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007966:	bf04      	itt	eq
 8007968:	0a1b      	lsreq	r3, r3, #8
 800796a:	3008      	addeq	r0, #8
 800796c:	071a      	lsls	r2, r3, #28
 800796e:	bf04      	itt	eq
 8007970:	091b      	lsreq	r3, r3, #4
 8007972:	3004      	addeq	r0, #4
 8007974:	079a      	lsls	r2, r3, #30
 8007976:	bf04      	itt	eq
 8007978:	089b      	lsreq	r3, r3, #2
 800797a:	3002      	addeq	r0, #2
 800797c:	07da      	lsls	r2, r3, #31
 800797e:	d402      	bmi.n	8007986 <__lo0bits+0x4e>
 8007980:	085b      	lsrs	r3, r3, #1
 8007982:	d006      	beq.n	8007992 <__lo0bits+0x5a>
 8007984:	3001      	adds	r0, #1
 8007986:	600b      	str	r3, [r1, #0]
 8007988:	4770      	bx	lr
 800798a:	4610      	mov	r0, r2
 800798c:	e7e9      	b.n	8007962 <__lo0bits+0x2a>
 800798e:	2000      	movs	r0, #0
 8007990:	4770      	bx	lr
 8007992:	2020      	movs	r0, #32
 8007994:	4770      	bx	lr

08007996 <__i2b>:
 8007996:	b510      	push	{r4, lr}
 8007998:	460c      	mov	r4, r1
 800799a:	2101      	movs	r1, #1
 800799c:	f7ff fee9 	bl	8007772 <_Balloc>
 80079a0:	2201      	movs	r2, #1
 80079a2:	6144      	str	r4, [r0, #20]
 80079a4:	6102      	str	r2, [r0, #16]
 80079a6:	bd10      	pop	{r4, pc}

080079a8 <__multiply>:
 80079a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ac:	4614      	mov	r4, r2
 80079ae:	690a      	ldr	r2, [r1, #16]
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	bfb8      	it	lt
 80079b6:	460b      	movlt	r3, r1
 80079b8:	4688      	mov	r8, r1
 80079ba:	bfbc      	itt	lt
 80079bc:	46a0      	movlt	r8, r4
 80079be:	461c      	movlt	r4, r3
 80079c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80079c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80079c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80079d0:	eb07 0609 	add.w	r6, r7, r9
 80079d4:	42b3      	cmp	r3, r6
 80079d6:	bfb8      	it	lt
 80079d8:	3101      	addlt	r1, #1
 80079da:	f7ff feca 	bl	8007772 <_Balloc>
 80079de:	f100 0514 	add.w	r5, r0, #20
 80079e2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80079e6:	462b      	mov	r3, r5
 80079e8:	2200      	movs	r2, #0
 80079ea:	4573      	cmp	r3, lr
 80079ec:	d316      	bcc.n	8007a1c <__multiply+0x74>
 80079ee:	f104 0214 	add.w	r2, r4, #20
 80079f2:	f108 0114 	add.w	r1, r8, #20
 80079f6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80079fa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	9b00      	ldr	r3, [sp, #0]
 8007a02:	9201      	str	r2, [sp, #4]
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d80c      	bhi.n	8007a22 <__multiply+0x7a>
 8007a08:	2e00      	cmp	r6, #0
 8007a0a:	dd03      	ble.n	8007a14 <__multiply+0x6c>
 8007a0c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d05d      	beq.n	8007ad0 <__multiply+0x128>
 8007a14:	6106      	str	r6, [r0, #16]
 8007a16:	b003      	add	sp, #12
 8007a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1c:	f843 2b04 	str.w	r2, [r3], #4
 8007a20:	e7e3      	b.n	80079ea <__multiply+0x42>
 8007a22:	f8b2 b000 	ldrh.w	fp, [r2]
 8007a26:	f1bb 0f00 	cmp.w	fp, #0
 8007a2a:	d023      	beq.n	8007a74 <__multiply+0xcc>
 8007a2c:	4689      	mov	r9, r1
 8007a2e:	46ac      	mov	ip, r5
 8007a30:	f04f 0800 	mov.w	r8, #0
 8007a34:	f859 4b04 	ldr.w	r4, [r9], #4
 8007a38:	f8dc a000 	ldr.w	sl, [ip]
 8007a3c:	b2a3      	uxth	r3, r4
 8007a3e:	fa1f fa8a 	uxth.w	sl, sl
 8007a42:	fb0b a303 	mla	r3, fp, r3, sl
 8007a46:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007a4a:	f8dc 4000 	ldr.w	r4, [ip]
 8007a4e:	4443      	add	r3, r8
 8007a50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007a54:	fb0b 840a 	mla	r4, fp, sl, r8
 8007a58:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007a5c:	46e2      	mov	sl, ip
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007a64:	454f      	cmp	r7, r9
 8007a66:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007a6a:	f84a 3b04 	str.w	r3, [sl], #4
 8007a6e:	d82b      	bhi.n	8007ac8 <__multiply+0x120>
 8007a70:	f8cc 8004 	str.w	r8, [ip, #4]
 8007a74:	9b01      	ldr	r3, [sp, #4]
 8007a76:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007a7a:	3204      	adds	r2, #4
 8007a7c:	f1ba 0f00 	cmp.w	sl, #0
 8007a80:	d020      	beq.n	8007ac4 <__multiply+0x11c>
 8007a82:	682b      	ldr	r3, [r5, #0]
 8007a84:	4689      	mov	r9, r1
 8007a86:	46a8      	mov	r8, r5
 8007a88:	f04f 0b00 	mov.w	fp, #0
 8007a8c:	f8b9 c000 	ldrh.w	ip, [r9]
 8007a90:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007a94:	fb0a 440c 	mla	r4, sl, ip, r4
 8007a98:	445c      	add	r4, fp
 8007a9a:	46c4      	mov	ip, r8
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007aa2:	f84c 3b04 	str.w	r3, [ip], #4
 8007aa6:	f859 3b04 	ldr.w	r3, [r9], #4
 8007aaa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007aae:	0c1b      	lsrs	r3, r3, #16
 8007ab0:	fb0a b303 	mla	r3, sl, r3, fp
 8007ab4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007ab8:	454f      	cmp	r7, r9
 8007aba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007abe:	d805      	bhi.n	8007acc <__multiply+0x124>
 8007ac0:	f8c8 3004 	str.w	r3, [r8, #4]
 8007ac4:	3504      	adds	r5, #4
 8007ac6:	e79b      	b.n	8007a00 <__multiply+0x58>
 8007ac8:	46d4      	mov	ip, sl
 8007aca:	e7b3      	b.n	8007a34 <__multiply+0x8c>
 8007acc:	46e0      	mov	r8, ip
 8007ace:	e7dd      	b.n	8007a8c <__multiply+0xe4>
 8007ad0:	3e01      	subs	r6, #1
 8007ad2:	e799      	b.n	8007a08 <__multiply+0x60>

08007ad4 <__pow5mult>:
 8007ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad8:	4615      	mov	r5, r2
 8007ada:	f012 0203 	ands.w	r2, r2, #3
 8007ade:	4606      	mov	r6, r0
 8007ae0:	460f      	mov	r7, r1
 8007ae2:	d007      	beq.n	8007af4 <__pow5mult+0x20>
 8007ae4:	3a01      	subs	r2, #1
 8007ae6:	4c21      	ldr	r4, [pc, #132]	; (8007b6c <__pow5mult+0x98>)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007aee:	f7ff fe8b 	bl	8007808 <__multadd>
 8007af2:	4607      	mov	r7, r0
 8007af4:	10ad      	asrs	r5, r5, #2
 8007af6:	d035      	beq.n	8007b64 <__pow5mult+0x90>
 8007af8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007afa:	b93c      	cbnz	r4, 8007b0c <__pow5mult+0x38>
 8007afc:	2010      	movs	r0, #16
 8007afe:	f000 facf 	bl	80080a0 <malloc>
 8007b02:	6270      	str	r0, [r6, #36]	; 0x24
 8007b04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b08:	6004      	str	r4, [r0, #0]
 8007b0a:	60c4      	str	r4, [r0, #12]
 8007b0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b14:	b94c      	cbnz	r4, 8007b2a <__pow5mult+0x56>
 8007b16:	f240 2171 	movw	r1, #625	; 0x271
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f7ff ff3b 	bl	8007996 <__i2b>
 8007b20:	2300      	movs	r3, #0
 8007b22:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b26:	4604      	mov	r4, r0
 8007b28:	6003      	str	r3, [r0, #0]
 8007b2a:	f04f 0800 	mov.w	r8, #0
 8007b2e:	07eb      	lsls	r3, r5, #31
 8007b30:	d50a      	bpl.n	8007b48 <__pow5mult+0x74>
 8007b32:	4639      	mov	r1, r7
 8007b34:	4622      	mov	r2, r4
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7ff ff36 	bl	80079a8 <__multiply>
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	4681      	mov	r9, r0
 8007b40:	4630      	mov	r0, r6
 8007b42:	f7ff fe4a 	bl	80077da <_Bfree>
 8007b46:	464f      	mov	r7, r9
 8007b48:	106d      	asrs	r5, r5, #1
 8007b4a:	d00b      	beq.n	8007b64 <__pow5mult+0x90>
 8007b4c:	6820      	ldr	r0, [r4, #0]
 8007b4e:	b938      	cbnz	r0, 8007b60 <__pow5mult+0x8c>
 8007b50:	4622      	mov	r2, r4
 8007b52:	4621      	mov	r1, r4
 8007b54:	4630      	mov	r0, r6
 8007b56:	f7ff ff27 	bl	80079a8 <__multiply>
 8007b5a:	6020      	str	r0, [r4, #0]
 8007b5c:	f8c0 8000 	str.w	r8, [r0]
 8007b60:	4604      	mov	r4, r0
 8007b62:	e7e4      	b.n	8007b2e <__pow5mult+0x5a>
 8007b64:	4638      	mov	r0, r7
 8007b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b6a:	bf00      	nop
 8007b6c:	080092f0 	.word	0x080092f0

08007b70 <__lshift>:
 8007b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b74:	460c      	mov	r4, r1
 8007b76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b7a:	6923      	ldr	r3, [r4, #16]
 8007b7c:	6849      	ldr	r1, [r1, #4]
 8007b7e:	eb0a 0903 	add.w	r9, sl, r3
 8007b82:	68a3      	ldr	r3, [r4, #8]
 8007b84:	4607      	mov	r7, r0
 8007b86:	4616      	mov	r6, r2
 8007b88:	f109 0501 	add.w	r5, r9, #1
 8007b8c:	42ab      	cmp	r3, r5
 8007b8e:	db32      	blt.n	8007bf6 <__lshift+0x86>
 8007b90:	4638      	mov	r0, r7
 8007b92:	f7ff fdee 	bl	8007772 <_Balloc>
 8007b96:	2300      	movs	r3, #0
 8007b98:	4680      	mov	r8, r0
 8007b9a:	f100 0114 	add.w	r1, r0, #20
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4553      	cmp	r3, sl
 8007ba2:	db2b      	blt.n	8007bfc <__lshift+0x8c>
 8007ba4:	6920      	ldr	r0, [r4, #16]
 8007ba6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007baa:	f104 0314 	add.w	r3, r4, #20
 8007bae:	f016 021f 	ands.w	r2, r6, #31
 8007bb2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bb6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bba:	d025      	beq.n	8007c08 <__lshift+0x98>
 8007bbc:	f1c2 0e20 	rsb	lr, r2, #32
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	681e      	ldr	r6, [r3, #0]
 8007bc4:	468a      	mov	sl, r1
 8007bc6:	4096      	lsls	r6, r2
 8007bc8:	4330      	orrs	r0, r6
 8007bca:	f84a 0b04 	str.w	r0, [sl], #4
 8007bce:	f853 0b04 	ldr.w	r0, [r3], #4
 8007bd2:	459c      	cmp	ip, r3
 8007bd4:	fa20 f00e 	lsr.w	r0, r0, lr
 8007bd8:	d814      	bhi.n	8007c04 <__lshift+0x94>
 8007bda:	6048      	str	r0, [r1, #4]
 8007bdc:	b108      	cbz	r0, 8007be2 <__lshift+0x72>
 8007bde:	f109 0502 	add.w	r5, r9, #2
 8007be2:	3d01      	subs	r5, #1
 8007be4:	4638      	mov	r0, r7
 8007be6:	f8c8 5010 	str.w	r5, [r8, #16]
 8007bea:	4621      	mov	r1, r4
 8007bec:	f7ff fdf5 	bl	80077da <_Bfree>
 8007bf0:	4640      	mov	r0, r8
 8007bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf6:	3101      	adds	r1, #1
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	e7c7      	b.n	8007b8c <__lshift+0x1c>
 8007bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007c00:	3301      	adds	r3, #1
 8007c02:	e7cd      	b.n	8007ba0 <__lshift+0x30>
 8007c04:	4651      	mov	r1, sl
 8007c06:	e7dc      	b.n	8007bc2 <__lshift+0x52>
 8007c08:	3904      	subs	r1, #4
 8007c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c12:	459c      	cmp	ip, r3
 8007c14:	d8f9      	bhi.n	8007c0a <__lshift+0x9a>
 8007c16:	e7e4      	b.n	8007be2 <__lshift+0x72>

08007c18 <__mcmp>:
 8007c18:	6903      	ldr	r3, [r0, #16]
 8007c1a:	690a      	ldr	r2, [r1, #16]
 8007c1c:	1a9b      	subs	r3, r3, r2
 8007c1e:	b530      	push	{r4, r5, lr}
 8007c20:	d10c      	bne.n	8007c3c <__mcmp+0x24>
 8007c22:	0092      	lsls	r2, r2, #2
 8007c24:	3014      	adds	r0, #20
 8007c26:	3114      	adds	r1, #20
 8007c28:	1884      	adds	r4, r0, r2
 8007c2a:	4411      	add	r1, r2
 8007c2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c34:	4295      	cmp	r5, r2
 8007c36:	d003      	beq.n	8007c40 <__mcmp+0x28>
 8007c38:	d305      	bcc.n	8007c46 <__mcmp+0x2e>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	bd30      	pop	{r4, r5, pc}
 8007c40:	42a0      	cmp	r0, r4
 8007c42:	d3f3      	bcc.n	8007c2c <__mcmp+0x14>
 8007c44:	e7fa      	b.n	8007c3c <__mcmp+0x24>
 8007c46:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4a:	e7f7      	b.n	8007c3c <__mcmp+0x24>

08007c4c <__mdiff>:
 8007c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c50:	460d      	mov	r5, r1
 8007c52:	4607      	mov	r7, r0
 8007c54:	4611      	mov	r1, r2
 8007c56:	4628      	mov	r0, r5
 8007c58:	4614      	mov	r4, r2
 8007c5a:	f7ff ffdd 	bl	8007c18 <__mcmp>
 8007c5e:	1e06      	subs	r6, r0, #0
 8007c60:	d108      	bne.n	8007c74 <__mdiff+0x28>
 8007c62:	4631      	mov	r1, r6
 8007c64:	4638      	mov	r0, r7
 8007c66:	f7ff fd84 	bl	8007772 <_Balloc>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c74:	bfa4      	itt	ge
 8007c76:	4623      	movge	r3, r4
 8007c78:	462c      	movge	r4, r5
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	6861      	ldr	r1, [r4, #4]
 8007c7e:	bfa6      	itte	ge
 8007c80:	461d      	movge	r5, r3
 8007c82:	2600      	movge	r6, #0
 8007c84:	2601      	movlt	r6, #1
 8007c86:	f7ff fd74 	bl	8007772 <_Balloc>
 8007c8a:	692b      	ldr	r3, [r5, #16]
 8007c8c:	60c6      	str	r6, [r0, #12]
 8007c8e:	6926      	ldr	r6, [r4, #16]
 8007c90:	f105 0914 	add.w	r9, r5, #20
 8007c94:	f104 0214 	add.w	r2, r4, #20
 8007c98:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007c9c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007ca0:	f100 0514 	add.w	r5, r0, #20
 8007ca4:	f04f 0e00 	mov.w	lr, #0
 8007ca8:	f852 ab04 	ldr.w	sl, [r2], #4
 8007cac:	f859 4b04 	ldr.w	r4, [r9], #4
 8007cb0:	fa1e f18a 	uxtah	r1, lr, sl
 8007cb4:	b2a3      	uxth	r3, r4
 8007cb6:	1ac9      	subs	r1, r1, r3
 8007cb8:	0c23      	lsrs	r3, r4, #16
 8007cba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007cbe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007cc2:	b289      	uxth	r1, r1
 8007cc4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007cc8:	45c8      	cmp	r8, r9
 8007cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007cce:	4694      	mov	ip, r2
 8007cd0:	f845 3b04 	str.w	r3, [r5], #4
 8007cd4:	d8e8      	bhi.n	8007ca8 <__mdiff+0x5c>
 8007cd6:	45bc      	cmp	ip, r7
 8007cd8:	d304      	bcc.n	8007ce4 <__mdiff+0x98>
 8007cda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007cde:	b183      	cbz	r3, 8007d02 <__mdiff+0xb6>
 8007ce0:	6106      	str	r6, [r0, #16]
 8007ce2:	e7c5      	b.n	8007c70 <__mdiff+0x24>
 8007ce4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ce8:	fa1e f381 	uxtah	r3, lr, r1
 8007cec:	141a      	asrs	r2, r3, #16
 8007cee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cf8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007cfc:	f845 3b04 	str.w	r3, [r5], #4
 8007d00:	e7e9      	b.n	8007cd6 <__mdiff+0x8a>
 8007d02:	3e01      	subs	r6, #1
 8007d04:	e7e9      	b.n	8007cda <__mdiff+0x8e>
	...

08007d08 <__ulp>:
 8007d08:	4b12      	ldr	r3, [pc, #72]	; (8007d54 <__ulp+0x4c>)
 8007d0a:	ee10 2a90 	vmov	r2, s1
 8007d0e:	401a      	ands	r2, r3
 8007d10:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	dd04      	ble.n	8007d22 <__ulp+0x1a>
 8007d18:	2000      	movs	r0, #0
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	ec41 0b10 	vmov	d0, r0, r1
 8007d20:	4770      	bx	lr
 8007d22:	425b      	negs	r3, r3
 8007d24:	151b      	asrs	r3, r3, #20
 8007d26:	2b13      	cmp	r3, #19
 8007d28:	f04f 0000 	mov.w	r0, #0
 8007d2c:	f04f 0100 	mov.w	r1, #0
 8007d30:	dc04      	bgt.n	8007d3c <__ulp+0x34>
 8007d32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007d36:	fa42 f103 	asr.w	r1, r2, r3
 8007d3a:	e7ef      	b.n	8007d1c <__ulp+0x14>
 8007d3c:	3b14      	subs	r3, #20
 8007d3e:	2b1e      	cmp	r3, #30
 8007d40:	f04f 0201 	mov.w	r2, #1
 8007d44:	bfda      	itte	le
 8007d46:	f1c3 031f 	rsble	r3, r3, #31
 8007d4a:	fa02 f303 	lslle.w	r3, r2, r3
 8007d4e:	4613      	movgt	r3, r2
 8007d50:	4618      	mov	r0, r3
 8007d52:	e7e3      	b.n	8007d1c <__ulp+0x14>
 8007d54:	7ff00000 	.word	0x7ff00000

08007d58 <__b2d>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	6905      	ldr	r5, [r0, #16]
 8007d5c:	f100 0714 	add.w	r7, r0, #20
 8007d60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007d64:	1f2e      	subs	r6, r5, #4
 8007d66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f7ff fdc5 	bl	80078fa <__hi0bits>
 8007d70:	f1c0 0320 	rsb	r3, r0, #32
 8007d74:	280a      	cmp	r0, #10
 8007d76:	600b      	str	r3, [r1, #0]
 8007d78:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007df0 <__b2d+0x98>
 8007d7c:	dc14      	bgt.n	8007da8 <__b2d+0x50>
 8007d7e:	f1c0 0e0b 	rsb	lr, r0, #11
 8007d82:	fa24 f10e 	lsr.w	r1, r4, lr
 8007d86:	42b7      	cmp	r7, r6
 8007d88:	ea41 030c 	orr.w	r3, r1, ip
 8007d8c:	bf34      	ite	cc
 8007d8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007d92:	2100      	movcs	r1, #0
 8007d94:	3015      	adds	r0, #21
 8007d96:	fa04 f000 	lsl.w	r0, r4, r0
 8007d9a:	fa21 f10e 	lsr.w	r1, r1, lr
 8007d9e:	ea40 0201 	orr.w	r2, r0, r1
 8007da2:	ec43 2b10 	vmov	d0, r2, r3
 8007da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007da8:	42b7      	cmp	r7, r6
 8007daa:	bf3a      	itte	cc
 8007dac:	f1a5 0608 	subcc.w	r6, r5, #8
 8007db0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007db4:	2100      	movcs	r1, #0
 8007db6:	380b      	subs	r0, #11
 8007db8:	d015      	beq.n	8007de6 <__b2d+0x8e>
 8007dba:	4084      	lsls	r4, r0
 8007dbc:	f1c0 0520 	rsb	r5, r0, #32
 8007dc0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007dc4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007dc8:	42be      	cmp	r6, r7
 8007dca:	fa21 fc05 	lsr.w	ip, r1, r5
 8007dce:	ea44 030c 	orr.w	r3, r4, ip
 8007dd2:	bf8c      	ite	hi
 8007dd4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007dd8:	2400      	movls	r4, #0
 8007dda:	fa01 f000 	lsl.w	r0, r1, r0
 8007dde:	40ec      	lsrs	r4, r5
 8007de0:	ea40 0204 	orr.w	r2, r0, r4
 8007de4:	e7dd      	b.n	8007da2 <__b2d+0x4a>
 8007de6:	ea44 030c 	orr.w	r3, r4, ip
 8007dea:	460a      	mov	r2, r1
 8007dec:	e7d9      	b.n	8007da2 <__b2d+0x4a>
 8007dee:	bf00      	nop
 8007df0:	3ff00000 	.word	0x3ff00000

08007df4 <__d2b>:
 8007df4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007df8:	460e      	mov	r6, r1
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	ec59 8b10 	vmov	r8, r9, d0
 8007e00:	4615      	mov	r5, r2
 8007e02:	f7ff fcb6 	bl	8007772 <_Balloc>
 8007e06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e10:	bb34      	cbnz	r4, 8007e60 <__d2b+0x6c>
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	f1b8 0300 	subs.w	r3, r8, #0
 8007e18:	d027      	beq.n	8007e6a <__d2b+0x76>
 8007e1a:	a802      	add	r0, sp, #8
 8007e1c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007e20:	f7ff fd8a 	bl	8007938 <__lo0bits>
 8007e24:	9900      	ldr	r1, [sp, #0]
 8007e26:	b1f0      	cbz	r0, 8007e66 <__d2b+0x72>
 8007e28:	9a01      	ldr	r2, [sp, #4]
 8007e2a:	f1c0 0320 	rsb	r3, r0, #32
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	430b      	orrs	r3, r1
 8007e34:	40c2      	lsrs	r2, r0
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	9201      	str	r2, [sp, #4]
 8007e3a:	9b01      	ldr	r3, [sp, #4]
 8007e3c:	61bb      	str	r3, [r7, #24]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	bf14      	ite	ne
 8007e42:	2102      	movne	r1, #2
 8007e44:	2101      	moveq	r1, #1
 8007e46:	6139      	str	r1, [r7, #16]
 8007e48:	b1c4      	cbz	r4, 8007e7c <__d2b+0x88>
 8007e4a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007e4e:	4404      	add	r4, r0
 8007e50:	6034      	str	r4, [r6, #0]
 8007e52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e56:	6028      	str	r0, [r5, #0]
 8007e58:	4638      	mov	r0, r7
 8007e5a:	b003      	add	sp, #12
 8007e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e64:	e7d5      	b.n	8007e12 <__d2b+0x1e>
 8007e66:	6179      	str	r1, [r7, #20]
 8007e68:	e7e7      	b.n	8007e3a <__d2b+0x46>
 8007e6a:	a801      	add	r0, sp, #4
 8007e6c:	f7ff fd64 	bl	8007938 <__lo0bits>
 8007e70:	9b01      	ldr	r3, [sp, #4]
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	2101      	movs	r1, #1
 8007e76:	6139      	str	r1, [r7, #16]
 8007e78:	3020      	adds	r0, #32
 8007e7a:	e7e5      	b.n	8007e48 <__d2b+0x54>
 8007e7c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007e80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e84:	6030      	str	r0, [r6, #0]
 8007e86:	6918      	ldr	r0, [r3, #16]
 8007e88:	f7ff fd37 	bl	80078fa <__hi0bits>
 8007e8c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007e90:	e7e1      	b.n	8007e56 <__d2b+0x62>

08007e92 <__ratio>:
 8007e92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e96:	4688      	mov	r8, r1
 8007e98:	4669      	mov	r1, sp
 8007e9a:	4681      	mov	r9, r0
 8007e9c:	f7ff ff5c 	bl	8007d58 <__b2d>
 8007ea0:	a901      	add	r1, sp, #4
 8007ea2:	4640      	mov	r0, r8
 8007ea4:	ec57 6b10 	vmov	r6, r7, d0
 8007ea8:	f7ff ff56 	bl	8007d58 <__b2d>
 8007eac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007eb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007eb4:	eba3 0c02 	sub.w	ip, r3, r2
 8007eb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ebc:	1a9b      	subs	r3, r3, r2
 8007ebe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007ec2:	ec5b ab10 	vmov	sl, fp, d0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bfce      	itee	gt
 8007eca:	463a      	movgt	r2, r7
 8007ecc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ed0:	465a      	movle	r2, fp
 8007ed2:	4659      	mov	r1, fp
 8007ed4:	463d      	mov	r5, r7
 8007ed6:	bfd4      	ite	le
 8007ed8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007edc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	ee10 2a10 	vmov	r2, s0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4629      	mov	r1, r5
 8007eea:	f7f8 fc5b 	bl	80007a4 <__aeabi_ddiv>
 8007eee:	ec41 0b10 	vmov	d0, r0, r1
 8007ef2:	b003      	add	sp, #12
 8007ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ef8 <__copybits>:
 8007ef8:	3901      	subs	r1, #1
 8007efa:	b510      	push	{r4, lr}
 8007efc:	1149      	asrs	r1, r1, #5
 8007efe:	6914      	ldr	r4, [r2, #16]
 8007f00:	3101      	adds	r1, #1
 8007f02:	f102 0314 	add.w	r3, r2, #20
 8007f06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f0e:	42a3      	cmp	r3, r4
 8007f10:	4602      	mov	r2, r0
 8007f12:	d303      	bcc.n	8007f1c <__copybits+0x24>
 8007f14:	2300      	movs	r3, #0
 8007f16:	428a      	cmp	r2, r1
 8007f18:	d305      	bcc.n	8007f26 <__copybits+0x2e>
 8007f1a:	bd10      	pop	{r4, pc}
 8007f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f20:	f840 2b04 	str.w	r2, [r0], #4
 8007f24:	e7f3      	b.n	8007f0e <__copybits+0x16>
 8007f26:	f842 3b04 	str.w	r3, [r2], #4
 8007f2a:	e7f4      	b.n	8007f16 <__copybits+0x1e>

08007f2c <__any_on>:
 8007f2c:	f100 0214 	add.w	r2, r0, #20
 8007f30:	6900      	ldr	r0, [r0, #16]
 8007f32:	114b      	asrs	r3, r1, #5
 8007f34:	4298      	cmp	r0, r3
 8007f36:	b510      	push	{r4, lr}
 8007f38:	db11      	blt.n	8007f5e <__any_on+0x32>
 8007f3a:	dd0a      	ble.n	8007f52 <__any_on+0x26>
 8007f3c:	f011 011f 	ands.w	r1, r1, #31
 8007f40:	d007      	beq.n	8007f52 <__any_on+0x26>
 8007f42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007f46:	fa24 f001 	lsr.w	r0, r4, r1
 8007f4a:	fa00 f101 	lsl.w	r1, r0, r1
 8007f4e:	428c      	cmp	r4, r1
 8007f50:	d10b      	bne.n	8007f6a <__any_on+0x3e>
 8007f52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d803      	bhi.n	8007f62 <__any_on+0x36>
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	bd10      	pop	{r4, pc}
 8007f5e:	4603      	mov	r3, r0
 8007f60:	e7f7      	b.n	8007f52 <__any_on+0x26>
 8007f62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f66:	2900      	cmp	r1, #0
 8007f68:	d0f5      	beq.n	8007f56 <__any_on+0x2a>
 8007f6a:	2001      	movs	r0, #1
 8007f6c:	e7f6      	b.n	8007f5c <__any_on+0x30>

08007f6e <_calloc_r>:
 8007f6e:	b538      	push	{r3, r4, r5, lr}
 8007f70:	fb02 f401 	mul.w	r4, r2, r1
 8007f74:	4621      	mov	r1, r4
 8007f76:	f000 f809 	bl	8007f8c <_malloc_r>
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	b118      	cbz	r0, 8007f86 <_calloc_r+0x18>
 8007f7e:	4622      	mov	r2, r4
 8007f80:	2100      	movs	r1, #0
 8007f82:	f7fe fa83 	bl	800648c <memset>
 8007f86:	4628      	mov	r0, r5
 8007f88:	bd38      	pop	{r3, r4, r5, pc}
	...

08007f8c <_malloc_r>:
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	1ccd      	adds	r5, r1, #3
 8007f90:	f025 0503 	bic.w	r5, r5, #3
 8007f94:	3508      	adds	r5, #8
 8007f96:	2d0c      	cmp	r5, #12
 8007f98:	bf38      	it	cc
 8007f9a:	250c      	movcc	r5, #12
 8007f9c:	2d00      	cmp	r5, #0
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	db01      	blt.n	8007fa6 <_malloc_r+0x1a>
 8007fa2:	42a9      	cmp	r1, r5
 8007fa4:	d903      	bls.n	8007fae <_malloc_r+0x22>
 8007fa6:	230c      	movs	r3, #12
 8007fa8:	6033      	str	r3, [r6, #0]
 8007faa:	2000      	movs	r0, #0
 8007fac:	bd70      	pop	{r4, r5, r6, pc}
 8007fae:	f000 f87f 	bl	80080b0 <__malloc_lock>
 8007fb2:	4a21      	ldr	r2, [pc, #132]	; (8008038 <_malloc_r+0xac>)
 8007fb4:	6814      	ldr	r4, [r2, #0]
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	b991      	cbnz	r1, 8007fe0 <_malloc_r+0x54>
 8007fba:	4c20      	ldr	r4, [pc, #128]	; (800803c <_malloc_r+0xb0>)
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	b91b      	cbnz	r3, 8007fc8 <_malloc_r+0x3c>
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f000 f83d 	bl	8008040 <_sbrk_r>
 8007fc6:	6020      	str	r0, [r4, #0]
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 f838 	bl	8008040 <_sbrk_r>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	d124      	bne.n	800801e <_malloc_r+0x92>
 8007fd4:	230c      	movs	r3, #12
 8007fd6:	6033      	str	r3, [r6, #0]
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f000 f86a 	bl	80080b2 <__malloc_unlock>
 8007fde:	e7e4      	b.n	8007faa <_malloc_r+0x1e>
 8007fe0:	680b      	ldr	r3, [r1, #0]
 8007fe2:	1b5b      	subs	r3, r3, r5
 8007fe4:	d418      	bmi.n	8008018 <_malloc_r+0x8c>
 8007fe6:	2b0b      	cmp	r3, #11
 8007fe8:	d90f      	bls.n	800800a <_malloc_r+0x7e>
 8007fea:	600b      	str	r3, [r1, #0]
 8007fec:	50cd      	str	r5, [r1, r3]
 8007fee:	18cc      	adds	r4, r1, r3
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f000 f85e 	bl	80080b2 <__malloc_unlock>
 8007ff6:	f104 000b 	add.w	r0, r4, #11
 8007ffa:	1d23      	adds	r3, r4, #4
 8007ffc:	f020 0007 	bic.w	r0, r0, #7
 8008000:	1ac3      	subs	r3, r0, r3
 8008002:	d0d3      	beq.n	8007fac <_malloc_r+0x20>
 8008004:	425a      	negs	r2, r3
 8008006:	50e2      	str	r2, [r4, r3]
 8008008:	e7d0      	b.n	8007fac <_malloc_r+0x20>
 800800a:	428c      	cmp	r4, r1
 800800c:	684b      	ldr	r3, [r1, #4]
 800800e:	bf16      	itet	ne
 8008010:	6063      	strne	r3, [r4, #4]
 8008012:	6013      	streq	r3, [r2, #0]
 8008014:	460c      	movne	r4, r1
 8008016:	e7eb      	b.n	8007ff0 <_malloc_r+0x64>
 8008018:	460c      	mov	r4, r1
 800801a:	6849      	ldr	r1, [r1, #4]
 800801c:	e7cc      	b.n	8007fb8 <_malloc_r+0x2c>
 800801e:	1cc4      	adds	r4, r0, #3
 8008020:	f024 0403 	bic.w	r4, r4, #3
 8008024:	42a0      	cmp	r0, r4
 8008026:	d005      	beq.n	8008034 <_malloc_r+0xa8>
 8008028:	1a21      	subs	r1, r4, r0
 800802a:	4630      	mov	r0, r6
 800802c:	f000 f808 	bl	8008040 <_sbrk_r>
 8008030:	3001      	adds	r0, #1
 8008032:	d0cf      	beq.n	8007fd4 <_malloc_r+0x48>
 8008034:	6025      	str	r5, [r4, #0]
 8008036:	e7db      	b.n	8007ff0 <_malloc_r+0x64>
 8008038:	20000288 	.word	0x20000288
 800803c:	2000028c 	.word	0x2000028c

08008040 <_sbrk_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4c06      	ldr	r4, [pc, #24]	; (800805c <_sbrk_r+0x1c>)
 8008044:	2300      	movs	r3, #0
 8008046:	4605      	mov	r5, r0
 8008048:	4608      	mov	r0, r1
 800804a:	6023      	str	r3, [r4, #0]
 800804c:	f7fa fcde 	bl	8002a0c <_sbrk>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d102      	bne.n	800805a <_sbrk_r+0x1a>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	b103      	cbz	r3, 800805a <_sbrk_r+0x1a>
 8008058:	602b      	str	r3, [r5, #0]
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	2000046c 	.word	0x2000046c

08008060 <strncmp>:
 8008060:	b510      	push	{r4, lr}
 8008062:	b16a      	cbz	r2, 8008080 <strncmp+0x20>
 8008064:	3901      	subs	r1, #1
 8008066:	1884      	adds	r4, r0, r2
 8008068:	f810 3b01 	ldrb.w	r3, [r0], #1
 800806c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008070:	4293      	cmp	r3, r2
 8008072:	d103      	bne.n	800807c <strncmp+0x1c>
 8008074:	42a0      	cmp	r0, r4
 8008076:	d001      	beq.n	800807c <strncmp+0x1c>
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1f5      	bne.n	8008068 <strncmp+0x8>
 800807c:	1a98      	subs	r0, r3, r2
 800807e:	bd10      	pop	{r4, pc}
 8008080:	4610      	mov	r0, r2
 8008082:	e7fc      	b.n	800807e <strncmp+0x1e>

08008084 <__ascii_wctomb>:
 8008084:	b149      	cbz	r1, 800809a <__ascii_wctomb+0x16>
 8008086:	2aff      	cmp	r2, #255	; 0xff
 8008088:	bf85      	ittet	hi
 800808a:	238a      	movhi	r3, #138	; 0x8a
 800808c:	6003      	strhi	r3, [r0, #0]
 800808e:	700a      	strbls	r2, [r1, #0]
 8008090:	f04f 30ff 	movhi.w	r0, #4294967295
 8008094:	bf98      	it	ls
 8008096:	2001      	movls	r0, #1
 8008098:	4770      	bx	lr
 800809a:	4608      	mov	r0, r1
 800809c:	4770      	bx	lr
	...

080080a0 <malloc>:
 80080a0:	4b02      	ldr	r3, [pc, #8]	; (80080ac <malloc+0xc>)
 80080a2:	4601      	mov	r1, r0
 80080a4:	6818      	ldr	r0, [r3, #0]
 80080a6:	f7ff bf71 	b.w	8007f8c <_malloc_r>
 80080aa:	bf00      	nop
 80080ac:	20000010 	.word	0x20000010

080080b0 <__malloc_lock>:
 80080b0:	4770      	bx	lr

080080b2 <__malloc_unlock>:
 80080b2:	4770      	bx	lr

080080b4 <pow>:
 80080b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b8:	ed2d 8b04 	vpush	{d8-d9}
 80080bc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008390 <pow+0x2dc>
 80080c0:	b08d      	sub	sp, #52	; 0x34
 80080c2:	ec57 6b10 	vmov	r6, r7, d0
 80080c6:	ec55 4b11 	vmov	r4, r5, d1
 80080ca:	f000 f965 	bl	8008398 <__ieee754_pow>
 80080ce:	f999 3000 	ldrsb.w	r3, [r9]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	eeb0 8a40 	vmov.f32	s16, s0
 80080da:	eef0 8a60 	vmov.f32	s17, s1
 80080de:	46c8      	mov	r8, r9
 80080e0:	d05f      	beq.n	80081a2 <pow+0xee>
 80080e2:	4622      	mov	r2, r4
 80080e4:	462b      	mov	r3, r5
 80080e6:	4620      	mov	r0, r4
 80080e8:	4629      	mov	r1, r5
 80080ea:	f7f8 fccb 	bl	8000a84 <__aeabi_dcmpun>
 80080ee:	4683      	mov	fp, r0
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d156      	bne.n	80081a2 <pow+0xee>
 80080f4:	4632      	mov	r2, r6
 80080f6:	463b      	mov	r3, r7
 80080f8:	4630      	mov	r0, r6
 80080fa:	4639      	mov	r1, r7
 80080fc:	f7f8 fcc2 	bl	8000a84 <__aeabi_dcmpun>
 8008100:	9001      	str	r0, [sp, #4]
 8008102:	b1e8      	cbz	r0, 8008140 <pow+0x8c>
 8008104:	2200      	movs	r2, #0
 8008106:	2300      	movs	r3, #0
 8008108:	4620      	mov	r0, r4
 800810a:	4629      	mov	r1, r5
 800810c:	f7f8 fc88 	bl	8000a20 <__aeabi_dcmpeq>
 8008110:	2800      	cmp	r0, #0
 8008112:	d046      	beq.n	80081a2 <pow+0xee>
 8008114:	2301      	movs	r3, #1
 8008116:	9302      	str	r3, [sp, #8]
 8008118:	4b96      	ldr	r3, [pc, #600]	; (8008374 <pow+0x2c0>)
 800811a:	9303      	str	r3, [sp, #12]
 800811c:	4b96      	ldr	r3, [pc, #600]	; (8008378 <pow+0x2c4>)
 800811e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008122:	2200      	movs	r2, #0
 8008124:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008128:	9b00      	ldr	r3, [sp, #0]
 800812a:	2b02      	cmp	r3, #2
 800812c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008130:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008134:	d033      	beq.n	800819e <pow+0xea>
 8008136:	a802      	add	r0, sp, #8
 8008138:	f000 fefd 	bl	8008f36 <matherr>
 800813c:	bb48      	cbnz	r0, 8008192 <pow+0xde>
 800813e:	e05d      	b.n	80081fc <pow+0x148>
 8008140:	f04f 0a00 	mov.w	sl, #0
 8008144:	f04f 0b00 	mov.w	fp, #0
 8008148:	4652      	mov	r2, sl
 800814a:	465b      	mov	r3, fp
 800814c:	4630      	mov	r0, r6
 800814e:	4639      	mov	r1, r7
 8008150:	f7f8 fc66 	bl	8000a20 <__aeabi_dcmpeq>
 8008154:	ec4b ab19 	vmov	d9, sl, fp
 8008158:	2800      	cmp	r0, #0
 800815a:	d054      	beq.n	8008206 <pow+0x152>
 800815c:	4652      	mov	r2, sl
 800815e:	465b      	mov	r3, fp
 8008160:	4620      	mov	r0, r4
 8008162:	4629      	mov	r1, r5
 8008164:	f7f8 fc5c 	bl	8000a20 <__aeabi_dcmpeq>
 8008168:	4680      	mov	r8, r0
 800816a:	b318      	cbz	r0, 80081b4 <pow+0x100>
 800816c:	2301      	movs	r3, #1
 800816e:	9302      	str	r3, [sp, #8]
 8008170:	4b80      	ldr	r3, [pc, #512]	; (8008374 <pow+0x2c0>)
 8008172:	9303      	str	r3, [sp, #12]
 8008174:	9b01      	ldr	r3, [sp, #4]
 8008176:	930a      	str	r3, [sp, #40]	; 0x28
 8008178:	9b00      	ldr	r3, [sp, #0]
 800817a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800817e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008182:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0d5      	beq.n	8008136 <pow+0x82>
 800818a:	4b7b      	ldr	r3, [pc, #492]	; (8008378 <pow+0x2c4>)
 800818c:	2200      	movs	r2, #0
 800818e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008194:	b11b      	cbz	r3, 800819e <pow+0xea>
 8008196:	f7fe f94f 	bl	8006438 <__errno>
 800819a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819c:	6003      	str	r3, [r0, #0]
 800819e:	ed9d 8b08 	vldr	d8, [sp, #32]
 80081a2:	eeb0 0a48 	vmov.f32	s0, s16
 80081a6:	eef0 0a68 	vmov.f32	s1, s17
 80081aa:	b00d      	add	sp, #52	; 0x34
 80081ac:	ecbd 8b04 	vpop	{d8-d9}
 80081b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b4:	ec45 4b10 	vmov	d0, r4, r5
 80081b8:	f000 feb5 	bl	8008f26 <finite>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d0f0      	beq.n	80081a2 <pow+0xee>
 80081c0:	4652      	mov	r2, sl
 80081c2:	465b      	mov	r3, fp
 80081c4:	4620      	mov	r0, r4
 80081c6:	4629      	mov	r1, r5
 80081c8:	f7f8 fc34 	bl	8000a34 <__aeabi_dcmplt>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d0e8      	beq.n	80081a2 <pow+0xee>
 80081d0:	2301      	movs	r3, #1
 80081d2:	9302      	str	r3, [sp, #8]
 80081d4:	4b67      	ldr	r3, [pc, #412]	; (8008374 <pow+0x2c0>)
 80081d6:	9303      	str	r3, [sp, #12]
 80081d8:	f999 3000 	ldrsb.w	r3, [r9]
 80081dc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80081e0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80081e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80081e8:	b913      	cbnz	r3, 80081f0 <pow+0x13c>
 80081ea:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80081ee:	e7a2      	b.n	8008136 <pow+0x82>
 80081f0:	4962      	ldr	r1, [pc, #392]	; (800837c <pow+0x2c8>)
 80081f2:	2000      	movs	r0, #0
 80081f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d19c      	bne.n	8008136 <pow+0x82>
 80081fc:	f7fe f91c 	bl	8006438 <__errno>
 8008200:	2321      	movs	r3, #33	; 0x21
 8008202:	6003      	str	r3, [r0, #0]
 8008204:	e7c5      	b.n	8008192 <pow+0xde>
 8008206:	eeb0 0a48 	vmov.f32	s0, s16
 800820a:	eef0 0a68 	vmov.f32	s1, s17
 800820e:	f000 fe8a 	bl	8008f26 <finite>
 8008212:	9000      	str	r0, [sp, #0]
 8008214:	2800      	cmp	r0, #0
 8008216:	f040 8081 	bne.w	800831c <pow+0x268>
 800821a:	ec47 6b10 	vmov	d0, r6, r7
 800821e:	f000 fe82 	bl	8008f26 <finite>
 8008222:	2800      	cmp	r0, #0
 8008224:	d07a      	beq.n	800831c <pow+0x268>
 8008226:	ec45 4b10 	vmov	d0, r4, r5
 800822a:	f000 fe7c 	bl	8008f26 <finite>
 800822e:	2800      	cmp	r0, #0
 8008230:	d074      	beq.n	800831c <pow+0x268>
 8008232:	ec53 2b18 	vmov	r2, r3, d8
 8008236:	ee18 0a10 	vmov	r0, s16
 800823a:	4619      	mov	r1, r3
 800823c:	f7f8 fc22 	bl	8000a84 <__aeabi_dcmpun>
 8008240:	f999 9000 	ldrsb.w	r9, [r9]
 8008244:	4b4b      	ldr	r3, [pc, #300]	; (8008374 <pow+0x2c0>)
 8008246:	b1b0      	cbz	r0, 8008276 <pow+0x1c2>
 8008248:	2201      	movs	r2, #1
 800824a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800824e:	9b00      	ldr	r3, [sp, #0]
 8008250:	930a      	str	r3, [sp, #40]	; 0x28
 8008252:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008256:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800825a:	f1b9 0f00 	cmp.w	r9, #0
 800825e:	d0c4      	beq.n	80081ea <pow+0x136>
 8008260:	4652      	mov	r2, sl
 8008262:	465b      	mov	r3, fp
 8008264:	4650      	mov	r0, sl
 8008266:	4659      	mov	r1, fp
 8008268:	f7f8 fa9c 	bl	80007a4 <__aeabi_ddiv>
 800826c:	f1b9 0f02 	cmp.w	r9, #2
 8008270:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008274:	e7c1      	b.n	80081fa <pow+0x146>
 8008276:	2203      	movs	r2, #3
 8008278:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800827c:	900a      	str	r0, [sp, #40]	; 0x28
 800827e:	4629      	mov	r1, r5
 8008280:	4620      	mov	r0, r4
 8008282:	2200      	movs	r2, #0
 8008284:	4b3e      	ldr	r3, [pc, #248]	; (8008380 <pow+0x2cc>)
 8008286:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800828a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800828e:	f7f8 f95f 	bl	8000550 <__aeabi_dmul>
 8008292:	4604      	mov	r4, r0
 8008294:	460d      	mov	r5, r1
 8008296:	f1b9 0f00 	cmp.w	r9, #0
 800829a:	d124      	bne.n	80082e6 <pow+0x232>
 800829c:	4b39      	ldr	r3, [pc, #228]	; (8008384 <pow+0x2d0>)
 800829e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80082a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80082a6:	4630      	mov	r0, r6
 80082a8:	4652      	mov	r2, sl
 80082aa:	465b      	mov	r3, fp
 80082ac:	4639      	mov	r1, r7
 80082ae:	f7f8 fbc1 	bl	8000a34 <__aeabi_dcmplt>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d056      	beq.n	8008364 <pow+0x2b0>
 80082b6:	ec45 4b10 	vmov	d0, r4, r5
 80082ba:	f000 fe49 	bl	8008f50 <rint>
 80082be:	4622      	mov	r2, r4
 80082c0:	462b      	mov	r3, r5
 80082c2:	ec51 0b10 	vmov	r0, r1, d0
 80082c6:	f7f8 fbab 	bl	8000a20 <__aeabi_dcmpeq>
 80082ca:	b920      	cbnz	r0, 80082d6 <pow+0x222>
 80082cc:	4b2e      	ldr	r3, [pc, #184]	; (8008388 <pow+0x2d4>)
 80082ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80082d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80082d6:	f998 3000 	ldrsb.w	r3, [r8]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d142      	bne.n	8008364 <pow+0x2b0>
 80082de:	f7fe f8ab 	bl	8006438 <__errno>
 80082e2:	2322      	movs	r3, #34	; 0x22
 80082e4:	e78d      	b.n	8008202 <pow+0x14e>
 80082e6:	4b29      	ldr	r3, [pc, #164]	; (800838c <pow+0x2d8>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80082ee:	4630      	mov	r0, r6
 80082f0:	4652      	mov	r2, sl
 80082f2:	465b      	mov	r3, fp
 80082f4:	4639      	mov	r1, r7
 80082f6:	f7f8 fb9d 	bl	8000a34 <__aeabi_dcmplt>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d0eb      	beq.n	80082d6 <pow+0x222>
 80082fe:	ec45 4b10 	vmov	d0, r4, r5
 8008302:	f000 fe25 	bl	8008f50 <rint>
 8008306:	4622      	mov	r2, r4
 8008308:	462b      	mov	r3, r5
 800830a:	ec51 0b10 	vmov	r0, r1, d0
 800830e:	f7f8 fb87 	bl	8000a20 <__aeabi_dcmpeq>
 8008312:	2800      	cmp	r0, #0
 8008314:	d1df      	bne.n	80082d6 <pow+0x222>
 8008316:	2200      	movs	r2, #0
 8008318:	4b18      	ldr	r3, [pc, #96]	; (800837c <pow+0x2c8>)
 800831a:	e7da      	b.n	80082d2 <pow+0x21e>
 800831c:	2200      	movs	r2, #0
 800831e:	2300      	movs	r3, #0
 8008320:	ec51 0b18 	vmov	r0, r1, d8
 8008324:	f7f8 fb7c 	bl	8000a20 <__aeabi_dcmpeq>
 8008328:	2800      	cmp	r0, #0
 800832a:	f43f af3a 	beq.w	80081a2 <pow+0xee>
 800832e:	ec47 6b10 	vmov	d0, r6, r7
 8008332:	f000 fdf8 	bl	8008f26 <finite>
 8008336:	2800      	cmp	r0, #0
 8008338:	f43f af33 	beq.w	80081a2 <pow+0xee>
 800833c:	ec45 4b10 	vmov	d0, r4, r5
 8008340:	f000 fdf1 	bl	8008f26 <finite>
 8008344:	2800      	cmp	r0, #0
 8008346:	f43f af2c 	beq.w	80081a2 <pow+0xee>
 800834a:	2304      	movs	r3, #4
 800834c:	9302      	str	r3, [sp, #8]
 800834e:	4b09      	ldr	r3, [pc, #36]	; (8008374 <pow+0x2c0>)
 8008350:	9303      	str	r3, [sp, #12]
 8008352:	2300      	movs	r3, #0
 8008354:	930a      	str	r3, [sp, #40]	; 0x28
 8008356:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800835a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800835e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8008362:	e7b8      	b.n	80082d6 <pow+0x222>
 8008364:	a802      	add	r0, sp, #8
 8008366:	f000 fde6 	bl	8008f36 <matherr>
 800836a:	2800      	cmp	r0, #0
 800836c:	f47f af11 	bne.w	8008192 <pow+0xde>
 8008370:	e7b5      	b.n	80082de <pow+0x22a>
 8008372:	bf00      	nop
 8008374:	080093fd 	.word	0x080093fd
 8008378:	3ff00000 	.word	0x3ff00000
 800837c:	fff00000 	.word	0xfff00000
 8008380:	3fe00000 	.word	0x3fe00000
 8008384:	47efffff 	.word	0x47efffff
 8008388:	c7efffff 	.word	0xc7efffff
 800838c:	7ff00000 	.word	0x7ff00000
 8008390:	200001e0 	.word	0x200001e0
 8008394:	00000000 	.word	0x00000000

08008398 <__ieee754_pow>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	b091      	sub	sp, #68	; 0x44
 800839e:	ed8d 1b00 	vstr	d1, [sp]
 80083a2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80083a6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80083aa:	ea58 0302 	orrs.w	r3, r8, r2
 80083ae:	ec57 6b10 	vmov	r6, r7, d0
 80083b2:	f000 84be 	beq.w	8008d32 <__ieee754_pow+0x99a>
 80083b6:	4b7a      	ldr	r3, [pc, #488]	; (80085a0 <__ieee754_pow+0x208>)
 80083b8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80083bc:	429c      	cmp	r4, r3
 80083be:	463d      	mov	r5, r7
 80083c0:	ee10 aa10 	vmov	sl, s0
 80083c4:	dc09      	bgt.n	80083da <__ieee754_pow+0x42>
 80083c6:	d103      	bne.n	80083d0 <__ieee754_pow+0x38>
 80083c8:	b93e      	cbnz	r6, 80083da <__ieee754_pow+0x42>
 80083ca:	45a0      	cmp	r8, r4
 80083cc:	dc0d      	bgt.n	80083ea <__ieee754_pow+0x52>
 80083ce:	e001      	b.n	80083d4 <__ieee754_pow+0x3c>
 80083d0:	4598      	cmp	r8, r3
 80083d2:	dc02      	bgt.n	80083da <__ieee754_pow+0x42>
 80083d4:	4598      	cmp	r8, r3
 80083d6:	d10e      	bne.n	80083f6 <__ieee754_pow+0x5e>
 80083d8:	b16a      	cbz	r2, 80083f6 <__ieee754_pow+0x5e>
 80083da:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80083de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80083e2:	ea54 030a 	orrs.w	r3, r4, sl
 80083e6:	f000 84a4 	beq.w	8008d32 <__ieee754_pow+0x99a>
 80083ea:	486e      	ldr	r0, [pc, #440]	; (80085a4 <__ieee754_pow+0x20c>)
 80083ec:	b011      	add	sp, #68	; 0x44
 80083ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f2:	f000 bda5 	b.w	8008f40 <nan>
 80083f6:	2d00      	cmp	r5, #0
 80083f8:	da53      	bge.n	80084a2 <__ieee754_pow+0x10a>
 80083fa:	4b6b      	ldr	r3, [pc, #428]	; (80085a8 <__ieee754_pow+0x210>)
 80083fc:	4598      	cmp	r8, r3
 80083fe:	dc4d      	bgt.n	800849c <__ieee754_pow+0x104>
 8008400:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008404:	4598      	cmp	r8, r3
 8008406:	dd4c      	ble.n	80084a2 <__ieee754_pow+0x10a>
 8008408:	ea4f 5328 	mov.w	r3, r8, asr #20
 800840c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008410:	2b14      	cmp	r3, #20
 8008412:	dd26      	ble.n	8008462 <__ieee754_pow+0xca>
 8008414:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008418:	fa22 f103 	lsr.w	r1, r2, r3
 800841c:	fa01 f303 	lsl.w	r3, r1, r3
 8008420:	4293      	cmp	r3, r2
 8008422:	d13e      	bne.n	80084a2 <__ieee754_pow+0x10a>
 8008424:	f001 0101 	and.w	r1, r1, #1
 8008428:	f1c1 0b02 	rsb	fp, r1, #2
 800842c:	2a00      	cmp	r2, #0
 800842e:	d15b      	bne.n	80084e8 <__ieee754_pow+0x150>
 8008430:	4b5b      	ldr	r3, [pc, #364]	; (80085a0 <__ieee754_pow+0x208>)
 8008432:	4598      	cmp	r8, r3
 8008434:	d124      	bne.n	8008480 <__ieee754_pow+0xe8>
 8008436:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800843a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800843e:	ea53 030a 	orrs.w	r3, r3, sl
 8008442:	f000 8476 	beq.w	8008d32 <__ieee754_pow+0x99a>
 8008446:	4b59      	ldr	r3, [pc, #356]	; (80085ac <__ieee754_pow+0x214>)
 8008448:	429c      	cmp	r4, r3
 800844a:	dd2d      	ble.n	80084a8 <__ieee754_pow+0x110>
 800844c:	f1b9 0f00 	cmp.w	r9, #0
 8008450:	f280 8473 	bge.w	8008d3a <__ieee754_pow+0x9a2>
 8008454:	2000      	movs	r0, #0
 8008456:	2100      	movs	r1, #0
 8008458:	ec41 0b10 	vmov	d0, r0, r1
 800845c:	b011      	add	sp, #68	; 0x44
 800845e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008462:	2a00      	cmp	r2, #0
 8008464:	d13e      	bne.n	80084e4 <__ieee754_pow+0x14c>
 8008466:	f1c3 0314 	rsb	r3, r3, #20
 800846a:	fa48 f103 	asr.w	r1, r8, r3
 800846e:	fa01 f303 	lsl.w	r3, r1, r3
 8008472:	4543      	cmp	r3, r8
 8008474:	f040 8469 	bne.w	8008d4a <__ieee754_pow+0x9b2>
 8008478:	f001 0101 	and.w	r1, r1, #1
 800847c:	f1c1 0b02 	rsb	fp, r1, #2
 8008480:	4b4b      	ldr	r3, [pc, #300]	; (80085b0 <__ieee754_pow+0x218>)
 8008482:	4598      	cmp	r8, r3
 8008484:	d118      	bne.n	80084b8 <__ieee754_pow+0x120>
 8008486:	f1b9 0f00 	cmp.w	r9, #0
 800848a:	f280 845a 	bge.w	8008d42 <__ieee754_pow+0x9aa>
 800848e:	4948      	ldr	r1, [pc, #288]	; (80085b0 <__ieee754_pow+0x218>)
 8008490:	4632      	mov	r2, r6
 8008492:	463b      	mov	r3, r7
 8008494:	2000      	movs	r0, #0
 8008496:	f7f8 f985 	bl	80007a4 <__aeabi_ddiv>
 800849a:	e7dd      	b.n	8008458 <__ieee754_pow+0xc0>
 800849c:	f04f 0b02 	mov.w	fp, #2
 80084a0:	e7c4      	b.n	800842c <__ieee754_pow+0x94>
 80084a2:	f04f 0b00 	mov.w	fp, #0
 80084a6:	e7c1      	b.n	800842c <__ieee754_pow+0x94>
 80084a8:	f1b9 0f00 	cmp.w	r9, #0
 80084ac:	dad2      	bge.n	8008454 <__ieee754_pow+0xbc>
 80084ae:	e9dd 0300 	ldrd	r0, r3, [sp]
 80084b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80084b6:	e7cf      	b.n	8008458 <__ieee754_pow+0xc0>
 80084b8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80084bc:	d106      	bne.n	80084cc <__ieee754_pow+0x134>
 80084be:	4632      	mov	r2, r6
 80084c0:	463b      	mov	r3, r7
 80084c2:	4610      	mov	r0, r2
 80084c4:	4619      	mov	r1, r3
 80084c6:	f7f8 f843 	bl	8000550 <__aeabi_dmul>
 80084ca:	e7c5      	b.n	8008458 <__ieee754_pow+0xc0>
 80084cc:	4b39      	ldr	r3, [pc, #228]	; (80085b4 <__ieee754_pow+0x21c>)
 80084ce:	4599      	cmp	r9, r3
 80084d0:	d10a      	bne.n	80084e8 <__ieee754_pow+0x150>
 80084d2:	2d00      	cmp	r5, #0
 80084d4:	db08      	blt.n	80084e8 <__ieee754_pow+0x150>
 80084d6:	ec47 6b10 	vmov	d0, r6, r7
 80084da:	b011      	add	sp, #68	; 0x44
 80084dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	f000 bc68 	b.w	8008db4 <__ieee754_sqrt>
 80084e4:	f04f 0b00 	mov.w	fp, #0
 80084e8:	ec47 6b10 	vmov	d0, r6, r7
 80084ec:	f000 fd12 	bl	8008f14 <fabs>
 80084f0:	ec51 0b10 	vmov	r0, r1, d0
 80084f4:	f1ba 0f00 	cmp.w	sl, #0
 80084f8:	d127      	bne.n	800854a <__ieee754_pow+0x1b2>
 80084fa:	b124      	cbz	r4, 8008506 <__ieee754_pow+0x16e>
 80084fc:	4b2c      	ldr	r3, [pc, #176]	; (80085b0 <__ieee754_pow+0x218>)
 80084fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008502:	429a      	cmp	r2, r3
 8008504:	d121      	bne.n	800854a <__ieee754_pow+0x1b2>
 8008506:	f1b9 0f00 	cmp.w	r9, #0
 800850a:	da05      	bge.n	8008518 <__ieee754_pow+0x180>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	2000      	movs	r0, #0
 8008512:	4927      	ldr	r1, [pc, #156]	; (80085b0 <__ieee754_pow+0x218>)
 8008514:	f7f8 f946 	bl	80007a4 <__aeabi_ddiv>
 8008518:	2d00      	cmp	r5, #0
 800851a:	da9d      	bge.n	8008458 <__ieee754_pow+0xc0>
 800851c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008520:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008524:	ea54 030b 	orrs.w	r3, r4, fp
 8008528:	d108      	bne.n	800853c <__ieee754_pow+0x1a4>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4610      	mov	r0, r2
 8008530:	4619      	mov	r1, r3
 8008532:	f7f7 fe55 	bl	80001e0 <__aeabi_dsub>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	e7ac      	b.n	8008496 <__ieee754_pow+0xfe>
 800853c:	f1bb 0f01 	cmp.w	fp, #1
 8008540:	d18a      	bne.n	8008458 <__ieee754_pow+0xc0>
 8008542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008546:	4619      	mov	r1, r3
 8008548:	e786      	b.n	8008458 <__ieee754_pow+0xc0>
 800854a:	0fed      	lsrs	r5, r5, #31
 800854c:	1e6b      	subs	r3, r5, #1
 800854e:	930d      	str	r3, [sp, #52]	; 0x34
 8008550:	ea5b 0303 	orrs.w	r3, fp, r3
 8008554:	d102      	bne.n	800855c <__ieee754_pow+0x1c4>
 8008556:	4632      	mov	r2, r6
 8008558:	463b      	mov	r3, r7
 800855a:	e7e8      	b.n	800852e <__ieee754_pow+0x196>
 800855c:	4b16      	ldr	r3, [pc, #88]	; (80085b8 <__ieee754_pow+0x220>)
 800855e:	4598      	cmp	r8, r3
 8008560:	f340 80fe 	ble.w	8008760 <__ieee754_pow+0x3c8>
 8008564:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008568:	4598      	cmp	r8, r3
 800856a:	dd0a      	ble.n	8008582 <__ieee754_pow+0x1ea>
 800856c:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <__ieee754_pow+0x214>)
 800856e:	429c      	cmp	r4, r3
 8008570:	dc0d      	bgt.n	800858e <__ieee754_pow+0x1f6>
 8008572:	f1b9 0f00 	cmp.w	r9, #0
 8008576:	f6bf af6d 	bge.w	8008454 <__ieee754_pow+0xbc>
 800857a:	a307      	add	r3, pc, #28	; (adr r3, 8008598 <__ieee754_pow+0x200>)
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	e79f      	b.n	80084c2 <__ieee754_pow+0x12a>
 8008582:	4b0e      	ldr	r3, [pc, #56]	; (80085bc <__ieee754_pow+0x224>)
 8008584:	429c      	cmp	r4, r3
 8008586:	ddf4      	ble.n	8008572 <__ieee754_pow+0x1da>
 8008588:	4b09      	ldr	r3, [pc, #36]	; (80085b0 <__ieee754_pow+0x218>)
 800858a:	429c      	cmp	r4, r3
 800858c:	dd18      	ble.n	80085c0 <__ieee754_pow+0x228>
 800858e:	f1b9 0f00 	cmp.w	r9, #0
 8008592:	dcf2      	bgt.n	800857a <__ieee754_pow+0x1e2>
 8008594:	e75e      	b.n	8008454 <__ieee754_pow+0xbc>
 8008596:	bf00      	nop
 8008598:	8800759c 	.word	0x8800759c
 800859c:	7e37e43c 	.word	0x7e37e43c
 80085a0:	7ff00000 	.word	0x7ff00000
 80085a4:	080091f9 	.word	0x080091f9
 80085a8:	433fffff 	.word	0x433fffff
 80085ac:	3fefffff 	.word	0x3fefffff
 80085b0:	3ff00000 	.word	0x3ff00000
 80085b4:	3fe00000 	.word	0x3fe00000
 80085b8:	41e00000 	.word	0x41e00000
 80085bc:	3feffffe 	.word	0x3feffffe
 80085c0:	2200      	movs	r2, #0
 80085c2:	4b63      	ldr	r3, [pc, #396]	; (8008750 <__ieee754_pow+0x3b8>)
 80085c4:	f7f7 fe0c 	bl	80001e0 <__aeabi_dsub>
 80085c8:	a355      	add	r3, pc, #340	; (adr r3, 8008720 <__ieee754_pow+0x388>)
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	4604      	mov	r4, r0
 80085d0:	460d      	mov	r5, r1
 80085d2:	f7f7 ffbd 	bl	8000550 <__aeabi_dmul>
 80085d6:	a354      	add	r3, pc, #336	; (adr r3, 8008728 <__ieee754_pow+0x390>)
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	4606      	mov	r6, r0
 80085de:	460f      	mov	r7, r1
 80085e0:	4620      	mov	r0, r4
 80085e2:	4629      	mov	r1, r5
 80085e4:	f7f7 ffb4 	bl	8000550 <__aeabi_dmul>
 80085e8:	2200      	movs	r2, #0
 80085ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ee:	4b59      	ldr	r3, [pc, #356]	; (8008754 <__ieee754_pow+0x3bc>)
 80085f0:	4620      	mov	r0, r4
 80085f2:	4629      	mov	r1, r5
 80085f4:	f7f7 ffac 	bl	8000550 <__aeabi_dmul>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	a14c      	add	r1, pc, #304	; (adr r1, 8008730 <__ieee754_pow+0x398>)
 80085fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008602:	f7f7 fded 	bl	80001e0 <__aeabi_dsub>
 8008606:	4622      	mov	r2, r4
 8008608:	462b      	mov	r3, r5
 800860a:	f7f7 ffa1 	bl	8000550 <__aeabi_dmul>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	2000      	movs	r0, #0
 8008614:	4950      	ldr	r1, [pc, #320]	; (8008758 <__ieee754_pow+0x3c0>)
 8008616:	f7f7 fde3 	bl	80001e0 <__aeabi_dsub>
 800861a:	4622      	mov	r2, r4
 800861c:	462b      	mov	r3, r5
 800861e:	4680      	mov	r8, r0
 8008620:	4689      	mov	r9, r1
 8008622:	4620      	mov	r0, r4
 8008624:	4629      	mov	r1, r5
 8008626:	f7f7 ff93 	bl	8000550 <__aeabi_dmul>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4640      	mov	r0, r8
 8008630:	4649      	mov	r1, r9
 8008632:	f7f7 ff8d 	bl	8000550 <__aeabi_dmul>
 8008636:	a340      	add	r3, pc, #256	; (adr r3, 8008738 <__ieee754_pow+0x3a0>)
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f7f7 ff88 	bl	8000550 <__aeabi_dmul>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008648:	f7f7 fdca 	bl	80001e0 <__aeabi_dsub>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4604      	mov	r4, r0
 8008652:	460d      	mov	r5, r1
 8008654:	4630      	mov	r0, r6
 8008656:	4639      	mov	r1, r7
 8008658:	f7f7 fdc4 	bl	80001e4 <__adddf3>
 800865c:	2000      	movs	r0, #0
 800865e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008662:	4632      	mov	r2, r6
 8008664:	463b      	mov	r3, r7
 8008666:	f7f7 fdbb 	bl	80001e0 <__aeabi_dsub>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	4620      	mov	r0, r4
 8008670:	4629      	mov	r1, r5
 8008672:	f7f7 fdb5 	bl	80001e0 <__aeabi_dsub>
 8008676:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008678:	f10b 33ff 	add.w	r3, fp, #4294967295
 800867c:	4313      	orrs	r3, r2
 800867e:	4606      	mov	r6, r0
 8008680:	460f      	mov	r7, r1
 8008682:	f040 81eb 	bne.w	8008a5c <__ieee754_pow+0x6c4>
 8008686:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008740 <__ieee754_pow+0x3a8>
 800868a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800868e:	2400      	movs	r4, #0
 8008690:	4622      	mov	r2, r4
 8008692:	462b      	mov	r3, r5
 8008694:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008698:	ed8d 7b02 	vstr	d7, [sp, #8]
 800869c:	f7f7 fda0 	bl	80001e0 <__aeabi_dsub>
 80086a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086a4:	f7f7 ff54 	bl	8000550 <__aeabi_dmul>
 80086a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086ac:	4680      	mov	r8, r0
 80086ae:	4689      	mov	r9, r1
 80086b0:	4630      	mov	r0, r6
 80086b2:	4639      	mov	r1, r7
 80086b4:	f7f7 ff4c 	bl	8000550 <__aeabi_dmul>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4640      	mov	r0, r8
 80086be:	4649      	mov	r1, r9
 80086c0:	f7f7 fd90 	bl	80001e4 <__adddf3>
 80086c4:	4622      	mov	r2, r4
 80086c6:	462b      	mov	r3, r5
 80086c8:	4680      	mov	r8, r0
 80086ca:	4689      	mov	r9, r1
 80086cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086d0:	f7f7 ff3e 	bl	8000550 <__aeabi_dmul>
 80086d4:	460b      	mov	r3, r1
 80086d6:	4604      	mov	r4, r0
 80086d8:	460d      	mov	r5, r1
 80086da:	4602      	mov	r2, r0
 80086dc:	4649      	mov	r1, r9
 80086de:	4640      	mov	r0, r8
 80086e0:	e9cd 4500 	strd	r4, r5, [sp]
 80086e4:	f7f7 fd7e 	bl	80001e4 <__adddf3>
 80086e8:	4b1c      	ldr	r3, [pc, #112]	; (800875c <__ieee754_pow+0x3c4>)
 80086ea:	4299      	cmp	r1, r3
 80086ec:	4606      	mov	r6, r0
 80086ee:	460f      	mov	r7, r1
 80086f0:	468b      	mov	fp, r1
 80086f2:	f340 82f7 	ble.w	8008ce4 <__ieee754_pow+0x94c>
 80086f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80086fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80086fe:	4303      	orrs	r3, r0
 8008700:	f000 81ea 	beq.w	8008ad8 <__ieee754_pow+0x740>
 8008704:	a310      	add	r3, pc, #64	; (adr r3, 8008748 <__ieee754_pow+0x3b0>)
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800870e:	f7f7 ff1f 	bl	8000550 <__aeabi_dmul>
 8008712:	a30d      	add	r3, pc, #52	; (adr r3, 8008748 <__ieee754_pow+0x3b0>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	e6d5      	b.n	80084c6 <__ieee754_pow+0x12e>
 800871a:	bf00      	nop
 800871c:	f3af 8000 	nop.w
 8008720:	60000000 	.word	0x60000000
 8008724:	3ff71547 	.word	0x3ff71547
 8008728:	f85ddf44 	.word	0xf85ddf44
 800872c:	3e54ae0b 	.word	0x3e54ae0b
 8008730:	55555555 	.word	0x55555555
 8008734:	3fd55555 	.word	0x3fd55555
 8008738:	652b82fe 	.word	0x652b82fe
 800873c:	3ff71547 	.word	0x3ff71547
 8008740:	00000000 	.word	0x00000000
 8008744:	bff00000 	.word	0xbff00000
 8008748:	8800759c 	.word	0x8800759c
 800874c:	7e37e43c 	.word	0x7e37e43c
 8008750:	3ff00000 	.word	0x3ff00000
 8008754:	3fd00000 	.word	0x3fd00000
 8008758:	3fe00000 	.word	0x3fe00000
 800875c:	408fffff 	.word	0x408fffff
 8008760:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008764:	f04f 0200 	mov.w	r2, #0
 8008768:	da05      	bge.n	8008776 <__ieee754_pow+0x3de>
 800876a:	4bd3      	ldr	r3, [pc, #844]	; (8008ab8 <__ieee754_pow+0x720>)
 800876c:	f7f7 fef0 	bl	8000550 <__aeabi_dmul>
 8008770:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008774:	460c      	mov	r4, r1
 8008776:	1523      	asrs	r3, r4, #20
 8008778:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800877c:	4413      	add	r3, r2
 800877e:	9309      	str	r3, [sp, #36]	; 0x24
 8008780:	4bce      	ldr	r3, [pc, #824]	; (8008abc <__ieee754_pow+0x724>)
 8008782:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008786:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800878a:	429c      	cmp	r4, r3
 800878c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008790:	dd08      	ble.n	80087a4 <__ieee754_pow+0x40c>
 8008792:	4bcb      	ldr	r3, [pc, #812]	; (8008ac0 <__ieee754_pow+0x728>)
 8008794:	429c      	cmp	r4, r3
 8008796:	f340 815e 	ble.w	8008a56 <__ieee754_pow+0x6be>
 800879a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800879c:	3301      	adds	r3, #1
 800879e:	9309      	str	r3, [sp, #36]	; 0x24
 80087a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80087a4:	f04f 0a00 	mov.w	sl, #0
 80087a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80087ac:	930c      	str	r3, [sp, #48]	; 0x30
 80087ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087b0:	4bc4      	ldr	r3, [pc, #784]	; (8008ac4 <__ieee754_pow+0x72c>)
 80087b2:	4413      	add	r3, r2
 80087b4:	ed93 7b00 	vldr	d7, [r3]
 80087b8:	4629      	mov	r1, r5
 80087ba:	ec53 2b17 	vmov	r2, r3, d7
 80087be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80087c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80087c6:	f7f7 fd0b 	bl	80001e0 <__aeabi_dsub>
 80087ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087ce:	4606      	mov	r6, r0
 80087d0:	460f      	mov	r7, r1
 80087d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087d6:	f7f7 fd05 	bl	80001e4 <__adddf3>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	2000      	movs	r0, #0
 80087e0:	49b9      	ldr	r1, [pc, #740]	; (8008ac8 <__ieee754_pow+0x730>)
 80087e2:	f7f7 ffdf 	bl	80007a4 <__aeabi_ddiv>
 80087e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	4630      	mov	r0, r6
 80087f0:	4639      	mov	r1, r7
 80087f2:	f7f7 fead 	bl	8000550 <__aeabi_dmul>
 80087f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087fa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80087fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008802:	2300      	movs	r3, #0
 8008804:	9302      	str	r3, [sp, #8]
 8008806:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800880a:	106d      	asrs	r5, r5, #1
 800880c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008810:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008814:	2200      	movs	r2, #0
 8008816:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800881a:	4640      	mov	r0, r8
 800881c:	4649      	mov	r1, r9
 800881e:	4614      	mov	r4, r2
 8008820:	461d      	mov	r5, r3
 8008822:	f7f7 fe95 	bl	8000550 <__aeabi_dmul>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4630      	mov	r0, r6
 800882c:	4639      	mov	r1, r7
 800882e:	f7f7 fcd7 	bl	80001e0 <__aeabi_dsub>
 8008832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008836:	4606      	mov	r6, r0
 8008838:	460f      	mov	r7, r1
 800883a:	4620      	mov	r0, r4
 800883c:	4629      	mov	r1, r5
 800883e:	f7f7 fccf 	bl	80001e0 <__aeabi_dsub>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800884a:	f7f7 fcc9 	bl	80001e0 <__aeabi_dsub>
 800884e:	4642      	mov	r2, r8
 8008850:	464b      	mov	r3, r9
 8008852:	f7f7 fe7d 	bl	8000550 <__aeabi_dmul>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4630      	mov	r0, r6
 800885c:	4639      	mov	r1, r7
 800885e:	f7f7 fcbf 	bl	80001e0 <__aeabi_dsub>
 8008862:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008866:	f7f7 fe73 	bl	8000550 <__aeabi_dmul>
 800886a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800886e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008872:	4610      	mov	r0, r2
 8008874:	4619      	mov	r1, r3
 8008876:	f7f7 fe6b 	bl	8000550 <__aeabi_dmul>
 800887a:	a37b      	add	r3, pc, #492	; (adr r3, 8008a68 <__ieee754_pow+0x6d0>)
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	4604      	mov	r4, r0
 8008882:	460d      	mov	r5, r1
 8008884:	f7f7 fe64 	bl	8000550 <__aeabi_dmul>
 8008888:	a379      	add	r3, pc, #484	; (adr r3, 8008a70 <__ieee754_pow+0x6d8>)
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f7f7 fca9 	bl	80001e4 <__adddf3>
 8008892:	4622      	mov	r2, r4
 8008894:	462b      	mov	r3, r5
 8008896:	f7f7 fe5b 	bl	8000550 <__aeabi_dmul>
 800889a:	a377      	add	r3, pc, #476	; (adr r3, 8008a78 <__ieee754_pow+0x6e0>)
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	f7f7 fca0 	bl	80001e4 <__adddf3>
 80088a4:	4622      	mov	r2, r4
 80088a6:	462b      	mov	r3, r5
 80088a8:	f7f7 fe52 	bl	8000550 <__aeabi_dmul>
 80088ac:	a374      	add	r3, pc, #464	; (adr r3, 8008a80 <__ieee754_pow+0x6e8>)
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	f7f7 fc97 	bl	80001e4 <__adddf3>
 80088b6:	4622      	mov	r2, r4
 80088b8:	462b      	mov	r3, r5
 80088ba:	f7f7 fe49 	bl	8000550 <__aeabi_dmul>
 80088be:	a372      	add	r3, pc, #456	; (adr r3, 8008a88 <__ieee754_pow+0x6f0>)
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	f7f7 fc8e 	bl	80001e4 <__adddf3>
 80088c8:	4622      	mov	r2, r4
 80088ca:	462b      	mov	r3, r5
 80088cc:	f7f7 fe40 	bl	8000550 <__aeabi_dmul>
 80088d0:	a36f      	add	r3, pc, #444	; (adr r3, 8008a90 <__ieee754_pow+0x6f8>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f7f7 fc85 	bl	80001e4 <__adddf3>
 80088da:	4622      	mov	r2, r4
 80088dc:	4606      	mov	r6, r0
 80088de:	460f      	mov	r7, r1
 80088e0:	462b      	mov	r3, r5
 80088e2:	4620      	mov	r0, r4
 80088e4:	4629      	mov	r1, r5
 80088e6:	f7f7 fe33 	bl	8000550 <__aeabi_dmul>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	4630      	mov	r0, r6
 80088f0:	4639      	mov	r1, r7
 80088f2:	f7f7 fe2d 	bl	8000550 <__aeabi_dmul>
 80088f6:	4642      	mov	r2, r8
 80088f8:	4604      	mov	r4, r0
 80088fa:	460d      	mov	r5, r1
 80088fc:	464b      	mov	r3, r9
 80088fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008902:	f7f7 fc6f 	bl	80001e4 <__adddf3>
 8008906:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800890a:	f7f7 fe21 	bl	8000550 <__aeabi_dmul>
 800890e:	4622      	mov	r2, r4
 8008910:	462b      	mov	r3, r5
 8008912:	f7f7 fc67 	bl	80001e4 <__adddf3>
 8008916:	4642      	mov	r2, r8
 8008918:	4606      	mov	r6, r0
 800891a:	460f      	mov	r7, r1
 800891c:	464b      	mov	r3, r9
 800891e:	4640      	mov	r0, r8
 8008920:	4649      	mov	r1, r9
 8008922:	f7f7 fe15 	bl	8000550 <__aeabi_dmul>
 8008926:	2200      	movs	r2, #0
 8008928:	4b68      	ldr	r3, [pc, #416]	; (8008acc <__ieee754_pow+0x734>)
 800892a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800892e:	f7f7 fc59 	bl	80001e4 <__adddf3>
 8008932:	4632      	mov	r2, r6
 8008934:	463b      	mov	r3, r7
 8008936:	f7f7 fc55 	bl	80001e4 <__adddf3>
 800893a:	9802      	ldr	r0, [sp, #8]
 800893c:	460d      	mov	r5, r1
 800893e:	4604      	mov	r4, r0
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4640      	mov	r0, r8
 8008946:	4649      	mov	r1, r9
 8008948:	f7f7 fe02 	bl	8000550 <__aeabi_dmul>
 800894c:	2200      	movs	r2, #0
 800894e:	4680      	mov	r8, r0
 8008950:	4689      	mov	r9, r1
 8008952:	4b5e      	ldr	r3, [pc, #376]	; (8008acc <__ieee754_pow+0x734>)
 8008954:	4620      	mov	r0, r4
 8008956:	4629      	mov	r1, r5
 8008958:	f7f7 fc42 	bl	80001e0 <__aeabi_dsub>
 800895c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008960:	f7f7 fc3e 	bl	80001e0 <__aeabi_dsub>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4630      	mov	r0, r6
 800896a:	4639      	mov	r1, r7
 800896c:	f7f7 fc38 	bl	80001e0 <__aeabi_dsub>
 8008970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008974:	f7f7 fdec 	bl	8000550 <__aeabi_dmul>
 8008978:	4622      	mov	r2, r4
 800897a:	4606      	mov	r6, r0
 800897c:	460f      	mov	r7, r1
 800897e:	462b      	mov	r3, r5
 8008980:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008984:	f7f7 fde4 	bl	8000550 <__aeabi_dmul>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	4630      	mov	r0, r6
 800898e:	4639      	mov	r1, r7
 8008990:	f7f7 fc28 	bl	80001e4 <__adddf3>
 8008994:	4606      	mov	r6, r0
 8008996:	460f      	mov	r7, r1
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	4640      	mov	r0, r8
 800899e:	4649      	mov	r1, r9
 80089a0:	f7f7 fc20 	bl	80001e4 <__adddf3>
 80089a4:	9802      	ldr	r0, [sp, #8]
 80089a6:	a33c      	add	r3, pc, #240	; (adr r3, 8008a98 <__ieee754_pow+0x700>)
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	4604      	mov	r4, r0
 80089ae:	460d      	mov	r5, r1
 80089b0:	f7f7 fdce 	bl	8000550 <__aeabi_dmul>
 80089b4:	4642      	mov	r2, r8
 80089b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80089ba:	464b      	mov	r3, r9
 80089bc:	4620      	mov	r0, r4
 80089be:	4629      	mov	r1, r5
 80089c0:	f7f7 fc0e 	bl	80001e0 <__aeabi_dsub>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4630      	mov	r0, r6
 80089ca:	4639      	mov	r1, r7
 80089cc:	f7f7 fc08 	bl	80001e0 <__aeabi_dsub>
 80089d0:	a333      	add	r3, pc, #204	; (adr r3, 8008aa0 <__ieee754_pow+0x708>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 fdbb 	bl	8000550 <__aeabi_dmul>
 80089da:	a333      	add	r3, pc, #204	; (adr r3, 8008aa8 <__ieee754_pow+0x710>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	4606      	mov	r6, r0
 80089e2:	460f      	mov	r7, r1
 80089e4:	4620      	mov	r0, r4
 80089e6:	4629      	mov	r1, r5
 80089e8:	f7f7 fdb2 	bl	8000550 <__aeabi_dmul>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4630      	mov	r0, r6
 80089f2:	4639      	mov	r1, r7
 80089f4:	f7f7 fbf6 	bl	80001e4 <__adddf3>
 80089f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089fa:	4b35      	ldr	r3, [pc, #212]	; (8008ad0 <__ieee754_pow+0x738>)
 80089fc:	4413      	add	r3, r2
 80089fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a02:	f7f7 fbef 	bl	80001e4 <__adddf3>
 8008a06:	4604      	mov	r4, r0
 8008a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a0a:	460d      	mov	r5, r1
 8008a0c:	f7f7 fd36 	bl	800047c <__aeabi_i2d>
 8008a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a12:	4b30      	ldr	r3, [pc, #192]	; (8008ad4 <__ieee754_pow+0x73c>)
 8008a14:	4413      	add	r3, r2
 8008a16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	4622      	mov	r2, r4
 8008a20:	462b      	mov	r3, r5
 8008a22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a26:	f7f7 fbdd 	bl	80001e4 <__adddf3>
 8008a2a:	4642      	mov	r2, r8
 8008a2c:	464b      	mov	r3, r9
 8008a2e:	f7f7 fbd9 	bl	80001e4 <__adddf3>
 8008a32:	4632      	mov	r2, r6
 8008a34:	463b      	mov	r3, r7
 8008a36:	f7f7 fbd5 	bl	80001e4 <__adddf3>
 8008a3a:	9802      	ldr	r0, [sp, #8]
 8008a3c:	4632      	mov	r2, r6
 8008a3e:	463b      	mov	r3, r7
 8008a40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a44:	f7f7 fbcc 	bl	80001e0 <__aeabi_dsub>
 8008a48:	4642      	mov	r2, r8
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	f7f7 fbc8 	bl	80001e0 <__aeabi_dsub>
 8008a50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a54:	e607      	b.n	8008666 <__ieee754_pow+0x2ce>
 8008a56:	f04f 0a01 	mov.w	sl, #1
 8008a5a:	e6a5      	b.n	80087a8 <__ieee754_pow+0x410>
 8008a5c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008ab0 <__ieee754_pow+0x718>
 8008a60:	e613      	b.n	800868a <__ieee754_pow+0x2f2>
 8008a62:	bf00      	nop
 8008a64:	f3af 8000 	nop.w
 8008a68:	4a454eef 	.word	0x4a454eef
 8008a6c:	3fca7e28 	.word	0x3fca7e28
 8008a70:	93c9db65 	.word	0x93c9db65
 8008a74:	3fcd864a 	.word	0x3fcd864a
 8008a78:	a91d4101 	.word	0xa91d4101
 8008a7c:	3fd17460 	.word	0x3fd17460
 8008a80:	518f264d 	.word	0x518f264d
 8008a84:	3fd55555 	.word	0x3fd55555
 8008a88:	db6fabff 	.word	0xdb6fabff
 8008a8c:	3fdb6db6 	.word	0x3fdb6db6
 8008a90:	33333303 	.word	0x33333303
 8008a94:	3fe33333 	.word	0x3fe33333
 8008a98:	e0000000 	.word	0xe0000000
 8008a9c:	3feec709 	.word	0x3feec709
 8008aa0:	dc3a03fd 	.word	0xdc3a03fd
 8008aa4:	3feec709 	.word	0x3feec709
 8008aa8:	145b01f5 	.word	0x145b01f5
 8008aac:	be3e2fe0 	.word	0xbe3e2fe0
 8008ab0:	00000000 	.word	0x00000000
 8008ab4:	3ff00000 	.word	0x3ff00000
 8008ab8:	43400000 	.word	0x43400000
 8008abc:	0003988e 	.word	0x0003988e
 8008ac0:	000bb679 	.word	0x000bb679
 8008ac4:	08009408 	.word	0x08009408
 8008ac8:	3ff00000 	.word	0x3ff00000
 8008acc:	40080000 	.word	0x40080000
 8008ad0:	08009428 	.word	0x08009428
 8008ad4:	08009418 	.word	0x08009418
 8008ad8:	a3b4      	add	r3, pc, #720	; (adr r3, 8008dac <__ieee754_pow+0xa14>)
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	4640      	mov	r0, r8
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	f7f7 fb7f 	bl	80001e4 <__adddf3>
 8008ae6:	4622      	mov	r2, r4
 8008ae8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008aec:	462b      	mov	r3, r5
 8008aee:	4630      	mov	r0, r6
 8008af0:	4639      	mov	r1, r7
 8008af2:	f7f7 fb75 	bl	80001e0 <__aeabi_dsub>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008afe:	f7f7 ffb7 	bl	8000a70 <__aeabi_dcmpgt>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	f47f adfe 	bne.w	8008704 <__ieee754_pow+0x36c>
 8008b08:	4aa3      	ldr	r2, [pc, #652]	; (8008d98 <__ieee754_pow+0xa00>)
 8008b0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	f340 810a 	ble.w	8008d28 <__ieee754_pow+0x990>
 8008b14:	151b      	asrs	r3, r3, #20
 8008b16:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008b1a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008b1e:	fa4a f303 	asr.w	r3, sl, r3
 8008b22:	445b      	add	r3, fp
 8008b24:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008b28:	4e9c      	ldr	r6, [pc, #624]	; (8008d9c <__ieee754_pow+0xa04>)
 8008b2a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008b2e:	4116      	asrs	r6, r2
 8008b30:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008b34:	2000      	movs	r0, #0
 8008b36:	ea23 0106 	bic.w	r1, r3, r6
 8008b3a:	f1c2 0214 	rsb	r2, r2, #20
 8008b3e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008b42:	fa4a fa02 	asr.w	sl, sl, r2
 8008b46:	f1bb 0f00 	cmp.w	fp, #0
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	bfb8      	it	lt
 8008b54:	f1ca 0a00 	rsblt	sl, sl, #0
 8008b58:	f7f7 fb42 	bl	80001e0 <__aeabi_dsub>
 8008b5c:	e9cd 0100 	strd	r0, r1, [sp]
 8008b60:	4642      	mov	r2, r8
 8008b62:	464b      	mov	r3, r9
 8008b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b68:	f7f7 fb3c 	bl	80001e4 <__adddf3>
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	a378      	add	r3, pc, #480	; (adr r3, 8008d50 <__ieee754_pow+0x9b8>)
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	4604      	mov	r4, r0
 8008b76:	460d      	mov	r5, r1
 8008b78:	f7f7 fcea 	bl	8000550 <__aeabi_dmul>
 8008b7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b80:	4606      	mov	r6, r0
 8008b82:	460f      	mov	r7, r1
 8008b84:	4620      	mov	r0, r4
 8008b86:	4629      	mov	r1, r5
 8008b88:	f7f7 fb2a 	bl	80001e0 <__aeabi_dsub>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4640      	mov	r0, r8
 8008b92:	4649      	mov	r1, r9
 8008b94:	f7f7 fb24 	bl	80001e0 <__aeabi_dsub>
 8008b98:	a36f      	add	r3, pc, #444	; (adr r3, 8008d58 <__ieee754_pow+0x9c0>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fcd7 	bl	8000550 <__aeabi_dmul>
 8008ba2:	a36f      	add	r3, pc, #444	; (adr r3, 8008d60 <__ieee754_pow+0x9c8>)
 8008ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba8:	4680      	mov	r8, r0
 8008baa:	4689      	mov	r9, r1
 8008bac:	4620      	mov	r0, r4
 8008bae:	4629      	mov	r1, r5
 8008bb0:	f7f7 fcce 	bl	8000550 <__aeabi_dmul>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4640      	mov	r0, r8
 8008bba:	4649      	mov	r1, r9
 8008bbc:	f7f7 fb12 	bl	80001e4 <__adddf3>
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	460d      	mov	r5, r1
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4630      	mov	r0, r6
 8008bca:	4639      	mov	r1, r7
 8008bcc:	f7f7 fb0a 	bl	80001e4 <__adddf3>
 8008bd0:	4632      	mov	r2, r6
 8008bd2:	463b      	mov	r3, r7
 8008bd4:	4680      	mov	r8, r0
 8008bd6:	4689      	mov	r9, r1
 8008bd8:	f7f7 fb02 	bl	80001e0 <__aeabi_dsub>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	4620      	mov	r0, r4
 8008be2:	4629      	mov	r1, r5
 8008be4:	f7f7 fafc 	bl	80001e0 <__aeabi_dsub>
 8008be8:	4642      	mov	r2, r8
 8008bea:	4606      	mov	r6, r0
 8008bec:	460f      	mov	r7, r1
 8008bee:	464b      	mov	r3, r9
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	f7f7 fcac 	bl	8000550 <__aeabi_dmul>
 8008bf8:	a35b      	add	r3, pc, #364	; (adr r3, 8008d68 <__ieee754_pow+0x9d0>)
 8008bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfe:	4604      	mov	r4, r0
 8008c00:	460d      	mov	r5, r1
 8008c02:	f7f7 fca5 	bl	8000550 <__aeabi_dmul>
 8008c06:	a35a      	add	r3, pc, #360	; (adr r3, 8008d70 <__ieee754_pow+0x9d8>)
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	f7f7 fae8 	bl	80001e0 <__aeabi_dsub>
 8008c10:	4622      	mov	r2, r4
 8008c12:	462b      	mov	r3, r5
 8008c14:	f7f7 fc9c 	bl	8000550 <__aeabi_dmul>
 8008c18:	a357      	add	r3, pc, #348	; (adr r3, 8008d78 <__ieee754_pow+0x9e0>)
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	f7f7 fae1 	bl	80001e4 <__adddf3>
 8008c22:	4622      	mov	r2, r4
 8008c24:	462b      	mov	r3, r5
 8008c26:	f7f7 fc93 	bl	8000550 <__aeabi_dmul>
 8008c2a:	a355      	add	r3, pc, #340	; (adr r3, 8008d80 <__ieee754_pow+0x9e8>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	f7f7 fad6 	bl	80001e0 <__aeabi_dsub>
 8008c34:	4622      	mov	r2, r4
 8008c36:	462b      	mov	r3, r5
 8008c38:	f7f7 fc8a 	bl	8000550 <__aeabi_dmul>
 8008c3c:	a352      	add	r3, pc, #328	; (adr r3, 8008d88 <__ieee754_pow+0x9f0>)
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	f7f7 facf 	bl	80001e4 <__adddf3>
 8008c46:	4622      	mov	r2, r4
 8008c48:	462b      	mov	r3, r5
 8008c4a:	f7f7 fc81 	bl	8000550 <__aeabi_dmul>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4640      	mov	r0, r8
 8008c54:	4649      	mov	r1, r9
 8008c56:	f7f7 fac3 	bl	80001e0 <__aeabi_dsub>
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	460d      	mov	r5, r1
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4640      	mov	r0, r8
 8008c64:	4649      	mov	r1, r9
 8008c66:	f7f7 fc73 	bl	8000550 <__aeabi_dmul>
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	e9cd 0100 	strd	r0, r1, [sp]
 8008c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c74:	4620      	mov	r0, r4
 8008c76:	4629      	mov	r1, r5
 8008c78:	f7f7 fab2 	bl	80001e0 <__aeabi_dsub>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c84:	f7f7 fd8e 	bl	80007a4 <__aeabi_ddiv>
 8008c88:	4632      	mov	r2, r6
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	460d      	mov	r5, r1
 8008c8e:	463b      	mov	r3, r7
 8008c90:	4640      	mov	r0, r8
 8008c92:	4649      	mov	r1, r9
 8008c94:	f7f7 fc5c 	bl	8000550 <__aeabi_dmul>
 8008c98:	4632      	mov	r2, r6
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	f7f7 faa2 	bl	80001e4 <__adddf3>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	f7f7 fa9a 	bl	80001e0 <__aeabi_dsub>
 8008cac:	4642      	mov	r2, r8
 8008cae:	464b      	mov	r3, r9
 8008cb0:	f7f7 fa96 	bl	80001e0 <__aeabi_dsub>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	2000      	movs	r0, #0
 8008cba:	4939      	ldr	r1, [pc, #228]	; (8008da0 <__ieee754_pow+0xa08>)
 8008cbc:	f7f7 fa90 	bl	80001e0 <__aeabi_dsub>
 8008cc0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008cc4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	da2f      	bge.n	8008d2e <__ieee754_pow+0x996>
 8008cce:	4650      	mov	r0, sl
 8008cd0:	ec43 2b10 	vmov	d0, r2, r3
 8008cd4:	f000 f9c0 	bl	8009058 <scalbn>
 8008cd8:	ec51 0b10 	vmov	r0, r1, d0
 8008cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ce0:	f7ff bbf1 	b.w	80084c6 <__ieee754_pow+0x12e>
 8008ce4:	4b2f      	ldr	r3, [pc, #188]	; (8008da4 <__ieee754_pow+0xa0c>)
 8008ce6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008cea:	429e      	cmp	r6, r3
 8008cec:	f77f af0c 	ble.w	8008b08 <__ieee754_pow+0x770>
 8008cf0:	4b2d      	ldr	r3, [pc, #180]	; (8008da8 <__ieee754_pow+0xa10>)
 8008cf2:	440b      	add	r3, r1
 8008cf4:	4303      	orrs	r3, r0
 8008cf6:	d00b      	beq.n	8008d10 <__ieee754_pow+0x978>
 8008cf8:	a325      	add	r3, pc, #148	; (adr r3, 8008d90 <__ieee754_pow+0x9f8>)
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d02:	f7f7 fc25 	bl	8000550 <__aeabi_dmul>
 8008d06:	a322      	add	r3, pc, #136	; (adr r3, 8008d90 <__ieee754_pow+0x9f8>)
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	f7ff bbdb 	b.w	80084c6 <__ieee754_pow+0x12e>
 8008d10:	4622      	mov	r2, r4
 8008d12:	462b      	mov	r3, r5
 8008d14:	f7f7 fa64 	bl	80001e0 <__aeabi_dsub>
 8008d18:	4642      	mov	r2, r8
 8008d1a:	464b      	mov	r3, r9
 8008d1c:	f7f7 fe9e 	bl	8000a5c <__aeabi_dcmpge>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	f43f aef1 	beq.w	8008b08 <__ieee754_pow+0x770>
 8008d26:	e7e7      	b.n	8008cf8 <__ieee754_pow+0x960>
 8008d28:	f04f 0a00 	mov.w	sl, #0
 8008d2c:	e718      	b.n	8008b60 <__ieee754_pow+0x7c8>
 8008d2e:	4621      	mov	r1, r4
 8008d30:	e7d4      	b.n	8008cdc <__ieee754_pow+0x944>
 8008d32:	2000      	movs	r0, #0
 8008d34:	491a      	ldr	r1, [pc, #104]	; (8008da0 <__ieee754_pow+0xa08>)
 8008d36:	f7ff bb8f 	b.w	8008458 <__ieee754_pow+0xc0>
 8008d3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d3e:	f7ff bb8b 	b.w	8008458 <__ieee754_pow+0xc0>
 8008d42:	4630      	mov	r0, r6
 8008d44:	4639      	mov	r1, r7
 8008d46:	f7ff bb87 	b.w	8008458 <__ieee754_pow+0xc0>
 8008d4a:	4693      	mov	fp, r2
 8008d4c:	f7ff bb98 	b.w	8008480 <__ieee754_pow+0xe8>
 8008d50:	00000000 	.word	0x00000000
 8008d54:	3fe62e43 	.word	0x3fe62e43
 8008d58:	fefa39ef 	.word	0xfefa39ef
 8008d5c:	3fe62e42 	.word	0x3fe62e42
 8008d60:	0ca86c39 	.word	0x0ca86c39
 8008d64:	be205c61 	.word	0xbe205c61
 8008d68:	72bea4d0 	.word	0x72bea4d0
 8008d6c:	3e663769 	.word	0x3e663769
 8008d70:	c5d26bf1 	.word	0xc5d26bf1
 8008d74:	3ebbbd41 	.word	0x3ebbbd41
 8008d78:	af25de2c 	.word	0xaf25de2c
 8008d7c:	3f11566a 	.word	0x3f11566a
 8008d80:	16bebd93 	.word	0x16bebd93
 8008d84:	3f66c16c 	.word	0x3f66c16c
 8008d88:	5555553e 	.word	0x5555553e
 8008d8c:	3fc55555 	.word	0x3fc55555
 8008d90:	c2f8f359 	.word	0xc2f8f359
 8008d94:	01a56e1f 	.word	0x01a56e1f
 8008d98:	3fe00000 	.word	0x3fe00000
 8008d9c:	000fffff 	.word	0x000fffff
 8008da0:	3ff00000 	.word	0x3ff00000
 8008da4:	4090cbff 	.word	0x4090cbff
 8008da8:	3f6f3400 	.word	0x3f6f3400
 8008dac:	652b82fe 	.word	0x652b82fe
 8008db0:	3c971547 	.word	0x3c971547

08008db4 <__ieee754_sqrt>:
 8008db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db8:	4955      	ldr	r1, [pc, #340]	; (8008f10 <__ieee754_sqrt+0x15c>)
 8008dba:	ec55 4b10 	vmov	r4, r5, d0
 8008dbe:	43a9      	bics	r1, r5
 8008dc0:	462b      	mov	r3, r5
 8008dc2:	462a      	mov	r2, r5
 8008dc4:	d112      	bne.n	8008dec <__ieee754_sqrt+0x38>
 8008dc6:	ee10 2a10 	vmov	r2, s0
 8008dca:	ee10 0a10 	vmov	r0, s0
 8008dce:	4629      	mov	r1, r5
 8008dd0:	f7f7 fbbe 	bl	8000550 <__aeabi_dmul>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4620      	mov	r0, r4
 8008dda:	4629      	mov	r1, r5
 8008ddc:	f7f7 fa02 	bl	80001e4 <__adddf3>
 8008de0:	4604      	mov	r4, r0
 8008de2:	460d      	mov	r5, r1
 8008de4:	ec45 4b10 	vmov	d0, r4, r5
 8008de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dec:	2d00      	cmp	r5, #0
 8008dee:	ee10 0a10 	vmov	r0, s0
 8008df2:	4621      	mov	r1, r4
 8008df4:	dc0f      	bgt.n	8008e16 <__ieee754_sqrt+0x62>
 8008df6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008dfa:	4330      	orrs	r0, r6
 8008dfc:	d0f2      	beq.n	8008de4 <__ieee754_sqrt+0x30>
 8008dfe:	b155      	cbz	r5, 8008e16 <__ieee754_sqrt+0x62>
 8008e00:	ee10 2a10 	vmov	r2, s0
 8008e04:	4620      	mov	r0, r4
 8008e06:	4629      	mov	r1, r5
 8008e08:	f7f7 f9ea 	bl	80001e0 <__aeabi_dsub>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	f7f7 fcc8 	bl	80007a4 <__aeabi_ddiv>
 8008e14:	e7e4      	b.n	8008de0 <__ieee754_sqrt+0x2c>
 8008e16:	151b      	asrs	r3, r3, #20
 8008e18:	d073      	beq.n	8008f02 <__ieee754_sqrt+0x14e>
 8008e1a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008e1e:	07dd      	lsls	r5, r3, #31
 8008e20:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008e24:	bf48      	it	mi
 8008e26:	0fc8      	lsrmi	r0, r1, #31
 8008e28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008e2c:	bf44      	itt	mi
 8008e2e:	0049      	lslmi	r1, r1, #1
 8008e30:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008e34:	2500      	movs	r5, #0
 8008e36:	1058      	asrs	r0, r3, #1
 8008e38:	0fcb      	lsrs	r3, r1, #31
 8008e3a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008e3e:	0049      	lsls	r1, r1, #1
 8008e40:	2316      	movs	r3, #22
 8008e42:	462c      	mov	r4, r5
 8008e44:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008e48:	19a7      	adds	r7, r4, r6
 8008e4a:	4297      	cmp	r7, r2
 8008e4c:	bfde      	ittt	le
 8008e4e:	19bc      	addle	r4, r7, r6
 8008e50:	1bd2      	suble	r2, r2, r7
 8008e52:	19ad      	addle	r5, r5, r6
 8008e54:	0fcf      	lsrs	r7, r1, #31
 8008e56:	3b01      	subs	r3, #1
 8008e58:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008e5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008e60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008e64:	d1f0      	bne.n	8008e48 <__ieee754_sqrt+0x94>
 8008e66:	f04f 0c20 	mov.w	ip, #32
 8008e6a:	469e      	mov	lr, r3
 8008e6c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008e70:	42a2      	cmp	r2, r4
 8008e72:	eb06 070e 	add.w	r7, r6, lr
 8008e76:	dc02      	bgt.n	8008e7e <__ieee754_sqrt+0xca>
 8008e78:	d112      	bne.n	8008ea0 <__ieee754_sqrt+0xec>
 8008e7a:	428f      	cmp	r7, r1
 8008e7c:	d810      	bhi.n	8008ea0 <__ieee754_sqrt+0xec>
 8008e7e:	2f00      	cmp	r7, #0
 8008e80:	eb07 0e06 	add.w	lr, r7, r6
 8008e84:	da42      	bge.n	8008f0c <__ieee754_sqrt+0x158>
 8008e86:	f1be 0f00 	cmp.w	lr, #0
 8008e8a:	db3f      	blt.n	8008f0c <__ieee754_sqrt+0x158>
 8008e8c:	f104 0801 	add.w	r8, r4, #1
 8008e90:	1b12      	subs	r2, r2, r4
 8008e92:	428f      	cmp	r7, r1
 8008e94:	bf88      	it	hi
 8008e96:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008e9a:	1bc9      	subs	r1, r1, r7
 8008e9c:	4433      	add	r3, r6
 8008e9e:	4644      	mov	r4, r8
 8008ea0:	0052      	lsls	r2, r2, #1
 8008ea2:	f1bc 0c01 	subs.w	ip, ip, #1
 8008ea6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008eaa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008eae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008eb2:	d1dd      	bne.n	8008e70 <__ieee754_sqrt+0xbc>
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	d006      	beq.n	8008ec6 <__ieee754_sqrt+0x112>
 8008eb8:	1c5c      	adds	r4, r3, #1
 8008eba:	bf13      	iteet	ne
 8008ebc:	3301      	addne	r3, #1
 8008ebe:	3501      	addeq	r5, #1
 8008ec0:	4663      	moveq	r3, ip
 8008ec2:	f023 0301 	bicne.w	r3, r3, #1
 8008ec6:	106a      	asrs	r2, r5, #1
 8008ec8:	085b      	lsrs	r3, r3, #1
 8008eca:	07e9      	lsls	r1, r5, #31
 8008ecc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008ed0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008ed4:	bf48      	it	mi
 8008ed6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008eda:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008ede:	461c      	mov	r4, r3
 8008ee0:	e780      	b.n	8008de4 <__ieee754_sqrt+0x30>
 8008ee2:	0aca      	lsrs	r2, r1, #11
 8008ee4:	3815      	subs	r0, #21
 8008ee6:	0549      	lsls	r1, r1, #21
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	d0fa      	beq.n	8008ee2 <__ieee754_sqrt+0x12e>
 8008eec:	02d6      	lsls	r6, r2, #11
 8008eee:	d50a      	bpl.n	8008f06 <__ieee754_sqrt+0x152>
 8008ef0:	f1c3 0420 	rsb	r4, r3, #32
 8008ef4:	fa21 f404 	lsr.w	r4, r1, r4
 8008ef8:	1e5d      	subs	r5, r3, #1
 8008efa:	4099      	lsls	r1, r3
 8008efc:	4322      	orrs	r2, r4
 8008efe:	1b43      	subs	r3, r0, r5
 8008f00:	e78b      	b.n	8008e1a <__ieee754_sqrt+0x66>
 8008f02:	4618      	mov	r0, r3
 8008f04:	e7f0      	b.n	8008ee8 <__ieee754_sqrt+0x134>
 8008f06:	0052      	lsls	r2, r2, #1
 8008f08:	3301      	adds	r3, #1
 8008f0a:	e7ef      	b.n	8008eec <__ieee754_sqrt+0x138>
 8008f0c:	46a0      	mov	r8, r4
 8008f0e:	e7bf      	b.n	8008e90 <__ieee754_sqrt+0xdc>
 8008f10:	7ff00000 	.word	0x7ff00000

08008f14 <fabs>:
 8008f14:	ec51 0b10 	vmov	r0, r1, d0
 8008f18:	ee10 2a10 	vmov	r2, s0
 8008f1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f20:	ec43 2b10 	vmov	d0, r2, r3
 8008f24:	4770      	bx	lr

08008f26 <finite>:
 8008f26:	ee10 3a90 	vmov	r3, s1
 8008f2a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008f2e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008f32:	0fc0      	lsrs	r0, r0, #31
 8008f34:	4770      	bx	lr

08008f36 <matherr>:
 8008f36:	2000      	movs	r0, #0
 8008f38:	4770      	bx	lr
 8008f3a:	0000      	movs	r0, r0
 8008f3c:	0000      	movs	r0, r0
	...

08008f40 <nan>:
 8008f40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008f48 <nan+0x8>
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	00000000 	.word	0x00000000
 8008f4c:	7ff80000 	.word	0x7ff80000

08008f50 <rint>:
 8008f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f52:	ec51 0b10 	vmov	r0, r1, d0
 8008f56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f5a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008f5e:	2e13      	cmp	r6, #19
 8008f60:	460b      	mov	r3, r1
 8008f62:	ee10 4a10 	vmov	r4, s0
 8008f66:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008f6a:	dc56      	bgt.n	800901a <rint+0xca>
 8008f6c:	2e00      	cmp	r6, #0
 8008f6e:	da2b      	bge.n	8008fc8 <rint+0x78>
 8008f70:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008f74:	4302      	orrs	r2, r0
 8008f76:	d023      	beq.n	8008fc0 <rint+0x70>
 8008f78:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008f7c:	4302      	orrs	r2, r0
 8008f7e:	4254      	negs	r4, r2
 8008f80:	4314      	orrs	r4, r2
 8008f82:	0c4b      	lsrs	r3, r1, #17
 8008f84:	0b24      	lsrs	r4, r4, #12
 8008f86:	045b      	lsls	r3, r3, #17
 8008f88:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008f8c:	ea44 0103 	orr.w	r1, r4, r3
 8008f90:	460b      	mov	r3, r1
 8008f92:	492f      	ldr	r1, [pc, #188]	; (8009050 <rint+0x100>)
 8008f94:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008f98:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f7f7 f91f 	bl	80001e4 <__adddf3>
 8008fa6:	e9cd 0100 	strd	r0, r1, [sp]
 8008faa:	463b      	mov	r3, r7
 8008fac:	4632      	mov	r2, r6
 8008fae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fb2:	f7f7 f915 	bl	80001e0 <__aeabi_dsub>
 8008fb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008fba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008fbe:	4639      	mov	r1, r7
 8008fc0:	ec41 0b10 	vmov	d0, r0, r1
 8008fc4:	b003      	add	sp, #12
 8008fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fc8:	4a22      	ldr	r2, [pc, #136]	; (8009054 <rint+0x104>)
 8008fca:	4132      	asrs	r2, r6
 8008fcc:	ea01 0702 	and.w	r7, r1, r2
 8008fd0:	4307      	orrs	r7, r0
 8008fd2:	d0f5      	beq.n	8008fc0 <rint+0x70>
 8008fd4:	0852      	lsrs	r2, r2, #1
 8008fd6:	4011      	ands	r1, r2
 8008fd8:	430c      	orrs	r4, r1
 8008fda:	d00b      	beq.n	8008ff4 <rint+0xa4>
 8008fdc:	ea23 0202 	bic.w	r2, r3, r2
 8008fe0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008fe4:	2e13      	cmp	r6, #19
 8008fe6:	fa43 f306 	asr.w	r3, r3, r6
 8008fea:	bf0c      	ite	eq
 8008fec:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008ff0:	2400      	movne	r4, #0
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	4916      	ldr	r1, [pc, #88]	; (8009050 <rint+0x100>)
 8008ff6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008ffa:	4622      	mov	r2, r4
 8008ffc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009000:	4620      	mov	r0, r4
 8009002:	4629      	mov	r1, r5
 8009004:	f7f7 f8ee 	bl	80001e4 <__adddf3>
 8009008:	e9cd 0100 	strd	r0, r1, [sp]
 800900c:	4622      	mov	r2, r4
 800900e:	462b      	mov	r3, r5
 8009010:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009014:	f7f7 f8e4 	bl	80001e0 <__aeabi_dsub>
 8009018:	e7d2      	b.n	8008fc0 <rint+0x70>
 800901a:	2e33      	cmp	r6, #51	; 0x33
 800901c:	dd07      	ble.n	800902e <rint+0xde>
 800901e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009022:	d1cd      	bne.n	8008fc0 <rint+0x70>
 8009024:	ee10 2a10 	vmov	r2, s0
 8009028:	f7f7 f8dc 	bl	80001e4 <__adddf3>
 800902c:	e7c8      	b.n	8008fc0 <rint+0x70>
 800902e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009032:	f04f 32ff 	mov.w	r2, #4294967295
 8009036:	40f2      	lsrs	r2, r6
 8009038:	4210      	tst	r0, r2
 800903a:	d0c1      	beq.n	8008fc0 <rint+0x70>
 800903c:	0852      	lsrs	r2, r2, #1
 800903e:	4210      	tst	r0, r2
 8009040:	bf1f      	itttt	ne
 8009042:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009046:	ea20 0202 	bicne.w	r2, r0, r2
 800904a:	4134      	asrne	r4, r6
 800904c:	4314      	orrne	r4, r2
 800904e:	e7d1      	b.n	8008ff4 <rint+0xa4>
 8009050:	08009438 	.word	0x08009438
 8009054:	000fffff 	.word	0x000fffff

08009058 <scalbn>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	ec55 4b10 	vmov	r4, r5, d0
 800905e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009062:	4606      	mov	r6, r0
 8009064:	462b      	mov	r3, r5
 8009066:	b9aa      	cbnz	r2, 8009094 <scalbn+0x3c>
 8009068:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800906c:	4323      	orrs	r3, r4
 800906e:	d03b      	beq.n	80090e8 <scalbn+0x90>
 8009070:	4b31      	ldr	r3, [pc, #196]	; (8009138 <scalbn+0xe0>)
 8009072:	4629      	mov	r1, r5
 8009074:	2200      	movs	r2, #0
 8009076:	ee10 0a10 	vmov	r0, s0
 800907a:	f7f7 fa69 	bl	8000550 <__aeabi_dmul>
 800907e:	4b2f      	ldr	r3, [pc, #188]	; (800913c <scalbn+0xe4>)
 8009080:	429e      	cmp	r6, r3
 8009082:	4604      	mov	r4, r0
 8009084:	460d      	mov	r5, r1
 8009086:	da12      	bge.n	80090ae <scalbn+0x56>
 8009088:	a327      	add	r3, pc, #156	; (adr r3, 8009128 <scalbn+0xd0>)
 800908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908e:	f7f7 fa5f 	bl	8000550 <__aeabi_dmul>
 8009092:	e009      	b.n	80090a8 <scalbn+0x50>
 8009094:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009098:	428a      	cmp	r2, r1
 800909a:	d10c      	bne.n	80090b6 <scalbn+0x5e>
 800909c:	ee10 2a10 	vmov	r2, s0
 80090a0:	4620      	mov	r0, r4
 80090a2:	4629      	mov	r1, r5
 80090a4:	f7f7 f89e 	bl	80001e4 <__adddf3>
 80090a8:	4604      	mov	r4, r0
 80090aa:	460d      	mov	r5, r1
 80090ac:	e01c      	b.n	80090e8 <scalbn+0x90>
 80090ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80090b2:	460b      	mov	r3, r1
 80090b4:	3a36      	subs	r2, #54	; 0x36
 80090b6:	4432      	add	r2, r6
 80090b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80090bc:	428a      	cmp	r2, r1
 80090be:	dd0b      	ble.n	80090d8 <scalbn+0x80>
 80090c0:	ec45 4b11 	vmov	d1, r4, r5
 80090c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009130 <scalbn+0xd8>
 80090c8:	f000 f83c 	bl	8009144 <copysign>
 80090cc:	a318      	add	r3, pc, #96	; (adr r3, 8009130 <scalbn+0xd8>)
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	ec51 0b10 	vmov	r0, r1, d0
 80090d6:	e7da      	b.n	800908e <scalbn+0x36>
 80090d8:	2a00      	cmp	r2, #0
 80090da:	dd08      	ble.n	80090ee <scalbn+0x96>
 80090dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80090e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80090e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80090e8:	ec45 4b10 	vmov	d0, r4, r5
 80090ec:	bd70      	pop	{r4, r5, r6, pc}
 80090ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80090f2:	da0d      	bge.n	8009110 <scalbn+0xb8>
 80090f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80090f8:	429e      	cmp	r6, r3
 80090fa:	ec45 4b11 	vmov	d1, r4, r5
 80090fe:	dce1      	bgt.n	80090c4 <scalbn+0x6c>
 8009100:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009128 <scalbn+0xd0>
 8009104:	f000 f81e 	bl	8009144 <copysign>
 8009108:	a307      	add	r3, pc, #28	; (adr r3, 8009128 <scalbn+0xd0>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	e7e0      	b.n	80090d2 <scalbn+0x7a>
 8009110:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009114:	3236      	adds	r2, #54	; 0x36
 8009116:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800911a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800911e:	4620      	mov	r0, r4
 8009120:	4629      	mov	r1, r5
 8009122:	2200      	movs	r2, #0
 8009124:	4b06      	ldr	r3, [pc, #24]	; (8009140 <scalbn+0xe8>)
 8009126:	e7b2      	b.n	800908e <scalbn+0x36>
 8009128:	c2f8f359 	.word	0xc2f8f359
 800912c:	01a56e1f 	.word	0x01a56e1f
 8009130:	8800759c 	.word	0x8800759c
 8009134:	7e37e43c 	.word	0x7e37e43c
 8009138:	43500000 	.word	0x43500000
 800913c:	ffff3cb0 	.word	0xffff3cb0
 8009140:	3c900000 	.word	0x3c900000

08009144 <copysign>:
 8009144:	ec51 0b10 	vmov	r0, r1, d0
 8009148:	ee11 0a90 	vmov	r0, s3
 800914c:	ee10 2a10 	vmov	r2, s0
 8009150:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009154:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009158:	ea41 0300 	orr.w	r3, r1, r0
 800915c:	ec43 2b10 	vmov	d0, r2, r3
 8009160:	4770      	bx	lr
	...

08009164 <_init>:
 8009164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009166:	bf00      	nop
 8009168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916a:	bc08      	pop	{r3}
 800916c:	469e      	mov	lr, r3
 800916e:	4770      	bx	lr

08009170 <_fini>:
 8009170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009172:	bf00      	nop
 8009174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009176:	bc08      	pop	{r3}
 8009178:	469e      	mov	lr, r3
 800917a:	4770      	bx	lr
