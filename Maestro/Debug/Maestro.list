
Maestro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b74c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800b8e0  0800b8e0  0001b8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbe8  0800bbe8  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbe8  0800bbe8  0001bbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbf0  0800bbf0  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbf0  0800bbf0  0001bbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbf4  0800bbf4  0001bbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800bbf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019a0  20000358  0800bf50  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20001cf8  0800bf50  00021cf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016274  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033c9  00000000  00000000  000365fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de8  00000000  00000000  000399c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  0003a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023fcb  00000000  00000000  0003b400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f38f  00000000  00000000  0005f3cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5a95  00000000  00000000  0006e75a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001341ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004330  00000000  00000000  0013426c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8c4 	.word	0x0800b8c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0800b8c4 	.word	0x0800b8c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b47      	ldr	r3, [pc, #284]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a46      	ldr	r2, [pc, #280]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b44      	ldr	r3, [pc, #272]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b40      	ldr	r3, [pc, #256]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a3f      	ldr	r2, [pc, #252]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b39      	ldr	r3, [pc, #228]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a38      	ldr	r2, [pc, #224]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b36      	ldr	r3, [pc, #216]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b32      	ldr	r3, [pc, #200]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a31      	ldr	r2, [pc, #196]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a2a      	ldr	r2, [pc, #168]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b28      	ldr	r3, [pc, #160]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Slave_1_GPIO_Port, Slave_1_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2140      	movs	r1, #64	; 0x40
 8000f8e:	4825      	ldr	r0, [pc, #148]	; (8001024 <MX_GPIO_Init+0x13c>)
 8000f90:	f001 fb76 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Slave_2_GPIO_Port, Slave_2_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9a:	4822      	ldr	r0, [pc, #136]	; (8001024 <MX_GPIO_Init+0x13c>)
 8000f9c:	f001 fb70 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Led_Normal_Pin|Led_Homing_Pin|Led_Activado_Pin|Led_Error_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	21d8      	movs	r1, #216	; 0xd8
 8000fa4:	4820      	ldr	r0, [pc, #128]	; (8001028 <MX_GPIO_Init+0x140>)
 8000fa6:	f001 fb6b 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Desactivado_GPIO_Port, Led_Desactivado_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2120      	movs	r1, #32
 8000fae:	481e      	ldr	r0, [pc, #120]	; (8001028 <MX_GPIO_Init+0x140>)
 8000fb0:	f001 fb66 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Slave_1_Pin|Slave_2_Pin;
 8000fb4:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4815      	ldr	r0, [pc, #84]	; (8001024 <MX_GPIO_Init+0x13c>)
 8000fce:	f001 f9bd 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Int_1_Pin|Int_2_Pin;
 8000fd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_GPIO_Init+0x144>)
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480f      	ldr	r0, [pc, #60]	; (8001024 <MX_GPIO_Init+0x13c>)
 8000fe8:	f001 f9b0 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = Led_Normal_Pin|Led_Homing_Pin|Led_Desactivado_Pin|Led_Activado_Pin 
 8000fec:	23f8      	movs	r3, #248	; 0xf8
 8000fee:	617b      	str	r3, [r7, #20]
                          |Led_Error_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4809      	ldr	r0, [pc, #36]	; (8001028 <MX_GPIO_Init+0x140>)
 8001004:	f001 f9a2 	bl	800234c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2017      	movs	r0, #23
 800100e:	f001 f944 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001012:	2017      	movs	r0, #23
 8001014:	f001 f95d 	bl	80022d2 <HAL_NVIC_EnableIRQ>

}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	40020800 	.word	0x40020800
 8001028:	40020c00 	.word	0x40020c00
 800102c:	10110000 	.word	0x10110000

08001030 <identificador>:
 *
 * Created: 10/12/2019 06:15:29 p.m.
 *  Author: Rodri
 */
#include "identificador.h"
int identificador(char *str, double *instrucciones, int cont) {
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b0c7      	sub	sp, #284	; 0x11c
 8001034:	af00      	add	r7, sp, #0
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	6018      	str	r0, [r3, #0]
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	6019      	str	r1, [r3, #0]
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	601a      	str	r2, [r3, #0]
	char tmp[50] = { 0 };
 8001046:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800104a:	2232      	movs	r2, #50	; 0x32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f007 f964 	bl	800831c <memset>
	double vec[20];
	char *puntero;
	int i = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	int j = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	int k = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	int l = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	int cont1 = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	double numero;
	while (i < cont) {
 8001072:	e2b0      	b.n	80015d6 <identificador+0x5a6>
		switch (str[i]) {
 8001074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001078:	f107 020c 	add.w	r2, r7, #12
 800107c:	6812      	ldr	r2, [r2, #0]
 800107e:	4413      	add	r3, r2
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3b41      	subs	r3, #65	; 0x41
 8001084:	2b31      	cmp	r3, #49	; 0x31
 8001086:	f200 82a1 	bhi.w	80015cc <identificador+0x59c>
 800108a:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <identificador+0x60>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080011b1 	.word	0x080011b1
 8001094:	080015cd 	.word	0x080015cd
 8001098:	080012b5 	.word	0x080012b5
 800109c:	08001159 	.word	0x08001159
 80010a0:	080015cd 	.word	0x080015cd
 80010a4:	080015cd 	.word	0x080015cd
 80010a8:	080015cd 	.word	0x080015cd
 80010ac:	08001207 	.word	0x08001207
 80010b0:	08001439 	.word	0x08001439
 80010b4:	080015cd 	.word	0x080015cd
 80010b8:	080015cd 	.word	0x080015cd
 80010bc:	080015cd 	.word	0x080015cd
 80010c0:	080015cd 	.word	0x080015cd
 80010c4:	080015cd 	.word	0x080015cd
 80010c8:	080015cd 	.word	0x080015cd
 80010cc:	080015cd 	.word	0x080015cd
 80010d0:	080015cd 	.word	0x080015cd
 80010d4:	0800125f 	.word	0x0800125f
 80010d8:	080015cd 	.word	0x080015cd
 80010dc:	080015cd 	.word	0x080015cd
 80010e0:	080015cd 	.word	0x080015cd
 80010e4:	080015cd 	.word	0x080015cd
 80010e8:	080015cd 	.word	0x080015cd
 80010ec:	080015cd 	.word	0x080015cd
 80010f0:	080015cd 	.word	0x080015cd
 80010f4:	080015cd 	.word	0x080015cd
 80010f8:	080015cd 	.word	0x080015cd
 80010fc:	080015cd 	.word	0x080015cd
 8001100:	080015cd 	.word	0x080015cd
 8001104:	080015cd 	.word	0x080015cd
 8001108:	080015cd 	.word	0x080015cd
 800110c:	080015cd 	.word	0x080015cd
 8001110:	080011b1 	.word	0x080011b1
 8001114:	080015cd 	.word	0x080015cd
 8001118:	080012b5 	.word	0x080012b5
 800111c:	08001159 	.word	0x08001159
 8001120:	080015cd 	.word	0x080015cd
 8001124:	080015cd 	.word	0x080015cd
 8001128:	080015cd 	.word	0x080015cd
 800112c:	08001207 	.word	0x08001207
 8001130:	08001439 	.word	0x08001439
 8001134:	080015cd 	.word	0x080015cd
 8001138:	080015cd 	.word	0x080015cd
 800113c:	080015cd 	.word	0x080015cd
 8001140:	080015cd 	.word	0x080015cd
 8001144:	080015cd 	.word	0x080015cd
 8001148:	080015cd 	.word	0x080015cd
 800114c:	080015cd 	.word	0x080015cd
 8001150:	080015cd 	.word	0x080015cd
 8001154:	0800125f 	.word	0x0800125f
		case 'd':
		case 'D':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 8001158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800115c:	3301      	adds	r3, #1
 800115e:	f107 020c 	add.w	r2, r7, #12
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b2d      	cmp	r3, #45	; 0x2d
 800116a:	d009      	beq.n	8001180 <identificador+0x150>
 800116c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001170:	3301      	adds	r3, #1
 8001172:	f107 020c 	add.w	r2, r7, #12
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b3a      	cmp	r3, #58	; 0x3a
 800117e:	d111      	bne.n	80011a4 <identificador+0x174>
				instrucciones[j] = Modo_desactivado;
 8001180:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	f107 0208 	add.w	r2, r7, #8
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	441a      	add	r2, r3
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	f04f 0400 	mov.w	r4, #0
 8001196:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 800119a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800119e:	3301      	adds	r3, #1
 80011a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			}
			i++;
 80011a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011a8:	3301      	adds	r3, #1
 80011aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			break;
 80011ae:	e212      	b.n	80015d6 <identificador+0x5a6>
		case 'a':
		case 'A':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 80011b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011b4:	3301      	adds	r3, #1
 80011b6:	f107 020c 	add.w	r2, r7, #12
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b2d      	cmp	r3, #45	; 0x2d
 80011c2:	d009      	beq.n	80011d8 <identificador+0x1a8>
 80011c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011c8:	3301      	adds	r3, #1
 80011ca:	f107 020c 	add.w	r2, r7, #12
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b3a      	cmp	r3, #58	; 0x3a
 80011d6:	d110      	bne.n	80011fa <identificador+0x1ca>
				instrucciones[j] = Modo_activado;
 80011d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	f107 0208 	add.w	r2, r7, #8
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	441a      	add	r2, r3
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	4cc6      	ldr	r4, [pc, #792]	; (8001504 <identificador+0x4d4>)
 80011ec:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 80011f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011f4:	3301      	adds	r3, #1
 80011f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			}
			i++;
 80011fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011fe:	3301      	adds	r3, #1
 8001200:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			break;
 8001204:	e1e7      	b.n	80015d6 <identificador+0x5a6>
		case 'h':
		case 'H':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 8001206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800120a:	3301      	adds	r3, #1
 800120c:	f107 020c 	add.w	r2, r7, #12
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b2d      	cmp	r3, #45	; 0x2d
 8001218:	d009      	beq.n	800122e <identificador+0x1fe>
 800121a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800121e:	3301      	adds	r3, #1
 8001220:	f107 020c 	add.w	r2, r7, #12
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b3a      	cmp	r3, #58	; 0x3a
 800122c:	d111      	bne.n	8001252 <identificador+0x222>
				instrucciones[j] = Modo_homing;
 800122e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	f107 0208 	add.w	r2, r7, #8
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	441a      	add	r2, r3
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001244:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 8001248:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800124c:	3301      	adds	r3, #1
 800124e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			}
			i++;
 8001252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001256:	3301      	adds	r3, #1
 8001258:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			break;
 800125c:	e1bb      	b.n	80015d6 <identificador+0x5a6>
		case 'r':
		case 'R':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 800125e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001262:	3301      	adds	r3, #1
 8001264:	f107 020c 	add.w	r2, r7, #12
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	4413      	add	r3, r2
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b2d      	cmp	r3, #45	; 0x2d
 8001270:	d009      	beq.n	8001286 <identificador+0x256>
 8001272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001276:	3301      	adds	r3, #1
 8001278:	f107 020c 	add.w	r2, r7, #12
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b3a      	cmp	r3, #58	; 0x3a
 8001284:	d110      	bne.n	80012a8 <identificador+0x278>
				instrucciones[j] = Resumen;
 8001286:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	f107 0208 	add.w	r2, r7, #8
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	441a      	add	r2, r3
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	4c9b      	ldr	r4, [pc, #620]	; (8001508 <identificador+0x4d8>)
 800129a:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 800129e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012a2:	3301      	adds	r3, #1
 80012a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			}
			i++;
 80012a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012ac:	3301      	adds	r3, #1
 80012ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			break;
 80012b2:	e190      	b.n	80015d6 <identificador+0x5a6>
		case 'c':
		case 'C':
			i++;
 80012b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012b8:	3301      	adds	r3, #1
 80012ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			while ((str[i] != '-') && (i < cont)) {
 80012be:	e06e      	b.n	800139e <identificador+0x36e>
				k = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				if (str[i] == '_') {
 80012c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012ca:	f107 020c 	add.w	r2, r7, #12
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b5f      	cmp	r3, #95	; 0x5f
 80012d6:	d11d      	bne.n	8001314 <identificador+0x2e4>
					i++;
 80012d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012dc:	3301      	adds	r3, #1
 80012de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
				}
				while ((str[i] != '_') && (i < cont) && (str[i] != '-')) {
 80012e2:	e017      	b.n	8001314 <identificador+0x2e4>
					tmp[k] = str[i];
 80012e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012e8:	f107 020c 	add.w	r2, r7, #12
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	7819      	ldrb	r1, [r3, #0]
 80012f2:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80012f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012fa:	4413      	add	r3, r2
 80012fc:	460a      	mov	r2, r1
 80012fe:	701a      	strb	r2, [r3, #0]
					k++;
 8001300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001304:	3301      	adds	r3, #1
 8001306:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
					i++;
 800130a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800130e:	3301      	adds	r3, #1
 8001310:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
				while ((str[i] != '_') && (i < cont) && (str[i] != '-')) {
 8001314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001318:	f107 020c 	add.w	r2, r7, #12
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b5f      	cmp	r3, #95	; 0x5f
 8001324:	d00e      	beq.n	8001344 <identificador+0x314>
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	da08      	bge.n	8001344 <identificador+0x314>
 8001332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001336:	f107 020c 	add.w	r2, r7, #12
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b2d      	cmp	r3, #45	; 0x2d
 8001342:	d1cf      	bne.n	80012e4 <identificador+0x2b4>
				}
				numero = strtod(tmp, &puntero);
 8001344:	f107 0214 	add.w	r2, r7, #20
 8001348:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f008 fb46 	bl	80099e0 <strtod>
 8001354:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
				vec[cont1] = numero;
 8001358:	f107 0218 	add.w	r2, r7, #24
 800135c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	441a      	add	r2, r3
 8001364:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8001368:	e9c2 3400 	strd	r3, r4, [r2]
				cont1++;
 800136c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001370:	3301      	adds	r3, #1
 8001372:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
				for (int m = 0; m < 50; m++) {
 8001376:	2300      	movs	r3, #0
 8001378:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800137c:	e00b      	b.n	8001396 <identificador+0x366>
					tmp[m] = 0;
 800137e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001382:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001386:	4413      	add	r3, r2
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
				for (int m = 0; m < 50; m++) {
 800138c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001390:	3301      	adds	r3, #1
 8001392:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001396:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800139a:	2b31      	cmp	r3, #49	; 0x31
 800139c:	ddef      	ble.n	800137e <identificador+0x34e>
			while ((str[i] != '-') && (i < cont)) {
 800139e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013a2:	f107 020c 	add.w	r2, r7, #12
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b2d      	cmp	r3, #45	; 0x2d
 80013ae:	d005      	beq.n	80013bc <identificador+0x38c>
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	db81      	blt.n	80012c0 <identificador+0x290>
				}
			}
			if (cont1 == 5) {
 80013bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80013c0:	2b05      	cmp	r3, #5
 80013c2:	d135      	bne.n	8001430 <identificador+0x400>
				instrucciones[j] = Cin_dir;
 80013c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	f107 0208 	add.w	r2, r7, #8
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	441a      	add	r2, r3
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	4c4d      	ldr	r4, [pc, #308]	; (800150c <identificador+0x4dc>)
 80013d8:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 80013dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013e0:	3301      	adds	r3, #1
 80013e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				for (l = 0; l < cont1; l++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80013ec:	e01a      	b.n	8001424 <identificador+0x3f4>
					instrucciones[j] = vec[l];
 80013ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	f107 0208 	add.w	r2, r7, #8
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	441a      	add	r2, r3
 80013fc:	f107 0118 	add.w	r1, r7, #24
 8001400:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	440b      	add	r3, r1
 8001408:	e9d3 3400 	ldrd	r3, r4, [r3]
 800140c:	e9c2 3400 	strd	r3, r4, [r2]
					j++;
 8001410:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001414:	3301      	adds	r3, #1
 8001416:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				for (l = 0; l < cont1; l++) {
 800141a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800141e:	3301      	adds	r3, #1
 8001420:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001424:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800142c:	429a      	cmp	r2, r3
 800142e:	dbde      	blt.n	80013ee <identificador+0x3be>
				}
			}
			cont1 = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			break;
 8001436:	e0ce      	b.n	80015d6 <identificador+0x5a6>
		case 'i':
		case 'I':
			i++;
 8001438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800143c:	3301      	adds	r3, #1
 800143e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			while ((str[i] != '-') && (i < cont)) {
 8001442:	e075      	b.n	8001530 <identificador+0x500>
				k = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				if (str[i] == '_') {
 800144a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800144e:	f107 020c 	add.w	r2, r7, #12
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b5f      	cmp	r3, #95	; 0x5f
 800145a:	d11d      	bne.n	8001498 <identificador+0x468>
					i++;
 800145c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001460:	3301      	adds	r3, #1
 8001462:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
				}
				while ((str[i] != '_') && (i < cont) && (str[i] != '-')) {
 8001466:	e017      	b.n	8001498 <identificador+0x468>
					tmp[k] = str[i];
 8001468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800146c:	f107 020c 	add.w	r2, r7, #12
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	4413      	add	r3, r2
 8001474:	7819      	ldrb	r1, [r3, #0]
 8001476:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800147a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800147e:	4413      	add	r3, r2
 8001480:	460a      	mov	r2, r1
 8001482:	701a      	strb	r2, [r3, #0]
					k++;
 8001484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001488:	3301      	adds	r3, #1
 800148a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
					i++;
 800148e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001492:	3301      	adds	r3, #1
 8001494:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
				while ((str[i] != '_') && (i < cont) && (str[i] != '-')) {
 8001498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800149c:	f107 020c 	add.w	r2, r7, #12
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b5f      	cmp	r3, #95	; 0x5f
 80014a8:	d00e      	beq.n	80014c8 <identificador+0x498>
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	da08      	bge.n	80014c8 <identificador+0x498>
 80014b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014ba:	f107 020c 	add.w	r2, r7, #12
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	4413      	add	r3, r2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b2d      	cmp	r3, #45	; 0x2d
 80014c6:	d1cf      	bne.n	8001468 <identificador+0x438>
				}
				numero = strtod(tmp, &puntero);
 80014c8:	f107 0214 	add.w	r2, r7, #20
 80014cc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f008 fa84 	bl	80099e0 <strtod>
 80014d8:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
				vec[cont1] = numero;
 80014dc:	f107 0218 	add.w	r2, r7, #24
 80014e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	441a      	add	r2, r3
 80014e8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80014ec:	e9c2 3400 	strd	r3, r4, [r2]
				cont1++;
 80014f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014f4:	3301      	adds	r3, #1
 80014f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
				for (int m = 0; m < 50; m++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001500:	e012      	b.n	8001528 <identificador+0x4f8>
 8001502:	bf00      	nop
 8001504:	3ff00000 	.word	0x3ff00000
 8001508:	40140000 	.word	0x40140000
 800150c:	40080000 	.word	0x40080000
					tmp[m] = 0;
 8001510:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001518:	4413      	add	r3, r2
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
				for (int m = 0; m < 50; m++) {
 800151e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001522:	3301      	adds	r3, #1
 8001524:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800152c:	2b31      	cmp	r3, #49	; 0x31
 800152e:	ddef      	ble.n	8001510 <identificador+0x4e0>
			while ((str[i] != '-') && (i < cont)) {
 8001530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001534:	f107 020c 	add.w	r2, r7, #12
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	4413      	add	r3, r2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b2d      	cmp	r3, #45	; 0x2d
 8001540:	d006      	beq.n	8001550 <identificador+0x520>
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	f6ff af7a 	blt.w	8001444 <identificador+0x414>
				}
			}
			if (cont1 == 5) {
 8001550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001554:	2b05      	cmp	r3, #5
 8001556:	d135      	bne.n	80015c4 <identificador+0x594>
				instrucciones[j] = Cin_inv;
 8001558:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	f107 0208 	add.w	r2, r7, #8
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	441a      	add	r2, r3
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	4c22      	ldr	r4, [pc, #136]	; (80015f4 <identificador+0x5c4>)
 800156c:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 8001570:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001574:	3301      	adds	r3, #1
 8001576:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				for (l = 0; l < cont1; l++) {
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001580:	e01a      	b.n	80015b8 <identificador+0x588>
					instrucciones[j] = vec[l];
 8001582:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	f107 0208 	add.w	r2, r7, #8
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	441a      	add	r2, r3
 8001590:	f107 0118 	add.w	r1, r7, #24
 8001594:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015a0:	e9c2 3400 	strd	r3, r4, [r2]
					j++;
 80015a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80015a8:	3301      	adds	r3, #1
 80015aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				for (l = 0; l < cont1; l++) {
 80015ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015b2:	3301      	adds	r3, #1
 80015b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80015b8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80015bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbde      	blt.n	8001582 <identificador+0x552>
				}
			}
			cont1 = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			break;
 80015ca:	e004      	b.n	80015d6 <identificador+0x5a6>
		default:
			i++;
 80015cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015d0:	3301      	adds	r3, #1
 80015d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	while (i < cont) {
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	f6ff ad48 	blt.w	8001074 <identificador+0x44>
		}
	}
	return j;
 80015e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40100000 	.word	0x40100000

080015f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b0f3      	sub	sp, #460	; 0x1cc
 80015fc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	int cant = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	double instrucciones[50];
	//Flags
	int flag_activacion = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	int flag_homing = 0,flag_cambio=0;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	//Variables enum
	enum Estado estado = Desactivado;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161c:	f000 fcce 	bl	8001fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001620:	f000 fa60 	bl	8001ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001624:	f7ff fc60 	bl	8000ee8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001628:	f006 f902 	bl	8007830 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 800162c:	f000 fb3e 	bl	8001cac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	SPI_Transmit_1(1);
 8001630:	2001      	movs	r0, #1
 8001632:	f000 fac1 	bl	8001bb8 <SPI_Transmit_1>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//Generar string
		//Generar comandos
		if (flag_mensaje_completo == 0) {
 8001636:	4bd6      	ldr	r3, [pc, #856]	; (8001990 <main+0x398>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10f      	bne.n	800165e <main+0x66>
			cant = identificador(str, instrucciones, contador_instrucciones);
 800163e:	4bd5      	ldr	r3, [pc, #852]	; (8001994 <main+0x39c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	4619      	mov	r1, r3
 8001648:	48d3      	ldr	r0, [pc, #844]	; (8001998 <main+0x3a0>)
 800164a:	f7ff fcf1 	bl	8001030 <identificador>
 800164e:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
			flag_mensaje_completo = 1;
 8001652:	4bcf      	ldr	r3, [pc, #828]	; (8001990 <main+0x398>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]
			contador_instrucciones=0;
 8001658:	4bce      	ldr	r3, [pc, #824]	; (8001994 <main+0x39c>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
		}
		//Identificar comandos
		if (flag_mensaje_completo == 1) {
 800165e:	4bcc      	ldr	r3, [pc, #816]	; (8001990 <main+0x398>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	f040 8159 	bne.w	800191a <main+0x322>
			for (int i = 0; i < cant; i++) {
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800166e:	e147      	b.n	8001900 <main+0x308>
				comando = (int) instrucciones[i];
 8001670:	f107 0208 	add.w	r2, r7, #8
 8001674:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001680:	4618      	mov	r0, r3
 8001682:	4621      	mov	r1, r4
 8001684:	f7ff fa68 	bl	8000b58 <__aeabi_d2iz>
 8001688:	4603      	mov	r3, r0
 800168a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
				switch (comando) {
 800168e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001692:	2b05      	cmp	r3, #5
 8001694:	f200 812c 	bhi.w	80018f0 <main+0x2f8>
 8001698:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <main+0xa8>)
 800169a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169e:	bf00      	nop
 80016a0:	080016b9 	.word	0x080016b9
 80016a4:	0800170d 	.word	0x0800170d
 80016a8:	0800175b 	.word	0x0800175b
 80016ac:	080017a9 	.word	0x080017a9
 80016b0:	080018db 	.word	0x080018db
 80016b4:	080018f1 	.word	0x080018f1
				case Modo_desactivado:
					if (flag_activacion) {
 80016b8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 8112 	beq.w	80018e6 <main+0x2ee>
						SPI_Transmit_1('D');
 80016c2:	2044      	movs	r0, #68	; 0x44
 80016c4:	f000 fa78 	bl	8001bb8 <SPI_Transmit_1>
						SPI_Transmit_1('-');
 80016c8:	202d      	movs	r0, #45	; 0x2d
 80016ca:	f000 fa75 	bl	8001bb8 <SPI_Transmit_1>
						SPI_Transmit_1('P');
 80016ce:	2050      	movs	r0, #80	; 0x50
 80016d0:	f000 fa72 	bl	8001bb8 <SPI_Transmit_1>
						SPI_Transmit_1(':');
 80016d4:	203a      	movs	r0, #58	; 0x3a
 80016d6:	f000 fa6f 	bl	8001bb8 <SPI_Transmit_1>
						Mi_Timer();
 80016da:	f000 fa8b 	bl	8001bf4 <Mi_Timer>
						if (pRxData == 'D') {
 80016de:	4baf      	ldr	r3, [pc, #700]	; (800199c <main+0x3a4>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b44      	cmp	r3, #68	; 0x44
 80016e4:	d10c      	bne.n	8001700 <main+0x108>
							estado = Desactivado;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
							flag_activacion = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
							flag_homing = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
							flag_cambio=1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

						} else {
							i--;
						}
					}
					break;
 80016fe:	e0f2      	b.n	80018e6 <main+0x2ee>
							i--;
 8001700:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001704:	3b01      	subs	r3, #1
 8001706:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					break;
 800170a:	e0ec      	b.n	80018e6 <main+0x2ee>
				case Modo_activado:
					if (!flag_activacion) {
 800170c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001710:	2b00      	cmp	r3, #0
 8001712:	f040 80ea 	bne.w	80018ea <main+0x2f2>
						SPI_Transmit_1('A');
 8001716:	2041      	movs	r0, #65	; 0x41
 8001718:	f000 fa4e 	bl	8001bb8 <SPI_Transmit_1>
						SPI_Transmit_1('-');
 800171c:	202d      	movs	r0, #45	; 0x2d
 800171e:	f000 fa4b 	bl	8001bb8 <SPI_Transmit_1>
						SPI_Transmit_1('P');
 8001722:	2050      	movs	r0, #80	; 0x50
 8001724:	f000 fa48 	bl	8001bb8 <SPI_Transmit_1>
						SPI_Transmit_1(':');
 8001728:	203a      	movs	r0, #58	; 0x3a
 800172a:	f000 fa45 	bl	8001bb8 <SPI_Transmit_1>
						Mi_Timer();
 800172e:	f000 fa61 	bl	8001bf4 <Mi_Timer>
						if (pRxData == 'A') {
 8001732:	4b9a      	ldr	r3, [pc, #616]	; (800199c <main+0x3a4>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b41      	cmp	r3, #65	; 0x41
 8001738:	d109      	bne.n	800174e <main+0x156>
							estado = Activado;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
							flag_activacion = 1;
 8001740:	2301      	movs	r3, #1
 8001742:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
							flag_cambio=1;
 8001746:	2301      	movs	r3, #1
 8001748:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
						} else {
							i--;
						}
					}
					break;
 800174c:	e0cd      	b.n	80018ea <main+0x2f2>
							i--;
 800174e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001752:	3b01      	subs	r3, #1
 8001754:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					break;
 8001758:	e0c7      	b.n	80018ea <main+0x2f2>
				case Modo_homing:
					if (flag_activacion) {
 800175a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80c5 	beq.w	80018ee <main+0x2f6>
						//Prender un LED
						//Mandar consigna de homing
						SPI_Transmit_1('H');
 8001764:	2048      	movs	r0, #72	; 0x48
 8001766:	f000 fa27 	bl	8001bb8 <SPI_Transmit_1>
						SPI_Transmit_1('-');
 800176a:	202d      	movs	r0, #45	; 0x2d
 800176c:	f000 fa24 	bl	8001bb8 <SPI_Transmit_1>
						//Verificar consigna
						SPI_Transmit_1('P');
 8001770:	2050      	movs	r0, #80	; 0x50
 8001772:	f000 fa21 	bl	8001bb8 <SPI_Transmit_1>
						SPI_Transmit_1(':');
 8001776:	203a      	movs	r0, #58	; 0x3a
 8001778:	f000 fa1e 	bl	8001bb8 <SPI_Transmit_1>
						Mi_Timer();
 800177c:	f000 fa3a 	bl	8001bf4 <Mi_Timer>
						if (pRxData == 'H') {
 8001780:	4b86      	ldr	r3, [pc, #536]	; (800199c <main+0x3a4>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b48      	cmp	r3, #72	; 0x48
 8001786:	d109      	bne.n	800179c <main+0x1a4>
							estado = Modo_Homing;
 8001788:	2302      	movs	r3, #2
 800178a:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
							flag_homing = 1;
 800178e:	2301      	movs	r3, #1
 8001790:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
							flag_cambio=1;
 8001794:	2301      	movs	r3, #1
 8001796:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
						} else {
							i--;
						}
					}
					break;
 800179a:	e0a8      	b.n	80018ee <main+0x2f6>
							i--;
 800179c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017a0:	3b01      	subs	r3, #1
 80017a2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					break;
 80017a6:	e0a2      	b.n	80018ee <main+0x2f6>
				case Cin_dir:
					if (flag_activacion && flag_homing) {
 80017a8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 808e 	beq.w	80018ce <main+0x2d6>
 80017b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8089 	beq.w	80018ce <main+0x2d6>
						int k = 0, l = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						static char string[40];
						char s[7];
						string[0] = 'I';
 80017c8:	4b75      	ldr	r3, [pc, #468]	; (80019a0 <main+0x3a8>)
 80017ca:	2249      	movs	r2, #73	; 0x49
 80017cc:	701a      	strb	r2, [r3, #0]
						string[1] = '_';
 80017ce:	4b74      	ldr	r3, [pc, #464]	; (80019a0 <main+0x3a8>)
 80017d0:	225f      	movs	r2, #95	; 0x5f
 80017d2:	705a      	strb	r2, [r3, #1]
						for (k = i; k < (5 + i); k++) {
 80017d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017d8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017dc:	e03d      	b.n	800185a <main+0x262>
							snprintf(s, 7, "%lf", instrucciones[k+1]);
 80017de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017e2:	3301      	adds	r3, #1
 80017e4:	f107 0208 	add.w	r2, r7, #8
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017f0:	4638      	mov	r0, r7
 80017f2:	e9cd 3400 	strd	r3, r4, [sp]
 80017f6:	4a6b      	ldr	r2, [pc, #428]	; (80019a4 <main+0x3ac>)
 80017f8:	2107      	movs	r1, #7
 80017fa:	f007 faab 	bl	8008d54 <sniprintf>
							for (l = 0; l < 6; l++) {
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001804:	e014      	b.n	8001830 <main+0x238>
								string[l + k * 7 + 2] = s[l];
 8001806:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	1a9a      	subs	r2, r3, r2
 8001810:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001814:	4413      	add	r3, r2
 8001816:	3302      	adds	r3, #2
 8001818:	4639      	mov	r1, r7
 800181a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800181e:	440a      	add	r2, r1
 8001820:	7811      	ldrb	r1, [r2, #0]
 8001822:	4a5f      	ldr	r2, [pc, #380]	; (80019a0 <main+0x3a8>)
 8001824:	54d1      	strb	r1, [r2, r3]
							for (l = 0; l < 6; l++) {
 8001826:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800182a:	3301      	adds	r3, #1
 800182c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001830:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001834:	2b05      	cmp	r3, #5
 8001836:	dde6      	ble.n	8001806 <main+0x20e>
							}
							string[l + k * 7 + 2] = '_';
 8001838:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800183c:	4613      	mov	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	1a9a      	subs	r2, r3, r2
 8001842:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001846:	4413      	add	r3, r2
 8001848:	3302      	adds	r3, #2
 800184a:	4a55      	ldr	r2, [pc, #340]	; (80019a0 <main+0x3a8>)
 800184c:	215f      	movs	r1, #95	; 0x5f
 800184e:	54d1      	strb	r1, [r2, r3]
						for (k = i; k < (5 + i); k++) {
 8001850:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001854:	3301      	adds	r3, #1
 8001856:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800185a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800185e:	3305      	adds	r3, #5
 8001860:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001864:	429a      	cmp	r2, r3
 8001866:	dbba      	blt.n	80017de <main+0x1e6>
						}
						string[36] = '-';
 8001868:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <main+0x3a8>)
 800186a:	222d      	movs	r2, #45	; 0x2d
 800186c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						string[37] = 'P';
 8001870:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <main+0x3a8>)
 8001872:	2250      	movs	r2, #80	; 0x50
 8001874:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
						string[38] = ':';
 8001878:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <main+0x3a8>)
 800187a:	223a      	movs	r2, #58	; 0x3a
 800187c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
						//Mandar consigna de cinemática directa
						for (k = 0; k < 39; k++) {
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001886:	e00c      	b.n	80018a2 <main+0x2aa>
							SPI_Transmit_1(string[k]);
 8001888:	4a45      	ldr	r2, [pc, #276]	; (80019a0 <main+0x3a8>)
 800188a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f990 	bl	8001bb8 <SPI_Transmit_1>
						for (k = 0; k < 39; k++) {
 8001898:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800189c:	3301      	adds	r3, #1
 800189e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80018a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80018a6:	2b26      	cmp	r3, #38	; 0x26
 80018a8:	ddee      	ble.n	8001888 <main+0x290>
						}
						Mi_Timer();
 80018aa:	f000 f9a3 	bl	8001bf4 <Mi_Timer>
						//Verificar que se logre
						if (pRxData == 'N') {
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <main+0x3a4>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b4e      	cmp	r3, #78	; 0x4e
 80018b4:	d106      	bne.n	80018c4 <main+0x2cc>
							estado = Modo_Normal;
 80018b6:	2303      	movs	r3, #3
 80018b8:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
							flag_cambio=1;
 80018bc:	2301      	movs	r3, #1
 80018be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80018c2:	e004      	b.n	80018ce <main+0x2d6>
						} else {
							i--;
 80018c4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018c8:	3b01      	subs	r3, #1
 80018ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
						}
					}
					i += 5;
 80018ce:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018d2:	3305      	adds	r3, #5
 80018d4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					break;
 80018d8:	e00a      	b.n	80018f0 <main+0x2f8>
				case Cin_inv:
					i += 5;
 80018da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018de:	3305      	adds	r3, #5
 80018e0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					break;
 80018e4:	e004      	b.n	80018f0 <main+0x2f8>
					break;
 80018e6:	bf00      	nop
 80018e8:	e002      	b.n	80018f0 <main+0x2f8>
					break;
 80018ea:	bf00      	nop
 80018ec:	e000      	b.n	80018f0 <main+0x2f8>
					break;
 80018ee:	bf00      	nop
				case Resumen:
					break;
				}
				pRxData = 'K';
 80018f0:	4b2a      	ldr	r3, [pc, #168]	; (800199c <main+0x3a4>)
 80018f2:	224b      	movs	r2, #75	; 0x4b
 80018f4:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < cant; i++) {
 80018f6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018fa:	3301      	adds	r3, #1
 80018fc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001900:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8001904:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001908:	429a      	cmp	r2, r3
 800190a:	f6ff aeb1 	blt.w	8001670 <main+0x78>
			}
			flag_mensaje_completo = 2;
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <main+0x398>)
 8001910:	2202      	movs	r2, #2
 8001912:	601a      	str	r2, [r3, #0]
			cant=0;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		}
		switch (estado) {
 800191a:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 800191e:	2b04      	cmp	r3, #4
 8001920:	f63f ae89 	bhi.w	8001636 <main+0x3e>
 8001924:	a201      	add	r2, pc, #4	; (adr r2, 800192c <main+0x334>)
 8001926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192a:	bf00      	nop
 800192c:	08001941 	.word	0x08001941
 8001930:	080019ad 	.word	0x080019ad
 8001934:	080019fb 	.word	0x080019fb
 8001938:	08001a47 	.word	0x08001a47
 800193c:	08001a93 	.word	0x08001a93
		case Activado:
			if(flag_cambio){
 8001940:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80c3 	beq.w	8001ad0 <main+0x4d8>
				//Prender LED
				HAL_GPIO_WritePin(Led_Error_GPIO_Port, Led_Error_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	4816      	ldr	r0, [pc, #88]	; (80019a8 <main+0x3b0>)
 8001950:	f000 fe96 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Desactivado_GPIO_Port, Led_Desactivado_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	2120      	movs	r1, #32
 8001958:	4813      	ldr	r0, [pc, #76]	; (80019a8 <main+0x3b0>)
 800195a:	f000 fe91 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Homing_GPIO_Port, Led_Homing_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2110      	movs	r1, #16
 8001962:	4811      	ldr	r0, [pc, #68]	; (80019a8 <main+0x3b0>)
 8001964:	f000 fe8c 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Desactivado_GPIO_Port, Led_Desactivado_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	2120      	movs	r1, #32
 800196c:	480e      	ldr	r0, [pc, #56]	; (80019a8 <main+0x3b0>)
 800196e:	f000 fe87 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Normal_GPIO_Port, Led_Normal_Pin, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	2108      	movs	r1, #8
 8001976:	480c      	ldr	r0, [pc, #48]	; (80019a8 <main+0x3b0>)
 8001978:	f000 fe82 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Activado_GPIO_Port, Led_Activado_Pin, GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	2140      	movs	r1, #64	; 0x40
 8001980:	4809      	ldr	r0, [pc, #36]	; (80019a8 <main+0x3b0>)
 8001982:	f000 fe7d 	bl	8002680 <HAL_GPIO_WritePin>
				flag_cambio=0;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
			}
			break;
 800198c:	e0a0      	b.n	8001ad0 <main+0x4d8>
 800198e:	bf00      	nop
 8001990:	20000124 	.word	0x20000124
 8001994:	200003a8 	.word	0x200003a8
 8001998:	200016b8 	.word	0x200016b8
 800199c:	20000004 	.word	0x20000004
 80019a0:	20000374 	.word	0x20000374
 80019a4:	0800b8e0 	.word	0x0800b8e0
 80019a8:	40020c00 	.word	0x40020c00
		case Desactivado:
			if(flag_cambio){
 80019ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 808f 	beq.w	8001ad4 <main+0x4dc>
				//Prender LED
				HAL_GPIO_WritePin(Led_Error_GPIO_Port, Led_Error_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	4849      	ldr	r0, [pc, #292]	; (8001ae0 <main+0x4e8>)
 80019bc:	f000 fe60 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Activado_GPIO_Port, Led_Activado_Pin, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2140      	movs	r1, #64	; 0x40
 80019c4:	4846      	ldr	r0, [pc, #280]	; (8001ae0 <main+0x4e8>)
 80019c6:	f000 fe5b 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Homing_GPIO_Port, Led_Homing_Pin, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2110      	movs	r1, #16
 80019ce:	4844      	ldr	r0, [pc, #272]	; (8001ae0 <main+0x4e8>)
 80019d0:	f000 fe56 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Desactivado_GPIO_Port, Led_Desactivado_Pin, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2120      	movs	r1, #32
 80019d8:	4841      	ldr	r0, [pc, #260]	; (8001ae0 <main+0x4e8>)
 80019da:	f000 fe51 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Normal_GPIO_Port, Led_Normal_Pin, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	2108      	movs	r1, #8
 80019e2:	483f      	ldr	r0, [pc, #252]	; (8001ae0 <main+0x4e8>)
 80019e4:	f000 fe4c 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Desactivado_GPIO_Port, Led_Desactivado_Pin, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	2120      	movs	r1, #32
 80019ec:	483c      	ldr	r0, [pc, #240]	; (8001ae0 <main+0x4e8>)
 80019ee:	f000 fe47 	bl	8002680 <HAL_GPIO_WritePin>
				flag_cambio=0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
			}
			break;
 80019f8:	e06c      	b.n	8001ad4 <main+0x4dc>
		case Modo_Homing:
			if(flag_cambio){
 80019fa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d06a      	beq.n	8001ad8 <main+0x4e0>
				//Prender LED
				HAL_GPIO_WritePin(Led_Error_GPIO_Port, Led_Error_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	4836      	ldr	r0, [pc, #216]	; (8001ae0 <main+0x4e8>)
 8001a08:	f000 fe3a 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Activado_GPIO_Port, Led_Activado_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2140      	movs	r1, #64	; 0x40
 8001a10:	4833      	ldr	r0, [pc, #204]	; (8001ae0 <main+0x4e8>)
 8001a12:	f000 fe35 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Desactivado_GPIO_Port, Led_Desactivado_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2120      	movs	r1, #32
 8001a1a:	4831      	ldr	r0, [pc, #196]	; (8001ae0 <main+0x4e8>)
 8001a1c:	f000 fe30 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Normal_GPIO_Port, Led_Normal_Pin, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2108      	movs	r1, #8
 8001a24:	482e      	ldr	r0, [pc, #184]	; (8001ae0 <main+0x4e8>)
 8001a26:	f000 fe2b 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Desactivado_GPIO_Port, Led_Desactivado_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	482c      	ldr	r0, [pc, #176]	; (8001ae0 <main+0x4e8>)
 8001a30:	f000 fe26 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Homing_GPIO_Port, Led_Homing_Pin, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2110      	movs	r1, #16
 8001a38:	4829      	ldr	r0, [pc, #164]	; (8001ae0 <main+0x4e8>)
 8001a3a:	f000 fe21 	bl	8002680 <HAL_GPIO_WritePin>
				flag_cambio=0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
			}
			break;
 8001a44:	e048      	b.n	8001ad8 <main+0x4e0>
		case Modo_Normal:
			if(flag_cambio){
 8001a46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d046      	beq.n	8001adc <main+0x4e4>
				//Prender LED
				HAL_GPIO_WritePin(Led_Error_GPIO_Port, Led_Error_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	4823      	ldr	r0, [pc, #140]	; (8001ae0 <main+0x4e8>)
 8001a54:	f000 fe14 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Activado_GPIO_Port, Led_Activado_Pin, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2140      	movs	r1, #64	; 0x40
 8001a5c:	4820      	ldr	r0, [pc, #128]	; (8001ae0 <main+0x4e8>)
 8001a5e:	f000 fe0f 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Desactivado_GPIO_Port, Led_Desactivado_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2120      	movs	r1, #32
 8001a66:	481e      	ldr	r0, [pc, #120]	; (8001ae0 <main+0x4e8>)
 8001a68:	f000 fe0a 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Desactivado_GPIO_Port, Led_Desactivado_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2120      	movs	r1, #32
 8001a70:	481b      	ldr	r0, [pc, #108]	; (8001ae0 <main+0x4e8>)
 8001a72:	f000 fe05 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Homing_GPIO_Port, Led_Homing_Pin, GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2110      	movs	r1, #16
 8001a7a:	4819      	ldr	r0, [pc, #100]	; (8001ae0 <main+0x4e8>)
 8001a7c:	f000 fe00 	bl	8002680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Normal_GPIO_Port, Led_Normal_Pin, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2108      	movs	r1, #8
 8001a84:	4816      	ldr	r0, [pc, #88]	; (8001ae0 <main+0x4e8>)
 8001a86:	f000 fdfb 	bl	8002680 <HAL_GPIO_WritePin>
				flag_cambio=0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
			}
			break;
 8001a90:	e024      	b.n	8001adc <main+0x4e4>
		case Error:
			HAL_GPIO_WritePin(Led_Activado_GPIO_Port, Led_Activado_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2140      	movs	r1, #64	; 0x40
 8001a96:	4812      	ldr	r0, [pc, #72]	; (8001ae0 <main+0x4e8>)
 8001a98:	f000 fdf2 	bl	8002680 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Desactivado_GPIO_Port, Led_Desactivado_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	480f      	ldr	r0, [pc, #60]	; (8001ae0 <main+0x4e8>)
 8001aa2:	f000 fded 	bl	8002680 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Desactivado_GPIO_Port, Led_Desactivado_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2120      	movs	r1, #32
 8001aaa:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <main+0x4e8>)
 8001aac:	f000 fde8 	bl	8002680 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Homing_GPIO_Port, Led_Homing_Pin, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	480a      	ldr	r0, [pc, #40]	; (8001ae0 <main+0x4e8>)
 8001ab6:	f000 fde3 	bl	8002680 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Normal_GPIO_Port, Led_Normal_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2108      	movs	r1, #8
 8001abe:	4808      	ldr	r0, [pc, #32]	; (8001ae0 <main+0x4e8>)
 8001ac0:	f000 fdde 	bl	8002680 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Error_GPIO_Port, Led_Error_Pin, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2180      	movs	r1, #128	; 0x80
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <main+0x4e8>)
 8001aca:	f000 fdd9 	bl	8002680 <HAL_GPIO_WritePin>
			break;
 8001ace:	e006      	b.n	8001ade <main+0x4e6>
			break;
 8001ad0:	bf00      	nop
 8001ad2:	e5b0      	b.n	8001636 <main+0x3e>
			break;
 8001ad4:	bf00      	nop
 8001ad6:	e5ae      	b.n	8001636 <main+0x3e>
			break;
 8001ad8:	bf00      	nop
 8001ada:	e5ac      	b.n	8001636 <main+0x3e>
			break;
 8001adc:	bf00      	nop
		if (flag_mensaje_completo == 0) {
 8001ade:	e5aa      	b.n	8001636 <main+0x3e>
 8001ae0:	40020c00 	.word	0x40020c00

08001ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b094      	sub	sp, #80	; 0x50
 8001ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aea:	f107 0320 	add.w	r3, r7, #32
 8001aee:	2230      	movs	r2, #48	; 0x30
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f006 fc12 	bl	800831c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <SystemClock_Config+0xcc>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <SystemClock_Config+0xcc>)
 8001b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b16:	6413      	str	r3, [r2, #64]	; 0x40
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <SystemClock_Config+0xcc>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b24:	2300      	movs	r3, #0
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <SystemClock_Config+0xd0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <SystemClock_Config+0xd0>)
 8001b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <SystemClock_Config+0xd0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b40:	2301      	movs	r3, #1
 8001b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b54:	2304      	movs	r3, #4
 8001b56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b58:	23a8      	movs	r3, #168	; 0xa8
 8001b5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b60:	2307      	movs	r3, #7
 8001b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b64:	f107 0320 	add.w	r3, r7, #32
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f001 ff45 	bl	80039f8 <HAL_RCC_OscConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b74:	f000 f892 	bl	8001c9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b78:	230f      	movs	r3, #15
 8001b7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001b84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001b8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	2105      	movs	r1, #5
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 f99e 	bl	8003ed8 <HAL_RCC_ClockConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ba2:	f000 f87b 	bl	8001c9c <Error_Handler>
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	3750      	adds	r7, #80	; 0x50
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000

08001bb8 <SPI_Transmit_1>:

/* USER CODE BEGIN 4 */
/*Va a haber dos funciones slave transmit, una para cada esclavo, va a ser una sola interrupcion externa por placa
La gestion de cada motor lo hace cada esclavo. En el struct tenemos que tener: Posicion actual, posicion deseada, dirección
deseada, etc.*/
void SPI_Transmit_1(uint8_t pTxData) { //Solo va a haber una sola función slave transmit, que transmite a
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]

	//static HAL_StatusTypeDef SPI_estado;
	//while (flag_CB);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2140      	movs	r1, #64	; 0x40
 8001bc6:	4809      	ldr	r0, [pc, #36]	; (8001bec <SPI_Transmit_1+0x34>)
 8001bc8:	f000 fd5a 	bl	8002680 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4807      	ldr	r0, [pc, #28]	; (8001bf0 <SPI_Transmit_1+0x38>)
 8001bd4:	f002 fd50 	bl	8004678 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	2140      	movs	r1, #64	; 0x40
 8001bdc:	4803      	ldr	r0, [pc, #12]	; (8001bec <SPI_Transmit_1+0x34>)
 8001bde:	f000 fd4f 	bl	8002680 <HAL_GPIO_WritePin>
	//while (SPI_estado != HAL_OK);
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	200003b4 	.word	0x200003b4

08001bf4 <Mi_Timer>:
void Mi_Timer() { //Esta funcion la tenemos que hacer contemplando el modo de trabajo.
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
	long contador=0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
	while (flag_INT){
 8001bfe:	e00a      	b.n	8001c16 <Mi_Timer+0x22>
		contador++;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3301      	adds	r3, #1
 8001c04:	607b      	str	r3, [r7, #4]
		if (contador==1000000){
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <Mi_Timer+0x3c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d103      	bne.n	8001c16 <Mi_Timer+0x22>
			pRxData='K';
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <Mi_Timer+0x40>)
 8001c10:	224b      	movs	r2, #75	; 0x4b
 8001c12:	701a      	strb	r2, [r3, #0]
			break;
 8001c14:	e003      	b.n	8001c1e <Mi_Timer+0x2a>
	while (flag_INT){
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <Mi_Timer+0x44>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <Mi_Timer+0xc>
		}
	}
	flag_INT = 1;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <Mi_Timer+0x44>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	000f4240 	.word	0x000f4240
 8001c34:	20000004 	.word	0x20000004
 8001c38:	20000000 	.word	0x20000000

08001c3c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]
	static uint8_t D_transmision = ':';
	flag_INT = 0;
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
	switch (GPIO_Pin) {
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c52:	d002      	beq.n	8001c5a <HAL_GPIO_EXTI_Callback+0x1e>
 8001c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
		HAL_SPI_TransmitReceive(&hspi2, &D_transmision, &pRxData, 1, 1);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		break;
	case GPIO_PIN_9: 	//INT2 Esclavo 2
		break;
 8001c58:	e012      	b.n	8001c80 <HAL_GPIO_EXTI_Callback+0x44>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2140      	movs	r1, #64	; 0x40
 8001c5e:	480b      	ldr	r0, [pc, #44]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x50>)
 8001c60:	f000 fd0e 	bl	8002680 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, &D_transmision, &pRxData, 1, 1);
 8001c64:	2301      	movs	r3, #1
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c6c:	4909      	ldr	r1, [pc, #36]	; (8001c94 <HAL_GPIO_EXTI_Callback+0x58>)
 8001c6e:	480a      	ldr	r0, [pc, #40]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001c70:	f002 fb60 	bl	8004334 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001c74:	2201      	movs	r2, #1
 8001c76:	2140      	movs	r1, #64	; 0x40
 8001c78:	4804      	ldr	r0, [pc, #16]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x50>)
 8001c7a:	f000 fd01 	bl	8002680 <HAL_GPIO_WritePin>
		break;
 8001c7e:	bf00      	nop
	}

}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	20000004 	.word	0x20000004
 8001c94:	20000005 	.word	0x20000005
 8001c98:	200003b4 	.word	0x200003b4

08001c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_SPI2_Init+0x64>)
 8001cb2:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <MX_SPI2_Init+0x68>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_SPI2_Init+0x64>)
 8001cb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_SPI2_Init+0x64>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_SPI2_Init+0x64>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_SPI2_Init+0x64>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_SPI2_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_SPI2_Init+0x64>)
 8001cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cdc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_SPI2_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <MX_SPI2_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_SPI2_Init+0x64>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <MX_SPI2_Init+0x64>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_SPI2_Init+0x64>)
 8001cf8:	220a      	movs	r2, #10
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <MX_SPI2_Init+0x64>)
 8001cfe:	f002 fab5 	bl	800426c <HAL_SPI_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d08:	f7ff ffc8 	bl	8001c9c <Error_Handler>
  }

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200003b4 	.word	0x200003b4
 8001d14:	40003800 	.word	0x40003800

08001d18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2c      	ldr	r2, [pc, #176]	; (8001de8 <HAL_SPI_MspInit+0xd0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d152      	bne.n	8001de0 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_SPI_MspInit+0xd4>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a2a      	ldr	r2, [pc, #168]	; (8001dec <HAL_SPI_MspInit+0xd4>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b28      	ldr	r3, [pc, #160]	; (8001dec <HAL_SPI_MspInit+0xd4>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_SPI_MspInit+0xd4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a23      	ldr	r2, [pc, #140]	; (8001dec <HAL_SPI_MspInit+0xd4>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_SPI_MspInit+0xd4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_SPI_MspInit+0xd4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_SPI_MspInit+0xd4>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_SPI_MspInit+0xd4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d8e:	230c      	movs	r3, #12
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d9e:	2305      	movs	r3, #5
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	4811      	ldr	r0, [pc, #68]	; (8001df0 <HAL_SPI_MspInit+0xd8>)
 8001daa:	f000 facf 	bl	800234c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dc0:	2305      	movs	r3, #5
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480a      	ldr	r0, [pc, #40]	; (8001df4 <HAL_SPI_MspInit+0xdc>)
 8001dcc:	f000 fabe 	bl	800234c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2024      	movs	r0, #36	; 0x24
 8001dd6:	f000 fa60 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001dda:	2024      	movs	r0, #36	; 0x24
 8001ddc:	f000 fa79 	bl	80022d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40003800 	.word	0x40003800
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40020400 	.word	0x40020400

08001df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a0f      	ldr	r2, [pc, #60]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001e36:	2004      	movs	r0, #4
 8001e38:	f000 fa24 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40023800 	.word	0x40023800

08001e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <HardFault_Handler+0x4>

08001e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <MemManage_Handler+0x4>

08001e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <BusFault_Handler+0x4>

08001e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <UsageFault_Handler+0x4>

08001e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e9c:	f000 f8e0 	bl	8002060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ea8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001eac:	f000 fc02 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001eb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001eb4:	f000 fbfe 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <SPI2_IRQHandler+0x10>)
 8001ec2:	f002 fc5b 	bl	800477c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200003b4 	.word	0x200003b4

08001ed0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <OTG_FS_IRQHandler+0x10>)
 8001ed6:	f000 fd55 	bl	8002984 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200018ec 	.word	0x200018ec

08001ee4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <_sbrk+0x50>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <_sbrk+0x16>
		heap_end = &end;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <_sbrk+0x50>)
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <_sbrk+0x54>)
 8001ef8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <_sbrk+0x50>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <_sbrk+0x50>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	466a      	mov	r2, sp
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d907      	bls.n	8001f1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f0e:	f006 f9cb 	bl	80082a8 <__errno>
 8001f12:	4602      	mov	r2, r0
 8001f14:	230c      	movs	r3, #12
 8001f16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1c:	e006      	b.n	8001f2c <_sbrk+0x48>
	}

	heap_end += incr;
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <_sbrk+0x50>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <_sbrk+0x50>)
 8001f28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	2000039c 	.word	0x2000039c
 8001f38:	20001cf8 	.word	0x20001cf8

08001f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <SystemInit+0x28>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <SystemInit+0x28>)
 8001f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <SystemInit+0x28>)
 8001f52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f56:	609a      	str	r2, [r3, #8]
#endif
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f6e:	e003      	b.n	8001f78 <LoopCopyDataInit>

08001f70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f76:	3104      	adds	r1, #4

08001f78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f78:	480b      	ldr	r0, [pc, #44]	; (8001fa8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f80:	d3f6      	bcc.n	8001f70 <CopyDataInit>
  ldr  r2, =_sbss
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f84:	e002      	b.n	8001f8c <LoopFillZerobss>

08001f86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f88:	f842 3b04 	str.w	r3, [r2], #4

08001f8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f90:	d3f9      	bcc.n	8001f86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f92:	f7ff ffd3 	bl	8001f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f96:	f006 f98d 	bl	80082b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7ff fb2d 	bl	80015f8 <main>
  bx  lr    
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fa0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fa4:	0800bbf8 	.word	0x0800bbf8
  ldr  r0, =_sdata
 8001fa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fac:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 8001fb0:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8001fb4:	20001cf8 	.word	0x20001cf8

08001fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC_IRQHandler>
	...

08001fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_Init+0x40>)
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_Init+0x40>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_Init+0x40>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f000 f94d 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fea:	2000      	movs	r0, #0
 8001fec:	f000 f808 	bl	8002000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff0:	f7ff ff02 	bl	8001df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_InitTick+0x54>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_InitTick+0x58>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002016:	fbb3 f3f1 	udiv	r3, r3, r1
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f965 	bl	80022ee <HAL_SYSTICK_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e00e      	b.n	800204c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b0f      	cmp	r3, #15
 8002032:	d80a      	bhi.n	800204a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002034:	2200      	movs	r2, #0
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f000 f92d 	bl	800229a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002040:	4a06      	ldr	r2, [pc, #24]	; (800205c <HAL_InitTick+0x5c>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000008 	.word	0x20000008
 8002058:	20000010 	.word	0x20000010
 800205c:	2000000c 	.word	0x2000000c

08002060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x20>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_IncTick+0x24>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_IncTick+0x24>)
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000010 	.word	0x20000010
 8002084:	2000040c 	.word	0x2000040c

08002088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return uwTick;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_GetTick+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	2000040c 	.word	0x2000040c

080020a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff ffee 	bl	8002088 <HAL_GetTick>
 80020ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d005      	beq.n	80020c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_Delay+0x40>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020c6:	bf00      	nop
 80020c8:	f7ff ffde 	bl	8002088 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d8f7      	bhi.n	80020c8 <HAL_Delay+0x28>
  {
  }
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000010 	.word	0x20000010

080020e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800210c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002116:	4a04      	ldr	r2, [pc, #16]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	60d3      	str	r3, [r2, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	2b00      	cmp	r3, #0
 8002158:	db0b      	blt.n	8002172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	f003 021f 	and.w	r2, r3, #31
 8002160:	4907      	ldr	r1, [pc, #28]	; (8002180 <__NVIC_EnableIRQ+0x38>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2001      	movs	r0, #1
 800216a:	fa00 f202 	lsl.w	r2, r0, r2
 800216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000e100 	.word	0xe000e100

08002184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	2b00      	cmp	r3, #0
 8002196:	db0a      	blt.n	80021ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	490c      	ldr	r1, [pc, #48]	; (80021d0 <__NVIC_SetPriority+0x4c>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	0112      	lsls	r2, r2, #4
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	440b      	add	r3, r1
 80021a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ac:	e00a      	b.n	80021c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4908      	ldr	r1, [pc, #32]	; (80021d4 <__NVIC_SetPriority+0x50>)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	3b04      	subs	r3, #4
 80021bc:	0112      	lsls	r2, r2, #4
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	761a      	strb	r2, [r3, #24]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000e100 	.word	0xe000e100
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f1c3 0307 	rsb	r3, r3, #7
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	bf28      	it	cs
 80021f6:	2304      	movcs	r3, #4
 80021f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3304      	adds	r3, #4
 80021fe:	2b06      	cmp	r3, #6
 8002200:	d902      	bls.n	8002208 <NVIC_EncodePriority+0x30>
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3b03      	subs	r3, #3
 8002206:	e000      	b.n	800220a <NVIC_EncodePriority+0x32>
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	f04f 32ff 	mov.w	r2, #4294967295
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	401a      	ands	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002220:	f04f 31ff 	mov.w	r1, #4294967295
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	43d9      	mvns	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	4313      	orrs	r3, r2
         );
}
 8002232:	4618      	mov	r0, r3
 8002234:	3724      	adds	r7, #36	; 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002250:	d301      	bcc.n	8002256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002252:	2301      	movs	r3, #1
 8002254:	e00f      	b.n	8002276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <SysTick_Config+0x40>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225e:	210f      	movs	r1, #15
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	f7ff ff8e 	bl	8002184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <SysTick_Config+0x40>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <SysTick_Config+0x40>)
 8002270:	2207      	movs	r2, #7
 8002272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010

08002284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff29 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ac:	f7ff ff3e 	bl	800212c <__NVIC_GetPriorityGrouping>
 80022b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ff8e 	bl	80021d8 <NVIC_EncodePriority>
 80022bc:	4602      	mov	r2, r0
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff5d 	bl	8002184 <__NVIC_SetPriority>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff31 	bl	8002148 <__NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffa2 	bl	8002240 <SysTick_Config>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d004      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2280      	movs	r2, #128	; 0x80
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e00c      	b.n	800233e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2205      	movs	r2, #5
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	; 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	e16b      	b.n	8002640 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	429a      	cmp	r2, r3
 8002382:	f040 815a 	bne.w	800263a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d00b      	beq.n	80023a6 <HAL_GPIO_Init+0x5a>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d007      	beq.n	80023a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800239a:	2b11      	cmp	r3, #17
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b12      	cmp	r3, #18
 80023a4:	d130      	bne.n	8002408 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 0201 	and.w	r2, r3, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0xfc>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b12      	cmp	r3, #18
 8002446:	d123      	bne.n	8002490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3208      	adds	r2, #8
 8002450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	220f      	movs	r2, #15
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	08da      	lsrs	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3208      	adds	r2, #8
 800248a:	69b9      	ldr	r1, [r7, #24]
 800248c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0203 	and.w	r2, r3, #3
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80b4 	beq.w	800263a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b5f      	ldr	r3, [pc, #380]	; (8002654 <HAL_GPIO_Init+0x308>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	4a5e      	ldr	r2, [pc, #376]	; (8002654 <HAL_GPIO_Init+0x308>)
 80024dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e0:	6453      	str	r3, [r2, #68]	; 0x44
 80024e2:	4b5c      	ldr	r3, [pc, #368]	; (8002654 <HAL_GPIO_Init+0x308>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ee:	4a5a      	ldr	r2, [pc, #360]	; (8002658 <HAL_GPIO_Init+0x30c>)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a51      	ldr	r2, [pc, #324]	; (800265c <HAL_GPIO_Init+0x310>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d02b      	beq.n	8002572 <HAL_GPIO_Init+0x226>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a50      	ldr	r2, [pc, #320]	; (8002660 <HAL_GPIO_Init+0x314>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d025      	beq.n	800256e <HAL_GPIO_Init+0x222>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a4f      	ldr	r2, [pc, #316]	; (8002664 <HAL_GPIO_Init+0x318>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01f      	beq.n	800256a <HAL_GPIO_Init+0x21e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4e      	ldr	r2, [pc, #312]	; (8002668 <HAL_GPIO_Init+0x31c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x21a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4d      	ldr	r2, [pc, #308]	; (800266c <HAL_GPIO_Init+0x320>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x216>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4c      	ldr	r2, [pc, #304]	; (8002670 <HAL_GPIO_Init+0x324>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x212>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4b      	ldr	r2, [pc, #300]	; (8002674 <HAL_GPIO_Init+0x328>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x20e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4a      	ldr	r2, [pc, #296]	; (8002678 <HAL_GPIO_Init+0x32c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x20a>
 8002552:	2307      	movs	r3, #7
 8002554:	e00e      	b.n	8002574 <HAL_GPIO_Init+0x228>
 8002556:	2308      	movs	r3, #8
 8002558:	e00c      	b.n	8002574 <HAL_GPIO_Init+0x228>
 800255a:	2306      	movs	r3, #6
 800255c:	e00a      	b.n	8002574 <HAL_GPIO_Init+0x228>
 800255e:	2305      	movs	r3, #5
 8002560:	e008      	b.n	8002574 <HAL_GPIO_Init+0x228>
 8002562:	2304      	movs	r3, #4
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x228>
 8002566:	2303      	movs	r3, #3
 8002568:	e004      	b.n	8002574 <HAL_GPIO_Init+0x228>
 800256a:	2302      	movs	r3, #2
 800256c:	e002      	b.n	8002574 <HAL_GPIO_Init+0x228>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_GPIO_Init+0x228>
 8002572:	2300      	movs	r3, #0
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f002 0203 	and.w	r2, r2, #3
 800257a:	0092      	lsls	r2, r2, #2
 800257c:	4093      	lsls	r3, r2
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002584:	4934      	ldr	r1, [pc, #208]	; (8002658 <HAL_GPIO_Init+0x30c>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002592:	4b3a      	ldr	r3, [pc, #232]	; (800267c <HAL_GPIO_Init+0x330>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b6:	4a31      	ldr	r2, [pc, #196]	; (800267c <HAL_GPIO_Init+0x330>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025bc:	4b2f      	ldr	r3, [pc, #188]	; (800267c <HAL_GPIO_Init+0x330>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025e0:	4a26      	ldr	r2, [pc, #152]	; (800267c <HAL_GPIO_Init+0x330>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e6:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_GPIO_Init+0x330>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <HAL_GPIO_Init+0x330>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_GPIO_Init+0x330>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002634:	4a11      	ldr	r2, [pc, #68]	; (800267c <HAL_GPIO_Init+0x330>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b0f      	cmp	r3, #15
 8002644:	f67f ae90 	bls.w	8002368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002648:	bf00      	nop
 800264a:	3724      	adds	r7, #36	; 0x24
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40023800 	.word	0x40023800
 8002658:	40013800 	.word	0x40013800
 800265c:	40020000 	.word	0x40020000
 8002660:	40020400 	.word	0x40020400
 8002664:	40020800 	.word	0x40020800
 8002668:	40020c00 	.word	0x40020c00
 800266c:	40021000 	.word	0x40021000
 8002670:	40021400 	.word	0x40021400
 8002674:	40021800 	.word	0x40021800
 8002678:	40021c00 	.word	0x40021c00
 800267c:	40013c00 	.word	0x40013c00

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800269c:	e003      	b.n	80026a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d006      	beq.n	80026d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fab2 	bl	8001c3c <HAL_GPIO_EXTI_Callback>
  }
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	b08f      	sub	sp, #60	; 0x3c
 80026e8:	af0a      	add	r7, sp, #40	; 0x28
 80026ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e10f      	b.n	8002916 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f005 fac9 	bl	8007ca8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2203      	movs	r2, #3
 800271a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f002 fbb2 	bl	8004e9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	687e      	ldr	r6, [r7, #4]
 8002742:	466d      	mov	r5, sp
 8002744:	f106 0410 	add.w	r4, r6, #16
 8002748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800274a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800274c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800274e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002750:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002754:	e885 0003 	stmia.w	r5, {r0, r1}
 8002758:	1d33      	adds	r3, r6, #4
 800275a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800275c:	6838      	ldr	r0, [r7, #0]
 800275e:	f002 fa89 	bl	8004c74 <USB_CoreInit>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0d0      	b.n	8002916 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f002 fba0 	bl	8004ec0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	e04a      	b.n	800281c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	333d      	adds	r3, #61	; 0x3d
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	333c      	adds	r3, #60	; 0x3c
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	b298      	uxth	r0, r3
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	3342      	adds	r3, #66	; 0x42
 80027c2:	4602      	mov	r2, r0
 80027c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	333f      	adds	r3, #63	; 0x3f
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	3344      	adds	r3, #68	; 0x44
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3348      	adds	r3, #72	; 0x48
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	3350      	adds	r3, #80	; 0x50
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	3301      	adds	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	d3af      	bcc.n	8002786 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	e044      	b.n	80028b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002858:	7bfa      	ldrb	r2, [r7, #15]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800286e:	7bfa      	ldrb	r2, [r7, #15]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	3301      	adds	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d3b5      	bcc.n	800282c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	687e      	ldr	r6, [r7, #4]
 80028c8:	466d      	mov	r5, sp
 80028ca:	f106 0410 	add.w	r4, r6, #16
 80028ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028da:	e885 0003 	stmia.w	r5, {r0, r1}
 80028de:	1d33      	adds	r3, r6, #4
 80028e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028e2:	6838      	ldr	r0, [r7, #0]
 80028e4:	f002 fb16 	bl	8004f14 <USB_DevInit>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00d      	b.n	8002916 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fb0b 	bl	8005f2a <USB_DevDisconnect>

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800291e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_PCD_Start+0x1c>
 8002936:	2302      	movs	r3, #2
 8002938:	e020      	b.n	800297c <HAL_PCD_Start+0x5e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	2b01      	cmp	r3, #1
 8002948:	d109      	bne.n	800295e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800294e:	2b01      	cmp	r3, #1
 8002950:	d005      	beq.n	800295e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f003 fac9 	bl	8005efa <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f002 fa85 	bl	8004e7c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b08d      	sub	sp, #52	; 0x34
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f003 fb70 	bl	8006080 <USB_GetMode>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 838e 	bne.w	80030c4 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fad4 	bl	8005f5a <USB_ReadInterrupts>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8384 	beq.w	80030c2 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 facb 	bl	8005f5a <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d107      	bne.n	80029de <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f002 0202 	and.w	r2, r2, #2
 80029dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f003 fab9 	bl	8005f5a <USB_ReadInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029f2:	d17b      	bne.n	8002aec <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f003 fabf 	bl	8005f80 <USB_ReadDevAllOutEpInterrupt>
 8002a02:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a04:	e06f      	b.n	8002ae6 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d064      	beq.n	8002ada <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 fae4 	bl	8005fe8 <USB_ReadDevOutEPInterrupt>
 8002a20:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00c      	beq.n	8002a46 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fe0d 	bl	8003660 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00c      	beq.n	8002a6a <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 ff0c 	bl	8003870 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a64:	461a      	mov	r2, r3
 8002a66:	2308      	movs	r3, #8
 8002a68:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a80:	461a      	mov	r2, r3
 8002a82:	2310      	movs	r3, #16
 8002a84:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d108      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	f003 fb2f 	bl	8006108 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2320      	movs	r3, #32
 8002aba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ad8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	3301      	adds	r3, #1
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d18c      	bne.n	8002a06 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f003 fa32 	bl	8005f5a <USB_ReadInterrupts>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b00:	f040 80c4 	bne.w	8002c8c <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f003 fa53 	bl	8005fb4 <USB_ReadDevAllInEpInterrupt>
 8002b0e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b14:	e0b6      	b.n	8002c84 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80ab 	beq.w	8002c78 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f003 fa79 	bl	8006024 <USB_ReadDevInEPInterrupt>
 8002b32:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d05b      	beq.n	8002bf6 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	2201      	movs	r2, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69f9      	ldr	r1, [r7, #28]
 8002b5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b5e:	4013      	ands	r3, r2
 8002b60:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2301      	movs	r3, #1
 8002b72:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d11b      	bne.n	8002bb4 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	3348      	adds	r3, #72	; 0x48
 8002b8c:	6819      	ldr	r1, [r3, #0]
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b92:	4613      	mov	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4403      	add	r3, r0
 8002b9c:	3344      	adds	r3, #68	; 0x44
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4419      	add	r1, r3
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4403      	add	r3, r0
 8002bb0:	3348      	adds	r3, #72	; 0x48
 8002bb2:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	4619      	mov	r1, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f005 f8f5 	bl	8007daa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d116      	bne.n	8002bf6 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d113      	bne.n	8002bf6 <HAL_PCD_IRQHandler+0x272>
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	3350      	adds	r3, #80	; 0x50
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d108      	bne.n	8002bf6 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	f003 fa89 	bl	8006108 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2308      	movs	r3, #8
 8002c10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2310      	movs	r3, #16
 8002c2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c44:	461a      	mov	r2, r3
 8002c46:	2340      	movs	r3, #64	; 0x40
 8002c48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c60:	461a      	mov	r2, r3
 8002c62:	2302      	movs	r3, #2
 8002c64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fc67 	bl	8003546 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f47f af45 	bne.w	8002b16 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 f962 	bl	8005f5a <USB_ReadInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ca0:	d122      	bne.n	8002ce8 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d108      	bne.n	8002cd2 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cc8:	2100      	movs	r1, #0
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fe88 	bl	80039e0 <HAL_PCDEx_LPM_Callback>
 8002cd0:	e002      	b.n	8002cd8 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f005 f8e0 	bl	8007e98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 f934 	bl	8005f5a <USB_ReadInterrupts>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cfc:	d112      	bne.n	8002d24 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d102      	bne.n	8002d14 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f005 f89c 	bl	8007e4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d22:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 f916 	bl	8005f5a <USB_ReadInterrupts>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d38:	f040 80a7 	bne.w	8002e8a <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2110      	movs	r1, #16
 8002d56:	4618      	mov	r0, r3
 8002d58:	f002 fa4e 	bl	80051f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d60:	e036      	b.n	8002dd0 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d86:	0151      	lsls	r1, r2, #5
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	440a      	add	r2, r1
 8002d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da2:	461a      	mov	r2, r3
 8002da4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002da8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dba:	0151      	lsls	r1, r2, #5
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	440a      	add	r2, r1
 8002dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dc8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	3301      	adds	r3, #1
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d3c3      	bcc.n	8002d62 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002de8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002dec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e06:	f043 030b 	orr.w	r3, r3, #11
 8002e0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e1c:	f043 030b 	orr.w	r3, r3, #11
 8002e20:	6453      	str	r3, [r2, #68]	; 0x44
 8002e22:	e015      	b.n	8002e50 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e36:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e4a:	f043 030b 	orr.w	r3, r3, #11
 8002e4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e74:	461a      	mov	r2, r3
 8002e76:	f003 f947 	bl	8006108 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 f863 	bl	8005f5a <USB_ReadInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e9e:	d124      	bne.n	8002eea <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f003 f8f9 	bl	800609c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 fa03 	bl	80052ba <USB_GetDevSpeed>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681c      	ldr	r4, [r3, #0]
 8002ec0:	f001 f9c8 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f001 ff32 	bl	8004d38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f004 ff90 	bl	8007dfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ee8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f003 f833 	bl	8005f5a <USB_ReadInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	d161      	bne.n	8002fc2 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0210 	bic.w	r2, r2, #16
 8002f0c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	0c5b      	lsrs	r3, r3, #17
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d124      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d035      	beq.n	8002fb2 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	6a38      	ldr	r0, [r7, #32]
 8002f5a:	f002 feab 	bl	8005cb4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f6a:	441a      	add	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	619a      	str	r2, [r3, #24]
 8002f82:	e016      	b.n	8002fb2 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	0c5b      	lsrs	r3, r3, #17
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	2b06      	cmp	r3, #6
 8002f8e:	d110      	bne.n	8002fb2 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f96:	2208      	movs	r2, #8
 8002f98:	4619      	mov	r1, r3
 8002f9a:	6a38      	ldr	r0, [r7, #32]
 8002f9c:	f002 fe8a 	bl	8005cb4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fac:	441a      	add	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0210 	orr.w	r2, r2, #16
 8002fc0:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f002 ffc7 	bl	8005f5a <USB_ReadInterrupts>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d10a      	bne.n	8002fec <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f004 ff01 	bl	8007dde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f002 0208 	and.w	r2, r2, #8
 8002fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f002 ffb2 	bl	8005f5a <USB_ReadInterrupts>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003000:	d10f      	bne.n	8003022 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	b2db      	uxtb	r3, r3
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f004 ff63 	bl	8007ed8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003020:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f002 ff97 	bl	8005f5a <USB_ReadInterrupts>
 800302c:	4603      	mov	r3, r0
 800302e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003032:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003036:	d10f      	bne.n	8003058 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4619      	mov	r1, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f004 ff36 	bl	8007eb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003056:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f002 ff7c 	bl	8005f5a <USB_ReadInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d10a      	bne.n	8003084 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f004 ff44 	bl	8007efc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003082:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f002 ff66 	bl	8005f5a <USB_ReadInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b04      	cmp	r3, #4
 8003096:	d115      	bne.n	80030c4 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f004 ff34 	bl	8007f18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	430a      	orrs	r2, r1
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	e000      	b.n	80030c4 <HAL_PCD_IRQHandler+0x740>
      return;
 80030c2:	bf00      	nop
    }
  }
}
 80030c4:	3734      	adds	r7, #52	; 0x34
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd90      	pop	{r4, r7, pc}

080030ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_PCD_SetAddress+0x1a>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e013      	b.n	800310c <HAL_PCD_SetAddress+0x42>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f002 fed6 	bl	8005eae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	461a      	mov	r2, r3
 8003122:	4603      	mov	r3, r0
 8003124:	70fb      	strb	r3, [r7, #3]
 8003126:	460b      	mov	r3, r1
 8003128:	803b      	strh	r3, [r7, #0]
 800312a:	4613      	mov	r3, r2
 800312c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003136:	2b00      	cmp	r3, #0
 8003138:	da0f      	bge.n	800315a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	f003 020f 	and.w	r2, r3, #15
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	3338      	adds	r3, #56	; 0x38
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	3304      	adds	r3, #4
 8003150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	705a      	strb	r2, [r3, #1]
 8003158:	e00f      	b.n	800317a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	f003 020f 	and.w	r2, r3, #15
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	3304      	adds	r3, #4
 8003172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	b2da      	uxtb	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003186:	883a      	ldrh	r2, [r7, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	78ba      	ldrb	r2, [r7, #2]
 8003190:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d004      	beq.n	80031a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031a4:	78bb      	ldrb	r3, [r7, #2]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d102      	bne.n	80031b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_PCD_EP_Open+0xaa>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e00e      	b.n	80031dc <HAL_PCD_EP_Open+0xc8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68f9      	ldr	r1, [r7, #12]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f002 f899 	bl	8005304 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80031da:	7afb      	ldrb	r3, [r7, #11]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da0f      	bge.n	8003218 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 020f 	and.w	r2, r3, #15
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	3338      	adds	r3, #56	; 0x38
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	4413      	add	r3, r2
 800320c:	3304      	adds	r3, #4
 800320e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	705a      	strb	r2, [r3, #1]
 8003216:	e00f      	b.n	8003238 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 020f 	and.w	r2, r3, #15
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	3304      	adds	r3, #4
 8003230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	b2da      	uxtb	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_PCD_EP_Close+0x6e>
 800324e:	2302      	movs	r3, #2
 8003250:	e00e      	b.n	8003270 <HAL_PCD_EP_Close+0x8c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68f9      	ldr	r1, [r7, #12]
 8003260:	4618      	mov	r0, r3
 8003262:	f002 f8d7 	bl	8005414 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	460b      	mov	r3, r1
 8003286:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003288:	7afb      	ldrb	r3, [r7, #11]
 800328a:	f003 020f 	and.w	r2, r3, #15
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4413      	add	r3, r2
 800329e:	3304      	adds	r3, #4
 80032a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2200      	movs	r2, #0
 80032b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ba:	7afb      	ldrb	r3, [r7, #11]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d102      	bne.n	80032d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032d4:	7afb      	ldrb	r3, [r7, #11]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	6979      	ldr	r1, [r7, #20]
 80032ec:	f002 fb5a 	bl	80059a4 <USB_EP0StartXfer>
 80032f0:	e008      	b.n	8003304 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	6979      	ldr	r1, [r7, #20]
 8003300:	f002 f90c 	bl	800551c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	460b      	mov	r3, r1
 8003318:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 020f 	and.w	r2, r3, #15
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003330:	681b      	ldr	r3, [r3, #0]
}
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	460b      	mov	r3, r1
 800334c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800334e:	7afb      	ldrb	r3, [r7, #11]
 8003350:	f003 020f 	and.w	r2, r3, #15
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	3338      	adds	r3, #56	; 0x38
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	3304      	adds	r3, #4
 8003364:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2200      	movs	r2, #0
 8003376:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2201      	movs	r2, #1
 800337c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800337e:	7afb      	ldrb	r3, [r7, #11]
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	b2da      	uxtb	r2, r3
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d102      	bne.n	8003398 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003398:	7afb      	ldrb	r3, [r7, #11]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	6979      	ldr	r1, [r7, #20]
 80033b0:	f002 faf8 	bl	80059a4 <USB_EP0StartXfer>
 80033b4:	e008      	b.n	80033c8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	6979      	ldr	r1, [r7, #20]
 80033c4:	f002 f8aa 	bl	800551c <USB_EPStartXfer>
  }

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	460b      	mov	r3, r1
 80033dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	f003 020f 	and.w	r2, r3, #15
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d901      	bls.n	80033f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e050      	b.n	8003492 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	da0f      	bge.n	8003418 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	f003 020f 	and.w	r2, r3, #15
 80033fe:	4613      	mov	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	3338      	adds	r3, #56	; 0x38
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	4413      	add	r3, r2
 800340c:	3304      	adds	r3, #4
 800340e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	705a      	strb	r2, [r3, #1]
 8003416:	e00d      	b.n	8003434 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	4413      	add	r3, r2
 800342a:	3304      	adds	r3, #4
 800342c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2201      	movs	r2, #1
 8003438:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_PCD_EP_SetStall+0x82>
 8003450:	2302      	movs	r3, #2
 8003452:	e01e      	b.n	8003492 <HAL_PCD_EP_SetStall+0xc0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68f9      	ldr	r1, [r7, #12]
 8003462:	4618      	mov	r0, r3
 8003464:	f002 fc4f 	bl	8005d06 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	b2d9      	uxtb	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003482:	461a      	mov	r2, r3
 8003484:	f002 fe40 	bl	8006108 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	460b      	mov	r3, r1
 80034a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	f003 020f 	and.w	r2, r3, #15
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d901      	bls.n	80034b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e042      	b.n	800353e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	da0f      	bge.n	80034e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	f003 020f 	and.w	r2, r3, #15
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	3338      	adds	r3, #56	; 0x38
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	705a      	strb	r2, [r3, #1]
 80034de:	e00f      	b.n	8003500 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f003 020f 	and.w	r2, r3, #15
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	3304      	adds	r3, #4
 80034f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	b2da      	uxtb	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_PCD_EP_ClrStall+0x86>
 800351c:	2302      	movs	r3, #2
 800351e:	e00e      	b.n	800353e <HAL_PCD_EP_ClrStall+0xa4>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68f9      	ldr	r1, [r7, #12]
 800352e:	4618      	mov	r0, r3
 8003530:	f002 fc57 	bl	8005de2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b08a      	sub	sp, #40	; 0x28
 800354a:	af02      	add	r7, sp, #8
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	3338      	adds	r3, #56	; 0x38
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	3304      	adds	r3, #4
 800356c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	429a      	cmp	r2, r3
 8003578:	d901      	bls.n	800357e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06c      	b.n	8003658 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	429a      	cmp	r2, r3
 8003592:	d902      	bls.n	800359a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3303      	adds	r3, #3
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035a2:	e02b      	b.n	80035fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d902      	bls.n	80035c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	3303      	adds	r3, #3
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68d9      	ldr	r1, [r3, #12]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	4603      	mov	r3, r0
 80035de:	6978      	ldr	r0, [r7, #20]
 80035e0:	f002 fb33 	bl	8005c4a <USB_WritePacket>

    ep->xfer_buff  += len;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	441a      	add	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	699a      	ldr	r2, [r3, #24]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	441a      	add	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	b29b      	uxth	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	429a      	cmp	r2, r3
 8003610:	d809      	bhi.n	8003626 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800361a:	429a      	cmp	r2, r3
 800361c:	d203      	bcs.n	8003626 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1be      	bne.n	80035a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	429a      	cmp	r2, r3
 8003630:	d811      	bhi.n	8003656 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	2201      	movs	r2, #1
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	43db      	mvns	r3, r3
 800364c:	6939      	ldr	r1, [r7, #16]
 800364e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003652:	4013      	ands	r3, r2
 8003654:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3720      	adds	r7, #32
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	333c      	adds	r3, #60	; 0x3c
 8003678:	3304      	adds	r3, #4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b01      	cmp	r3, #1
 8003694:	f040 80b3 	bne.w	80037fe <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d028      	beq.n	80036f4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a70      	ldr	r2, [pc, #448]	; (8003868 <PCD_EP_OutXfrComplete_int+0x208>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d90e      	bls.n	80036c8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d009      	beq.n	80036c8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c0:	461a      	mov	r2, r3
 80036c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036c6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f004 fb41 	bl	8007d50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036d8:	461a      	mov	r2, r3
 80036da:	2101      	movs	r1, #1
 80036dc:	f002 fd14 	bl	8006108 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ec:	461a      	mov	r2, r3
 80036ee:	2308      	movs	r3, #8
 80036f0:	6093      	str	r3, [r2, #8]
 80036f2:	e0b3      	b.n	800385c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370a:	461a      	mov	r2, r3
 800370c:	2320      	movs	r3, #32
 800370e:	6093      	str	r3, [r2, #8]
 8003710:	e0a4      	b.n	800385c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 809f 	bne.w	800385c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a51      	ldr	r2, [pc, #324]	; (8003868 <PCD_EP_OutXfrComplete_int+0x208>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d90f      	bls.n	8003746 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373c:	461a      	mov	r2, r3
 800373e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003742:	6093      	str	r3, [r2, #8]
 8003744:	e08a      	b.n	800385c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003758:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	0159      	lsls	r1, r3, #5
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	440b      	add	r3, r1
 8003762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800376c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4403      	add	r3, r0
 800377c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003780:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003794:	6819      	ldr	r1, [r3, #0]
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4403      	add	r3, r0
 80037a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4419      	add	r1, r3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4403      	add	r3, r0
 80037ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037be:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f004 fad4 	bl	8007d74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d144      	bne.n	800385c <PCD_EP_OutXfrComplete_int+0x1fc>
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d138      	bne.n	800385c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037f4:	461a      	mov	r2, r3
 80037f6:	2101      	movs	r1, #1
 80037f8:	f002 fc86 	bl	8006108 <USB_EP0_OutStart>
 80037fc:	e02e      	b.n	800385c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4a1a      	ldr	r2, [pc, #104]	; (800386c <PCD_EP_OutXfrComplete_int+0x20c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d124      	bne.n	8003850 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381c:	461a      	mov	r2, r3
 800381e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003822:	6093      	str	r3, [r2, #8]
 8003824:	e01a      	b.n	800385c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383c:	461a      	mov	r2, r3
 800383e:	2320      	movs	r3, #32
 8003840:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	4619      	mov	r1, r3
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f004 fa93 	bl	8007d74 <HAL_PCD_DataOutStageCallback>
 800384e:	e005      	b.n	800385c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f004 fa8c 	bl	8007d74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	4f54300a 	.word	0x4f54300a
 800386c:	4f54310a 	.word	0x4f54310a

08003870 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	333c      	adds	r3, #60	; 0x3c
 8003888:	3304      	adds	r3, #4
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d113      	bne.n	80038ce <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a1f      	ldr	r2, [pc, #124]	; (8003928 <PCD_EP_OutSetupPacket_int+0xb8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d922      	bls.n	80038f4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01d      	beq.n	80038f4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c4:	461a      	mov	r2, r3
 80038c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ca:	6093      	str	r3, [r2, #8]
 80038cc:	e012      	b.n	80038f4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4a16      	ldr	r2, [pc, #88]	; (800392c <PCD_EP_OutSetupPacket_int+0xbc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10e      	bne.n	80038f4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ec:	461a      	mov	r2, r3
 80038ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f004 fa2b 	bl	8007d50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <PCD_EP_OutSetupPacket_int+0xb8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d90c      	bls.n	800391c <PCD_EP_OutSetupPacket_int+0xac>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d108      	bne.n	800391c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003914:	461a      	mov	r2, r3
 8003916:	2101      	movs	r1, #1
 8003918:	f002 fbf6 	bl	8006108 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	4f54300a 	.word	0x4f54300a
 800392c:	4f54310a 	.word	0x4f54310a

08003930 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	70fb      	strb	r3, [r7, #3]
 800393c:	4613      	mov	r3, r2
 800393e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d107      	bne.n	800395e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800394e:	883b      	ldrh	r3, [r7, #0]
 8003950:	0419      	lsls	r1, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	430a      	orrs	r2, r1
 800395a:	629a      	str	r2, [r3, #40]	; 0x28
 800395c:	e028      	b.n	80039b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	4413      	add	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]
 8003970:	e00d      	b.n	800398e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	3340      	adds	r3, #64	; 0x40
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	4413      	add	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	3301      	adds	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
 800398e:	7bfa      	ldrb	r2, [r7, #15]
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	3b01      	subs	r3, #1
 8003994:	429a      	cmp	r2, r3
 8003996:	d3ec      	bcc.n	8003972 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003998:	883b      	ldrh	r3, [r7, #0]
 800399a:	0418      	lsls	r0, r3, #16
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	4302      	orrs	r2, r0
 80039a8:	3340      	adds	r3, #64	; 0x40
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	887a      	ldrh	r2, [r7, #2]
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e25b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d075      	beq.n	8003b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a16:	4ba3      	ldr	r3, [pc, #652]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d00c      	beq.n	8003a3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a22:	4ba0      	ldr	r3, [pc, #640]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d112      	bne.n	8003a54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a2e:	4b9d      	ldr	r3, [pc, #628]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3a:	d10b      	bne.n	8003a54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3c:	4b99      	ldr	r3, [pc, #612]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d05b      	beq.n	8003b00 <HAL_RCC_OscConfig+0x108>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d157      	bne.n	8003b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e236      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5c:	d106      	bne.n	8003a6c <HAL_RCC_OscConfig+0x74>
 8003a5e:	4b91      	ldr	r3, [pc, #580]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a90      	ldr	r2, [pc, #576]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e01d      	b.n	8003aa8 <HAL_RCC_OscConfig+0xb0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x98>
 8003a76:	4b8b      	ldr	r3, [pc, #556]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a8a      	ldr	r2, [pc, #552]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b88      	ldr	r3, [pc, #544]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a87      	ldr	r2, [pc, #540]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e00b      	b.n	8003aa8 <HAL_RCC_OscConfig+0xb0>
 8003a90:	4b84      	ldr	r3, [pc, #528]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a83      	ldr	r2, [pc, #524]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	4b81      	ldr	r3, [pc, #516]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a80      	ldr	r2, [pc, #512]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fe faea 	bl	8002088 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fe fae6 	bl	8002088 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e1fb      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aca:	4b76      	ldr	r3, [pc, #472]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xc0>
 8003ad6:	e014      	b.n	8003b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fe fad6 	bl	8002088 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae0:	f7fe fad2 	bl	8002088 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e1e7      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af2:	4b6c      	ldr	r3, [pc, #432]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0xe8>
 8003afe:	e000      	b.n	8003b02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d063      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b0e:	4b65      	ldr	r3, [pc, #404]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1a:	4b62      	ldr	r3, [pc, #392]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d11c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b26:	4b5f      	ldr	r3, [pc, #380]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d116      	bne.n	8003b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	4b5c      	ldr	r3, [pc, #368]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_RCC_OscConfig+0x152>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d001      	beq.n	8003b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e1bb      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4a:	4b56      	ldr	r3, [pc, #344]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4952      	ldr	r1, [pc, #328]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5e:	e03a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d020      	beq.n	8003baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b68:	4b4f      	ldr	r3, [pc, #316]	; (8003ca8 <HAL_RCC_OscConfig+0x2b0>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fe fa8b 	bl	8002088 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b76:	f7fe fa87 	bl	8002088 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e19c      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b88:	4b46      	ldr	r3, [pc, #280]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b94:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4940      	ldr	r1, [pc, #256]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	600b      	str	r3, [r1, #0]
 8003ba8:	e015      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003baa:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <HAL_RCC_OscConfig+0x2b0>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fa6a 	bl	8002088 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb8:	f7fe fa66 	bl	8002088 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e17b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bca:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d030      	beq.n	8003c44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d016      	beq.n	8003c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bea:	4b30      	ldr	r3, [pc, #192]	; (8003cac <HAL_RCC_OscConfig+0x2b4>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf0:	f7fe fa4a 	bl	8002088 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf8:	f7fe fa46 	bl	8002088 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e15b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0a:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x200>
 8003c16:	e015      	b.n	8003c44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c18:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_RCC_OscConfig+0x2b4>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe fa33 	bl	8002088 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c26:	f7fe fa2f 	bl	8002088 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e144      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f0      	bne.n	8003c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80a0 	beq.w	8003d92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10f      	bne.n	8003c82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c70:	6413      	str	r3, [r2, #64]	; 0x40
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_OscConfig+0x2b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d121      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <HAL_RCC_OscConfig+0x2b8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <HAL_RCC_OscConfig+0x2b8>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9a:	f7fe f9f5 	bl	8002088 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	e011      	b.n	8003cc6 <HAL_RCC_OscConfig+0x2ce>
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	42470000 	.word	0x42470000
 8003cac:	42470e80 	.word	0x42470e80
 8003cb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb4:	f7fe f9e8 	bl	8002088 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e0fd      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b81      	ldr	r3, [pc, #516]	; (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d106      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x2f0>
 8003cda:	4b7d      	ldr	r3, [pc, #500]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	4a7c      	ldr	r2, [pc, #496]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce6:	e01c      	b.n	8003d22 <HAL_RCC_OscConfig+0x32a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d10c      	bne.n	8003d0a <HAL_RCC_OscConfig+0x312>
 8003cf0:	4b77      	ldr	r3, [pc, #476]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a76      	ldr	r2, [pc, #472]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003cf6:	f043 0304 	orr.w	r3, r3, #4
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfc:	4b74      	ldr	r3, [pc, #464]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	4a73      	ldr	r2, [pc, #460]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6713      	str	r3, [r2, #112]	; 0x70
 8003d08:	e00b      	b.n	8003d22 <HAL_RCC_OscConfig+0x32a>
 8003d0a:	4b71      	ldr	r3, [pc, #452]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a70      	ldr	r2, [pc, #448]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
 8003d16:	4b6e      	ldr	r3, [pc, #440]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a6d      	ldr	r2, [pc, #436]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d015      	beq.n	8003d56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2a:	f7fe f9ad 	bl	8002088 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d32:	f7fe f9a9 	bl	8002088 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0bc      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	4b61      	ldr	r3, [pc, #388]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ee      	beq.n	8003d32 <HAL_RCC_OscConfig+0x33a>
 8003d54:	e014      	b.n	8003d80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d56:	f7fe f997 	bl	8002088 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5c:	e00a      	b.n	8003d74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7fe f993 	bl	8002088 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e0a6      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d74:	4b56      	ldr	r3, [pc, #344]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ee      	bne.n	8003d5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d105      	bne.n	8003d92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	4b52      	ldr	r3, [pc, #328]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	4a51      	ldr	r2, [pc, #324]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8092 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d9c:	4b4c      	ldr	r3, [pc, #304]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d05c      	beq.n	8003e62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d141      	bne.n	8003e34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db0:	4b48      	ldr	r3, [pc, #288]	; (8003ed4 <HAL_RCC_OscConfig+0x4dc>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fe f967 	bl	8002088 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fe f963 	bl	8002088 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e078      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd0:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	019b      	lsls	r3, r3, #6
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	3b01      	subs	r3, #1
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	061b      	lsls	r3, r3, #24
 8003e00:	4933      	ldr	r1, [pc, #204]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e06:	4b33      	ldr	r3, [pc, #204]	; (8003ed4 <HAL_RCC_OscConfig+0x4dc>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fe f93c 	bl	8002088 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fe f938 	bl	8002088 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e04d      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x41c>
 8003e32:	e045      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e34:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <HAL_RCC_OscConfig+0x4dc>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7fe f925 	bl	8002088 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fe f921 	bl	8002088 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e036      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f0      	bne.n	8003e42 <HAL_RCC_OscConfig+0x44a>
 8003e60:	e02e      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e029      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d11c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d115      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e96:	4013      	ands	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d10d      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d106      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40007000 	.word	0x40007000
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	42470060 	.word	0x42470060

08003ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0cc      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eec:	4b68      	ldr	r3, [pc, #416]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d90c      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efa:	4b65      	ldr	r3, [pc, #404]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b63      	ldr	r3, [pc, #396]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0b8      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f2c:	4b59      	ldr	r3, [pc, #356]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4a58      	ldr	r2, [pc, #352]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f44:	4b53      	ldr	r3, [pc, #332]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a52      	ldr	r2, [pc, #328]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f50:	4b50      	ldr	r3, [pc, #320]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	494d      	ldr	r1, [pc, #308]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d044      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d119      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e07f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d003      	beq.n	8003f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d107      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f96:	4b3f      	ldr	r3, [pc, #252]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e06f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa6:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e067      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb6:	4b37      	ldr	r3, [pc, #220]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f023 0203 	bic.w	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	4934      	ldr	r1, [pc, #208]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc8:	f7fe f85e 	bl	8002088 <HAL_GetTick>
 8003fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd0:	f7fe f85a 	bl	8002088 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e04f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe6:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 020c 	and.w	r2, r3, #12
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d1eb      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff8:	4b25      	ldr	r3, [pc, #148]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d20c      	bcs.n	8004020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e032      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800402c:	4b19      	ldr	r3, [pc, #100]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4916      	ldr	r1, [pc, #88]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	490e      	ldr	r1, [pc, #56]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405e:	f000 f821 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 8004062:	4601      	mov	r1, r0
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <HAL_RCC_ClockConfig+0x1c0>)
 8004070:	5cd3      	ldrb	r3, [r2, r3]
 8004072:	fa21 f303 	lsr.w	r3, r1, r3
 8004076:	4a09      	ldr	r2, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x1c8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fd ffbe 	bl	8002000 <HAL_InitTick>

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40023c00 	.word	0x40023c00
 8004094:	40023800 	.word	0x40023800
 8004098:	0800b92c 	.word	0x0800b92c
 800409c:	20000008 	.word	0x20000008
 80040a0:	2000000c 	.word	0x2000000c

080040a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	2300      	movs	r3, #0
 80040b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040ba:	4b63      	ldr	r3, [pc, #396]	; (8004248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d007      	beq.n	80040d6 <HAL_RCC_GetSysClockFreq+0x32>
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d008      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x38>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f040 80b4 	bne.w	8004238 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d0:	4b5e      	ldr	r3, [pc, #376]	; (800424c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040d2:	60bb      	str	r3, [r7, #8]
       break;
 80040d4:	e0b3      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040d6:	4b5e      	ldr	r3, [pc, #376]	; (8004250 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80040d8:	60bb      	str	r3, [r7, #8]
      break;
 80040da:	e0b0      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040dc:	4b5a      	ldr	r3, [pc, #360]	; (8004248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040e6:	4b58      	ldr	r3, [pc, #352]	; (8004248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d04a      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f2:	4b55      	ldr	r3, [pc, #340]	; (8004248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	099b      	lsrs	r3, r3, #6
 80040f8:	f04f 0400 	mov.w	r4, #0
 80040fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	ea03 0501 	and.w	r5, r3, r1
 8004108:	ea04 0602 	and.w	r6, r4, r2
 800410c:	4629      	mov	r1, r5
 800410e:	4632      	mov	r2, r6
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	f04f 0400 	mov.w	r4, #0
 8004118:	0154      	lsls	r4, r2, #5
 800411a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800411e:	014b      	lsls	r3, r1, #5
 8004120:	4619      	mov	r1, r3
 8004122:	4622      	mov	r2, r4
 8004124:	1b49      	subs	r1, r1, r5
 8004126:	eb62 0206 	sbc.w	r2, r2, r6
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	f04f 0400 	mov.w	r4, #0
 8004132:	0194      	lsls	r4, r2, #6
 8004134:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004138:	018b      	lsls	r3, r1, #6
 800413a:	1a5b      	subs	r3, r3, r1
 800413c:	eb64 0402 	sbc.w	r4, r4, r2
 8004140:	f04f 0100 	mov.w	r1, #0
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	00e2      	lsls	r2, r4, #3
 800414a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800414e:	00d9      	lsls	r1, r3, #3
 8004150:	460b      	mov	r3, r1
 8004152:	4614      	mov	r4, r2
 8004154:	195b      	adds	r3, r3, r5
 8004156:	eb44 0406 	adc.w	r4, r4, r6
 800415a:	f04f 0100 	mov.w	r1, #0
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	0262      	lsls	r2, r4, #9
 8004164:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004168:	0259      	lsls	r1, r3, #9
 800416a:	460b      	mov	r3, r1
 800416c:	4614      	mov	r4, r2
 800416e:	4618      	mov	r0, r3
 8004170:	4621      	mov	r1, r4
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f04f 0400 	mov.w	r4, #0
 8004178:	461a      	mov	r2, r3
 800417a:	4623      	mov	r3, r4
 800417c:	f7fc fd34 	bl	8000be8 <__aeabi_uldivmod>
 8004180:	4603      	mov	r3, r0
 8004182:	460c      	mov	r4, r1
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	e049      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004188:	4b2f      	ldr	r3, [pc, #188]	; (8004248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	099b      	lsrs	r3, r3, #6
 800418e:	f04f 0400 	mov.w	r4, #0
 8004192:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	ea03 0501 	and.w	r5, r3, r1
 800419e:	ea04 0602 	and.w	r6, r4, r2
 80041a2:	4629      	mov	r1, r5
 80041a4:	4632      	mov	r2, r6
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	f04f 0400 	mov.w	r4, #0
 80041ae:	0154      	lsls	r4, r2, #5
 80041b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041b4:	014b      	lsls	r3, r1, #5
 80041b6:	4619      	mov	r1, r3
 80041b8:	4622      	mov	r2, r4
 80041ba:	1b49      	subs	r1, r1, r5
 80041bc:	eb62 0206 	sbc.w	r2, r2, r6
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	f04f 0400 	mov.w	r4, #0
 80041c8:	0194      	lsls	r4, r2, #6
 80041ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041ce:	018b      	lsls	r3, r1, #6
 80041d0:	1a5b      	subs	r3, r3, r1
 80041d2:	eb64 0402 	sbc.w	r4, r4, r2
 80041d6:	f04f 0100 	mov.w	r1, #0
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	00e2      	lsls	r2, r4, #3
 80041e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041e4:	00d9      	lsls	r1, r3, #3
 80041e6:	460b      	mov	r3, r1
 80041e8:	4614      	mov	r4, r2
 80041ea:	195b      	adds	r3, r3, r5
 80041ec:	eb44 0406 	adc.w	r4, r4, r6
 80041f0:	f04f 0100 	mov.w	r1, #0
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	02a2      	lsls	r2, r4, #10
 80041fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041fe:	0299      	lsls	r1, r3, #10
 8004200:	460b      	mov	r3, r1
 8004202:	4614      	mov	r4, r2
 8004204:	4618      	mov	r0, r3
 8004206:	4621      	mov	r1, r4
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f04f 0400 	mov.w	r4, #0
 800420e:	461a      	mov	r2, r3
 8004210:	4623      	mov	r3, r4
 8004212:	f7fc fce9 	bl	8000be8 <__aeabi_uldivmod>
 8004216:	4603      	mov	r3, r0
 8004218:	460c      	mov	r4, r1
 800421a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800421c:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	0c1b      	lsrs	r3, r3, #16
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	3301      	adds	r3, #1
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	60bb      	str	r3, [r7, #8]
      break;
 8004236:	e002      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800423a:	60bb      	str	r3, [r7, #8]
      break;
 800423c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800423e:	68bb      	ldr	r3, [r7, #8]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004248:	40023800 	.word	0x40023800
 800424c:	00f42400 	.word	0x00f42400
 8004250:	007a1200 	.word	0x007a1200

08004254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004258:	4b03      	ldr	r3, [pc, #12]	; (8004268 <HAL_RCC_GetHCLKFreq+0x14>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20000008 	.word	0x20000008

0800426c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e056      	b.n	800432c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fd fd3d 	bl	8001d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	ea42 0103 	orr.w	r1, r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	0c1b      	lsrs	r3, r3, #16
 80042fc:	f003 0104 	and.w	r1, r3, #4
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	; 0x30
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004342:	2301      	movs	r3, #1
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_SPI_TransmitReceive+0x26>
 8004356:	2302      	movs	r3, #2
 8004358:	e18a      	b.n	8004670 <HAL_SPI_TransmitReceive+0x33c>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004362:	f7fd fe91 	bl	8002088 <HAL_GetTick>
 8004366:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004378:	887b      	ldrh	r3, [r7, #2]
 800437a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800437c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004380:	2b01      	cmp	r3, #1
 8004382:	d00f      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x70>
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438a:	d107      	bne.n	800439c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d103      	bne.n	800439c <HAL_SPI_TransmitReceive+0x68>
 8004394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004398:	2b04      	cmp	r3, #4
 800439a:	d003      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800439c:	2302      	movs	r3, #2
 800439e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043a2:	e15b      	b.n	800465c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x82>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x82>
 80043b0:	887b      	ldrh	r3, [r7, #2]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043bc:	e14e      	b.n	800465c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d003      	beq.n	80043d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2205      	movs	r2, #5
 80043ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	887a      	ldrh	r2, [r7, #2]
 80043e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	887a      	ldrh	r2, [r7, #2]
 80043e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	887a      	ldrh	r2, [r7, #2]
 80043f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	887a      	ldrh	r2, [r7, #2]
 80043fa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	d007      	beq.n	8004426 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004424:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442e:	d178      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_SPI_TransmitReceive+0x10a>
 8004438:	8b7b      	ldrh	r3, [r7, #26]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d166      	bne.n	800450c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	881a      	ldrh	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	1c9a      	adds	r2, r3, #2
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004462:	e053      	b.n	800450c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b02      	cmp	r3, #2
 8004470:	d11b      	bne.n	80044aa <HAL_SPI_TransmitReceive+0x176>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d016      	beq.n	80044aa <HAL_SPI_TransmitReceive+0x176>
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	2b01      	cmp	r3, #1
 8004480:	d113      	bne.n	80044aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	881a      	ldrh	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	1c9a      	adds	r2, r3, #2
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d119      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x1b8>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d014      	beq.n	80044ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	b292      	uxth	r2, r2
 80044ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	1c9a      	adds	r2, r3, #2
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044e8:	2301      	movs	r3, #1
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044ec:	f7fd fdcc 	bl	8002088 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d807      	bhi.n	800450c <HAL_SPI_TransmitReceive+0x1d8>
 80044fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d003      	beq.n	800450c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800450a:	e0a7      	b.n	800465c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1a6      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x130>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1a1      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x130>
 8004520:	e07c      	b.n	800461c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_SPI_TransmitReceive+0x1fc>
 800452a:	8b7b      	ldrh	r3, [r7, #26]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d16b      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	330c      	adds	r3, #12
 800453a:	7812      	ldrb	r2, [r2, #0]
 800453c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004556:	e057      	b.n	8004608 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b02      	cmp	r3, #2
 8004564:	d11c      	bne.n	80045a0 <HAL_SPI_TransmitReceive+0x26c>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d017      	beq.n	80045a0 <HAL_SPI_TransmitReceive+0x26c>
 8004570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004572:	2b01      	cmp	r3, #1
 8004574:	d114      	bne.n	80045a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	330c      	adds	r3, #12
 8004580:	7812      	ldrb	r2, [r2, #0]
 8004582:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d119      	bne.n	80045e2 <HAL_SPI_TransmitReceive+0x2ae>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d014      	beq.n	80045e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045de:	2301      	movs	r3, #1
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045e2:	f7fd fd51 	bl	8002088 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d803      	bhi.n	80045fa <HAL_SPI_TransmitReceive+0x2c6>
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d102      	bne.n	8004600 <HAL_SPI_TransmitReceive+0x2cc>
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d103      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004606:	e029      	b.n	800465c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1a2      	bne.n	8004558 <HAL_SPI_TransmitReceive+0x224>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d19d      	bne.n	8004558 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800461c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fa83 	bl	8004b2c <SPI_EndRxTxTransaction>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d006      	beq.n	800463a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004638:	e010      	b.n	800465c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10b      	bne.n	800465a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	e000      	b.n	800465c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800465a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800466c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004670:	4618      	mov	r0, r3
 8004672:	3730      	adds	r7, #48	; 0x30
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	4613      	mov	r3, r2
 8004684:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_SPI_Transmit_IT+0x20>
 8004694:	2302      	movs	r3, #2
 8004696:	e067      	b.n	8004768 <HAL_SPI_Transmit_IT+0xf0>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_SPI_Transmit_IT+0x34>
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046b0:	e055      	b.n	800475e <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d002      	beq.n	80046c4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80046be:	2302      	movs	r3, #2
 80046c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046c2:	e04c      	b.n	800475e <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2203      	movs	r2, #3
 80046c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	88fa      	ldrh	r2, [r7, #6]
 80046dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4a1b      	ldr	r2, [pc, #108]	; (8004774 <HAL_SPI_Transmit_IT+0xfc>)
 8004708:	645a      	str	r2, [r3, #68]	; 0x44
 800470a:	e002      	b.n	8004712 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <HAL_SPI_Transmit_IT+0x100>)
 8004710:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471a:	d107      	bne.n	800472c <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800472a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800473a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b40      	cmp	r3, #64	; 0x40
 8004748:	d008      	beq.n	800475c <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	e000      	b.n	800475e <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 800475c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004766:	7dfb      	ldrb	r3, [r7, #23]
}
 8004768:	4618      	mov	r0, r3
 800476a:	371c      	adds	r7, #28
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	08004a13 	.word	0x08004a13
 8004778:	080049cd 	.word	0x080049cd

0800477c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10f      	bne.n	80047c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	099b      	lsrs	r3, r3, #6
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d004      	beq.n	80047c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	4798      	blx	r3
    return;
 80047be:	e0d8      	b.n	8004972 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_SPI_IRQHandler+0x66>
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	09db      	lsrs	r3, r3, #7
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d004      	beq.n	80047e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	4798      	blx	r3
    return;
 80047e0:	e0c7      	b.n	8004972 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10c      	bne.n	8004808 <HAL_SPI_IRQHandler+0x8c>
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	099b      	lsrs	r3, r3, #6
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80b5 	beq.w	8004972 <HAL_SPI_IRQHandler+0x1f6>
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80ae 	beq.w	8004972 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d023      	beq.n	800486a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b03      	cmp	r3, #3
 800482c:	d011      	beq.n	8004852 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	f043 0204 	orr.w	r2, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	e00b      	b.n	800486a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	693b      	ldr	r3, [r7, #16]
        return;
 8004868:	e083      	b.n	8004972 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d014      	beq.n	80048a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	f043 0201 	orr.w	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00c      	beq.n	80048c6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b0:	f043 0208 	orr.w	r2, r3, #8
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80048b8:	2300      	movs	r3, #0
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	60bb      	str	r3, [r7, #8]
 80048c4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d050      	beq.n	8004970 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048dc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d104      	bne.n	80048fa <HAL_SPI_IRQHandler+0x17e>
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d034      	beq.n	8004964 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0203 	bic.w	r2, r2, #3
 8004908:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d011      	beq.n	8004936 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004916:	4a18      	ldr	r2, [pc, #96]	; (8004978 <HAL_SPI_IRQHandler+0x1fc>)
 8004918:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	4618      	mov	r0, r3
 8004920:	f7fd fcf1 	bl	8002306 <HAL_DMA_Abort_IT>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493a:	2b00      	cmp	r3, #0
 800493c:	d016      	beq.n	800496c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004942:	4a0d      	ldr	r2, [pc, #52]	; (8004978 <HAL_SPI_IRQHandler+0x1fc>)
 8004944:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd fcdb 	bl	8002306 <HAL_DMA_Abort_IT>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004962:	e003      	b.n	800496c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f813 	bl	8004990 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800496a:	e000      	b.n	800496e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800496c:	bf00      	nop
    return;
 800496e:	bf00      	nop
 8004970:	bf00      	nop
  }
}
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	080049a5 	.word	0x080049a5

0800497c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff ffe6 	bl	8004990 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	7812      	ldrb	r2, [r2, #0]
 80049e0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f8d3 	bl	8004bb0 <SPI_CloseTx_ISR>
  }
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	881a      	ldrh	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	1c9a      	adds	r2, r3, #2
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d102      	bne.n	8004a4e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f8b1 	bl	8004bb0 <SPI_CloseTx_ISR>
  }
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a66:	e04c      	b.n	8004b02 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	d048      	beq.n	8004b02 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004a70:	f7fd fb0a 	bl	8002088 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d902      	bls.n	8004a86 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d13d      	bne.n	8004b02 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9e:	d111      	bne.n	8004ac4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa8:	d004      	beq.n	8004ab4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab2:	d107      	bne.n	8004ac4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004acc:	d10f      	bne.n	8004aee <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e00f      	b.n	8004b22 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	bf0c      	ite	eq
 8004b12:	2301      	moveq	r3, #1
 8004b14:	2300      	movne	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d1a3      	bne.n	8004a68 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b38:	4b1b      	ldr	r3, [pc, #108]	; (8004ba8 <SPI_EndRxTxTransaction+0x7c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1b      	ldr	r2, [pc, #108]	; (8004bac <SPI_EndRxTxTransaction+0x80>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	0d5b      	lsrs	r3, r3, #21
 8004b44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b48:	fb02 f303 	mul.w	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b56:	d112      	bne.n	8004b7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2180      	movs	r1, #128	; 0x80
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff ff77 	bl	8004a56 <SPI_WaitFlagStateUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d016      	beq.n	8004b9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e00f      	b.n	8004b9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b94:	2b80      	cmp	r3, #128	; 0x80
 8004b96:	d0f2      	beq.n	8004b7e <SPI_EndRxTxTransaction+0x52>
 8004b98:	e000      	b.n	8004b9c <SPI_EndRxTxTransaction+0x70>
        break;
 8004b9a:	bf00      	nop
  }

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000008 	.word	0x20000008
 8004bac:	165e9f81 	.word	0x165e9f81

08004bb0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004bb8:	4b2c      	ldr	r3, [pc, #176]	; (8004c6c <SPI_CloseTx_ISR+0xbc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a2c      	ldr	r2, [pc, #176]	; (8004c70 <SPI_CloseTx_ISR+0xc0>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	0a5b      	lsrs	r3, r3, #9
 8004bc4:	2264      	movs	r2, #100	; 0x64
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bcc:	f7fd fa5c 	bl	8002088 <HAL_GetTick>
 8004bd0:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d106      	bne.n	8004be6 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bdc:	f043 0220 	orr.w	r2, r3, #32
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004be4:	e009      	b.n	8004bfa <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0eb      	beq.n	8004bd2 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c08:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	2164      	movs	r1, #100	; 0x64
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff ff8c 	bl	8004b2c <SPI_EndRxTxTransaction>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff fe9b 	bl	8004990 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004c5a:	e002      	b.n	8004c62 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff fe8d 	bl	800497c <HAL_SPI_TxCpltCallback>
}
 8004c62:	bf00      	nop
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000008 	.word	0x20000008
 8004c70:	057619f1 	.word	0x057619f1

08004c74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c74:	b084      	sub	sp, #16
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	f107 001c 	add.w	r0, r7, #28
 8004c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d122      	bne.n	8004cd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d105      	bne.n	8004cc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f001 fa7c 	bl	80061c4 <USB_CoreReset>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	73fb      	strb	r3, [r7, #15]
 8004cd0:	e01a      	b.n	8004d08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f001 fa70 	bl	80061c4 <USB_CoreReset>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
 8004cfa:	e005      	b.n	8004d08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d10b      	bne.n	8004d26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f043 0206 	orr.w	r2, r3, #6
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f043 0220 	orr.w	r2, r3, #32
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d32:	b004      	add	sp, #16
 8004d34:	4770      	bx	lr
	...

08004d38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d165      	bne.n	8004e18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4a41      	ldr	r2, [pc, #260]	; (8004e54 <USB_SetTurnaroundTime+0x11c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d906      	bls.n	8004d62 <USB_SetTurnaroundTime+0x2a>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4a40      	ldr	r2, [pc, #256]	; (8004e58 <USB_SetTurnaroundTime+0x120>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d802      	bhi.n	8004d62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d5c:	230f      	movs	r3, #15
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e062      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4a3c      	ldr	r2, [pc, #240]	; (8004e58 <USB_SetTurnaroundTime+0x120>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d906      	bls.n	8004d78 <USB_SetTurnaroundTime+0x40>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4a3b      	ldr	r2, [pc, #236]	; (8004e5c <USB_SetTurnaroundTime+0x124>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d802      	bhi.n	8004d78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d72:	230e      	movs	r3, #14
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	e057      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4a38      	ldr	r2, [pc, #224]	; (8004e5c <USB_SetTurnaroundTime+0x124>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d906      	bls.n	8004d8e <USB_SetTurnaroundTime+0x56>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4a37      	ldr	r2, [pc, #220]	; (8004e60 <USB_SetTurnaroundTime+0x128>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d802      	bhi.n	8004d8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d88:	230d      	movs	r3, #13
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e04c      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	4a33      	ldr	r2, [pc, #204]	; (8004e60 <USB_SetTurnaroundTime+0x128>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d906      	bls.n	8004da4 <USB_SetTurnaroundTime+0x6c>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4a32      	ldr	r2, [pc, #200]	; (8004e64 <USB_SetTurnaroundTime+0x12c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d802      	bhi.n	8004da4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d9e:	230c      	movs	r3, #12
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e041      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4a2f      	ldr	r2, [pc, #188]	; (8004e64 <USB_SetTurnaroundTime+0x12c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d906      	bls.n	8004dba <USB_SetTurnaroundTime+0x82>
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4a2e      	ldr	r2, [pc, #184]	; (8004e68 <USB_SetTurnaroundTime+0x130>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d802      	bhi.n	8004dba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004db4:	230b      	movs	r3, #11
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e036      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <USB_SetTurnaroundTime+0x130>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d906      	bls.n	8004dd0 <USB_SetTurnaroundTime+0x98>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4a29      	ldr	r2, [pc, #164]	; (8004e6c <USB_SetTurnaroundTime+0x134>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d802      	bhi.n	8004dd0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004dca:	230a      	movs	r3, #10
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e02b      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <USB_SetTurnaroundTime+0x134>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d906      	bls.n	8004de6 <USB_SetTurnaroundTime+0xae>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <USB_SetTurnaroundTime+0x138>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d802      	bhi.n	8004de6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004de0:	2309      	movs	r3, #9
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	e020      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4a21      	ldr	r2, [pc, #132]	; (8004e70 <USB_SetTurnaroundTime+0x138>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d906      	bls.n	8004dfc <USB_SetTurnaroundTime+0xc4>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <USB_SetTurnaroundTime+0x13c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d802      	bhi.n	8004dfc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004df6:	2308      	movs	r3, #8
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e015      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <USB_SetTurnaroundTime+0x13c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d906      	bls.n	8004e12 <USB_SetTurnaroundTime+0xda>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <USB_SetTurnaroundTime+0x140>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d802      	bhi.n	8004e12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e0c:	2307      	movs	r3, #7
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	e00a      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e12:	2306      	movs	r3, #6
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e007      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d102      	bne.n	8004e24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e1e:	2309      	movs	r3, #9
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	e001      	b.n	8004e28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e24:	2309      	movs	r3, #9
 8004e26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	029b      	lsls	r3, r3, #10
 8004e3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e40:	431a      	orrs	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	00d8acbf 	.word	0x00d8acbf
 8004e58:	00e4e1bf 	.word	0x00e4e1bf
 8004e5c:	00f423ff 	.word	0x00f423ff
 8004e60:	0106737f 	.word	0x0106737f
 8004e64:	011a499f 	.word	0x011a499f
 8004e68:	01312cff 	.word	0x01312cff
 8004e6c:	014ca43f 	.word	0x014ca43f
 8004e70:	016e35ff 	.word	0x016e35ff
 8004e74:	01a6ab1f 	.word	0x01a6ab1f
 8004e78:	01e847ff 	.word	0x01e847ff

08004e7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f043 0201 	orr.w	r2, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f023 0201 	bic.w	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d106      	bne.n	8004eec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60da      	str	r2, [r3, #12]
 8004eea:	e00b      	b.n	8004f04 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60da      	str	r2, [r3, #12]
 8004efe:	e001      	b.n	8004f04 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e003      	b.n	8004f0c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f04:	2032      	movs	r0, #50	; 0x32
 8004f06:	f7fd f8cb 	bl	80020a0 <HAL_Delay>

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f14:	b084      	sub	sp, #16
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b086      	sub	sp, #24
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f2e:	2300      	movs	r3, #0
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	e009      	b.n	8004f48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	3340      	adds	r3, #64	; 0x40
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	2200      	movs	r2, #0
 8004f40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3301      	adds	r3, #1
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	2b0e      	cmp	r3, #14
 8004f4c:	d9f2      	bls.n	8004f34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d112      	bne.n	8004f7a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38
 8004f78:	e00b      	b.n	8004f92 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f98:	461a      	mov	r2, r3
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fac:	461a      	mov	r2, r3
 8004fae:	680b      	ldr	r3, [r1, #0]
 8004fb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d10c      	bne.n	8004fd2 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d104      	bne.n	8004fc8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f961 	bl	8005288 <USB_SetDevSpeed>
 8004fc6:	e008      	b.n	8004fda <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fc8:	2101      	movs	r1, #1
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f95c 	bl	8005288 <USB_SetDevSpeed>
 8004fd0:	e003      	b.n	8004fda <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fd2:	2103      	movs	r1, #3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f957 	bl	8005288 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fda:	2110      	movs	r1, #16
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f90b 	bl	80051f8 <USB_FlushTxFifo>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f929 	bl	8005244 <USB_FlushRxFifo>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005002:	461a      	mov	r2, r3
 8005004:	2300      	movs	r3, #0
 8005006:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	461a      	mov	r2, r3
 8005010:	2300      	movs	r3, #0
 8005012:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501a:	461a      	mov	r2, r3
 800501c:	2300      	movs	r3, #0
 800501e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	e043      	b.n	80050ae <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800503c:	d118      	bne.n	8005070 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10a      	bne.n	800505a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	461a      	mov	r2, r3
 8005052:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	e013      	b.n	8005082 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005066:	461a      	mov	r2, r3
 8005068:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e008      	b.n	8005082 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507c:	461a      	mov	r2, r3
 800507e:	2300      	movs	r3, #0
 8005080:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508e:	461a      	mov	r2, r3
 8005090:	2300      	movs	r3, #0
 8005092:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	461a      	mov	r2, r3
 80050a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	3301      	adds	r3, #1
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d3b7      	bcc.n	8005026 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050b6:	2300      	movs	r3, #0
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	e043      	b.n	8005144 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050d2:	d118      	bne.n	8005106 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10a      	bne.n	80050f0 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e6:	461a      	mov	r2, r3
 80050e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	e013      	b.n	8005118 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fc:	461a      	mov	r2, r3
 80050fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e008      	b.n	8005118 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005112:	461a      	mov	r2, r3
 8005114:	2300      	movs	r3, #0
 8005116:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005124:	461a      	mov	r2, r3
 8005126:	2300      	movs	r3, #0
 8005128:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005136:	461a      	mov	r2, r3
 8005138:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800513c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	3301      	adds	r3, #1
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	429a      	cmp	r2, r3
 800514a:	d3b7      	bcc.n	80050bc <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800515a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800515e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	2b01      	cmp	r3, #1
 8005164:	d111      	bne.n	800518a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516c:	461a      	mov	r2, r3
 800516e:	4b20      	ldr	r3, [pc, #128]	; (80051f0 <USB_DevInit+0x2dc>)
 8005170:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005184:	f043 0303 	orr.w	r3, r3, #3
 8005188:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005196:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f043 0210 	orr.w	r2, r3, #16
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <USB_DevInit+0x2e0>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	f043 0208 	orr.w	r2, r3, #8
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d107      	bne.n	80051de <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d6:	f043 0304 	orr.w	r3, r3, #4
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051ea:	b004      	add	sp, #16
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	00800100 	.word	0x00800100
 80051f4:	803c3800 	.word	0x803c3800

080051f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	019b      	lsls	r3, r3, #6
 800520a:	f043 0220 	orr.w	r2, r3, #32
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a09      	ldr	r2, [pc, #36]	; (8005240 <USB_FlushTxFifo+0x48>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e006      	b.n	8005232 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b20      	cmp	r3, #32
 800522e:	d0f0      	beq.n	8005212 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	00030d40 	.word	0x00030d40

08005244 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2210      	movs	r2, #16
 8005254:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3301      	adds	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4a09      	ldr	r2, [pc, #36]	; (8005284 <USB_FlushRxFifo+0x40>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d901      	bls.n	8005268 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e006      	b.n	8005276 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b10      	cmp	r3, #16
 8005272:	d0f0      	beq.n	8005256 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	00030d40 	.word	0x00030d40

08005288 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	68f9      	ldr	r1, [r7, #12]
 80052a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a8:	4313      	orrs	r3, r2
 80052aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b087      	sub	sp, #28
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 0306 	and.w	r3, r3, #6
 80052d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d102      	bne.n	80052e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052da:	2300      	movs	r3, #0
 80052dc:	75fb      	strb	r3, [r7, #23]
 80052de:	e00a      	b.n	80052f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d002      	beq.n	80052ec <USB_GetDevSpeed+0x32>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b06      	cmp	r3, #6
 80052ea:	d102      	bne.n	80052f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052ec:	2302      	movs	r3, #2
 80052ee:	75fb      	strb	r3, [r7, #23]
 80052f0:	e001      	b.n	80052f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052f2:	230f      	movs	r3, #15
 80052f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	785b      	ldrb	r3, [r3, #1]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d13a      	bne.n	8005396 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	2101      	movs	r1, #1
 8005332:	fa01 f303 	lsl.w	r3, r1, r3
 8005336:	b29b      	uxth	r3, r3
 8005338:	68f9      	ldr	r1, [r7, #12]
 800533a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800533e:	4313      	orrs	r3, r2
 8005340:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d155      	bne.n	8005404 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	78db      	ldrb	r3, [r3, #3]
 8005372:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005374:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	059b      	lsls	r3, r3, #22
 800537a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800537c:	4313      	orrs	r3, r2
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	440a      	add	r2, r1
 8005386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800538a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	e036      	b.n	8005404 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539c:	69da      	ldr	r2, [r3, #28]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	2101      	movs	r1, #1
 80053a8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ac:	041b      	lsls	r3, r3, #16
 80053ae:	68f9      	ldr	r1, [r7, #12]
 80053b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053b4:	4313      	orrs	r3, r2
 80053b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d11a      	bne.n	8005404 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	78db      	ldrb	r3, [r3, #3]
 80053e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053ea:	430b      	orrs	r3, r1
 80053ec:	4313      	orrs	r3, r2
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005402:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d135      	bne.n	800549c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	2101      	movs	r1, #1
 8005442:	fa01 f303 	lsl.w	r3, r1, r3
 8005446:	b29b      	uxth	r3, r3
 8005448:	43db      	mvns	r3, r3
 800544a:	68f9      	ldr	r1, [r7, #12]
 800544c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005450:	4013      	ands	r3, r2
 8005452:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	2101      	movs	r1, #1
 8005466:	fa01 f303 	lsl.w	r3, r1, r3
 800546a:	b29b      	uxth	r3, r3
 800546c:	43db      	mvns	r3, r3
 800546e:	68f9      	ldr	r1, [r7, #12]
 8005470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005474:	4013      	ands	r3, r2
 8005476:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	0159      	lsls	r1, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	440b      	add	r3, r1
 800548e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005492:	4619      	mov	r1, r3
 8005494:	4b1f      	ldr	r3, [pc, #124]	; (8005514 <USB_DeactivateEndpoint+0x100>)
 8005496:	4013      	ands	r3, r2
 8005498:	600b      	str	r3, [r1, #0]
 800549a:	e034      	b.n	8005506 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	2101      	movs	r1, #1
 80054ae:	fa01 f303 	lsl.w	r3, r1, r3
 80054b2:	041b      	lsls	r3, r3, #16
 80054b4:	43db      	mvns	r3, r3
 80054b6:	68f9      	ldr	r1, [r7, #12]
 80054b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054bc:	4013      	ands	r3, r2
 80054be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	2101      	movs	r1, #1
 80054d2:	fa01 f303 	lsl.w	r3, r1, r3
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	43db      	mvns	r3, r3
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e0:	4013      	ands	r3, r2
 80054e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	0159      	lsls	r1, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	440b      	add	r3, r1
 80054fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fe:	4619      	mov	r1, r3
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <USB_DeactivateEndpoint+0x104>)
 8005502:	4013      	ands	r3, r2
 8005504:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	ec337800 	.word	0xec337800
 8005518:	eff37800 	.word	0xeff37800

0800551c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	; 0x28
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b01      	cmp	r3, #1
 800553a:	f040 815c 	bne.w	80057f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d132      	bne.n	80055ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	0151      	lsls	r1, r2, #5
 8005558:	69fa      	ldr	r2, [r7, #28]
 800555a:	440a      	add	r2, r1
 800555c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005560:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005564:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005568:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	0151      	lsls	r1, r2, #5
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	440a      	add	r2, r1
 8005580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005588:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a4:	0cdb      	lsrs	r3, r3, #19
 80055a6:	04db      	lsls	r3, r3, #19
 80055a8:	6113      	str	r3, [r2, #16]
 80055aa:	e074      	b.n	8005696 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c6:	0cdb      	lsrs	r3, r3, #19
 80055c8:	04db      	lsls	r3, r3, #19
 80055ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	0151      	lsls	r1, r2, #5
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	440a      	add	r2, r1
 80055e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fc:	691a      	ldr	r2, [r3, #16]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	6959      	ldr	r1, [r3, #20]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	440b      	add	r3, r1
 8005608:	1e59      	subs	r1, r3, #1
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005612:	04d9      	lsls	r1, r3, #19
 8005614:	4b9d      	ldr	r3, [pc, #628]	; (800588c <USB_EPStartXfer+0x370>)
 8005616:	400b      	ands	r3, r1
 8005618:	69b9      	ldr	r1, [r7, #24]
 800561a:	0148      	lsls	r0, r1, #5
 800561c:	69f9      	ldr	r1, [r7, #28]
 800561e:	4401      	add	r1, r0
 8005620:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005624:	4313      	orrs	r3, r2
 8005626:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800563e:	69b9      	ldr	r1, [r7, #24]
 8005640:	0148      	lsls	r0, r1, #5
 8005642:	69f9      	ldr	r1, [r7, #28]
 8005644:	4401      	add	r1, r0
 8005646:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800564a:	4313      	orrs	r3, r2
 800564c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	78db      	ldrb	r3, [r3, #3]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d11f      	bne.n	8005696 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005670:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005674:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	0151      	lsls	r1, r2, #5
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	440a      	add	r2, r1
 800568c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005690:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005694:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d14b      	bne.n	8005734 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d009      	beq.n	80056b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	461a      	mov	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	78db      	ldrb	r3, [r3, #3]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d128      	bne.n	8005712 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d110      	bne.n	80056f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	e00f      	b.n	8005712 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	440a      	add	r2, r1
 8005708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005710:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	440a      	add	r2, r1
 8005728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800572c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e12f      	b.n	8005994 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	440a      	add	r2, r1
 800574a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800574e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005752:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	78db      	ldrb	r3, [r3, #3]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d015      	beq.n	8005788 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 8117 	beq.w	8005994 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	2101      	movs	r1, #1
 8005778:	fa01 f303 	lsl.w	r3, r1, r3
 800577c:	69f9      	ldr	r1, [r7, #28]
 800577e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005782:	4313      	orrs	r3, r2
 8005784:	634b      	str	r3, [r1, #52]	; 0x34
 8005786:	e105      	b.n	8005994 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d110      	bne.n	80057ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e00f      	b.n	80057da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	68d9      	ldr	r1, [r3, #12]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	b298      	uxth	r0, r3
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	4603      	mov	r3, r0
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 fa2b 	bl	8005c4a <USB_WritePacket>
 80057f4:	e0ce      	b.n	8005994 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	440a      	add	r2, r1
 800580c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005810:	0cdb      	lsrs	r3, r3, #19
 8005812:	04db      	lsls	r3, r3, #19
 8005814:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005830:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005834:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005838:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d126      	bne.n	8005890 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005858:	69b9      	ldr	r1, [r7, #24]
 800585a:	0148      	lsls	r0, r1, #5
 800585c:	69f9      	ldr	r1, [r7, #28]
 800585e:	4401      	add	r1, r0
 8005860:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005864:	4313      	orrs	r3, r2
 8005866:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005882:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005886:	6113      	str	r3, [r2, #16]
 8005888:	e036      	b.n	80058f8 <USB_EPStartXfer+0x3dc>
 800588a:	bf00      	nop
 800588c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	4413      	add	r3, r2
 800589a:	1e5a      	subs	r2, r3, #1
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	8afb      	ldrh	r3, [r7, #22]
 80058b6:	04d9      	lsls	r1, r3, #19
 80058b8:	4b39      	ldr	r3, [pc, #228]	; (80059a0 <USB_EPStartXfer+0x484>)
 80058ba:	400b      	ands	r3, r1
 80058bc:	69b9      	ldr	r1, [r7, #24]
 80058be:	0148      	lsls	r0, r1, #5
 80058c0:	69f9      	ldr	r1, [r7, #28]
 80058c2:	4401      	add	r1, r0
 80058c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058c8:	4313      	orrs	r3, r2
 80058ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	8af9      	ldrh	r1, [r7, #22]
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e8:	69b9      	ldr	r1, [r7, #24]
 80058ea:	0148      	lsls	r0, r1, #5
 80058ec:	69f9      	ldr	r1, [r7, #28]
 80058ee:	4401      	add	r1, r0
 80058f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058f4:	4313      	orrs	r3, r2
 80058f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d10d      	bne.n	800591a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	68d9      	ldr	r1, [r3, #12]
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005916:	460a      	mov	r2, r1
 8005918:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	78db      	ldrb	r3, [r3, #3]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d128      	bne.n	8005974 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d110      	bne.n	8005954 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e00f      	b.n	8005974 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005972:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	440a      	add	r2, r1
 800598a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005992:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	1ff80000 	.word	0x1ff80000

080059a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	4613      	mov	r3, r2
 80059b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	f040 80cd 	bne.w	8005b60 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d132      	bne.n	8005a34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2c:	0cdb      	lsrs	r3, r3, #19
 8005a2e:	04db      	lsls	r3, r3, #19
 8005a30:	6113      	str	r3, [r2, #16]
 8005a32:	e04e      	b.n	8005ad2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4e:	0cdb      	lsrs	r3, r3, #19
 8005a50:	04db      	lsls	r3, r3, #19
 8005a52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a76:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d903      	bls.n	8005a8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	0151      	lsls	r1, r2, #5
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac2:	6939      	ldr	r1, [r7, #16]
 8005ac4:	0148      	lsls	r0, r1, #5
 8005ac6:	6979      	ldr	r1, [r7, #20]
 8005ac8:	4401      	add	r1, r0
 8005aca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d11e      	bne.n	8005b16 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	461a      	mov	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	e092      	b.n	8005c3c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	0151      	lsls	r1, r2, #5
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	440a      	add	r2, r1
 8005b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b34:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d07e      	beq.n	8005c3c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	2101      	movs	r1, #1
 8005b50:	fa01 f303 	lsl.w	r3, r1, r3
 8005b54:	6979      	ldr	r1, [r7, #20]
 8005b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	634b      	str	r3, [r1, #52]	; 0x34
 8005b5e:	e06d      	b.n	8005c3c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b7a:	0cdb      	lsrs	r3, r3, #19
 8005b7c:	04db      	lsls	r3, r3, #19
 8005b7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ba2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bea:	6939      	ldr	r1, [r7, #16]
 8005bec:	0148      	lsls	r0, r1, #5
 8005bee:	6979      	ldr	r1, [r7, #20]
 8005bf0:	4401      	add	r1, r0
 8005bf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d10d      	bne.n	8005c1c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d009      	beq.n	8005c1c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	68d9      	ldr	r1, [r3, #12]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	460a      	mov	r2, r1
 8005c1a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b089      	sub	sp, #36	; 0x24
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	4611      	mov	r1, r2
 8005c56:	461a      	mov	r2, r3
 8005c58:	460b      	mov	r3, r1
 8005c5a:	71fb      	strb	r3, [r7, #7]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005c68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d11a      	bne.n	8005ca6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c70:	88bb      	ldrh	r3, [r7, #4]
 8005c72:	3303      	adds	r3, #3
 8005c74:	089b      	lsrs	r3, r3, #2
 8005c76:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61bb      	str	r3, [r7, #24]
 8005c7c:	e00f      	b.n	8005c9e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	031a      	lsls	r2, r3, #12
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	3304      	adds	r3, #4
 8005c96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d3eb      	bcc.n	8005c7e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3724      	adds	r7, #36	; 0x24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b089      	sub	sp, #36	; 0x24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	3303      	adds	r3, #3
 8005cce:	089b      	lsrs	r3, r3, #2
 8005cd0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	e00b      	b.n	8005cf0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	3301      	adds	r3, #1
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d3ef      	bcc.n	8005cd8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005cf8:	69fb      	ldr	r3, [r7, #28]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3724      	adds	r7, #36	; 0x24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d12c      	bne.n	8005d7c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	db12      	blt.n	8005d5a <USB_EPSetStall+0x54>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00f      	beq.n	8005d5a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d58:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e02b      	b.n	8005dd4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	db12      	blt.n	8005db4 <USB_EPSetStall+0xae>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00f      	beq.n	8005db4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	0151      	lsls	r1, r2, #5
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	440a      	add	r2, r1
 8005daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005db2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b085      	sub	sp, #20
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d128      	bne.n	8005e50 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	78db      	ldrb	r3, [r3, #3]
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d003      	beq.n	8005e2e <USB_EPClearStall+0x4c>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	78db      	ldrb	r3, [r3, #3]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d138      	bne.n	8005ea0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e027      	b.n	8005ea0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	78db      	ldrb	r3, [r3, #3]
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d003      	beq.n	8005e80 <USB_EPClearStall+0x9e>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	78db      	ldrb	r3, [r3, #3]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d10f      	bne.n	8005ea0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	0151      	lsls	r1, r2, #5
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	440a      	add	r2, r1
 8005e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b085      	sub	sp, #20
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ecc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ed0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	78fb      	ldrb	r3, [r7, #3]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ee2:	68f9      	ldr	r1, [r7, #12]
 8005ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f14:	f023 0302 	bic.w	r3, r3, #2
 8005f18:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005f1a:	2003      	movs	r0, #3
 8005f1c:	f7fc f8c0 	bl	80020a0 <HAL_Delay>

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f44:	f043 0302 	orr.w	r3, r3, #2
 8005f48:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005f4a:	2003      	movs	r0, #3
 8005f4c:	f7fc f8a8 	bl	80020a0 <HAL_Delay>

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b085      	sub	sp, #20
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f72:	68fb      	ldr	r3, [r7, #12]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	0c1b      	lsrs	r3, r3, #16
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	b29b      	uxth	r3, r3
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	4013      	ands	r3, r2
 8006014:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006016:	68bb      	ldr	r3, [r7, #8]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006046:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
 8006054:	01db      	lsls	r3, r3, #7
 8006056:	b2db      	uxtb	r3, r3
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4013      	ands	r3, r2
 8006070:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006072:	68bb      	ldr	r3, [r7, #8]
}
 8006074:	4618      	mov	r0, r3
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	f003 0301 	and.w	r3, r3, #1
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060ba:	f023 0307 	bic.w	r3, r3, #7
 80060be:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 0306 	and.w	r3, r3, #6
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d109      	bne.n	80060e4 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060de:	f043 0303 	orr.w	r3, r3, #3
 80060e2:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
	...

08006108 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	460b      	mov	r3, r1
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	333c      	adds	r3, #60	; 0x3c
 800611e:	3304      	adds	r3, #4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	4a26      	ldr	r2, [pc, #152]	; (80061c0 <USB_EP0_OutStart+0xb8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d90a      	bls.n	8006142 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800613c:	d101      	bne.n	8006142 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e037      	b.n	80061b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006148:	461a      	mov	r2, r3
 800614a:	2300      	movs	r3, #0
 800614c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800615c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006160:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006170:	f043 0318 	orr.w	r3, r3, #24
 8006174:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006184:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006188:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800618a:	7afb      	ldrb	r3, [r7, #11]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d10f      	bne.n	80061b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006196:	461a      	mov	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80061ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	4f54300a 	.word	0x4f54300a

080061c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3301      	adds	r3, #1
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4a13      	ldr	r2, [pc, #76]	; (8006228 <USB_CoreReset+0x64>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d901      	bls.n	80061e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e01b      	b.n	800621a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	daf2      	bge.n	80061d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f043 0201 	orr.w	r2, r3, #1
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3301      	adds	r3, #1
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4a09      	ldr	r2, [pc, #36]	; (8006228 <USB_CoreReset+0x64>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d901      	bls.n	800620c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e006      	b.n	800621a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b01      	cmp	r3, #1
 8006216:	d0f0      	beq.n	80061fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	00030d40 	.word	0x00030d40

0800622c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	7c1b      	ldrb	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d115      	bne.n	8006270 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006248:	2202      	movs	r2, #2
 800624a:	2181      	movs	r1, #129	; 0x81
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 fed8 	bl	8008002 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800625c:	2202      	movs	r2, #2
 800625e:	2101      	movs	r1, #1
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 fece 	bl	8008002 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800626e:	e012      	b.n	8006296 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006270:	2340      	movs	r3, #64	; 0x40
 8006272:	2202      	movs	r2, #2
 8006274:	2181      	movs	r1, #129	; 0x81
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fec3 	bl	8008002 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006282:	2340      	movs	r3, #64	; 0x40
 8006284:	2202      	movs	r2, #2
 8006286:	2101      	movs	r1, #1
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 feba 	bl	8008002 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006296:	2308      	movs	r3, #8
 8006298:	2203      	movs	r2, #3
 800629a:	2182      	movs	r1, #130	; 0x82
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 feb0 	bl	8008002 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80062a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80062ac:	f002 f826 	bl	80082fc <malloc>
 80062b0:	4603      	mov	r3, r0
 80062b2:	461a      	mov	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d102      	bne.n	80062ca <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80062c4:	2301      	movs	r3, #1
 80062c6:	73fb      	strb	r3, [r7, #15]
 80062c8:	e026      	b.n	8006318 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80062d0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	7c1b      	ldrb	r3, [r3, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d109      	bne.n	8006308 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062fe:	2101      	movs	r1, #1
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 ff6f 	bl	80081e4 <USBD_LL_PrepareReceive>
 8006306:	e007      	b.n	8006318 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800630e:	2340      	movs	r3, #64	; 0x40
 8006310:	2101      	movs	r1, #1
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 ff66 	bl	80081e4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	460b      	mov	r3, r1
 800632c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006332:	2181      	movs	r1, #129	; 0x81
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 fe8a 	bl	800804e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006340:	2101      	movs	r1, #1
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 fe83 	bl	800804e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006350:	2182      	movs	r1, #130	; 0x82
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 fe7b 	bl	800804e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00e      	beq.n	8006386 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006378:	4618      	mov	r0, r3
 800637a:	f001 ffc7 	bl	800830c <free>
    pdev->pClassData = NULL;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063a0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d039      	beq.n	800642e <USBD_CDC_Setup+0x9e>
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	d17c      	bne.n	80064b8 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	88db      	ldrh	r3, [r3, #6]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d029      	beq.n	800641a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	b25b      	sxtb	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	da11      	bge.n	80063f4 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80063dc:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	88d2      	ldrh	r2, [r2, #6]
 80063e2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80063e4:	6939      	ldr	r1, [r7, #16]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	88db      	ldrh	r3, [r3, #6]
 80063ea:	461a      	mov	r2, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 f99b 	bl	8007728 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80063f2:	e068      	b.n	80064c6 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	785a      	ldrb	r2, [r3, #1]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	88db      	ldrh	r3, [r3, #6]
 8006402:	b2da      	uxtb	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800640a:	6939      	ldr	r1, [r7, #16]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	88db      	ldrh	r3, [r3, #6]
 8006410:	461a      	mov	r2, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 f9b6 	bl	8007784 <USBD_CtlPrepareRx>
    break;
 8006418:	e055      	b.n	80064c6 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	7850      	ldrb	r0, [r2, #1]
 8006426:	2200      	movs	r2, #0
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	4798      	blx	r3
    break;
 800642c:	e04b      	b.n	80064c6 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	785b      	ldrb	r3, [r3, #1]
 8006432:	2b0a      	cmp	r3, #10
 8006434:	d017      	beq.n	8006466 <USBD_CDC_Setup+0xd6>
 8006436:	2b0b      	cmp	r3, #11
 8006438:	d029      	beq.n	800648e <USBD_CDC_Setup+0xfe>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d133      	bne.n	80064a6 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006444:	2b03      	cmp	r3, #3
 8006446:	d107      	bne.n	8006458 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006448:	f107 030c 	add.w	r3, r7, #12
 800644c:	2202      	movs	r2, #2
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 f969 	bl	8007728 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006456:	e02e      	b.n	80064b6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 f8f9 	bl	8007652 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006460:	2302      	movs	r3, #2
 8006462:	75fb      	strb	r3, [r7, #23]
      break;
 8006464:	e027      	b.n	80064b6 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800646c:	2b03      	cmp	r3, #3
 800646e:	d107      	bne.n	8006480 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006470:	f107 030f 	add.w	r3, r7, #15
 8006474:	2201      	movs	r2, #1
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 f955 	bl	8007728 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800647e:	e01a      	b.n	80064b6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 f8e5 	bl	8007652 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006488:	2302      	movs	r3, #2
 800648a:	75fb      	strb	r3, [r7, #23]
      break;
 800648c:	e013      	b.n	80064b6 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006494:	2b03      	cmp	r3, #3
 8006496:	d00d      	beq.n	80064b4 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f001 f8d9 	bl	8007652 <USBD_CtlError>
			  ret = USBD_FAIL;
 80064a0:	2302      	movs	r3, #2
 80064a2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80064a4:	e006      	b.n	80064b4 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 f8d2 	bl	8007652 <USBD_CtlError>
      ret = USBD_FAIL;
 80064ae:	2302      	movs	r3, #2
 80064b0:	75fb      	strb	r3, [r7, #23]
      break;
 80064b2:	e000      	b.n	80064b6 <USBD_CDC_Setup+0x126>
      break;
 80064b4:	bf00      	nop
    }
    break;
 80064b6:	e006      	b.n	80064c6 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 f8c9 	bl	8007652 <USBD_CtlError>
    ret = USBD_FAIL;
 80064c0:	2302      	movs	r3, #2
 80064c2:	75fb      	strb	r3, [r7, #23]
    break;
 80064c4:	bf00      	nop
  }

  return ret;
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064e2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80064ea:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d03a      	beq.n	800656c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80064f6:	78fa      	ldrb	r2, [r7, #3]
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	331c      	adds	r3, #28
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d029      	beq.n	8006560 <USBD_CDC_DataIn+0x90>
 800650c:	78fa      	ldrb	r2, [r7, #3]
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	331c      	adds	r3, #28
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	78f9      	ldrb	r1, [r7, #3]
 8006520:	68b8      	ldr	r0, [r7, #8]
 8006522:	460b      	mov	r3, r1
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	1a5b      	subs	r3, r3, r1
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4403      	add	r3, r0
 800652c:	3344      	adds	r3, #68	; 0x44
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	fbb2 f1f3 	udiv	r1, r2, r3
 8006534:	fb03 f301 	mul.w	r3, r3, r1
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d110      	bne.n	8006560 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800653e:	78fa      	ldrb	r2, [r7, #3]
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	331c      	adds	r3, #28
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006552:	78f9      	ldrb	r1, [r7, #3]
 8006554:	2300      	movs	r3, #0
 8006556:	2200      	movs	r2, #0
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fe20 	bl	800819e <USBD_LL_Transmit>
 800655e:	e003      	b.n	8006568 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	e000      	b.n	800656e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800656c:	2302      	movs	r3, #2
  }
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	460b      	mov	r3, r1
 8006580:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006588:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 fe4b 	bl	800822a <USBD_LL_GetRxDataSize>
 8006594:	4602      	mov	r2, r0
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00d      	beq.n	80065c2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80065ba:	4611      	mov	r1, r2
 80065bc:	4798      	blx	r3

    return USBD_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	e000      	b.n	80065c4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80065c2:	2302      	movs	r3, #2
  }
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065da:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d015      	beq.n	8006612 <USBD_CDC_EP0_RxReady+0x46>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80065ec:	2bff      	cmp	r3, #255	; 0xff
 80065ee:	d010      	beq.n	8006612 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80065fe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006606:	b292      	uxth	r2, r2
 8006608:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	22ff      	movs	r2, #255	; 0xff
 800660e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2243      	movs	r2, #67	; 0x43
 8006628:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800662a:	4b03      	ldr	r3, [pc, #12]	; (8006638 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	2000009c 	.word	0x2000009c

0800663c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2243      	movs	r2, #67	; 0x43
 8006648:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800664a:	4b03      	ldr	r3, [pc, #12]	; (8006658 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800664c:	4618      	mov	r0, r3
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	20000058 	.word	0x20000058

0800665c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2243      	movs	r2, #67	; 0x43
 8006668:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800666a:	4b03      	ldr	r3, [pc, #12]	; (8006678 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	200000e0 	.word	0x200000e0

0800667c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	220a      	movs	r2, #10
 8006688:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800668a:	4b03      	ldr	r3, [pc, #12]	; (8006698 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20000014 	.word	0x20000014

0800669c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80066a6:	2302      	movs	r3, #2
 80066a8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b087      	sub	sp, #28
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	4613      	mov	r3, r2
 80066d6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066de:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80066e8:	88fa      	ldrh	r2, [r7, #6]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800670e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006734:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800673c:	2b00      	cmp	r3, #0
 800673e:	d017      	beq.n	8006770 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	7c1b      	ldrb	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d109      	bne.n	800675c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800674e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006752:	2101      	movs	r1, #1
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fd45 	bl	80081e4 <USBD_LL_PrepareReceive>
 800675a:	e007      	b.n	800676c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006762:	2340      	movs	r3, #64	; 0x40
 8006764:	2101      	movs	r1, #1
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 fd3c 	bl	80081e4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	e000      	b.n	8006772 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006770:	2302      	movs	r3, #2
  }
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	4613      	mov	r3, r2
 8006786:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800678e:	2302      	movs	r3, #2
 8006790:	e01a      	b.n	80067c8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	79fa      	ldrb	r2, [r7, #7]
 80067be:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f001 fbb7 	bl	8007f34 <USBD_LL_Init>

  return USBD_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d006      	beq.n	80067f2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	73fb      	strb	r3, [r7, #15]
 80067f0:	e001      	b.n	80067f6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80067f2:	2302      	movs	r3, #2
 80067f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f001 fbdd 	bl	8007fcc <USBD_LL_Start>

  return USBD_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	460b      	mov	r3, r1
 800683c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800683e:	2302      	movs	r3, #2
 8006840:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00c      	beq.n	8006866 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	78fa      	ldrb	r2, [r7, #3]
 8006856:	4611      	mov	r1, r2
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4798      	blx	r3
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006866:	7bfb      	ldrb	r3, [r7, #15]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	78fa      	ldrb	r2, [r7, #3]
 8006886:	4611      	mov	r1, r2
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
  return USBD_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fe95 	bl	80075d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80068bc:	461a      	mov	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d00c      	beq.n	80068ec <USBD_LL_SetupStage+0x56>
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d302      	bcc.n	80068dc <USBD_LL_SetupStage+0x46>
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d010      	beq.n	80068fc <USBD_LL_SetupStage+0x66>
 80068da:	e017      	b.n	800690c <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fa05 	bl	8006cf4 <USBD_StdDevReq>
    break;
 80068ea:	e01a      	b.n	8006922 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fa67 	bl	8006dc8 <USBD_StdItfReq>
    break;
 80068fa:	e012      	b.n	8006922 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 faa5 	bl	8006e54 <USBD_StdEPReq>
    break;
 800690a:	e00a      	b.n	8006922 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006912:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006916:	b2db      	uxtb	r3, r3
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fbb6 	bl	800808c <USBD_LL_StallEP>
    break;
 8006920:	bf00      	nop
  }

  return USBD_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	460b      	mov	r3, r1
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800693a:	7afb      	ldrb	r3, [r7, #11]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d14b      	bne.n	80069d8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006946:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800694e:	2b03      	cmp	r3, #3
 8006950:	d134      	bne.n	80069bc <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	429a      	cmp	r2, r3
 800695c:	d919      	bls.n	8006992 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	1ad2      	subs	r2, r2, r3
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006974:	429a      	cmp	r2, r3
 8006976:	d203      	bcs.n	8006980 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800697c:	b29b      	uxth	r3, r3
 800697e:	e002      	b.n	8006986 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006984:	b29b      	uxth	r3, r3
 8006986:	461a      	mov	r2, r3
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 ff18 	bl	80077c0 <USBD_CtlContinueRx>
 8006990:	e038      	b.n	8006a04 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d105      	bne.n	80069b4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 ff15 	bl	80077e4 <USBD_CtlSendStatus>
 80069ba:	e023      	b.n	8006a04 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	d11e      	bne.n	8006a04 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80069ce:	2100      	movs	r1, #0
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f001 fb5b 	bl	800808c <USBD_LL_StallEP>
 80069d6:	e015      	b.n	8006a04 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00d      	beq.n	8006a00 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d108      	bne.n	8006a00 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	7afa      	ldrb	r2, [r7, #11]
 80069f8:	4611      	mov	r1, r2
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	4798      	blx	r3
 80069fe:	e001      	b.n	8006a04 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a00:	2302      	movs	r3, #2
 8006a02:	e000      	b.n	8006a06 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b086      	sub	sp, #24
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	460b      	mov	r3, r1
 8006a18:	607a      	str	r2, [r7, #4]
 8006a1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006a1c:	7afb      	ldrb	r3, [r7, #11]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d17f      	bne.n	8006b22 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3314      	adds	r3, #20
 8006a26:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d15c      	bne.n	8006aec <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d915      	bls.n	8006a6a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	1ad2      	subs	r2, r2, r3
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	461a      	mov	r2, r3
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fe82 	bl	8007760 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2100      	movs	r1, #0
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f001 fbbe 	bl	80081e4 <USBD_LL_PrepareReceive>
 8006a68:	e04e      	b.n	8006b08 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	6912      	ldr	r2, [r2, #16]
 8006a72:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a76:	fb02 f201 	mul.w	r2, r2, r1
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d11c      	bne.n	8006aba <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d316      	bcc.n	8006aba <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d20f      	bcs.n	8006aba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fe5e 	bl	8007760 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006aac:	2300      	movs	r3, #0
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f001 fb96 	bl	80081e4 <USBD_LL_PrepareReceive>
 8006ab8:	e026      	b.n	8006b08 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d105      	bne.n	8006adc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006adc:	2180      	movs	r1, #128	; 0x80
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f001 fad4 	bl	800808c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 fe90 	bl	800780a <USBD_CtlReceiveStatus>
 8006aea:	e00d      	b.n	8006b08 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d004      	beq.n	8006b00 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d103      	bne.n	8006b08 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006b00:	2180      	movs	r1, #128	; 0x80
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f001 fac2 	bl	800808c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d11d      	bne.n	8006b4e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff fe82 	bl	800681c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006b20:	e015      	b.n	8006b4e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00d      	beq.n	8006b4a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d108      	bne.n	8006b4a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	7afa      	ldrb	r2, [r7, #11]
 8006b42:	4611      	mov	r1, r2
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	4798      	blx	r3
 8006b48:	e001      	b.n	8006b4e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e000      	b.n	8006b50 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b60:	2340      	movs	r3, #64	; 0x40
 8006b62:	2200      	movs	r2, #0
 8006b64:	2100      	movs	r1, #0
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f001 fa4b 	bl	8008002 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2240      	movs	r2, #64	; 0x40
 8006b78:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b7c:	2340      	movs	r3, #64	; 0x40
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2180      	movs	r1, #128	; 0x80
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fa3d 	bl	8008002 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2240      	movs	r2, #64	; 0x40
 8006b92:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d009      	beq.n	8006bd0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6852      	ldr	r2, [r2, #4]
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	4611      	mov	r1, r2
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
  }

  return USBD_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	460b      	mov	r3, r1
 8006be4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	78fa      	ldrb	r2, [r7, #3]
 8006bea:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2204      	movs	r2, #4
 8006c12:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d10b      	bne.n	8006c70 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6852      	ldr	r2, [r2, #4]
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3

  return USBD_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d004      	beq.n	8006d18 <USBD_StdDevReq+0x24>
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d002      	beq.n	8006d18 <USBD_StdDevReq+0x24>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d008      	beq.n	8006d28 <USBD_StdDevReq+0x34>
 8006d16:	e04c      	b.n	8006db2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	4798      	blx	r3
    break;
 8006d26:	e049      	b.n	8006dbc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	785b      	ldrb	r3, [r3, #1]
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	d83a      	bhi.n	8006da6 <USBD_StdDevReq+0xb2>
 8006d30:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <USBD_StdDevReq+0x44>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d89 	.word	0x08006d89
 8006d3c:	08006d9d 	.word	0x08006d9d
 8006d40:	08006da7 	.word	0x08006da7
 8006d44:	08006d93 	.word	0x08006d93
 8006d48:	08006da7 	.word	0x08006da7
 8006d4c:	08006d6b 	.word	0x08006d6b
 8006d50:	08006d61 	.word	0x08006d61
 8006d54:	08006da7 	.word	0x08006da7
 8006d58:	08006d7f 	.word	0x08006d7f
 8006d5c:	08006d75 	.word	0x08006d75
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f9d2 	bl	800710c <USBD_GetDescriptor>
      break;
 8006d68:	e022      	b.n	8006db0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fac7 	bl	8007300 <USBD_SetAddress>
      break;
 8006d72:	e01d      	b.n	8006db0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fb04 	bl	8007384 <USBD_SetConfig>
      break;
 8006d7c:	e018      	b.n	8006db0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fb8d 	bl	80074a0 <USBD_GetConfig>
      break;
 8006d86:	e013      	b.n	8006db0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fbbc 	bl	8007508 <USBD_GetStatus>
      break;
 8006d90:	e00e      	b.n	8006db0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fbea 	bl	800756e <USBD_SetFeature>
      break;
 8006d9a:	e009      	b.n	8006db0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fbf9 	bl	8007596 <USBD_ClrFeature>
      break;
 8006da4:	e004      	b.n	8006db0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fc52 	bl	8007652 <USBD_CtlError>
      break;
 8006dae:	bf00      	nop
    }
    break;
 8006db0:	e004      	b.n	8006dbc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fc4c 	bl	8007652 <USBD_CtlError>
    break;
 8006dba:	bf00      	nop
  }

  return ret;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop

08006dc8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d003      	beq.n	8006dea <USBD_StdItfReq+0x22>
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d001      	beq.n	8006dea <USBD_StdItfReq+0x22>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d12a      	bne.n	8006e40 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006df0:	3b01      	subs	r3, #1
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d81d      	bhi.n	8006e32 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	889b      	ldrh	r3, [r3, #4]
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d813      	bhi.n	8006e28 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	4798      	blx	r3
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	88db      	ldrh	r3, [r3, #6]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d110      	bne.n	8006e3c <USBD_StdItfReq+0x74>
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10d      	bne.n	8006e3c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fcdf 	bl	80077e4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006e26:	e009      	b.n	8006e3c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fc11 	bl	8007652 <USBD_CtlError>
      break;
 8006e30:	e004      	b.n	8006e3c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fc0c 	bl	8007652 <USBD_CtlError>
      break;
 8006e3a:	e000      	b.n	8006e3e <USBD_StdItfReq+0x76>
      break;
 8006e3c:	bf00      	nop
    }
    break;
 8006e3e:	e004      	b.n	8006e4a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fc05 	bl	8007652 <USBD_CtlError>
    break;
 8006e48:	bf00      	nop
  }

  return USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	889b      	ldrh	r3, [r3, #4]
 8006e66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	d004      	beq.n	8006e7e <USBD_StdEPReq+0x2a>
 8006e74:	2b40      	cmp	r3, #64	; 0x40
 8006e76:	d002      	beq.n	8006e7e <USBD_StdEPReq+0x2a>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <USBD_StdEPReq+0x3a>
 8006e7c:	e13b      	b.n	80070f6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
    break;
 8006e8c:	e138      	b.n	8007100 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d10a      	bne.n	8006eb0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	e128      	b.n	8007102 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d03e      	beq.n	8006f36 <USBD_StdEPReq+0xe2>
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d002      	beq.n	8006ec2 <USBD_StdEPReq+0x6e>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d070      	beq.n	8006fa2 <USBD_StdEPReq+0x14e>
 8006ec0:	e113      	b.n	80070ea <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d002      	beq.n	8006ed2 <USBD_StdEPReq+0x7e>
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d015      	beq.n	8006efc <USBD_StdEPReq+0xa8>
 8006ed0:	e02b      	b.n	8006f2a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00c      	beq.n	8006ef2 <USBD_StdEPReq+0x9e>
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b80      	cmp	r3, #128	; 0x80
 8006edc:	d009      	beq.n	8006ef2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 f8d2 	bl	800808c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006ee8:	2180      	movs	r1, #128	; 0x80
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 f8ce 	bl	800808c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006ef0:	e020      	b.n	8006f34 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fbac 	bl	8007652 <USBD_CtlError>
        break;
 8006efa:	e01b      	b.n	8006f34 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	885b      	ldrh	r3, [r3, #2]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10e      	bne.n	8006f22 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <USBD_StdEPReq+0xce>
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	2b80      	cmp	r3, #128	; 0x80
 8006f0e:	d008      	beq.n	8006f22 <USBD_StdEPReq+0xce>
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	88db      	ldrh	r3, [r3, #6]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 f8b5 	bl	800808c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fc5e 	bl	80077e4 <USBD_CtlSendStatus>

        break;
 8006f28:	e004      	b.n	8006f34 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fb90 	bl	8007652 <USBD_CtlError>
        break;
 8006f32:	bf00      	nop
      }
      break;
 8006f34:	e0de      	b.n	80070f4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d002      	beq.n	8006f46 <USBD_StdEPReq+0xf2>
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d015      	beq.n	8006f70 <USBD_StdEPReq+0x11c>
 8006f44:	e026      	b.n	8006f94 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00c      	beq.n	8006f66 <USBD_StdEPReq+0x112>
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
 8006f4e:	2b80      	cmp	r3, #128	; 0x80
 8006f50:	d009      	beq.n	8006f66 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006f52:	7bbb      	ldrb	r3, [r7, #14]
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 f898 	bl	800808c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006f5c:	2180      	movs	r1, #128	; 0x80
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 f894 	bl	800808c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006f64:	e01c      	b.n	8006fa0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fb72 	bl	8007652 <USBD_CtlError>
        break;
 8006f6e:	e017      	b.n	8006fa0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	885b      	ldrh	r3, [r3, #2]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d112      	bne.n	8006f9e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 f89f 	bl	80080ca <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fc29 	bl	80077e4 <USBD_CtlSendStatus>
        }
        break;
 8006f92:	e004      	b.n	8006f9e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fb5b 	bl	8007652 <USBD_CtlError>
        break;
 8006f9c:	e000      	b.n	8006fa0 <USBD_StdEPReq+0x14c>
        break;
 8006f9e:	bf00      	nop
      }
      break;
 8006fa0:	e0a8      	b.n	80070f4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d002      	beq.n	8006fb2 <USBD_StdEPReq+0x15e>
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d031      	beq.n	8007014 <USBD_StdEPReq+0x1c0>
 8006fb0:	e095      	b.n	80070de <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d007      	beq.n	8006fc8 <USBD_StdEPReq+0x174>
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	2b80      	cmp	r3, #128	; 0x80
 8006fbc:	d004      	beq.n	8006fc8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fb46 	bl	8007652 <USBD_CtlError>
          break;
 8006fc6:	e08f      	b.n	80070e8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	da0b      	bge.n	8006fe8 <USBD_StdEPReq+0x194>
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	3310      	adds	r3, #16
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	e00a      	b.n	8006ffe <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2202      	movs	r2, #2
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fb8b 	bl	8007728 <USBD_CtlSendData>
          break;
 8007012:	e069      	b.n	80070e8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007018:	2b00      	cmp	r3, #0
 800701a:	da11      	bge.n	8007040 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	f003 020f 	and.w	r2, r3, #15
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	3318      	adds	r3, #24
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d117      	bne.n	8007066 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fb0a 	bl	8007652 <USBD_CtlError>
            break;
 800703e:	e053      	b.n	80070e8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	f003 020f 	and.w	r2, r3, #15
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d104      	bne.n	8007066 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 faf7 	bl	8007652 <USBD_CtlError>
            break;
 8007064:	e040      	b.n	80070e8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800706a:	2b00      	cmp	r3, #0
 800706c:	da0b      	bge.n	8007086 <USBD_StdEPReq+0x232>
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	3310      	adds	r3, #16
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	4413      	add	r3, r2
 8007082:	3304      	adds	r3, #4
 8007084:	e00a      	b.n	800709c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	4413      	add	r3, r2
 800709c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <USBD_StdEPReq+0x256>
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
 80070a6:	2b80      	cmp	r3, #128	; 0x80
 80070a8:	d103      	bne.n	80070b2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2200      	movs	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	e00e      	b.n	80070d0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 f826 	bl	8008108 <USBD_LL_IsStallEP>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2201      	movs	r2, #1
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	e002      	b.n	80070d0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2202      	movs	r2, #2
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fb26 	bl	8007728 <USBD_CtlSendData>
          break;
 80070dc:	e004      	b.n	80070e8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fab6 	bl	8007652 <USBD_CtlError>
        break;
 80070e6:	bf00      	nop
      }
      break;
 80070e8:	e004      	b.n	80070f4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fab0 	bl	8007652 <USBD_CtlError>
      break;
 80070f2:	bf00      	nop
    }
    break;
 80070f4:	e004      	b.n	8007100 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 faaa 	bl	8007652 <USBD_CtlError>
    break;
 80070fe:	bf00      	nop
  }

  return ret;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	885b      	ldrh	r3, [r3, #2]
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	2b06      	cmp	r3, #6
 8007122:	f200 80c9 	bhi.w	80072b8 <USBD_GetDescriptor+0x1ac>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <USBD_GetDescriptor+0x20>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007149 	.word	0x08007149
 8007130:	08007161 	.word	0x08007161
 8007134:	080071a1 	.word	0x080071a1
 8007138:	080072b9 	.word	0x080072b9
 800713c:	080072b9 	.word	0x080072b9
 8007140:	08007265 	.word	0x08007265
 8007144:	0800728b 	.word	0x0800728b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	7c12      	ldrb	r2, [r2, #16]
 8007154:	f107 010a 	add.w	r1, r7, #10
 8007158:	4610      	mov	r0, r2
 800715a:	4798      	blx	r3
 800715c:	60f8      	str	r0, [r7, #12]
    break;
 800715e:	e0b0      	b.n	80072c2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7c1b      	ldrb	r3, [r3, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10d      	bne.n	8007184 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	f107 020a 	add.w	r2, r7, #10
 8007174:	4610      	mov	r0, r2
 8007176:	4798      	blx	r3
 8007178:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3301      	adds	r3, #1
 800717e:	2202      	movs	r2, #2
 8007180:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007182:	e09e      	b.n	80072c2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	f107 020a 	add.w	r2, r7, #10
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
 8007194:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	2202      	movs	r2, #2
 800719c:	701a      	strb	r2, [r3, #0]
    break;
 800719e:	e090      	b.n	80072c2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	885b      	ldrh	r3, [r3, #2]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b05      	cmp	r3, #5
 80071a8:	d856      	bhi.n	8007258 <USBD_GetDescriptor+0x14c>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <USBD_GetDescriptor+0xa4>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071c9 	.word	0x080071c9
 80071b4:	080071e1 	.word	0x080071e1
 80071b8:	080071f9 	.word	0x080071f9
 80071bc:	08007211 	.word	0x08007211
 80071c0:	08007229 	.word	0x08007229
 80071c4:	08007241 	.word	0x08007241
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	7c12      	ldrb	r2, [r2, #16]
 80071d4:	f107 010a 	add.w	r1, r7, #10
 80071d8:	4610      	mov	r0, r2
 80071da:	4798      	blx	r3
 80071dc:	60f8      	str	r0, [r7, #12]
      break;
 80071de:	e040      	b.n	8007262 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	7c12      	ldrb	r2, [r2, #16]
 80071ec:	f107 010a 	add.w	r1, r7, #10
 80071f0:	4610      	mov	r0, r2
 80071f2:	4798      	blx	r3
 80071f4:	60f8      	str	r0, [r7, #12]
      break;
 80071f6:	e034      	b.n	8007262 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	7c12      	ldrb	r2, [r2, #16]
 8007204:	f107 010a 	add.w	r1, r7, #10
 8007208:	4610      	mov	r0, r2
 800720a:	4798      	blx	r3
 800720c:	60f8      	str	r0, [r7, #12]
      break;
 800720e:	e028      	b.n	8007262 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	7c12      	ldrb	r2, [r2, #16]
 800721c:	f107 010a 	add.w	r1, r7, #10
 8007220:	4610      	mov	r0, r2
 8007222:	4798      	blx	r3
 8007224:	60f8      	str	r0, [r7, #12]
      break;
 8007226:	e01c      	b.n	8007262 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	7c12      	ldrb	r2, [r2, #16]
 8007234:	f107 010a 	add.w	r1, r7, #10
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
      break;
 800723e:	e010      	b.n	8007262 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	7c12      	ldrb	r2, [r2, #16]
 800724c:	f107 010a 	add.w	r1, r7, #10
 8007250:	4610      	mov	r0, r2
 8007252:	4798      	blx	r3
 8007254:	60f8      	str	r0, [r7, #12]
      break;
 8007256:	e004      	b.n	8007262 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f9f9 	bl	8007652 <USBD_CtlError>
      return;
 8007260:	e04b      	b.n	80072fa <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007262:	e02e      	b.n	80072c2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	7c1b      	ldrb	r3, [r3, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d109      	bne.n	8007280 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007274:	f107 020a 	add.w	r2, r7, #10
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
 800727c:	60f8      	str	r0, [r7, #12]
      break;
 800727e:	e020      	b.n	80072c2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f9e5 	bl	8007652 <USBD_CtlError>
      return;
 8007288:	e037      	b.n	80072fa <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	7c1b      	ldrb	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10d      	bne.n	80072ae <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	f107 020a 	add.w	r2, r7, #10
 800729e:	4610      	mov	r0, r2
 80072a0:	4798      	blx	r3
 80072a2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3301      	adds	r3, #1
 80072a8:	2207      	movs	r2, #7
 80072aa:	701a      	strb	r2, [r3, #0]
      break;
 80072ac:	e009      	b.n	80072c2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f9ce 	bl	8007652 <USBD_CtlError>
      return;
 80072b6:	e020      	b.n	80072fa <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f9c9 	bl	8007652 <USBD_CtlError>
    return;
 80072c0:	e01b      	b.n	80072fa <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80072c2:	897b      	ldrh	r3, [r7, #10]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d011      	beq.n	80072ec <USBD_GetDescriptor+0x1e0>
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	88db      	ldrh	r3, [r3, #6]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00d      	beq.n	80072ec <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	88da      	ldrh	r2, [r3, #6]
 80072d4:	897b      	ldrh	r3, [r7, #10]
 80072d6:	4293      	cmp	r3, r2
 80072d8:	bf28      	it	cs
 80072da:	4613      	movcs	r3, r2
 80072dc:	b29b      	uxth	r3, r3
 80072de:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80072e0:	897b      	ldrh	r3, [r7, #10]
 80072e2:	461a      	mov	r2, r3
 80072e4:	68f9      	ldr	r1, [r7, #12]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fa1e 	bl	8007728 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	88db      	ldrh	r3, [r3, #6]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d102      	bne.n	80072fa <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fa75 	bl	80077e4 <USBD_CtlSendStatus>
  }
}
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	889b      	ldrh	r3, [r3, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d130      	bne.n	8007374 <USBD_SetAddress+0x74>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	88db      	ldrh	r3, [r3, #6]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d12c      	bne.n	8007374 <USBD_SetAddress+0x74>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	885b      	ldrh	r3, [r3, #2]
 800731e:	2b7f      	cmp	r3, #127	; 0x7f
 8007320:	d828      	bhi.n	8007374 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	885b      	ldrh	r3, [r3, #2]
 8007326:	b2db      	uxtb	r3, r3
 8007328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007334:	2b03      	cmp	r3, #3
 8007336:	d104      	bne.n	8007342 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f989 	bl	8007652 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007340:	e01c      	b.n	800737c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	7bfa      	ldrb	r2, [r7, #15]
 8007346:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 ff06 	bl	8008160 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fa45 	bl	80077e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d004      	beq.n	800736a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007368:	e008      	b.n	800737c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007372:	e003      	b.n	800737c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f96b 	bl	8007652 <USBD_CtlError>
  }
}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	885b      	ldrh	r3, [r3, #2]
 8007392:	b2da      	uxtb	r2, r3
 8007394:	4b41      	ldr	r3, [pc, #260]	; (800749c <USBD_SetConfig+0x118>)
 8007396:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007398:	4b40      	ldr	r3, [pc, #256]	; (800749c <USBD_SetConfig+0x118>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d904      	bls.n	80073aa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f955 	bl	8007652 <USBD_CtlError>
 80073a8:	e075      	b.n	8007496 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d002      	beq.n	80073ba <USBD_SetConfig+0x36>
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d023      	beq.n	8007400 <USBD_SetConfig+0x7c>
 80073b8:	e062      	b.n	8007480 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80073ba:	4b38      	ldr	r3, [pc, #224]	; (800749c <USBD_SetConfig+0x118>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01a      	beq.n	80073f8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80073c2:	4b36      	ldr	r3, [pc, #216]	; (800749c <USBD_SetConfig+0x118>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2203      	movs	r2, #3
 80073d0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073d4:	4b31      	ldr	r3, [pc, #196]	; (800749c <USBD_SetConfig+0x118>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff fa29 	bl	8006832 <USBD_SetClassConfig>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d104      	bne.n	80073f0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f932 	bl	8007652 <USBD_CtlError>
          return;
 80073ee:	e052      	b.n	8007496 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f9f7 	bl	80077e4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80073f6:	e04e      	b.n	8007496 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f9f3 	bl	80077e4 <USBD_CtlSendStatus>
      break;
 80073fe:	e04a      	b.n	8007496 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007400:	4b26      	ldr	r3, [pc, #152]	; (800749c <USBD_SetConfig+0x118>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d112      	bne.n	800742e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007410:	4b22      	ldr	r3, [pc, #136]	; (800749c <USBD_SetConfig+0x118>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	461a      	mov	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800741a:	4b20      	ldr	r3, [pc, #128]	; (800749c <USBD_SetConfig+0x118>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff fa25 	bl	8006870 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f9dc 	bl	80077e4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800742c:	e033      	b.n	8007496 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800742e:	4b1b      	ldr	r3, [pc, #108]	; (800749c <USBD_SetConfig+0x118>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	429a      	cmp	r2, r3
 800743a:	d01d      	beq.n	8007478 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	b2db      	uxtb	r3, r3
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff fa13 	bl	8006870 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800744a:	4b14      	ldr	r3, [pc, #80]	; (800749c <USBD_SetConfig+0x118>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007454:	4b11      	ldr	r3, [pc, #68]	; (800749c <USBD_SetConfig+0x118>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff f9e9 	bl	8006832 <USBD_SetClassConfig>
 8007460:	4603      	mov	r3, r0
 8007462:	2b02      	cmp	r3, #2
 8007464:	d104      	bne.n	8007470 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f8f2 	bl	8007652 <USBD_CtlError>
          return;
 800746e:	e012      	b.n	8007496 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f9b7 	bl	80077e4 <USBD_CtlSendStatus>
      break;
 8007476:	e00e      	b.n	8007496 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f9b3 	bl	80077e4 <USBD_CtlSendStatus>
      break;
 800747e:	e00a      	b.n	8007496 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f8e5 	bl	8007652 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007488:	4b04      	ldr	r3, [pc, #16]	; (800749c <USBD_SetConfig+0x118>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff f9ee 	bl	8006870 <USBD_ClrClassConfig>
      break;
 8007494:	bf00      	nop
    }
  }
}
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	200003a0 	.word	0x200003a0

080074a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	88db      	ldrh	r3, [r3, #6]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d004      	beq.n	80074bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f8cc 	bl	8007652 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80074ba:	e021      	b.n	8007500 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	db17      	blt.n	80074f6 <USBD_GetConfig+0x56>
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	dd02      	ble.n	80074d0 <USBD_GetConfig+0x30>
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d00b      	beq.n	80074e6 <USBD_GetConfig+0x46>
 80074ce:	e012      	b.n	80074f6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3308      	adds	r3, #8
 80074da:	2201      	movs	r2, #1
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f922 	bl	8007728 <USBD_CtlSendData>
      break;
 80074e4:	e00c      	b.n	8007500 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3304      	adds	r3, #4
 80074ea:	2201      	movs	r2, #1
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f91a 	bl	8007728 <USBD_CtlSendData>
      break;
 80074f4:	e004      	b.n	8007500 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f8aa 	bl	8007652 <USBD_CtlError>
      break;
 80074fe:	bf00      	nop
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007518:	3b01      	subs	r3, #1
 800751a:	2b02      	cmp	r3, #2
 800751c:	d81e      	bhi.n	800755c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	88db      	ldrh	r3, [r3, #6]
 8007522:	2b02      	cmp	r3, #2
 8007524:	d004      	beq.n	8007530 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f892 	bl	8007652 <USBD_CtlError>
      break;
 800752e:	e01a      	b.n	8007566 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f043 0202 	orr.w	r2, r3, #2
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	330c      	adds	r3, #12
 8007550:	2202      	movs	r2, #2
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f8e7 	bl	8007728 <USBD_CtlSendData>
    break;
 800755a:	e004      	b.n	8007566 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f877 	bl	8007652 <USBD_CtlError>
    break;
 8007564:	bf00      	nop
  }
}
 8007566:	bf00      	nop
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b082      	sub	sp, #8
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	885b      	ldrh	r3, [r3, #2]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d106      	bne.n	800758e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f92b 	bl	80077e4 <USBD_CtlSendStatus>
  }

}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075a6:	3b01      	subs	r3, #1
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d80b      	bhi.n	80075c4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	885b      	ldrh	r3, [r3, #2]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d10c      	bne.n	80075ce <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f911 	bl	80077e4 <USBD_CtlSendStatus>
    }
    break;
 80075c2:	e004      	b.n	80075ce <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f843 	bl	8007652 <USBD_CtlError>
    break;
 80075cc:	e000      	b.n	80075d0 <USBD_ClrFeature+0x3a>
    break;
 80075ce:	bf00      	nop
  }
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781a      	ldrb	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	785a      	ldrb	r2, [r3, #1]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	3302      	adds	r3, #2
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	3303      	adds	r3, #3
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	b29b      	uxth	r3, r3
 8007606:	4413      	add	r3, r2
 8007608:	b29a      	uxth	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	3304      	adds	r3, #4
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	b29a      	uxth	r2, r3
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	3305      	adds	r3, #5
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	b29b      	uxth	r3, r3
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	b29b      	uxth	r3, r3
 8007622:	4413      	add	r3, r2
 8007624:	b29a      	uxth	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	3306      	adds	r3, #6
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	b29a      	uxth	r2, r3
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	3307      	adds	r3, #7
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	b29b      	uxth	r3, r3
 800763a:	021b      	lsls	r3, r3, #8
 800763c:	b29b      	uxth	r3, r3
 800763e:	4413      	add	r3, r2
 8007640:	b29a      	uxth	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	80da      	strh	r2, [r3, #6]

}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800765c:	2180      	movs	r1, #128	; 0x80
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fd14 	bl	800808c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007664:	2100      	movs	r1, #0
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fd10 	bl	800808c <USBD_LL_StallEP>
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d032      	beq.n	80076f0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 f834 	bl	80076f8 <USBD_GetLen>
 8007690:	4603      	mov	r3, r0
 8007692:	3301      	adds	r3, #1
 8007694:	b29b      	uxth	r3, r3
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	75fa      	strb	r2, [r7, #23]
 80076a4:	461a      	mov	r2, r3
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	4413      	add	r3, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	7812      	ldrb	r2, [r2, #0]
 80076ae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	75fa      	strb	r2, [r7, #23]
 80076b6:	461a      	mov	r2, r3
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	4413      	add	r3, r2
 80076bc:	2203      	movs	r2, #3
 80076be:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80076c0:	e012      	b.n	80076e8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	60fa      	str	r2, [r7, #12]
 80076c8:	7dfa      	ldrb	r2, [r7, #23]
 80076ca:	1c51      	adds	r1, r2, #1
 80076cc:	75f9      	strb	r1, [r7, #23]
 80076ce:	4611      	mov	r1, r2
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	440a      	add	r2, r1
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	75fa      	strb	r2, [r7, #23]
 80076de:	461a      	mov	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4413      	add	r3, r2
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e8      	bne.n	80076c2 <USBD_GetString+0x4e>
    }
  }
}
 80076f0:	bf00      	nop
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007704:	e005      	b.n	8007712 <USBD_GetLen+0x1a>
    {
        len++;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	3301      	adds	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3301      	adds	r3, #1
 8007710:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1f5      	bne.n	8007706 <USBD_GetLen+0xe>
    }

    return len;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	4613      	mov	r3, r2
 8007734:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2202      	movs	r2, #2
 800773a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800773e:	88fa      	ldrh	r2, [r7, #6]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007744:	88fa      	ldrh	r2, [r7, #6]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800774a:	88fb      	ldrh	r3, [r7, #6]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	2100      	movs	r1, #0
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 fd24 	bl	800819e <USBD_LL_Transmit>

  return USBD_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	4613      	mov	r3, r2
 800776c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800776e:	88fb      	ldrh	r3, [r7, #6]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	2100      	movs	r1, #0
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 fd12 	bl	800819e <USBD_LL_Transmit>

  return USBD_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2203      	movs	r2, #3
 8007796:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800779a:	88fa      	ldrh	r2, [r7, #6]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80077a2:	88fa      	ldrh	r2, [r7, #6]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	2100      	movs	r1, #0
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 fd17 	bl	80081e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077ce:	88fb      	ldrh	r3, [r7, #6]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	2100      	movs	r1, #0
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 fd05 	bl	80081e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2204      	movs	r2, #4
 80077f0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077f4:	2300      	movs	r3, #0
 80077f6:	2200      	movs	r2, #0
 80077f8:	2100      	movs	r1, #0
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fccf 	bl	800819e <USBD_LL_Transmit>

  return USBD_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b082      	sub	sp, #8
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2205      	movs	r2, #5
 8007816:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800781a:	2300      	movs	r3, #0
 800781c:	2200      	movs	r2, #0
 800781e:	2100      	movs	r1, #0
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fcdf 	bl	80081e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007834:	2200      	movs	r2, #0
 8007836:	4912      	ldr	r1, [pc, #72]	; (8007880 <MX_USB_DEVICE_Init+0x50>)
 8007838:	4812      	ldr	r0, [pc, #72]	; (8007884 <MX_USB_DEVICE_Init+0x54>)
 800783a:	f7fe ff9e 	bl	800677a <USBD_Init>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007844:	f7fa fa2a 	bl	8001c9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007848:	490f      	ldr	r1, [pc, #60]	; (8007888 <MX_USB_DEVICE_Init+0x58>)
 800784a:	480e      	ldr	r0, [pc, #56]	; (8007884 <MX_USB_DEVICE_Init+0x54>)
 800784c:	f7fe ffc0 	bl	80067d0 <USBD_RegisterClass>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007856:	f7fa fa21 	bl	8001c9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800785a:	490c      	ldr	r1, [pc, #48]	; (800788c <MX_USB_DEVICE_Init+0x5c>)
 800785c:	4809      	ldr	r0, [pc, #36]	; (8007884 <MX_USB_DEVICE_Init+0x54>)
 800785e:	f7fe ff1d 	bl	800669c <USBD_CDC_RegisterInterface>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007868:	f7fa fa18 	bl	8001c9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800786c:	4805      	ldr	r0, [pc, #20]	; (8007884 <MX_USB_DEVICE_Init+0x54>)
 800786e:	f7fe ffc9 	bl	8006804 <USBD_Start>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007878:	f7fa fa10 	bl	8001c9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800787c:	bf00      	nop
 800787e:	bd80      	pop	{r7, pc}
 8007880:	20000138 	.word	0x20000138
 8007884:	20000410 	.word	0x20000410
 8007888:	20000020 	.word	0x20000020
 800788c:	20000128 	.word	0x20000128

08007890 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007894:	2200      	movs	r2, #0
 8007896:	4905      	ldr	r1, [pc, #20]	; (80078ac <CDC_Init_FS+0x1c>)
 8007898:	4805      	ldr	r0, [pc, #20]	; (80078b0 <CDC_Init_FS+0x20>)
 800789a:	f7fe ff16 	bl	80066ca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800789e:	4905      	ldr	r1, [pc, #20]	; (80078b4 <CDC_Init_FS+0x24>)
 80078a0:	4803      	ldr	r0, [pc, #12]	; (80078b0 <CDC_Init_FS+0x20>)
 80078a2:	f7fe ff2c 	bl	80066fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	20000eb0 	.word	0x20000eb0
 80078b0:	20000410 	.word	0x20000410
 80078b4:	200006b0 	.word	0x200006b0

080078b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078be:	4618      	mov	r0, r3
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	6039      	str	r1, [r7, #0]
 80078d2:	71fb      	strb	r3, [r7, #7]
 80078d4:	4613      	mov	r3, r2
 80078d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	2b23      	cmp	r3, #35	; 0x23
 80078dc:	f200 808c 	bhi.w	80079f8 <CDC_Control_FS+0x130>
 80078e0:	a201      	add	r2, pc, #4	; (adr r2, 80078e8 <CDC_Control_FS+0x20>)
 80078e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e6:	bf00      	nop
 80078e8:	080079f9 	.word	0x080079f9
 80078ec:	080079f9 	.word	0x080079f9
 80078f0:	080079f9 	.word	0x080079f9
 80078f4:	080079f9 	.word	0x080079f9
 80078f8:	080079f9 	.word	0x080079f9
 80078fc:	080079f9 	.word	0x080079f9
 8007900:	080079f9 	.word	0x080079f9
 8007904:	080079f9 	.word	0x080079f9
 8007908:	080079f9 	.word	0x080079f9
 800790c:	080079f9 	.word	0x080079f9
 8007910:	080079f9 	.word	0x080079f9
 8007914:	080079f9 	.word	0x080079f9
 8007918:	080079f9 	.word	0x080079f9
 800791c:	080079f9 	.word	0x080079f9
 8007920:	080079f9 	.word	0x080079f9
 8007924:	080079f9 	.word	0x080079f9
 8007928:	080079f9 	.word	0x080079f9
 800792c:	080079f9 	.word	0x080079f9
 8007930:	080079f9 	.word	0x080079f9
 8007934:	080079f9 	.word	0x080079f9
 8007938:	080079f9 	.word	0x080079f9
 800793c:	080079f9 	.word	0x080079f9
 8007940:	080079f9 	.word	0x080079f9
 8007944:	080079f9 	.word	0x080079f9
 8007948:	080079f9 	.word	0x080079f9
 800794c:	080079f9 	.word	0x080079f9
 8007950:	080079f9 	.word	0x080079f9
 8007954:	080079f9 	.word	0x080079f9
 8007958:	080079f9 	.word	0x080079f9
 800795c:	080079f9 	.word	0x080079f9
 8007960:	080079f9 	.word	0x080079f9
 8007964:	080079f9 	.word	0x080079f9
 8007968:	08007979 	.word	0x08007979
 800796c:	080079b3 	.word	0x080079b3
 8007970:	080079f9 	.word	0x080079f9
 8007974:	080079f9 	.word	0x080079f9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0]=pbuf[0];
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	4b22      	ldr	r3, [pc, #136]	; (8007a08 <CDC_Control_FS+0x140>)
 800797e:	701a      	strb	r2, [r3, #0]
    	buffer[1]=pbuf[1];
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	785a      	ldrb	r2, [r3, #1]
 8007984:	4b20      	ldr	r3, [pc, #128]	; (8007a08 <CDC_Control_FS+0x140>)
 8007986:	705a      	strb	r2, [r3, #1]
    	buffer[2]=pbuf[2];
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	789a      	ldrb	r2, [r3, #2]
 800798c:	4b1e      	ldr	r3, [pc, #120]	; (8007a08 <CDC_Control_FS+0x140>)
 800798e:	709a      	strb	r2, [r3, #2]
    	buffer[3]=pbuf[3];
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	78da      	ldrb	r2, [r3, #3]
 8007994:	4b1c      	ldr	r3, [pc, #112]	; (8007a08 <CDC_Control_FS+0x140>)
 8007996:	70da      	strb	r2, [r3, #3]
    	buffer[4]=pbuf[4];
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	791a      	ldrb	r2, [r3, #4]
 800799c:	4b1a      	ldr	r3, [pc, #104]	; (8007a08 <CDC_Control_FS+0x140>)
 800799e:	711a      	strb	r2, [r3, #4]
    	buffer[5]=pbuf[5];
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	795a      	ldrb	r2, [r3, #5]
 80079a4:	4b18      	ldr	r3, [pc, #96]	; (8007a08 <CDC_Control_FS+0x140>)
 80079a6:	715a      	strb	r2, [r3, #5]
    	buffer[6]=pbuf[6];
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	799a      	ldrb	r2, [r3, #6]
 80079ac:	4b16      	ldr	r3, [pc, #88]	; (8007a08 <CDC_Control_FS+0x140>)
 80079ae:	719a      	strb	r2, [r3, #6]
    break;
 80079b0:	e023      	b.n	80079fa <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:

    	pbuf[0]=buffer[0];
 80079b2:	4b15      	ldr	r3, [pc, #84]	; (8007a08 <CDC_Control_FS+0x140>)
 80079b4:	781a      	ldrb	r2, [r3, #0]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	701a      	strb	r2, [r3, #0]
    	pbuf[1]=buffer[1];
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	3301      	adds	r3, #1
 80079be:	4a12      	ldr	r2, [pc, #72]	; (8007a08 <CDC_Control_FS+0x140>)
 80079c0:	7852      	ldrb	r2, [r2, #1]
 80079c2:	701a      	strb	r2, [r3, #0]
    	pbuf[2]=buffer[2];
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	3302      	adds	r3, #2
 80079c8:	4a0f      	ldr	r2, [pc, #60]	; (8007a08 <CDC_Control_FS+0x140>)
 80079ca:	7892      	ldrb	r2, [r2, #2]
 80079cc:	701a      	strb	r2, [r3, #0]
    	pbuf[3]=buffer[3];
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	3303      	adds	r3, #3
 80079d2:	4a0d      	ldr	r2, [pc, #52]	; (8007a08 <CDC_Control_FS+0x140>)
 80079d4:	78d2      	ldrb	r2, [r2, #3]
 80079d6:	701a      	strb	r2, [r3, #0]
    	pbuf[4]=buffer[4];
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	3304      	adds	r3, #4
 80079dc:	4a0a      	ldr	r2, [pc, #40]	; (8007a08 <CDC_Control_FS+0x140>)
 80079de:	7912      	ldrb	r2, [r2, #4]
 80079e0:	701a      	strb	r2, [r3, #0]
    	pbuf[5]=buffer[5];
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	3305      	adds	r3, #5
 80079e6:	4a08      	ldr	r2, [pc, #32]	; (8007a08 <CDC_Control_FS+0x140>)
 80079e8:	7952      	ldrb	r2, [r2, #5]
 80079ea:	701a      	strb	r2, [r3, #0]
    	pbuf[6]=buffer[6];
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	3306      	adds	r3, #6
 80079f0:	4a05      	ldr	r2, [pc, #20]	; (8007a08 <CDC_Control_FS+0x140>)
 80079f2:	7992      	ldrb	r2, [r2, #6]
 80079f4:	701a      	strb	r2, [r3, #0]
    break;
 80079f6:	e000      	b.n	80079fa <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80079f8:	bf00      	nop
  }

  return (USBD_OK);
 80079fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	200016b0 	.word	0x200016b0

08007a0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	4816      	ldr	r0, [pc, #88]	; (8007a74 <CDC_Receive_FS+0x68>)
 8007a1a:	f7fe fe70 	bl	80066fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a1e:	4815      	ldr	r0, [pc, #84]	; (8007a74 <CDC_Receive_FS+0x68>)
 8007a20:	f7fe fe81 	bl	8006726 <USBD_CDC_ReceivePacket>
  dato_recepcion_USB=*Buf;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	781a      	ldrb	r2, [r3, #0]
 8007a28:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <CDC_Receive_FS+0x6c>)
 8007a2a:	701a      	strb	r2, [r3, #0]
  cont_datos_USB++;
 8007a2c:	4b13      	ldr	r3, [pc, #76]	; (8007a7c <CDC_Receive_FS+0x70>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3301      	adds	r3, #1
 8007a32:	4a12      	ldr	r2, [pc, #72]	; (8007a7c <CDC_Receive_FS+0x70>)
 8007a34:	6013      	str	r3, [r2, #0]
  str[cont_datos_USB - 1] = dato_recepcion_USB;
 8007a36:	4b11      	ldr	r3, [pc, #68]	; (8007a7c <CDC_Receive_FS+0x70>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	4a0e      	ldr	r2, [pc, #56]	; (8007a78 <CDC_Receive_FS+0x6c>)
 8007a3e:	7812      	ldrb	r2, [r2, #0]
 8007a40:	b2d1      	uxtb	r1, r2
 8007a42:	4a0f      	ldr	r2, [pc, #60]	; (8007a80 <CDC_Receive_FS+0x74>)
 8007a44:	54d1      	strb	r1, [r2, r3]
  if(str[cont_datos_USB - 1]==':'){
 8007a46:	4b0d      	ldr	r3, [pc, #52]	; (8007a7c <CDC_Receive_FS+0x70>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	4a0c      	ldr	r2, [pc, #48]	; (8007a80 <CDC_Receive_FS+0x74>)
 8007a4e:	5cd3      	ldrb	r3, [r2, r3]
 8007a50:	2b3a      	cmp	r3, #58	; 0x3a
 8007a52:	d109      	bne.n	8007a68 <CDC_Receive_FS+0x5c>
	  flag_mensaje_completo = 0;
 8007a54:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <CDC_Receive_FS+0x78>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	601a      	str	r2, [r3, #0]
	  contador_instrucciones=cont_datos_USB;
 8007a5a:	4b08      	ldr	r3, [pc, #32]	; (8007a7c <CDC_Receive_FS+0x70>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a0a      	ldr	r2, [pc, #40]	; (8007a88 <CDC_Receive_FS+0x7c>)
 8007a60:	6013      	str	r3, [r2, #0]
	  cont_datos_USB=0;
 8007a62:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <CDC_Receive_FS+0x70>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]
  }
  return (USBD_OK);
 8007a68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20000410 	.word	0x20000410
 8007a78:	200006ac 	.word	0x200006ac
 8007a7c:	200003a4 	.word	0x200003a4
 8007a80:	200016b8 	.word	0x200016b8
 8007a84:	20000124 	.word	0x20000124
 8007a88:	200003a8 	.word	0x200003a8

08007a8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	6039      	str	r1, [r7, #0]
 8007a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2212      	movs	r2, #18
 8007a9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a9e:	4b03      	ldr	r3, [pc, #12]	; (8007aac <USBD_FS_DeviceDescriptor+0x20>)
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	20000154 	.word	0x20000154

08007ab0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	6039      	str	r1, [r7, #0]
 8007aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2204      	movs	r2, #4
 8007ac0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ac2:	4b03      	ldr	r3, [pc, #12]	; (8007ad0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	20000168 	.word	0x20000168

08007ad4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	4603      	mov	r3, r0
 8007adc:	6039      	str	r1, [r7, #0]
 8007ade:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d105      	bne.n	8007af2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	4907      	ldr	r1, [pc, #28]	; (8007b08 <USBD_FS_ProductStrDescriptor+0x34>)
 8007aea:	4808      	ldr	r0, [pc, #32]	; (8007b0c <USBD_FS_ProductStrDescriptor+0x38>)
 8007aec:	f7ff fdc2 	bl	8007674 <USBD_GetString>
 8007af0:	e004      	b.n	8007afc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	4904      	ldr	r1, [pc, #16]	; (8007b08 <USBD_FS_ProductStrDescriptor+0x34>)
 8007af6:	4805      	ldr	r0, [pc, #20]	; (8007b0c <USBD_FS_ProductStrDescriptor+0x38>)
 8007af8:	f7ff fdbc 	bl	8007674 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007afc:	4b02      	ldr	r3, [pc, #8]	; (8007b08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	200016ec 	.word	0x200016ec
 8007b0c:	0800b8e4 	.word	0x0800b8e4

08007b10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4603      	mov	r3, r0
 8007b18:	6039      	str	r1, [r7, #0]
 8007b1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	4904      	ldr	r1, [pc, #16]	; (8007b30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b20:	4804      	ldr	r0, [pc, #16]	; (8007b34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b22:	f7ff fda7 	bl	8007674 <USBD_GetString>
  return USBD_StrDesc;
 8007b26:	4b02      	ldr	r3, [pc, #8]	; (8007b30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	200016ec 	.word	0x200016ec
 8007b34:	0800b8fc 	.word	0x0800b8fc

08007b38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	6039      	str	r1, [r7, #0]
 8007b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	221a      	movs	r2, #26
 8007b48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b4a:	f000 f843 	bl	8007bd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b4e:	4b02      	ldr	r3, [pc, #8]	; (8007b58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	2000016c 	.word	0x2000016c

08007b5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	4603      	mov	r3, r0
 8007b64:	6039      	str	r1, [r7, #0]
 8007b66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b68:	79fb      	ldrb	r3, [r7, #7]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d105      	bne.n	8007b7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	4907      	ldr	r1, [pc, #28]	; (8007b90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b72:	4808      	ldr	r0, [pc, #32]	; (8007b94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b74:	f7ff fd7e 	bl	8007674 <USBD_GetString>
 8007b78:	e004      	b.n	8007b84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	4904      	ldr	r1, [pc, #16]	; (8007b90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b7e:	4805      	ldr	r0, [pc, #20]	; (8007b94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b80:	f7ff fd78 	bl	8007674 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b84:	4b02      	ldr	r3, [pc, #8]	; (8007b90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	200016ec 	.word	0x200016ec
 8007b94:	0800b910 	.word	0x0800b910

08007b98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	6039      	str	r1, [r7, #0]
 8007ba2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d105      	bne.n	8007bb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	4907      	ldr	r1, [pc, #28]	; (8007bcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bae:	4808      	ldr	r0, [pc, #32]	; (8007bd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bb0:	f7ff fd60 	bl	8007674 <USBD_GetString>
 8007bb4:	e004      	b.n	8007bc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	4904      	ldr	r1, [pc, #16]	; (8007bcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bba:	4805      	ldr	r0, [pc, #20]	; (8007bd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bbc:	f7ff fd5a 	bl	8007674 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bc0:	4b02      	ldr	r3, [pc, #8]	; (8007bcc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	200016ec 	.word	0x200016ec
 8007bd0:	0800b91c 	.word	0x0800b91c

08007bd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bda:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <Get_SerialNum+0x44>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007be0:	4b0e      	ldr	r3, [pc, #56]	; (8007c1c <Get_SerialNum+0x48>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007be6:	4b0e      	ldr	r3, [pc, #56]	; (8007c20 <Get_SerialNum+0x4c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d009      	beq.n	8007c0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bfa:	2208      	movs	r2, #8
 8007bfc:	4909      	ldr	r1, [pc, #36]	; (8007c24 <Get_SerialNum+0x50>)
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 f814 	bl	8007c2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c04:	2204      	movs	r2, #4
 8007c06:	4908      	ldr	r1, [pc, #32]	; (8007c28 <Get_SerialNum+0x54>)
 8007c08:	68b8      	ldr	r0, [r7, #8]
 8007c0a:	f000 f80f 	bl	8007c2c <IntToUnicode>
  }
}
 8007c0e:	bf00      	nop
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	1fff7a10 	.word	0x1fff7a10
 8007c1c:	1fff7a14 	.word	0x1fff7a14
 8007c20:	1fff7a18 	.word	0x1fff7a18
 8007c24:	2000016e 	.word	0x2000016e
 8007c28:	2000017e 	.word	0x2000017e

08007c2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	4613      	mov	r3, r2
 8007c38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c3e:	2300      	movs	r3, #0
 8007c40:	75fb      	strb	r3, [r7, #23]
 8007c42:	e027      	b.n	8007c94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	0f1b      	lsrs	r3, r3, #28
 8007c48:	2b09      	cmp	r3, #9
 8007c4a:	d80b      	bhi.n	8007c64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	0f1b      	lsrs	r3, r3, #28
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	7dfb      	ldrb	r3, [r7, #23]
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	4619      	mov	r1, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	440b      	add	r3, r1
 8007c5c:	3230      	adds	r2, #48	; 0x30
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e00a      	b.n	8007c7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	0f1b      	lsrs	r3, r3, #28
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	4619      	mov	r1, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	440b      	add	r3, r1
 8007c74:	3237      	adds	r2, #55	; 0x37
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	005b      	lsls	r3, r3, #1
 8007c84:	3301      	adds	r3, #1
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	4413      	add	r3, r2
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	3301      	adds	r3, #1
 8007c92:	75fb      	strb	r3, [r7, #23]
 8007c94:	7dfa      	ldrb	r2, [r7, #23]
 8007c96:	79fb      	ldrb	r3, [r7, #7]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d3d3      	bcc.n	8007c44 <IntToUnicode+0x18>
  }
}
 8007c9c:	bf00      	nop
 8007c9e:	371c      	adds	r7, #28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cb0:	f107 0314 	add.w	r3, r7, #20
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	605a      	str	r2, [r3, #4]
 8007cba:	609a      	str	r2, [r3, #8]
 8007cbc:	60da      	str	r2, [r3, #12]
 8007cbe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cc8:	d13a      	bne.n	8007d40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cca:	2300      	movs	r3, #0
 8007ccc:	613b      	str	r3, [r7, #16]
 8007cce:	4b1e      	ldr	r3, [pc, #120]	; (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd2:	4a1d      	ldr	r2, [pc, #116]	; (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007cd4:	f043 0301 	orr.w	r3, r3, #1
 8007cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8007cda:	4b1b      	ldr	r3, [pc, #108]	; (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ce6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cec:	2302      	movs	r3, #2
 8007cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007cf8:	230a      	movs	r3, #10
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cfc:	f107 0314 	add.w	r3, r7, #20
 8007d00:	4619      	mov	r1, r3
 8007d02:	4812      	ldr	r0, [pc, #72]	; (8007d4c <HAL_PCD_MspInit+0xa4>)
 8007d04:	f7fa fb22 	bl	800234c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d08:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0c:	4a0e      	ldr	r2, [pc, #56]	; (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d12:	6353      	str	r3, [r2, #52]	; 0x34
 8007d14:	2300      	movs	r3, #0
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	4b0b      	ldr	r3, [pc, #44]	; (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1c:	4a0a      	ldr	r2, [pc, #40]	; (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d22:	6453      	str	r3, [r2, #68]	; 0x44
 8007d24:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d30:	2200      	movs	r2, #0
 8007d32:	2100      	movs	r1, #0
 8007d34:	2043      	movs	r0, #67	; 0x43
 8007d36:	f7fa fab0 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d3a:	2043      	movs	r0, #67	; 0x43
 8007d3c:	f7fa fac9 	bl	80022d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d40:	bf00      	nop
 8007d42:	3728      	adds	r7, #40	; 0x28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	40023800 	.word	0x40023800
 8007d4c:	40020000 	.word	0x40020000

08007d50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d64:	4619      	mov	r1, r3
 8007d66:	4610      	mov	r0, r2
 8007d68:	f7fe fd95 	bl	8006896 <USBD_LL_SetupStage>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	00db      	lsls	r3, r3, #3
 8007d8e:	1a9b      	subs	r3, r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7fe fdc5 	bl	800692c <USBD_LL_DataOutStage>
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007dbc:	78fa      	ldrb	r2, [r7, #3]
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	00db      	lsls	r3, r3, #3
 8007dc4:	1a9b      	subs	r3, r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	440b      	add	r3, r1
 8007dca:	3348      	adds	r3, #72	; 0x48
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	f7fe fe1c 	bl	8006a0e <USBD_LL_DataInStage>
}
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fe ff2a 	bl	8006c46 <USBD_LL_SOF>
}
 8007df2:	bf00      	nop
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e02:	2301      	movs	r3, #1
 8007e04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d102      	bne.n	8007e14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]
 8007e12:	e008      	b.n	8007e26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d102      	bne.n	8007e22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	73fb      	strb	r3, [r7, #15]
 8007e20:	e001      	b.n	8007e26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007e22:	f7f9 ff3b 	bl	8001c9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e2c:	7bfa      	ldrb	r2, [r7, #15]
 8007e2e:	4611      	mov	r1, r2
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fe fed2 	bl	8006bda <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fe fe8b 	bl	8006b58 <USBD_LL_Reset>
}
 8007e42:	bf00      	nop
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe fecd 	bl	8006bfa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6812      	ldr	r2, [r2, #0]
 8007e6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e72:	f043 0301 	orr.w	r3, r3, #1
 8007e76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d005      	beq.n	8007e8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e80:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <HAL_PCD_SuspendCallback+0x48>)
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	4a03      	ldr	r2, [pc, #12]	; (8007e94 <HAL_PCD_SuspendCallback+0x48>)
 8007e86:	f043 0306 	orr.w	r3, r3, #6
 8007e8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	e000ed00 	.word	0xe000ed00

08007e98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe febc 	bl	8006c24 <USBD_LL_Resume>
}
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	4611      	mov	r1, r2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fee2 	bl	8006c94 <USBD_LL_IsoOUTIncomplete>
}
 8007ed0:	bf00      	nop
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eea:	78fa      	ldrb	r2, [r7, #3]
 8007eec:	4611      	mov	r1, r2
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fe fec3 	bl	8006c7a <USBD_LL_IsoINIncomplete>
}
 8007ef4:	bf00      	nop
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7fe fecf 	bl	8006cae <USBD_LL_DevConnected>
}
 8007f10:	bf00      	nop
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe fecc 	bl	8006cc4 <USBD_LL_DevDisconnected>
}
 8007f2c:	bf00      	nop
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d13c      	bne.n	8007fbe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f44:	4a20      	ldr	r2, [pc, #128]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a1e      	ldr	r2, [pc, #120]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007f50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f54:	4b1c      	ldr	r3, [pc, #112]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007f56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f5c:	4b1a      	ldr	r3, [pc, #104]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007f5e:	2204      	movs	r2, #4
 8007f60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f62:	4b19      	ldr	r3, [pc, #100]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007f64:	2202      	movs	r2, #2
 8007f66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f68:	4b17      	ldr	r3, [pc, #92]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f6e:	4b16      	ldr	r3, [pc, #88]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007f70:	2202      	movs	r2, #2
 8007f72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f74:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f7a:	4b13      	ldr	r3, [pc, #76]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f80:	4b11      	ldr	r3, [pc, #68]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f86:	4b10      	ldr	r3, [pc, #64]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f8c:	4b0e      	ldr	r3, [pc, #56]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f92:	480d      	ldr	r0, [pc, #52]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007f94:	f7fa fba6 	bl	80026e4 <HAL_PCD_Init>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f9e:	f7f9 fe7d 	bl	8001c9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007fa2:	2180      	movs	r1, #128	; 0x80
 8007fa4:	4808      	ldr	r0, [pc, #32]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007fa6:	f7fb fd0a 	bl	80039be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007faa:	2240      	movs	r2, #64	; 0x40
 8007fac:	2100      	movs	r1, #0
 8007fae:	4806      	ldr	r0, [pc, #24]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007fb0:	f7fb fcbe 	bl	8003930 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007fb4:	2280      	movs	r2, #128	; 0x80
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	4803      	ldr	r0, [pc, #12]	; (8007fc8 <USBD_LL_Init+0x94>)
 8007fba:	f7fb fcb9 	bl	8003930 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	200018ec 	.word	0x200018ec

08007fcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fa fc9b 	bl	800291e <HAL_PCD_Start>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 f92e 	bl	8008250 <USBD_Get_USB_Status>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	4608      	mov	r0, r1
 800800c:	4611      	mov	r1, r2
 800800e:	461a      	mov	r2, r3
 8008010:	4603      	mov	r3, r0
 8008012:	70fb      	strb	r3, [r7, #3]
 8008014:	460b      	mov	r3, r1
 8008016:	70bb      	strb	r3, [r7, #2]
 8008018:	4613      	mov	r3, r2
 800801a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800802a:	78bb      	ldrb	r3, [r7, #2]
 800802c:	883a      	ldrh	r2, [r7, #0]
 800802e:	78f9      	ldrb	r1, [r7, #3]
 8008030:	f7fb f870 	bl	8003114 <HAL_PCD_EP_Open>
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 f908 	bl	8008250 <USBD_Get_USB_Status>
 8008040:	4603      	mov	r3, r0
 8008042:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008044:	7bbb      	ldrb	r3, [r7, #14]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008068:	78fa      	ldrb	r2, [r7, #3]
 800806a:	4611      	mov	r1, r2
 800806c:	4618      	mov	r0, r3
 800806e:	f7fb f8b9 	bl	80031e4 <HAL_PCD_EP_Close>
 8008072:	4603      	mov	r3, r0
 8008074:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	4618      	mov	r0, r3
 800807a:	f000 f8e9 	bl	8008250 <USBD_Get_USB_Status>
 800807e:	4603      	mov	r3, r0
 8008080:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008082:	7bbb      	ldrb	r3, [r7, #14]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80080a6:	78fa      	ldrb	r2, [r7, #3]
 80080a8:	4611      	mov	r1, r2
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fb f991 	bl	80033d2 <HAL_PCD_EP_SetStall>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f8ca 	bl	8008250 <USBD_Get_USB_Status>
 80080bc:	4603      	mov	r3, r0
 80080be:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	460b      	mov	r3, r1
 80080d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80080e4:	78fa      	ldrb	r2, [r7, #3]
 80080e6:	4611      	mov	r1, r2
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fb f9d6 	bl	800349a <HAL_PCD_EP_ClrStall>
 80080ee:	4603      	mov	r3, r0
 80080f0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 f8ab 	bl	8008250 <USBD_Get_USB_Status>
 80080fa:	4603      	mov	r3, r0
 80080fc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800811a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800811c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008120:	2b00      	cmp	r3, #0
 8008122:	da0b      	bge.n	800813c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008124:	78fb      	ldrb	r3, [r7, #3]
 8008126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800812a:	68f9      	ldr	r1, [r7, #12]
 800812c:	4613      	mov	r3, r2
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	1a9b      	subs	r3, r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	440b      	add	r3, r1
 8008136:	333e      	adds	r3, #62	; 0x3e
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	e00b      	b.n	8008154 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008142:	68f9      	ldr	r1, [r7, #12]
 8008144:	4613      	mov	r3, r2
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	1a9b      	subs	r3, r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	440b      	add	r3, r1
 800814e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008152:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800817a:	78fa      	ldrb	r2, [r7, #3]
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f7fa ffa3 	bl	80030ca <HAL_PCD_SetAddress>
 8008184:	4603      	mov	r3, r0
 8008186:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 f860 	bl	8008250 <USBD_Get_USB_Status>
 8008190:	4603      	mov	r3, r0
 8008192:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008194:	7bbb      	ldrb	r3, [r7, #14]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b086      	sub	sp, #24
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	461a      	mov	r2, r3
 80081aa:	460b      	mov	r3, r1
 80081ac:	72fb      	strb	r3, [r7, #11]
 80081ae:	4613      	mov	r3, r2
 80081b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80081c0:	893b      	ldrh	r3, [r7, #8]
 80081c2:	7af9      	ldrb	r1, [r7, #11]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	f7fb f8ba 	bl	800333e <HAL_PCD_EP_Transmit>
 80081ca:	4603      	mov	r3, r0
 80081cc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 f83d 	bl	8008250 <USBD_Get_USB_Status>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80081da:	7dbb      	ldrb	r3, [r7, #22]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	607a      	str	r2, [r7, #4]
 80081ee:	461a      	mov	r2, r3
 80081f0:	460b      	mov	r3, r1
 80081f2:	72fb      	strb	r3, [r7, #11]
 80081f4:	4613      	mov	r3, r2
 80081f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008206:	893b      	ldrh	r3, [r7, #8]
 8008208:	7af9      	ldrb	r1, [r7, #11]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	f7fb f834 	bl	8003278 <HAL_PCD_EP_Receive>
 8008210:	4603      	mov	r3, r0
 8008212:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8008214:	7dfb      	ldrb	r3, [r7, #23]
 8008216:	4618      	mov	r0, r3
 8008218:	f000 f81a 	bl	8008250 <USBD_Get_USB_Status>
 800821c:	4603      	mov	r3, r0
 800821e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008220:	7dbb      	ldrb	r3, [r7, #22]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800823c:	78fa      	ldrb	r2, [r7, #3]
 800823e:	4611      	mov	r1, r2
 8008240:	4618      	mov	r0, r3
 8008242:	f7fb f864 	bl	800330e <HAL_PCD_EP_GetRxCount>
 8008246:	4603      	mov	r3, r0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	4603      	mov	r3, r0
 8008258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800825e:	79fb      	ldrb	r3, [r7, #7]
 8008260:	2b03      	cmp	r3, #3
 8008262:	d817      	bhi.n	8008294 <USBD_Get_USB_Status+0x44>
 8008264:	a201      	add	r2, pc, #4	; (adr r2, 800826c <USBD_Get_USB_Status+0x1c>)
 8008266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826a:	bf00      	nop
 800826c:	0800827d 	.word	0x0800827d
 8008270:	08008283 	.word	0x08008283
 8008274:	08008289 	.word	0x08008289
 8008278:	0800828f 	.word	0x0800828f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
    break;
 8008280:	e00b      	b.n	800829a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008282:	2302      	movs	r3, #2
 8008284:	73fb      	strb	r3, [r7, #15]
    break;
 8008286:	e008      	b.n	800829a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008288:	2301      	movs	r3, #1
 800828a:	73fb      	strb	r3, [r7, #15]
    break;
 800828c:	e005      	b.n	800829a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800828e:	2302      	movs	r3, #2
 8008290:	73fb      	strb	r3, [r7, #15]
    break;
 8008292:	e002      	b.n	800829a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008294:	2302      	movs	r3, #2
 8008296:	73fb      	strb	r3, [r7, #15]
    break;
 8008298:	bf00      	nop
  }
  return usb_status;
 800829a:	7bfb      	ldrb	r3, [r7, #15]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <__errno>:
 80082a8:	4b01      	ldr	r3, [pc, #4]	; (80082b0 <__errno+0x8>)
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	20000188 	.word	0x20000188

080082b4 <__libc_init_array>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	4e0d      	ldr	r6, [pc, #52]	; (80082ec <__libc_init_array+0x38>)
 80082b8:	4c0d      	ldr	r4, [pc, #52]	; (80082f0 <__libc_init_array+0x3c>)
 80082ba:	1ba4      	subs	r4, r4, r6
 80082bc:	10a4      	asrs	r4, r4, #2
 80082be:	2500      	movs	r5, #0
 80082c0:	42a5      	cmp	r5, r4
 80082c2:	d109      	bne.n	80082d8 <__libc_init_array+0x24>
 80082c4:	4e0b      	ldr	r6, [pc, #44]	; (80082f4 <__libc_init_array+0x40>)
 80082c6:	4c0c      	ldr	r4, [pc, #48]	; (80082f8 <__libc_init_array+0x44>)
 80082c8:	f003 fafc 	bl	800b8c4 <_init>
 80082cc:	1ba4      	subs	r4, r4, r6
 80082ce:	10a4      	asrs	r4, r4, #2
 80082d0:	2500      	movs	r5, #0
 80082d2:	42a5      	cmp	r5, r4
 80082d4:	d105      	bne.n	80082e2 <__libc_init_array+0x2e>
 80082d6:	bd70      	pop	{r4, r5, r6, pc}
 80082d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082dc:	4798      	blx	r3
 80082de:	3501      	adds	r5, #1
 80082e0:	e7ee      	b.n	80082c0 <__libc_init_array+0xc>
 80082e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082e6:	4798      	blx	r3
 80082e8:	3501      	adds	r5, #1
 80082ea:	e7f2      	b.n	80082d2 <__libc_init_array+0x1e>
 80082ec:	0800bbf0 	.word	0x0800bbf0
 80082f0:	0800bbf0 	.word	0x0800bbf0
 80082f4:	0800bbf0 	.word	0x0800bbf0
 80082f8:	0800bbf4 	.word	0x0800bbf4

080082fc <malloc>:
 80082fc:	4b02      	ldr	r3, [pc, #8]	; (8008308 <malloc+0xc>)
 80082fe:	4601      	mov	r1, r0
 8008300:	6818      	ldr	r0, [r3, #0]
 8008302:	f000 b861 	b.w	80083c8 <_malloc_r>
 8008306:	bf00      	nop
 8008308:	20000188 	.word	0x20000188

0800830c <free>:
 800830c:	4b02      	ldr	r3, [pc, #8]	; (8008318 <free+0xc>)
 800830e:	4601      	mov	r1, r0
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	f000 b80b 	b.w	800832c <_free_r>
 8008316:	bf00      	nop
 8008318:	20000188 	.word	0x20000188

0800831c <memset>:
 800831c:	4402      	add	r2, r0
 800831e:	4603      	mov	r3, r0
 8008320:	4293      	cmp	r3, r2
 8008322:	d100      	bne.n	8008326 <memset+0xa>
 8008324:	4770      	bx	lr
 8008326:	f803 1b01 	strb.w	r1, [r3], #1
 800832a:	e7f9      	b.n	8008320 <memset+0x4>

0800832c <_free_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4605      	mov	r5, r0
 8008330:	2900      	cmp	r1, #0
 8008332:	d045      	beq.n	80083c0 <_free_r+0x94>
 8008334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008338:	1f0c      	subs	r4, r1, #4
 800833a:	2b00      	cmp	r3, #0
 800833c:	bfb8      	it	lt
 800833e:	18e4      	addlt	r4, r4, r3
 8008340:	f002 fcf9 	bl	800ad36 <__malloc_lock>
 8008344:	4a1f      	ldr	r2, [pc, #124]	; (80083c4 <_free_r+0x98>)
 8008346:	6813      	ldr	r3, [r2, #0]
 8008348:	4610      	mov	r0, r2
 800834a:	b933      	cbnz	r3, 800835a <_free_r+0x2e>
 800834c:	6063      	str	r3, [r4, #4]
 800834e:	6014      	str	r4, [r2, #0]
 8008350:	4628      	mov	r0, r5
 8008352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008356:	f002 bcef 	b.w	800ad38 <__malloc_unlock>
 800835a:	42a3      	cmp	r3, r4
 800835c:	d90c      	bls.n	8008378 <_free_r+0x4c>
 800835e:	6821      	ldr	r1, [r4, #0]
 8008360:	1862      	adds	r2, r4, r1
 8008362:	4293      	cmp	r3, r2
 8008364:	bf04      	itt	eq
 8008366:	681a      	ldreq	r2, [r3, #0]
 8008368:	685b      	ldreq	r3, [r3, #4]
 800836a:	6063      	str	r3, [r4, #4]
 800836c:	bf04      	itt	eq
 800836e:	1852      	addeq	r2, r2, r1
 8008370:	6022      	streq	r2, [r4, #0]
 8008372:	6004      	str	r4, [r0, #0]
 8008374:	e7ec      	b.n	8008350 <_free_r+0x24>
 8008376:	4613      	mov	r3, r2
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	b10a      	cbz	r2, 8008380 <_free_r+0x54>
 800837c:	42a2      	cmp	r2, r4
 800837e:	d9fa      	bls.n	8008376 <_free_r+0x4a>
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	1858      	adds	r0, r3, r1
 8008384:	42a0      	cmp	r0, r4
 8008386:	d10b      	bne.n	80083a0 <_free_r+0x74>
 8008388:	6820      	ldr	r0, [r4, #0]
 800838a:	4401      	add	r1, r0
 800838c:	1858      	adds	r0, r3, r1
 800838e:	4282      	cmp	r2, r0
 8008390:	6019      	str	r1, [r3, #0]
 8008392:	d1dd      	bne.n	8008350 <_free_r+0x24>
 8008394:	6810      	ldr	r0, [r2, #0]
 8008396:	6852      	ldr	r2, [r2, #4]
 8008398:	605a      	str	r2, [r3, #4]
 800839a:	4401      	add	r1, r0
 800839c:	6019      	str	r1, [r3, #0]
 800839e:	e7d7      	b.n	8008350 <_free_r+0x24>
 80083a0:	d902      	bls.n	80083a8 <_free_r+0x7c>
 80083a2:	230c      	movs	r3, #12
 80083a4:	602b      	str	r3, [r5, #0]
 80083a6:	e7d3      	b.n	8008350 <_free_r+0x24>
 80083a8:	6820      	ldr	r0, [r4, #0]
 80083aa:	1821      	adds	r1, r4, r0
 80083ac:	428a      	cmp	r2, r1
 80083ae:	bf04      	itt	eq
 80083b0:	6811      	ldreq	r1, [r2, #0]
 80083b2:	6852      	ldreq	r2, [r2, #4]
 80083b4:	6062      	str	r2, [r4, #4]
 80083b6:	bf04      	itt	eq
 80083b8:	1809      	addeq	r1, r1, r0
 80083ba:	6021      	streq	r1, [r4, #0]
 80083bc:	605c      	str	r4, [r3, #4]
 80083be:	e7c7      	b.n	8008350 <_free_r+0x24>
 80083c0:	bd38      	pop	{r3, r4, r5, pc}
 80083c2:	bf00      	nop
 80083c4:	200003ac 	.word	0x200003ac

080083c8 <_malloc_r>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	1ccd      	adds	r5, r1, #3
 80083cc:	f025 0503 	bic.w	r5, r5, #3
 80083d0:	3508      	adds	r5, #8
 80083d2:	2d0c      	cmp	r5, #12
 80083d4:	bf38      	it	cc
 80083d6:	250c      	movcc	r5, #12
 80083d8:	2d00      	cmp	r5, #0
 80083da:	4606      	mov	r6, r0
 80083dc:	db01      	blt.n	80083e2 <_malloc_r+0x1a>
 80083de:	42a9      	cmp	r1, r5
 80083e0:	d903      	bls.n	80083ea <_malloc_r+0x22>
 80083e2:	230c      	movs	r3, #12
 80083e4:	6033      	str	r3, [r6, #0]
 80083e6:	2000      	movs	r0, #0
 80083e8:	bd70      	pop	{r4, r5, r6, pc}
 80083ea:	f002 fca4 	bl	800ad36 <__malloc_lock>
 80083ee:	4a21      	ldr	r2, [pc, #132]	; (8008474 <_malloc_r+0xac>)
 80083f0:	6814      	ldr	r4, [r2, #0]
 80083f2:	4621      	mov	r1, r4
 80083f4:	b991      	cbnz	r1, 800841c <_malloc_r+0x54>
 80083f6:	4c20      	ldr	r4, [pc, #128]	; (8008478 <_malloc_r+0xb0>)
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	b91b      	cbnz	r3, 8008404 <_malloc_r+0x3c>
 80083fc:	4630      	mov	r0, r6
 80083fe:	f000 fc99 	bl	8008d34 <_sbrk_r>
 8008402:	6020      	str	r0, [r4, #0]
 8008404:	4629      	mov	r1, r5
 8008406:	4630      	mov	r0, r6
 8008408:	f000 fc94 	bl	8008d34 <_sbrk_r>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d124      	bne.n	800845a <_malloc_r+0x92>
 8008410:	230c      	movs	r3, #12
 8008412:	6033      	str	r3, [r6, #0]
 8008414:	4630      	mov	r0, r6
 8008416:	f002 fc8f 	bl	800ad38 <__malloc_unlock>
 800841a:	e7e4      	b.n	80083e6 <_malloc_r+0x1e>
 800841c:	680b      	ldr	r3, [r1, #0]
 800841e:	1b5b      	subs	r3, r3, r5
 8008420:	d418      	bmi.n	8008454 <_malloc_r+0x8c>
 8008422:	2b0b      	cmp	r3, #11
 8008424:	d90f      	bls.n	8008446 <_malloc_r+0x7e>
 8008426:	600b      	str	r3, [r1, #0]
 8008428:	50cd      	str	r5, [r1, r3]
 800842a:	18cc      	adds	r4, r1, r3
 800842c:	4630      	mov	r0, r6
 800842e:	f002 fc83 	bl	800ad38 <__malloc_unlock>
 8008432:	f104 000b 	add.w	r0, r4, #11
 8008436:	1d23      	adds	r3, r4, #4
 8008438:	f020 0007 	bic.w	r0, r0, #7
 800843c:	1ac3      	subs	r3, r0, r3
 800843e:	d0d3      	beq.n	80083e8 <_malloc_r+0x20>
 8008440:	425a      	negs	r2, r3
 8008442:	50e2      	str	r2, [r4, r3]
 8008444:	e7d0      	b.n	80083e8 <_malloc_r+0x20>
 8008446:	428c      	cmp	r4, r1
 8008448:	684b      	ldr	r3, [r1, #4]
 800844a:	bf16      	itet	ne
 800844c:	6063      	strne	r3, [r4, #4]
 800844e:	6013      	streq	r3, [r2, #0]
 8008450:	460c      	movne	r4, r1
 8008452:	e7eb      	b.n	800842c <_malloc_r+0x64>
 8008454:	460c      	mov	r4, r1
 8008456:	6849      	ldr	r1, [r1, #4]
 8008458:	e7cc      	b.n	80083f4 <_malloc_r+0x2c>
 800845a:	1cc4      	adds	r4, r0, #3
 800845c:	f024 0403 	bic.w	r4, r4, #3
 8008460:	42a0      	cmp	r0, r4
 8008462:	d005      	beq.n	8008470 <_malloc_r+0xa8>
 8008464:	1a21      	subs	r1, r4, r0
 8008466:	4630      	mov	r0, r6
 8008468:	f000 fc64 	bl	8008d34 <_sbrk_r>
 800846c:	3001      	adds	r0, #1
 800846e:	d0cf      	beq.n	8008410 <_malloc_r+0x48>
 8008470:	6025      	str	r5, [r4, #0]
 8008472:	e7db      	b.n	800842c <_malloc_r+0x64>
 8008474:	200003ac 	.word	0x200003ac
 8008478:	200003b0 	.word	0x200003b0

0800847c <__cvt>:
 800847c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008480:	ec55 4b10 	vmov	r4, r5, d0
 8008484:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008486:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800848a:	2d00      	cmp	r5, #0
 800848c:	460e      	mov	r6, r1
 800848e:	4691      	mov	r9, r2
 8008490:	4619      	mov	r1, r3
 8008492:	bfb8      	it	lt
 8008494:	4622      	movlt	r2, r4
 8008496:	462b      	mov	r3, r5
 8008498:	f027 0720 	bic.w	r7, r7, #32
 800849c:	bfbb      	ittet	lt
 800849e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80084a2:	461d      	movlt	r5, r3
 80084a4:	2300      	movge	r3, #0
 80084a6:	232d      	movlt	r3, #45	; 0x2d
 80084a8:	bfb8      	it	lt
 80084aa:	4614      	movlt	r4, r2
 80084ac:	2f46      	cmp	r7, #70	; 0x46
 80084ae:	700b      	strb	r3, [r1, #0]
 80084b0:	d004      	beq.n	80084bc <__cvt+0x40>
 80084b2:	2f45      	cmp	r7, #69	; 0x45
 80084b4:	d100      	bne.n	80084b8 <__cvt+0x3c>
 80084b6:	3601      	adds	r6, #1
 80084b8:	2102      	movs	r1, #2
 80084ba:	e000      	b.n	80084be <__cvt+0x42>
 80084bc:	2103      	movs	r1, #3
 80084be:	ab03      	add	r3, sp, #12
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	ab02      	add	r3, sp, #8
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	4632      	mov	r2, r6
 80084c8:	4653      	mov	r3, sl
 80084ca:	ec45 4b10 	vmov	d0, r4, r5
 80084ce:	f001 fb27 	bl	8009b20 <_dtoa_r>
 80084d2:	2f47      	cmp	r7, #71	; 0x47
 80084d4:	4680      	mov	r8, r0
 80084d6:	d102      	bne.n	80084de <__cvt+0x62>
 80084d8:	f019 0f01 	tst.w	r9, #1
 80084dc:	d026      	beq.n	800852c <__cvt+0xb0>
 80084de:	2f46      	cmp	r7, #70	; 0x46
 80084e0:	eb08 0906 	add.w	r9, r8, r6
 80084e4:	d111      	bne.n	800850a <__cvt+0x8e>
 80084e6:	f898 3000 	ldrb.w	r3, [r8]
 80084ea:	2b30      	cmp	r3, #48	; 0x30
 80084ec:	d10a      	bne.n	8008504 <__cvt+0x88>
 80084ee:	2200      	movs	r2, #0
 80084f0:	2300      	movs	r3, #0
 80084f2:	4620      	mov	r0, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	f7f8 fae7 	bl	8000ac8 <__aeabi_dcmpeq>
 80084fa:	b918      	cbnz	r0, 8008504 <__cvt+0x88>
 80084fc:	f1c6 0601 	rsb	r6, r6, #1
 8008500:	f8ca 6000 	str.w	r6, [sl]
 8008504:	f8da 3000 	ldr.w	r3, [sl]
 8008508:	4499      	add	r9, r3
 800850a:	2200      	movs	r2, #0
 800850c:	2300      	movs	r3, #0
 800850e:	4620      	mov	r0, r4
 8008510:	4629      	mov	r1, r5
 8008512:	f7f8 fad9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008516:	b938      	cbnz	r0, 8008528 <__cvt+0xac>
 8008518:	2230      	movs	r2, #48	; 0x30
 800851a:	9b03      	ldr	r3, [sp, #12]
 800851c:	454b      	cmp	r3, r9
 800851e:	d205      	bcs.n	800852c <__cvt+0xb0>
 8008520:	1c59      	adds	r1, r3, #1
 8008522:	9103      	str	r1, [sp, #12]
 8008524:	701a      	strb	r2, [r3, #0]
 8008526:	e7f8      	b.n	800851a <__cvt+0x9e>
 8008528:	f8cd 900c 	str.w	r9, [sp, #12]
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008530:	eba3 0308 	sub.w	r3, r3, r8
 8008534:	4640      	mov	r0, r8
 8008536:	6013      	str	r3, [r2, #0]
 8008538:	b004      	add	sp, #16
 800853a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800853e <__exponent>:
 800853e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008540:	2900      	cmp	r1, #0
 8008542:	4604      	mov	r4, r0
 8008544:	bfba      	itte	lt
 8008546:	4249      	neglt	r1, r1
 8008548:	232d      	movlt	r3, #45	; 0x2d
 800854a:	232b      	movge	r3, #43	; 0x2b
 800854c:	2909      	cmp	r1, #9
 800854e:	f804 2b02 	strb.w	r2, [r4], #2
 8008552:	7043      	strb	r3, [r0, #1]
 8008554:	dd20      	ble.n	8008598 <__exponent+0x5a>
 8008556:	f10d 0307 	add.w	r3, sp, #7
 800855a:	461f      	mov	r7, r3
 800855c:	260a      	movs	r6, #10
 800855e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008562:	fb06 1115 	mls	r1, r6, r5, r1
 8008566:	3130      	adds	r1, #48	; 0x30
 8008568:	2d09      	cmp	r5, #9
 800856a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800856e:	f103 32ff 	add.w	r2, r3, #4294967295
 8008572:	4629      	mov	r1, r5
 8008574:	dc09      	bgt.n	800858a <__exponent+0x4c>
 8008576:	3130      	adds	r1, #48	; 0x30
 8008578:	3b02      	subs	r3, #2
 800857a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800857e:	42bb      	cmp	r3, r7
 8008580:	4622      	mov	r2, r4
 8008582:	d304      	bcc.n	800858e <__exponent+0x50>
 8008584:	1a10      	subs	r0, r2, r0
 8008586:	b003      	add	sp, #12
 8008588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800858a:	4613      	mov	r3, r2
 800858c:	e7e7      	b.n	800855e <__exponent+0x20>
 800858e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008592:	f804 2b01 	strb.w	r2, [r4], #1
 8008596:	e7f2      	b.n	800857e <__exponent+0x40>
 8008598:	2330      	movs	r3, #48	; 0x30
 800859a:	4419      	add	r1, r3
 800859c:	7083      	strb	r3, [r0, #2]
 800859e:	1d02      	adds	r2, r0, #4
 80085a0:	70c1      	strb	r1, [r0, #3]
 80085a2:	e7ef      	b.n	8008584 <__exponent+0x46>

080085a4 <_printf_float>:
 80085a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	b08d      	sub	sp, #52	; 0x34
 80085aa:	460c      	mov	r4, r1
 80085ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80085b0:	4616      	mov	r6, r2
 80085b2:	461f      	mov	r7, r3
 80085b4:	4605      	mov	r5, r0
 80085b6:	f002 fb93 	bl	800ace0 <_localeconv_r>
 80085ba:	6803      	ldr	r3, [r0, #0]
 80085bc:	9304      	str	r3, [sp, #16]
 80085be:	4618      	mov	r0, r3
 80085c0:	f7f7 fe06 	bl	80001d0 <strlen>
 80085c4:	2300      	movs	r3, #0
 80085c6:	930a      	str	r3, [sp, #40]	; 0x28
 80085c8:	f8d8 3000 	ldr.w	r3, [r8]
 80085cc:	9005      	str	r0, [sp, #20]
 80085ce:	3307      	adds	r3, #7
 80085d0:	f023 0307 	bic.w	r3, r3, #7
 80085d4:	f103 0208 	add.w	r2, r3, #8
 80085d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80085dc:	f8d4 b000 	ldr.w	fp, [r4]
 80085e0:	f8c8 2000 	str.w	r2, [r8]
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80085ec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80085f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085f4:	9307      	str	r3, [sp, #28]
 80085f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80085fa:	f04f 32ff 	mov.w	r2, #4294967295
 80085fe:	4ba7      	ldr	r3, [pc, #668]	; (800889c <_printf_float+0x2f8>)
 8008600:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008604:	f7f8 fa92 	bl	8000b2c <__aeabi_dcmpun>
 8008608:	bb70      	cbnz	r0, 8008668 <_printf_float+0xc4>
 800860a:	f04f 32ff 	mov.w	r2, #4294967295
 800860e:	4ba3      	ldr	r3, [pc, #652]	; (800889c <_printf_float+0x2f8>)
 8008610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008614:	f7f8 fa6c 	bl	8000af0 <__aeabi_dcmple>
 8008618:	bb30      	cbnz	r0, 8008668 <_printf_float+0xc4>
 800861a:	2200      	movs	r2, #0
 800861c:	2300      	movs	r3, #0
 800861e:	4640      	mov	r0, r8
 8008620:	4649      	mov	r1, r9
 8008622:	f7f8 fa5b 	bl	8000adc <__aeabi_dcmplt>
 8008626:	b110      	cbz	r0, 800862e <_printf_float+0x8a>
 8008628:	232d      	movs	r3, #45	; 0x2d
 800862a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800862e:	4a9c      	ldr	r2, [pc, #624]	; (80088a0 <_printf_float+0x2fc>)
 8008630:	4b9c      	ldr	r3, [pc, #624]	; (80088a4 <_printf_float+0x300>)
 8008632:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008636:	bf8c      	ite	hi
 8008638:	4690      	movhi	r8, r2
 800863a:	4698      	movls	r8, r3
 800863c:	2303      	movs	r3, #3
 800863e:	f02b 0204 	bic.w	r2, fp, #4
 8008642:	6123      	str	r3, [r4, #16]
 8008644:	6022      	str	r2, [r4, #0]
 8008646:	f04f 0900 	mov.w	r9, #0
 800864a:	9700      	str	r7, [sp, #0]
 800864c:	4633      	mov	r3, r6
 800864e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008650:	4621      	mov	r1, r4
 8008652:	4628      	mov	r0, r5
 8008654:	f000 f9e6 	bl	8008a24 <_printf_common>
 8008658:	3001      	adds	r0, #1
 800865a:	f040 808d 	bne.w	8008778 <_printf_float+0x1d4>
 800865e:	f04f 30ff 	mov.w	r0, #4294967295
 8008662:	b00d      	add	sp, #52	; 0x34
 8008664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008668:	4642      	mov	r2, r8
 800866a:	464b      	mov	r3, r9
 800866c:	4640      	mov	r0, r8
 800866e:	4649      	mov	r1, r9
 8008670:	f7f8 fa5c 	bl	8000b2c <__aeabi_dcmpun>
 8008674:	b110      	cbz	r0, 800867c <_printf_float+0xd8>
 8008676:	4a8c      	ldr	r2, [pc, #560]	; (80088a8 <_printf_float+0x304>)
 8008678:	4b8c      	ldr	r3, [pc, #560]	; (80088ac <_printf_float+0x308>)
 800867a:	e7da      	b.n	8008632 <_printf_float+0x8e>
 800867c:	6861      	ldr	r1, [r4, #4]
 800867e:	1c4b      	adds	r3, r1, #1
 8008680:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008684:	a80a      	add	r0, sp, #40	; 0x28
 8008686:	d13e      	bne.n	8008706 <_printf_float+0x162>
 8008688:	2306      	movs	r3, #6
 800868a:	6063      	str	r3, [r4, #4]
 800868c:	2300      	movs	r3, #0
 800868e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008692:	ab09      	add	r3, sp, #36	; 0x24
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	ec49 8b10 	vmov	d0, r8, r9
 800869a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800869e:	6022      	str	r2, [r4, #0]
 80086a0:	f8cd a004 	str.w	sl, [sp, #4]
 80086a4:	6861      	ldr	r1, [r4, #4]
 80086a6:	4628      	mov	r0, r5
 80086a8:	f7ff fee8 	bl	800847c <__cvt>
 80086ac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80086b0:	2b47      	cmp	r3, #71	; 0x47
 80086b2:	4680      	mov	r8, r0
 80086b4:	d109      	bne.n	80086ca <_printf_float+0x126>
 80086b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b8:	1cd8      	adds	r0, r3, #3
 80086ba:	db02      	blt.n	80086c2 <_printf_float+0x11e>
 80086bc:	6862      	ldr	r2, [r4, #4]
 80086be:	4293      	cmp	r3, r2
 80086c0:	dd47      	ble.n	8008752 <_printf_float+0x1ae>
 80086c2:	f1aa 0a02 	sub.w	sl, sl, #2
 80086c6:	fa5f fa8a 	uxtb.w	sl, sl
 80086ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80086ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086d0:	d824      	bhi.n	800871c <_printf_float+0x178>
 80086d2:	3901      	subs	r1, #1
 80086d4:	4652      	mov	r2, sl
 80086d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086da:	9109      	str	r1, [sp, #36]	; 0x24
 80086dc:	f7ff ff2f 	bl	800853e <__exponent>
 80086e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086e2:	1813      	adds	r3, r2, r0
 80086e4:	2a01      	cmp	r2, #1
 80086e6:	4681      	mov	r9, r0
 80086e8:	6123      	str	r3, [r4, #16]
 80086ea:	dc02      	bgt.n	80086f2 <_printf_float+0x14e>
 80086ec:	6822      	ldr	r2, [r4, #0]
 80086ee:	07d1      	lsls	r1, r2, #31
 80086f0:	d501      	bpl.n	80086f6 <_printf_float+0x152>
 80086f2:	3301      	adds	r3, #1
 80086f4:	6123      	str	r3, [r4, #16]
 80086f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0a5      	beq.n	800864a <_printf_float+0xa6>
 80086fe:	232d      	movs	r3, #45	; 0x2d
 8008700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008704:	e7a1      	b.n	800864a <_printf_float+0xa6>
 8008706:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800870a:	f000 8177 	beq.w	80089fc <_printf_float+0x458>
 800870e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008712:	d1bb      	bne.n	800868c <_printf_float+0xe8>
 8008714:	2900      	cmp	r1, #0
 8008716:	d1b9      	bne.n	800868c <_printf_float+0xe8>
 8008718:	2301      	movs	r3, #1
 800871a:	e7b6      	b.n	800868a <_printf_float+0xe6>
 800871c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008720:	d119      	bne.n	8008756 <_printf_float+0x1b2>
 8008722:	2900      	cmp	r1, #0
 8008724:	6863      	ldr	r3, [r4, #4]
 8008726:	dd0c      	ble.n	8008742 <_printf_float+0x19e>
 8008728:	6121      	str	r1, [r4, #16]
 800872a:	b913      	cbnz	r3, 8008732 <_printf_float+0x18e>
 800872c:	6822      	ldr	r2, [r4, #0]
 800872e:	07d2      	lsls	r2, r2, #31
 8008730:	d502      	bpl.n	8008738 <_printf_float+0x194>
 8008732:	3301      	adds	r3, #1
 8008734:	440b      	add	r3, r1
 8008736:	6123      	str	r3, [r4, #16]
 8008738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800873a:	65a3      	str	r3, [r4, #88]	; 0x58
 800873c:	f04f 0900 	mov.w	r9, #0
 8008740:	e7d9      	b.n	80086f6 <_printf_float+0x152>
 8008742:	b913      	cbnz	r3, 800874a <_printf_float+0x1a6>
 8008744:	6822      	ldr	r2, [r4, #0]
 8008746:	07d0      	lsls	r0, r2, #31
 8008748:	d501      	bpl.n	800874e <_printf_float+0x1aa>
 800874a:	3302      	adds	r3, #2
 800874c:	e7f3      	b.n	8008736 <_printf_float+0x192>
 800874e:	2301      	movs	r3, #1
 8008750:	e7f1      	b.n	8008736 <_printf_float+0x192>
 8008752:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008756:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800875a:	4293      	cmp	r3, r2
 800875c:	db05      	blt.n	800876a <_printf_float+0x1c6>
 800875e:	6822      	ldr	r2, [r4, #0]
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	07d1      	lsls	r1, r2, #31
 8008764:	d5e8      	bpl.n	8008738 <_printf_float+0x194>
 8008766:	3301      	adds	r3, #1
 8008768:	e7e5      	b.n	8008736 <_printf_float+0x192>
 800876a:	2b00      	cmp	r3, #0
 800876c:	bfd4      	ite	le
 800876e:	f1c3 0302 	rsble	r3, r3, #2
 8008772:	2301      	movgt	r3, #1
 8008774:	4413      	add	r3, r2
 8008776:	e7de      	b.n	8008736 <_printf_float+0x192>
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	055a      	lsls	r2, r3, #21
 800877c:	d407      	bmi.n	800878e <_printf_float+0x1ea>
 800877e:	6923      	ldr	r3, [r4, #16]
 8008780:	4642      	mov	r2, r8
 8008782:	4631      	mov	r1, r6
 8008784:	4628      	mov	r0, r5
 8008786:	47b8      	blx	r7
 8008788:	3001      	adds	r0, #1
 800878a:	d12b      	bne.n	80087e4 <_printf_float+0x240>
 800878c:	e767      	b.n	800865e <_printf_float+0xba>
 800878e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008792:	f240 80dc 	bls.w	800894e <_printf_float+0x3aa>
 8008796:	2200      	movs	r2, #0
 8008798:	2300      	movs	r3, #0
 800879a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800879e:	f7f8 f993 	bl	8000ac8 <__aeabi_dcmpeq>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d033      	beq.n	800880e <_printf_float+0x26a>
 80087a6:	2301      	movs	r3, #1
 80087a8:	4a41      	ldr	r2, [pc, #260]	; (80088b0 <_printf_float+0x30c>)
 80087aa:	4631      	mov	r1, r6
 80087ac:	4628      	mov	r0, r5
 80087ae:	47b8      	blx	r7
 80087b0:	3001      	adds	r0, #1
 80087b2:	f43f af54 	beq.w	800865e <_printf_float+0xba>
 80087b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087ba:	429a      	cmp	r2, r3
 80087bc:	db02      	blt.n	80087c4 <_printf_float+0x220>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	07d8      	lsls	r0, r3, #31
 80087c2:	d50f      	bpl.n	80087e4 <_printf_float+0x240>
 80087c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087c8:	4631      	mov	r1, r6
 80087ca:	4628      	mov	r0, r5
 80087cc:	47b8      	blx	r7
 80087ce:	3001      	adds	r0, #1
 80087d0:	f43f af45 	beq.w	800865e <_printf_float+0xba>
 80087d4:	f04f 0800 	mov.w	r8, #0
 80087d8:	f104 091a 	add.w	r9, r4, #26
 80087dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087de:	3b01      	subs	r3, #1
 80087e0:	4543      	cmp	r3, r8
 80087e2:	dc09      	bgt.n	80087f8 <_printf_float+0x254>
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	079b      	lsls	r3, r3, #30
 80087e8:	f100 8103 	bmi.w	80089f2 <_printf_float+0x44e>
 80087ec:	68e0      	ldr	r0, [r4, #12]
 80087ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087f0:	4298      	cmp	r0, r3
 80087f2:	bfb8      	it	lt
 80087f4:	4618      	movlt	r0, r3
 80087f6:	e734      	b.n	8008662 <_printf_float+0xbe>
 80087f8:	2301      	movs	r3, #1
 80087fa:	464a      	mov	r2, r9
 80087fc:	4631      	mov	r1, r6
 80087fe:	4628      	mov	r0, r5
 8008800:	47b8      	blx	r7
 8008802:	3001      	adds	r0, #1
 8008804:	f43f af2b 	beq.w	800865e <_printf_float+0xba>
 8008808:	f108 0801 	add.w	r8, r8, #1
 800880c:	e7e6      	b.n	80087dc <_printf_float+0x238>
 800880e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	dc2b      	bgt.n	800886c <_printf_float+0x2c8>
 8008814:	2301      	movs	r3, #1
 8008816:	4a26      	ldr	r2, [pc, #152]	; (80088b0 <_printf_float+0x30c>)
 8008818:	4631      	mov	r1, r6
 800881a:	4628      	mov	r0, r5
 800881c:	47b8      	blx	r7
 800881e:	3001      	adds	r0, #1
 8008820:	f43f af1d 	beq.w	800865e <_printf_float+0xba>
 8008824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008826:	b923      	cbnz	r3, 8008832 <_printf_float+0x28e>
 8008828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800882a:	b913      	cbnz	r3, 8008832 <_printf_float+0x28e>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	07d9      	lsls	r1, r3, #31
 8008830:	d5d8      	bpl.n	80087e4 <_printf_float+0x240>
 8008832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008836:	4631      	mov	r1, r6
 8008838:	4628      	mov	r0, r5
 800883a:	47b8      	blx	r7
 800883c:	3001      	adds	r0, #1
 800883e:	f43f af0e 	beq.w	800865e <_printf_float+0xba>
 8008842:	f04f 0900 	mov.w	r9, #0
 8008846:	f104 0a1a 	add.w	sl, r4, #26
 800884a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884c:	425b      	negs	r3, r3
 800884e:	454b      	cmp	r3, r9
 8008850:	dc01      	bgt.n	8008856 <_printf_float+0x2b2>
 8008852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008854:	e794      	b.n	8008780 <_printf_float+0x1dc>
 8008856:	2301      	movs	r3, #1
 8008858:	4652      	mov	r2, sl
 800885a:	4631      	mov	r1, r6
 800885c:	4628      	mov	r0, r5
 800885e:	47b8      	blx	r7
 8008860:	3001      	adds	r0, #1
 8008862:	f43f aefc 	beq.w	800865e <_printf_float+0xba>
 8008866:	f109 0901 	add.w	r9, r9, #1
 800886a:	e7ee      	b.n	800884a <_printf_float+0x2a6>
 800886c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800886e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008870:	429a      	cmp	r2, r3
 8008872:	bfa8      	it	ge
 8008874:	461a      	movge	r2, r3
 8008876:	2a00      	cmp	r2, #0
 8008878:	4691      	mov	r9, r2
 800887a:	dd07      	ble.n	800888c <_printf_float+0x2e8>
 800887c:	4613      	mov	r3, r2
 800887e:	4631      	mov	r1, r6
 8008880:	4642      	mov	r2, r8
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	f43f aee9 	beq.w	800865e <_printf_float+0xba>
 800888c:	f104 031a 	add.w	r3, r4, #26
 8008890:	f04f 0b00 	mov.w	fp, #0
 8008894:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008898:	9306      	str	r3, [sp, #24]
 800889a:	e015      	b.n	80088c8 <_printf_float+0x324>
 800889c:	7fefffff 	.word	0x7fefffff
 80088a0:	0800b940 	.word	0x0800b940
 80088a4:	0800b93c 	.word	0x0800b93c
 80088a8:	0800b948 	.word	0x0800b948
 80088ac:	0800b944 	.word	0x0800b944
 80088b0:	0800b94c 	.word	0x0800b94c
 80088b4:	2301      	movs	r3, #1
 80088b6:	9a06      	ldr	r2, [sp, #24]
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	47b8      	blx	r7
 80088be:	3001      	adds	r0, #1
 80088c0:	f43f aecd 	beq.w	800865e <_printf_float+0xba>
 80088c4:	f10b 0b01 	add.w	fp, fp, #1
 80088c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80088cc:	ebaa 0309 	sub.w	r3, sl, r9
 80088d0:	455b      	cmp	r3, fp
 80088d2:	dcef      	bgt.n	80088b4 <_printf_float+0x310>
 80088d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088d8:	429a      	cmp	r2, r3
 80088da:	44d0      	add	r8, sl
 80088dc:	db15      	blt.n	800890a <_printf_float+0x366>
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	07da      	lsls	r2, r3, #31
 80088e2:	d412      	bmi.n	800890a <_printf_float+0x366>
 80088e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088e8:	eba3 020a 	sub.w	r2, r3, sl
 80088ec:	eba3 0a01 	sub.w	sl, r3, r1
 80088f0:	4592      	cmp	sl, r2
 80088f2:	bfa8      	it	ge
 80088f4:	4692      	movge	sl, r2
 80088f6:	f1ba 0f00 	cmp.w	sl, #0
 80088fa:	dc0e      	bgt.n	800891a <_printf_float+0x376>
 80088fc:	f04f 0800 	mov.w	r8, #0
 8008900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008904:	f104 091a 	add.w	r9, r4, #26
 8008908:	e019      	b.n	800893e <_printf_float+0x39a>
 800890a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800890e:	4631      	mov	r1, r6
 8008910:	4628      	mov	r0, r5
 8008912:	47b8      	blx	r7
 8008914:	3001      	adds	r0, #1
 8008916:	d1e5      	bne.n	80088e4 <_printf_float+0x340>
 8008918:	e6a1      	b.n	800865e <_printf_float+0xba>
 800891a:	4653      	mov	r3, sl
 800891c:	4642      	mov	r2, r8
 800891e:	4631      	mov	r1, r6
 8008920:	4628      	mov	r0, r5
 8008922:	47b8      	blx	r7
 8008924:	3001      	adds	r0, #1
 8008926:	d1e9      	bne.n	80088fc <_printf_float+0x358>
 8008928:	e699      	b.n	800865e <_printf_float+0xba>
 800892a:	2301      	movs	r3, #1
 800892c:	464a      	mov	r2, r9
 800892e:	4631      	mov	r1, r6
 8008930:	4628      	mov	r0, r5
 8008932:	47b8      	blx	r7
 8008934:	3001      	adds	r0, #1
 8008936:	f43f ae92 	beq.w	800865e <_printf_float+0xba>
 800893a:	f108 0801 	add.w	r8, r8, #1
 800893e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008942:	1a9b      	subs	r3, r3, r2
 8008944:	eba3 030a 	sub.w	r3, r3, sl
 8008948:	4543      	cmp	r3, r8
 800894a:	dcee      	bgt.n	800892a <_printf_float+0x386>
 800894c:	e74a      	b.n	80087e4 <_printf_float+0x240>
 800894e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008950:	2a01      	cmp	r2, #1
 8008952:	dc01      	bgt.n	8008958 <_printf_float+0x3b4>
 8008954:	07db      	lsls	r3, r3, #31
 8008956:	d53a      	bpl.n	80089ce <_printf_float+0x42a>
 8008958:	2301      	movs	r3, #1
 800895a:	4642      	mov	r2, r8
 800895c:	4631      	mov	r1, r6
 800895e:	4628      	mov	r0, r5
 8008960:	47b8      	blx	r7
 8008962:	3001      	adds	r0, #1
 8008964:	f43f ae7b 	beq.w	800865e <_printf_float+0xba>
 8008968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800896c:	4631      	mov	r1, r6
 800896e:	4628      	mov	r0, r5
 8008970:	47b8      	blx	r7
 8008972:	3001      	adds	r0, #1
 8008974:	f108 0801 	add.w	r8, r8, #1
 8008978:	f43f ae71 	beq.w	800865e <_printf_float+0xba>
 800897c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800897e:	2200      	movs	r2, #0
 8008980:	f103 3aff 	add.w	sl, r3, #4294967295
 8008984:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008988:	2300      	movs	r3, #0
 800898a:	f7f8 f89d 	bl	8000ac8 <__aeabi_dcmpeq>
 800898e:	b9c8      	cbnz	r0, 80089c4 <_printf_float+0x420>
 8008990:	4653      	mov	r3, sl
 8008992:	4642      	mov	r2, r8
 8008994:	4631      	mov	r1, r6
 8008996:	4628      	mov	r0, r5
 8008998:	47b8      	blx	r7
 800899a:	3001      	adds	r0, #1
 800899c:	d10e      	bne.n	80089bc <_printf_float+0x418>
 800899e:	e65e      	b.n	800865e <_printf_float+0xba>
 80089a0:	2301      	movs	r3, #1
 80089a2:	4652      	mov	r2, sl
 80089a4:	4631      	mov	r1, r6
 80089a6:	4628      	mov	r0, r5
 80089a8:	47b8      	blx	r7
 80089aa:	3001      	adds	r0, #1
 80089ac:	f43f ae57 	beq.w	800865e <_printf_float+0xba>
 80089b0:	f108 0801 	add.w	r8, r8, #1
 80089b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b6:	3b01      	subs	r3, #1
 80089b8:	4543      	cmp	r3, r8
 80089ba:	dcf1      	bgt.n	80089a0 <_printf_float+0x3fc>
 80089bc:	464b      	mov	r3, r9
 80089be:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089c2:	e6de      	b.n	8008782 <_printf_float+0x1de>
 80089c4:	f04f 0800 	mov.w	r8, #0
 80089c8:	f104 0a1a 	add.w	sl, r4, #26
 80089cc:	e7f2      	b.n	80089b4 <_printf_float+0x410>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e7df      	b.n	8008992 <_printf_float+0x3ee>
 80089d2:	2301      	movs	r3, #1
 80089d4:	464a      	mov	r2, r9
 80089d6:	4631      	mov	r1, r6
 80089d8:	4628      	mov	r0, r5
 80089da:	47b8      	blx	r7
 80089dc:	3001      	adds	r0, #1
 80089de:	f43f ae3e 	beq.w	800865e <_printf_float+0xba>
 80089e2:	f108 0801 	add.w	r8, r8, #1
 80089e6:	68e3      	ldr	r3, [r4, #12]
 80089e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089ea:	1a9b      	subs	r3, r3, r2
 80089ec:	4543      	cmp	r3, r8
 80089ee:	dcf0      	bgt.n	80089d2 <_printf_float+0x42e>
 80089f0:	e6fc      	b.n	80087ec <_printf_float+0x248>
 80089f2:	f04f 0800 	mov.w	r8, #0
 80089f6:	f104 0919 	add.w	r9, r4, #25
 80089fa:	e7f4      	b.n	80089e6 <_printf_float+0x442>
 80089fc:	2900      	cmp	r1, #0
 80089fe:	f43f ae8b 	beq.w	8008718 <_printf_float+0x174>
 8008a02:	2300      	movs	r3, #0
 8008a04:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008a08:	ab09      	add	r3, sp, #36	; 0x24
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	ec49 8b10 	vmov	d0, r8, r9
 8008a10:	6022      	str	r2, [r4, #0]
 8008a12:	f8cd a004 	str.w	sl, [sp, #4]
 8008a16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f7ff fd2e 	bl	800847c <__cvt>
 8008a20:	4680      	mov	r8, r0
 8008a22:	e648      	b.n	80086b6 <_printf_float+0x112>

08008a24 <_printf_common>:
 8008a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a28:	4691      	mov	r9, r2
 8008a2a:	461f      	mov	r7, r3
 8008a2c:	688a      	ldr	r2, [r1, #8]
 8008a2e:	690b      	ldr	r3, [r1, #16]
 8008a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a34:	4293      	cmp	r3, r2
 8008a36:	bfb8      	it	lt
 8008a38:	4613      	movlt	r3, r2
 8008a3a:	f8c9 3000 	str.w	r3, [r9]
 8008a3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a42:	4606      	mov	r6, r0
 8008a44:	460c      	mov	r4, r1
 8008a46:	b112      	cbz	r2, 8008a4e <_printf_common+0x2a>
 8008a48:	3301      	adds	r3, #1
 8008a4a:	f8c9 3000 	str.w	r3, [r9]
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	0699      	lsls	r1, r3, #26
 8008a52:	bf42      	ittt	mi
 8008a54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008a58:	3302      	addmi	r3, #2
 8008a5a:	f8c9 3000 	strmi.w	r3, [r9]
 8008a5e:	6825      	ldr	r5, [r4, #0]
 8008a60:	f015 0506 	ands.w	r5, r5, #6
 8008a64:	d107      	bne.n	8008a76 <_printf_common+0x52>
 8008a66:	f104 0a19 	add.w	sl, r4, #25
 8008a6a:	68e3      	ldr	r3, [r4, #12]
 8008a6c:	f8d9 2000 	ldr.w	r2, [r9]
 8008a70:	1a9b      	subs	r3, r3, r2
 8008a72:	42ab      	cmp	r3, r5
 8008a74:	dc28      	bgt.n	8008ac8 <_printf_common+0xa4>
 8008a76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a7a:	6822      	ldr	r2, [r4, #0]
 8008a7c:	3300      	adds	r3, #0
 8008a7e:	bf18      	it	ne
 8008a80:	2301      	movne	r3, #1
 8008a82:	0692      	lsls	r2, r2, #26
 8008a84:	d42d      	bmi.n	8008ae2 <_printf_common+0xbe>
 8008a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	47c0      	blx	r8
 8008a90:	3001      	adds	r0, #1
 8008a92:	d020      	beq.n	8008ad6 <_printf_common+0xb2>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	68e5      	ldr	r5, [r4, #12]
 8008a98:	f8d9 2000 	ldr.w	r2, [r9]
 8008a9c:	f003 0306 	and.w	r3, r3, #6
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	bf08      	it	eq
 8008aa4:	1aad      	subeq	r5, r5, r2
 8008aa6:	68a3      	ldr	r3, [r4, #8]
 8008aa8:	6922      	ldr	r2, [r4, #16]
 8008aaa:	bf0c      	ite	eq
 8008aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ab0:	2500      	movne	r5, #0
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	bfc4      	itt	gt
 8008ab6:	1a9b      	subgt	r3, r3, r2
 8008ab8:	18ed      	addgt	r5, r5, r3
 8008aba:	f04f 0900 	mov.w	r9, #0
 8008abe:	341a      	adds	r4, #26
 8008ac0:	454d      	cmp	r5, r9
 8008ac2:	d11a      	bne.n	8008afa <_printf_common+0xd6>
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	e008      	b.n	8008ada <_printf_common+0xb6>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4652      	mov	r2, sl
 8008acc:	4639      	mov	r1, r7
 8008ace:	4630      	mov	r0, r6
 8008ad0:	47c0      	blx	r8
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d103      	bne.n	8008ade <_printf_common+0xba>
 8008ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8008ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ade:	3501      	adds	r5, #1
 8008ae0:	e7c3      	b.n	8008a6a <_printf_common+0x46>
 8008ae2:	18e1      	adds	r1, r4, r3
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	2030      	movs	r0, #48	; 0x30
 8008ae8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008aec:	4422      	add	r2, r4
 8008aee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008af2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008af6:	3302      	adds	r3, #2
 8008af8:	e7c5      	b.n	8008a86 <_printf_common+0x62>
 8008afa:	2301      	movs	r3, #1
 8008afc:	4622      	mov	r2, r4
 8008afe:	4639      	mov	r1, r7
 8008b00:	4630      	mov	r0, r6
 8008b02:	47c0      	blx	r8
 8008b04:	3001      	adds	r0, #1
 8008b06:	d0e6      	beq.n	8008ad6 <_printf_common+0xb2>
 8008b08:	f109 0901 	add.w	r9, r9, #1
 8008b0c:	e7d8      	b.n	8008ac0 <_printf_common+0x9c>
	...

08008b10 <_printf_i>:
 8008b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008b18:	460c      	mov	r4, r1
 8008b1a:	7e09      	ldrb	r1, [r1, #24]
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	296e      	cmp	r1, #110	; 0x6e
 8008b20:	4617      	mov	r7, r2
 8008b22:	4606      	mov	r6, r0
 8008b24:	4698      	mov	r8, r3
 8008b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b28:	f000 80b3 	beq.w	8008c92 <_printf_i+0x182>
 8008b2c:	d822      	bhi.n	8008b74 <_printf_i+0x64>
 8008b2e:	2963      	cmp	r1, #99	; 0x63
 8008b30:	d036      	beq.n	8008ba0 <_printf_i+0x90>
 8008b32:	d80a      	bhi.n	8008b4a <_printf_i+0x3a>
 8008b34:	2900      	cmp	r1, #0
 8008b36:	f000 80b9 	beq.w	8008cac <_printf_i+0x19c>
 8008b3a:	2958      	cmp	r1, #88	; 0x58
 8008b3c:	f000 8083 	beq.w	8008c46 <_printf_i+0x136>
 8008b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008b48:	e032      	b.n	8008bb0 <_printf_i+0xa0>
 8008b4a:	2964      	cmp	r1, #100	; 0x64
 8008b4c:	d001      	beq.n	8008b52 <_printf_i+0x42>
 8008b4e:	2969      	cmp	r1, #105	; 0x69
 8008b50:	d1f6      	bne.n	8008b40 <_printf_i+0x30>
 8008b52:	6820      	ldr	r0, [r4, #0]
 8008b54:	6813      	ldr	r3, [r2, #0]
 8008b56:	0605      	lsls	r5, r0, #24
 8008b58:	f103 0104 	add.w	r1, r3, #4
 8008b5c:	d52a      	bpl.n	8008bb4 <_printf_i+0xa4>
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6011      	str	r1, [r2, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	da03      	bge.n	8008b6e <_printf_i+0x5e>
 8008b66:	222d      	movs	r2, #45	; 0x2d
 8008b68:	425b      	negs	r3, r3
 8008b6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b6e:	486f      	ldr	r0, [pc, #444]	; (8008d2c <_printf_i+0x21c>)
 8008b70:	220a      	movs	r2, #10
 8008b72:	e039      	b.n	8008be8 <_printf_i+0xd8>
 8008b74:	2973      	cmp	r1, #115	; 0x73
 8008b76:	f000 809d 	beq.w	8008cb4 <_printf_i+0x1a4>
 8008b7a:	d808      	bhi.n	8008b8e <_printf_i+0x7e>
 8008b7c:	296f      	cmp	r1, #111	; 0x6f
 8008b7e:	d020      	beq.n	8008bc2 <_printf_i+0xb2>
 8008b80:	2970      	cmp	r1, #112	; 0x70
 8008b82:	d1dd      	bne.n	8008b40 <_printf_i+0x30>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	f043 0320 	orr.w	r3, r3, #32
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	e003      	b.n	8008b96 <_printf_i+0x86>
 8008b8e:	2975      	cmp	r1, #117	; 0x75
 8008b90:	d017      	beq.n	8008bc2 <_printf_i+0xb2>
 8008b92:	2978      	cmp	r1, #120	; 0x78
 8008b94:	d1d4      	bne.n	8008b40 <_printf_i+0x30>
 8008b96:	2378      	movs	r3, #120	; 0x78
 8008b98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b9c:	4864      	ldr	r0, [pc, #400]	; (8008d30 <_printf_i+0x220>)
 8008b9e:	e055      	b.n	8008c4c <_printf_i+0x13c>
 8008ba0:	6813      	ldr	r3, [r2, #0]
 8008ba2:	1d19      	adds	r1, r3, #4
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6011      	str	r1, [r2, #0]
 8008ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e08c      	b.n	8008cce <_printf_i+0x1be>
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6011      	str	r1, [r2, #0]
 8008bb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bbc:	bf18      	it	ne
 8008bbe:	b21b      	sxthne	r3, r3
 8008bc0:	e7cf      	b.n	8008b62 <_printf_i+0x52>
 8008bc2:	6813      	ldr	r3, [r2, #0]
 8008bc4:	6825      	ldr	r5, [r4, #0]
 8008bc6:	1d18      	adds	r0, r3, #4
 8008bc8:	6010      	str	r0, [r2, #0]
 8008bca:	0628      	lsls	r0, r5, #24
 8008bcc:	d501      	bpl.n	8008bd2 <_printf_i+0xc2>
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	e002      	b.n	8008bd8 <_printf_i+0xc8>
 8008bd2:	0668      	lsls	r0, r5, #25
 8008bd4:	d5fb      	bpl.n	8008bce <_printf_i+0xbe>
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	4854      	ldr	r0, [pc, #336]	; (8008d2c <_printf_i+0x21c>)
 8008bda:	296f      	cmp	r1, #111	; 0x6f
 8008bdc:	bf14      	ite	ne
 8008bde:	220a      	movne	r2, #10
 8008be0:	2208      	moveq	r2, #8
 8008be2:	2100      	movs	r1, #0
 8008be4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008be8:	6865      	ldr	r5, [r4, #4]
 8008bea:	60a5      	str	r5, [r4, #8]
 8008bec:	2d00      	cmp	r5, #0
 8008bee:	f2c0 8095 	blt.w	8008d1c <_printf_i+0x20c>
 8008bf2:	6821      	ldr	r1, [r4, #0]
 8008bf4:	f021 0104 	bic.w	r1, r1, #4
 8008bf8:	6021      	str	r1, [r4, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d13d      	bne.n	8008c7a <_printf_i+0x16a>
 8008bfe:	2d00      	cmp	r5, #0
 8008c00:	f040 808e 	bne.w	8008d20 <_printf_i+0x210>
 8008c04:	4665      	mov	r5, ip
 8008c06:	2a08      	cmp	r2, #8
 8008c08:	d10b      	bne.n	8008c22 <_printf_i+0x112>
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	07db      	lsls	r3, r3, #31
 8008c0e:	d508      	bpl.n	8008c22 <_printf_i+0x112>
 8008c10:	6923      	ldr	r3, [r4, #16]
 8008c12:	6862      	ldr	r2, [r4, #4]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	bfde      	ittt	le
 8008c18:	2330      	movle	r3, #48	; 0x30
 8008c1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c22:	ebac 0305 	sub.w	r3, ip, r5
 8008c26:	6123      	str	r3, [r4, #16]
 8008c28:	f8cd 8000 	str.w	r8, [sp]
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	aa03      	add	r2, sp, #12
 8008c30:	4621      	mov	r1, r4
 8008c32:	4630      	mov	r0, r6
 8008c34:	f7ff fef6 	bl	8008a24 <_printf_common>
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d14d      	bne.n	8008cd8 <_printf_i+0x1c8>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	b005      	add	sp, #20
 8008c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c46:	4839      	ldr	r0, [pc, #228]	; (8008d2c <_printf_i+0x21c>)
 8008c48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008c4c:	6813      	ldr	r3, [r2, #0]
 8008c4e:	6821      	ldr	r1, [r4, #0]
 8008c50:	1d1d      	adds	r5, r3, #4
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6015      	str	r5, [r2, #0]
 8008c56:	060a      	lsls	r2, r1, #24
 8008c58:	d50b      	bpl.n	8008c72 <_printf_i+0x162>
 8008c5a:	07ca      	lsls	r2, r1, #31
 8008c5c:	bf44      	itt	mi
 8008c5e:	f041 0120 	orrmi.w	r1, r1, #32
 8008c62:	6021      	strmi	r1, [r4, #0]
 8008c64:	b91b      	cbnz	r3, 8008c6e <_printf_i+0x15e>
 8008c66:	6822      	ldr	r2, [r4, #0]
 8008c68:	f022 0220 	bic.w	r2, r2, #32
 8008c6c:	6022      	str	r2, [r4, #0]
 8008c6e:	2210      	movs	r2, #16
 8008c70:	e7b7      	b.n	8008be2 <_printf_i+0xd2>
 8008c72:	064d      	lsls	r5, r1, #25
 8008c74:	bf48      	it	mi
 8008c76:	b29b      	uxthmi	r3, r3
 8008c78:	e7ef      	b.n	8008c5a <_printf_i+0x14a>
 8008c7a:	4665      	mov	r5, ip
 8008c7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c80:	fb02 3311 	mls	r3, r2, r1, r3
 8008c84:	5cc3      	ldrb	r3, [r0, r3]
 8008c86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	d1f5      	bne.n	8008c7c <_printf_i+0x16c>
 8008c90:	e7b9      	b.n	8008c06 <_printf_i+0xf6>
 8008c92:	6813      	ldr	r3, [r2, #0]
 8008c94:	6825      	ldr	r5, [r4, #0]
 8008c96:	6961      	ldr	r1, [r4, #20]
 8008c98:	1d18      	adds	r0, r3, #4
 8008c9a:	6010      	str	r0, [r2, #0]
 8008c9c:	0628      	lsls	r0, r5, #24
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	d501      	bpl.n	8008ca6 <_printf_i+0x196>
 8008ca2:	6019      	str	r1, [r3, #0]
 8008ca4:	e002      	b.n	8008cac <_printf_i+0x19c>
 8008ca6:	066a      	lsls	r2, r5, #25
 8008ca8:	d5fb      	bpl.n	8008ca2 <_printf_i+0x192>
 8008caa:	8019      	strh	r1, [r3, #0]
 8008cac:	2300      	movs	r3, #0
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	4665      	mov	r5, ip
 8008cb2:	e7b9      	b.n	8008c28 <_printf_i+0x118>
 8008cb4:	6813      	ldr	r3, [r2, #0]
 8008cb6:	1d19      	adds	r1, r3, #4
 8008cb8:	6011      	str	r1, [r2, #0]
 8008cba:	681d      	ldr	r5, [r3, #0]
 8008cbc:	6862      	ldr	r2, [r4, #4]
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f7f7 fa8d 	bl	80001e0 <memchr>
 8008cc6:	b108      	cbz	r0, 8008ccc <_printf_i+0x1bc>
 8008cc8:	1b40      	subs	r0, r0, r5
 8008cca:	6060      	str	r0, [r4, #4]
 8008ccc:	6863      	ldr	r3, [r4, #4]
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd6:	e7a7      	b.n	8008c28 <_printf_i+0x118>
 8008cd8:	6923      	ldr	r3, [r4, #16]
 8008cda:	462a      	mov	r2, r5
 8008cdc:	4639      	mov	r1, r7
 8008cde:	4630      	mov	r0, r6
 8008ce0:	47c0      	blx	r8
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d0aa      	beq.n	8008c3c <_printf_i+0x12c>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	079b      	lsls	r3, r3, #30
 8008cea:	d413      	bmi.n	8008d14 <_printf_i+0x204>
 8008cec:	68e0      	ldr	r0, [r4, #12]
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	4298      	cmp	r0, r3
 8008cf2:	bfb8      	it	lt
 8008cf4:	4618      	movlt	r0, r3
 8008cf6:	e7a3      	b.n	8008c40 <_printf_i+0x130>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	464a      	mov	r2, r9
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	4630      	mov	r0, r6
 8008d00:	47c0      	blx	r8
 8008d02:	3001      	adds	r0, #1
 8008d04:	d09a      	beq.n	8008c3c <_printf_i+0x12c>
 8008d06:	3501      	adds	r5, #1
 8008d08:	68e3      	ldr	r3, [r4, #12]
 8008d0a:	9a03      	ldr	r2, [sp, #12]
 8008d0c:	1a9b      	subs	r3, r3, r2
 8008d0e:	42ab      	cmp	r3, r5
 8008d10:	dcf2      	bgt.n	8008cf8 <_printf_i+0x1e8>
 8008d12:	e7eb      	b.n	8008cec <_printf_i+0x1dc>
 8008d14:	2500      	movs	r5, #0
 8008d16:	f104 0919 	add.w	r9, r4, #25
 8008d1a:	e7f5      	b.n	8008d08 <_printf_i+0x1f8>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1ac      	bne.n	8008c7a <_printf_i+0x16a>
 8008d20:	7803      	ldrb	r3, [r0, #0]
 8008d22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d2a:	e76c      	b.n	8008c06 <_printf_i+0xf6>
 8008d2c:	0800b94e 	.word	0x0800b94e
 8008d30:	0800b95f 	.word	0x0800b95f

08008d34 <_sbrk_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4c06      	ldr	r4, [pc, #24]	; (8008d50 <_sbrk_r+0x1c>)
 8008d38:	2300      	movs	r3, #0
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	4608      	mov	r0, r1
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	f7f9 f8d0 	bl	8001ee4 <_sbrk>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_sbrk_r+0x1a>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_sbrk_r+0x1a>
 8008d4c:	602b      	str	r3, [r5, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	20001cf4 	.word	0x20001cf4

08008d54 <sniprintf>:
 8008d54:	b40c      	push	{r2, r3}
 8008d56:	b530      	push	{r4, r5, lr}
 8008d58:	4b17      	ldr	r3, [pc, #92]	; (8008db8 <sniprintf+0x64>)
 8008d5a:	1e0c      	subs	r4, r1, #0
 8008d5c:	b09d      	sub	sp, #116	; 0x74
 8008d5e:	681d      	ldr	r5, [r3, #0]
 8008d60:	da08      	bge.n	8008d74 <sniprintf+0x20>
 8008d62:	238b      	movs	r3, #139	; 0x8b
 8008d64:	602b      	str	r3, [r5, #0]
 8008d66:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6a:	b01d      	add	sp, #116	; 0x74
 8008d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d70:	b002      	add	sp, #8
 8008d72:	4770      	bx	lr
 8008d74:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008d78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d7c:	bf14      	ite	ne
 8008d7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d82:	4623      	moveq	r3, r4
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	9307      	str	r3, [sp, #28]
 8008d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d8c:	9002      	str	r0, [sp, #8]
 8008d8e:	9006      	str	r0, [sp, #24]
 8008d90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d96:	ab21      	add	r3, sp, #132	; 0x84
 8008d98:	a902      	add	r1, sp, #8
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	f002 fc33 	bl	800b608 <_svfiprintf_r>
 8008da2:	1c43      	adds	r3, r0, #1
 8008da4:	bfbc      	itt	lt
 8008da6:	238b      	movlt	r3, #139	; 0x8b
 8008da8:	602b      	strlt	r3, [r5, #0]
 8008daa:	2c00      	cmp	r4, #0
 8008dac:	d0dd      	beq.n	8008d6a <sniprintf+0x16>
 8008dae:	9b02      	ldr	r3, [sp, #8]
 8008db0:	2200      	movs	r2, #0
 8008db2:	701a      	strb	r2, [r3, #0]
 8008db4:	e7d9      	b.n	8008d6a <sniprintf+0x16>
 8008db6:	bf00      	nop
 8008db8:	20000188 	.word	0x20000188

08008dbc <sulp>:
 8008dbc:	b570      	push	{r4, r5, r6, lr}
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	460d      	mov	r5, r1
 8008dc2:	ec45 4b10 	vmov	d0, r4, r5
 8008dc6:	4616      	mov	r6, r2
 8008dc8:	f002 fa82 	bl	800b2d0 <__ulp>
 8008dcc:	ec51 0b10 	vmov	r0, r1, d0
 8008dd0:	b17e      	cbz	r6, 8008df2 <sulp+0x36>
 8008dd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008dd6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dd09      	ble.n	8008df2 <sulp+0x36>
 8008dde:	051b      	lsls	r3, r3, #20
 8008de0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008de4:	2400      	movs	r4, #0
 8008de6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008dea:	4622      	mov	r2, r4
 8008dec:	462b      	mov	r3, r5
 8008dee:	f7f7 fc03 	bl	80005f8 <__aeabi_dmul>
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	0000      	movs	r0, r0
	...

08008df8 <_strtod_l>:
 8008df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	461f      	mov	r7, r3
 8008dfe:	b0a1      	sub	sp, #132	; 0x84
 8008e00:	2300      	movs	r3, #0
 8008e02:	4681      	mov	r9, r0
 8008e04:	4638      	mov	r0, r7
 8008e06:	460e      	mov	r6, r1
 8008e08:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e0a:	931c      	str	r3, [sp, #112]	; 0x70
 8008e0c:	f001 ff66 	bl	800acdc <__localeconv_l>
 8008e10:	4680      	mov	r8, r0
 8008e12:	6800      	ldr	r0, [r0, #0]
 8008e14:	f7f7 f9dc 	bl	80001d0 <strlen>
 8008e18:	f04f 0a00 	mov.w	sl, #0
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	f04f 0b00 	mov.w	fp, #0
 8008e22:	961b      	str	r6, [sp, #108]	; 0x6c
 8008e24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e26:	781a      	ldrb	r2, [r3, #0]
 8008e28:	2a0d      	cmp	r2, #13
 8008e2a:	d832      	bhi.n	8008e92 <_strtod_l+0x9a>
 8008e2c:	2a09      	cmp	r2, #9
 8008e2e:	d236      	bcs.n	8008e9e <_strtod_l+0xa6>
 8008e30:	2a00      	cmp	r2, #0
 8008e32:	d03e      	beq.n	8008eb2 <_strtod_l+0xba>
 8008e34:	2300      	movs	r3, #0
 8008e36:	930d      	str	r3, [sp, #52]	; 0x34
 8008e38:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008e3a:	782b      	ldrb	r3, [r5, #0]
 8008e3c:	2b30      	cmp	r3, #48	; 0x30
 8008e3e:	f040 80ac 	bne.w	8008f9a <_strtod_l+0x1a2>
 8008e42:	786b      	ldrb	r3, [r5, #1]
 8008e44:	2b58      	cmp	r3, #88	; 0x58
 8008e46:	d001      	beq.n	8008e4c <_strtod_l+0x54>
 8008e48:	2b78      	cmp	r3, #120	; 0x78
 8008e4a:	d167      	bne.n	8008f1c <_strtod_l+0x124>
 8008e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e4e:	9301      	str	r3, [sp, #4]
 8008e50:	ab1c      	add	r3, sp, #112	; 0x70
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	9702      	str	r7, [sp, #8]
 8008e56:	ab1d      	add	r3, sp, #116	; 0x74
 8008e58:	4a88      	ldr	r2, [pc, #544]	; (800907c <_strtod_l+0x284>)
 8008e5a:	a91b      	add	r1, sp, #108	; 0x6c
 8008e5c:	4648      	mov	r0, r9
 8008e5e:	f001 fc66 	bl	800a72e <__gethex>
 8008e62:	f010 0407 	ands.w	r4, r0, #7
 8008e66:	4606      	mov	r6, r0
 8008e68:	d005      	beq.n	8008e76 <_strtod_l+0x7e>
 8008e6a:	2c06      	cmp	r4, #6
 8008e6c:	d12b      	bne.n	8008ec6 <_strtod_l+0xce>
 8008e6e:	3501      	adds	r5, #1
 8008e70:	2300      	movs	r3, #0
 8008e72:	951b      	str	r5, [sp, #108]	; 0x6c
 8008e74:	930d      	str	r3, [sp, #52]	; 0x34
 8008e76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f040 859a 	bne.w	80099b2 <_strtod_l+0xbba>
 8008e7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e80:	b1e3      	cbz	r3, 8008ebc <_strtod_l+0xc4>
 8008e82:	4652      	mov	r2, sl
 8008e84:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e88:	ec43 2b10 	vmov	d0, r2, r3
 8008e8c:	b021      	add	sp, #132	; 0x84
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	2a2b      	cmp	r2, #43	; 0x2b
 8008e94:	d015      	beq.n	8008ec2 <_strtod_l+0xca>
 8008e96:	2a2d      	cmp	r2, #45	; 0x2d
 8008e98:	d004      	beq.n	8008ea4 <_strtod_l+0xac>
 8008e9a:	2a20      	cmp	r2, #32
 8008e9c:	d1ca      	bne.n	8008e34 <_strtod_l+0x3c>
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	931b      	str	r3, [sp, #108]	; 0x6c
 8008ea2:	e7bf      	b.n	8008e24 <_strtod_l+0x2c>
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	920d      	str	r2, [sp, #52]	; 0x34
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	921b      	str	r2, [sp, #108]	; 0x6c
 8008eac:	785b      	ldrb	r3, [r3, #1]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1c2      	bne.n	8008e38 <_strtod_l+0x40>
 8008eb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008eb4:	961b      	str	r6, [sp, #108]	; 0x6c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f040 8579 	bne.w	80099ae <_strtod_l+0xbb6>
 8008ebc:	4652      	mov	r2, sl
 8008ebe:	465b      	mov	r3, fp
 8008ec0:	e7e2      	b.n	8008e88 <_strtod_l+0x90>
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	e7ef      	b.n	8008ea6 <_strtod_l+0xae>
 8008ec6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008ec8:	b13a      	cbz	r2, 8008eda <_strtod_l+0xe2>
 8008eca:	2135      	movs	r1, #53	; 0x35
 8008ecc:	a81e      	add	r0, sp, #120	; 0x78
 8008ece:	f002 faf7 	bl	800b4c0 <__copybits>
 8008ed2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ed4:	4648      	mov	r0, r9
 8008ed6:	f001 ff64 	bl	800ada2 <_Bfree>
 8008eda:	3c01      	subs	r4, #1
 8008edc:	2c04      	cmp	r4, #4
 8008ede:	d806      	bhi.n	8008eee <_strtod_l+0xf6>
 8008ee0:	e8df f004 	tbb	[pc, r4]
 8008ee4:	1714030a 	.word	0x1714030a
 8008ee8:	0a          	.byte	0x0a
 8008ee9:	00          	.byte	0x00
 8008eea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008eee:	0730      	lsls	r0, r6, #28
 8008ef0:	d5c1      	bpl.n	8008e76 <_strtod_l+0x7e>
 8008ef2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008ef6:	e7be      	b.n	8008e76 <_strtod_l+0x7e>
 8008ef8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008efc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008efe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008f02:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008f06:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f0a:	e7f0      	b.n	8008eee <_strtod_l+0xf6>
 8008f0c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009080 <_strtod_l+0x288>
 8008f10:	e7ed      	b.n	8008eee <_strtod_l+0xf6>
 8008f12:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008f16:	f04f 3aff 	mov.w	sl, #4294967295
 8008f1a:	e7e8      	b.n	8008eee <_strtod_l+0xf6>
 8008f1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	921b      	str	r2, [sp, #108]	; 0x6c
 8008f22:	785b      	ldrb	r3, [r3, #1]
 8008f24:	2b30      	cmp	r3, #48	; 0x30
 8008f26:	d0f9      	beq.n	8008f1c <_strtod_l+0x124>
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0a4      	beq.n	8008e76 <_strtod_l+0x7e>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	2500      	movs	r5, #0
 8008f30:	9306      	str	r3, [sp, #24]
 8008f32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f34:	9308      	str	r3, [sp, #32]
 8008f36:	9507      	str	r5, [sp, #28]
 8008f38:	9505      	str	r5, [sp, #20]
 8008f3a:	220a      	movs	r2, #10
 8008f3c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008f3e:	7807      	ldrb	r7, [r0, #0]
 8008f40:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008f44:	b2d9      	uxtb	r1, r3
 8008f46:	2909      	cmp	r1, #9
 8008f48:	d929      	bls.n	8008f9e <_strtod_l+0x1a6>
 8008f4a:	4622      	mov	r2, r4
 8008f4c:	f8d8 1000 	ldr.w	r1, [r8]
 8008f50:	f002 fc52 	bl	800b7f8 <strncmp>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d031      	beq.n	8008fbc <_strtod_l+0x1c4>
 8008f58:	2000      	movs	r0, #0
 8008f5a:	9c05      	ldr	r4, [sp, #20]
 8008f5c:	9004      	str	r0, [sp, #16]
 8008f5e:	463b      	mov	r3, r7
 8008f60:	4602      	mov	r2, r0
 8008f62:	2b65      	cmp	r3, #101	; 0x65
 8008f64:	d001      	beq.n	8008f6a <_strtod_l+0x172>
 8008f66:	2b45      	cmp	r3, #69	; 0x45
 8008f68:	d114      	bne.n	8008f94 <_strtod_l+0x19c>
 8008f6a:	b924      	cbnz	r4, 8008f76 <_strtod_l+0x17e>
 8008f6c:	b910      	cbnz	r0, 8008f74 <_strtod_l+0x17c>
 8008f6e:	9b06      	ldr	r3, [sp, #24]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d09e      	beq.n	8008eb2 <_strtod_l+0xba>
 8008f74:	2400      	movs	r4, #0
 8008f76:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008f78:	1c73      	adds	r3, r6, #1
 8008f7a:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f7c:	7873      	ldrb	r3, [r6, #1]
 8008f7e:	2b2b      	cmp	r3, #43	; 0x2b
 8008f80:	d078      	beq.n	8009074 <_strtod_l+0x27c>
 8008f82:	2b2d      	cmp	r3, #45	; 0x2d
 8008f84:	d070      	beq.n	8009068 <_strtod_l+0x270>
 8008f86:	f04f 0c00 	mov.w	ip, #0
 8008f8a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008f8e:	2f09      	cmp	r7, #9
 8008f90:	d97c      	bls.n	800908c <_strtod_l+0x294>
 8008f92:	961b      	str	r6, [sp, #108]	; 0x6c
 8008f94:	f04f 0e00 	mov.w	lr, #0
 8008f98:	e09a      	b.n	80090d0 <_strtod_l+0x2d8>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e7c7      	b.n	8008f2e <_strtod_l+0x136>
 8008f9e:	9905      	ldr	r1, [sp, #20]
 8008fa0:	2908      	cmp	r1, #8
 8008fa2:	bfdd      	ittte	le
 8008fa4:	9907      	ldrle	r1, [sp, #28]
 8008fa6:	fb02 3301 	mlale	r3, r2, r1, r3
 8008faa:	9307      	strle	r3, [sp, #28]
 8008fac:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008fb0:	9b05      	ldr	r3, [sp, #20]
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	9305      	str	r3, [sp, #20]
 8008fb8:	901b      	str	r0, [sp, #108]	; 0x6c
 8008fba:	e7bf      	b.n	8008f3c <_strtod_l+0x144>
 8008fbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fbe:	191a      	adds	r2, r3, r4
 8008fc0:	921b      	str	r2, [sp, #108]	; 0x6c
 8008fc2:	9a05      	ldr	r2, [sp, #20]
 8008fc4:	5d1b      	ldrb	r3, [r3, r4]
 8008fc6:	2a00      	cmp	r2, #0
 8008fc8:	d037      	beq.n	800903a <_strtod_l+0x242>
 8008fca:	9c05      	ldr	r4, [sp, #20]
 8008fcc:	4602      	mov	r2, r0
 8008fce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008fd2:	2909      	cmp	r1, #9
 8008fd4:	d913      	bls.n	8008ffe <_strtod_l+0x206>
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	9104      	str	r1, [sp, #16]
 8008fda:	e7c2      	b.n	8008f62 <_strtod_l+0x16a>
 8008fdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	921b      	str	r2, [sp, #108]	; 0x6c
 8008fe2:	785b      	ldrb	r3, [r3, #1]
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	2b30      	cmp	r3, #48	; 0x30
 8008fe8:	d0f8      	beq.n	8008fdc <_strtod_l+0x1e4>
 8008fea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008fee:	2a08      	cmp	r2, #8
 8008ff0:	f200 84e4 	bhi.w	80099bc <_strtod_l+0xbc4>
 8008ff4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008ff6:	9208      	str	r2, [sp, #32]
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009002:	f100 0101 	add.w	r1, r0, #1
 8009006:	d012      	beq.n	800902e <_strtod_l+0x236>
 8009008:	440a      	add	r2, r1
 800900a:	eb00 0c04 	add.w	ip, r0, r4
 800900e:	4621      	mov	r1, r4
 8009010:	270a      	movs	r7, #10
 8009012:	458c      	cmp	ip, r1
 8009014:	d113      	bne.n	800903e <_strtod_l+0x246>
 8009016:	1821      	adds	r1, r4, r0
 8009018:	2908      	cmp	r1, #8
 800901a:	f104 0401 	add.w	r4, r4, #1
 800901e:	4404      	add	r4, r0
 8009020:	dc19      	bgt.n	8009056 <_strtod_l+0x25e>
 8009022:	9b07      	ldr	r3, [sp, #28]
 8009024:	210a      	movs	r1, #10
 8009026:	fb01 e303 	mla	r3, r1, r3, lr
 800902a:	9307      	str	r3, [sp, #28]
 800902c:	2100      	movs	r1, #0
 800902e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009030:	1c58      	adds	r0, r3, #1
 8009032:	901b      	str	r0, [sp, #108]	; 0x6c
 8009034:	785b      	ldrb	r3, [r3, #1]
 8009036:	4608      	mov	r0, r1
 8009038:	e7c9      	b.n	8008fce <_strtod_l+0x1d6>
 800903a:	9805      	ldr	r0, [sp, #20]
 800903c:	e7d3      	b.n	8008fe6 <_strtod_l+0x1ee>
 800903e:	2908      	cmp	r1, #8
 8009040:	f101 0101 	add.w	r1, r1, #1
 8009044:	dc03      	bgt.n	800904e <_strtod_l+0x256>
 8009046:	9b07      	ldr	r3, [sp, #28]
 8009048:	437b      	muls	r3, r7
 800904a:	9307      	str	r3, [sp, #28]
 800904c:	e7e1      	b.n	8009012 <_strtod_l+0x21a>
 800904e:	2910      	cmp	r1, #16
 8009050:	bfd8      	it	le
 8009052:	437d      	mulle	r5, r7
 8009054:	e7dd      	b.n	8009012 <_strtod_l+0x21a>
 8009056:	2c10      	cmp	r4, #16
 8009058:	bfdc      	itt	le
 800905a:	210a      	movle	r1, #10
 800905c:	fb01 e505 	mlale	r5, r1, r5, lr
 8009060:	e7e4      	b.n	800902c <_strtod_l+0x234>
 8009062:	2301      	movs	r3, #1
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	e781      	b.n	8008f6c <_strtod_l+0x174>
 8009068:	f04f 0c01 	mov.w	ip, #1
 800906c:	1cb3      	adds	r3, r6, #2
 800906e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009070:	78b3      	ldrb	r3, [r6, #2]
 8009072:	e78a      	b.n	8008f8a <_strtod_l+0x192>
 8009074:	f04f 0c00 	mov.w	ip, #0
 8009078:	e7f8      	b.n	800906c <_strtod_l+0x274>
 800907a:	bf00      	nop
 800907c:	0800b970 	.word	0x0800b970
 8009080:	7ff00000 	.word	0x7ff00000
 8009084:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009086:	1c5f      	adds	r7, r3, #1
 8009088:	971b      	str	r7, [sp, #108]	; 0x6c
 800908a:	785b      	ldrb	r3, [r3, #1]
 800908c:	2b30      	cmp	r3, #48	; 0x30
 800908e:	d0f9      	beq.n	8009084 <_strtod_l+0x28c>
 8009090:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009094:	2f08      	cmp	r7, #8
 8009096:	f63f af7d 	bhi.w	8008f94 <_strtod_l+0x19c>
 800909a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800909e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090a0:	930a      	str	r3, [sp, #40]	; 0x28
 80090a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090a4:	1c5f      	adds	r7, r3, #1
 80090a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80090a8:	785b      	ldrb	r3, [r3, #1]
 80090aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80090ae:	f1b8 0f09 	cmp.w	r8, #9
 80090b2:	d937      	bls.n	8009124 <_strtod_l+0x32c>
 80090b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090b6:	1a7f      	subs	r7, r7, r1
 80090b8:	2f08      	cmp	r7, #8
 80090ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80090be:	dc37      	bgt.n	8009130 <_strtod_l+0x338>
 80090c0:	45be      	cmp	lr, r7
 80090c2:	bfa8      	it	ge
 80090c4:	46be      	movge	lr, r7
 80090c6:	f1bc 0f00 	cmp.w	ip, #0
 80090ca:	d001      	beq.n	80090d0 <_strtod_l+0x2d8>
 80090cc:	f1ce 0e00 	rsb	lr, lr, #0
 80090d0:	2c00      	cmp	r4, #0
 80090d2:	d151      	bne.n	8009178 <_strtod_l+0x380>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	f47f aece 	bne.w	8008e76 <_strtod_l+0x7e>
 80090da:	9a06      	ldr	r2, [sp, #24]
 80090dc:	2a00      	cmp	r2, #0
 80090de:	f47f aeca 	bne.w	8008e76 <_strtod_l+0x7e>
 80090e2:	9a04      	ldr	r2, [sp, #16]
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	f47f aee4 	bne.w	8008eb2 <_strtod_l+0xba>
 80090ea:	2b4e      	cmp	r3, #78	; 0x4e
 80090ec:	d027      	beq.n	800913e <_strtod_l+0x346>
 80090ee:	dc21      	bgt.n	8009134 <_strtod_l+0x33c>
 80090f0:	2b49      	cmp	r3, #73	; 0x49
 80090f2:	f47f aede 	bne.w	8008eb2 <_strtod_l+0xba>
 80090f6:	49a0      	ldr	r1, [pc, #640]	; (8009378 <_strtod_l+0x580>)
 80090f8:	a81b      	add	r0, sp, #108	; 0x6c
 80090fa:	f001 fd4b 	bl	800ab94 <__match>
 80090fe:	2800      	cmp	r0, #0
 8009100:	f43f aed7 	beq.w	8008eb2 <_strtod_l+0xba>
 8009104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009106:	499d      	ldr	r1, [pc, #628]	; (800937c <_strtod_l+0x584>)
 8009108:	3b01      	subs	r3, #1
 800910a:	a81b      	add	r0, sp, #108	; 0x6c
 800910c:	931b      	str	r3, [sp, #108]	; 0x6c
 800910e:	f001 fd41 	bl	800ab94 <__match>
 8009112:	b910      	cbnz	r0, 800911a <_strtod_l+0x322>
 8009114:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009116:	3301      	adds	r3, #1
 8009118:	931b      	str	r3, [sp, #108]	; 0x6c
 800911a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009390 <_strtod_l+0x598>
 800911e:	f04f 0a00 	mov.w	sl, #0
 8009122:	e6a8      	b.n	8008e76 <_strtod_l+0x7e>
 8009124:	210a      	movs	r1, #10
 8009126:	fb01 3e0e 	mla	lr, r1, lr, r3
 800912a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800912e:	e7b8      	b.n	80090a2 <_strtod_l+0x2aa>
 8009130:	46be      	mov	lr, r7
 8009132:	e7c8      	b.n	80090c6 <_strtod_l+0x2ce>
 8009134:	2b69      	cmp	r3, #105	; 0x69
 8009136:	d0de      	beq.n	80090f6 <_strtod_l+0x2fe>
 8009138:	2b6e      	cmp	r3, #110	; 0x6e
 800913a:	f47f aeba 	bne.w	8008eb2 <_strtod_l+0xba>
 800913e:	4990      	ldr	r1, [pc, #576]	; (8009380 <_strtod_l+0x588>)
 8009140:	a81b      	add	r0, sp, #108	; 0x6c
 8009142:	f001 fd27 	bl	800ab94 <__match>
 8009146:	2800      	cmp	r0, #0
 8009148:	f43f aeb3 	beq.w	8008eb2 <_strtod_l+0xba>
 800914c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b28      	cmp	r3, #40	; 0x28
 8009152:	d10e      	bne.n	8009172 <_strtod_l+0x37a>
 8009154:	aa1e      	add	r2, sp, #120	; 0x78
 8009156:	498b      	ldr	r1, [pc, #556]	; (8009384 <_strtod_l+0x58c>)
 8009158:	a81b      	add	r0, sp, #108	; 0x6c
 800915a:	f001 fd2f 	bl	800abbc <__hexnan>
 800915e:	2805      	cmp	r0, #5
 8009160:	d107      	bne.n	8009172 <_strtod_l+0x37a>
 8009162:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009164:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009168:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800916c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009170:	e681      	b.n	8008e76 <_strtod_l+0x7e>
 8009172:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009398 <_strtod_l+0x5a0>
 8009176:	e7d2      	b.n	800911e <_strtod_l+0x326>
 8009178:	ebae 0302 	sub.w	r3, lr, r2
 800917c:	9306      	str	r3, [sp, #24]
 800917e:	9b05      	ldr	r3, [sp, #20]
 8009180:	9807      	ldr	r0, [sp, #28]
 8009182:	2b00      	cmp	r3, #0
 8009184:	bf08      	it	eq
 8009186:	4623      	moveq	r3, r4
 8009188:	2c10      	cmp	r4, #16
 800918a:	9305      	str	r3, [sp, #20]
 800918c:	46a0      	mov	r8, r4
 800918e:	bfa8      	it	ge
 8009190:	f04f 0810 	movge.w	r8, #16
 8009194:	f7f7 f9b6 	bl	8000504 <__aeabi_ui2d>
 8009198:	2c09      	cmp	r4, #9
 800919a:	4682      	mov	sl, r0
 800919c:	468b      	mov	fp, r1
 800919e:	dc13      	bgt.n	80091c8 <_strtod_l+0x3d0>
 80091a0:	9b06      	ldr	r3, [sp, #24]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f43f ae67 	beq.w	8008e76 <_strtod_l+0x7e>
 80091a8:	9b06      	ldr	r3, [sp, #24]
 80091aa:	dd7a      	ble.n	80092a2 <_strtod_l+0x4aa>
 80091ac:	2b16      	cmp	r3, #22
 80091ae:	dc61      	bgt.n	8009274 <_strtod_l+0x47c>
 80091b0:	4a75      	ldr	r2, [pc, #468]	; (8009388 <_strtod_l+0x590>)
 80091b2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80091b6:	e9de 0100 	ldrd	r0, r1, [lr]
 80091ba:	4652      	mov	r2, sl
 80091bc:	465b      	mov	r3, fp
 80091be:	f7f7 fa1b 	bl	80005f8 <__aeabi_dmul>
 80091c2:	4682      	mov	sl, r0
 80091c4:	468b      	mov	fp, r1
 80091c6:	e656      	b.n	8008e76 <_strtod_l+0x7e>
 80091c8:	4b6f      	ldr	r3, [pc, #444]	; (8009388 <_strtod_l+0x590>)
 80091ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80091ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80091d2:	f7f7 fa11 	bl	80005f8 <__aeabi_dmul>
 80091d6:	4606      	mov	r6, r0
 80091d8:	4628      	mov	r0, r5
 80091da:	460f      	mov	r7, r1
 80091dc:	f7f7 f992 	bl	8000504 <__aeabi_ui2d>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4630      	mov	r0, r6
 80091e6:	4639      	mov	r1, r7
 80091e8:	f7f7 f850 	bl	800028c <__adddf3>
 80091ec:	2c0f      	cmp	r4, #15
 80091ee:	4682      	mov	sl, r0
 80091f0:	468b      	mov	fp, r1
 80091f2:	ddd5      	ble.n	80091a0 <_strtod_l+0x3a8>
 80091f4:	9b06      	ldr	r3, [sp, #24]
 80091f6:	eba4 0808 	sub.w	r8, r4, r8
 80091fa:	4498      	add	r8, r3
 80091fc:	f1b8 0f00 	cmp.w	r8, #0
 8009200:	f340 8096 	ble.w	8009330 <_strtod_l+0x538>
 8009204:	f018 030f 	ands.w	r3, r8, #15
 8009208:	d00a      	beq.n	8009220 <_strtod_l+0x428>
 800920a:	495f      	ldr	r1, [pc, #380]	; (8009388 <_strtod_l+0x590>)
 800920c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009210:	4652      	mov	r2, sl
 8009212:	465b      	mov	r3, fp
 8009214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009218:	f7f7 f9ee 	bl	80005f8 <__aeabi_dmul>
 800921c:	4682      	mov	sl, r0
 800921e:	468b      	mov	fp, r1
 8009220:	f038 080f 	bics.w	r8, r8, #15
 8009224:	d073      	beq.n	800930e <_strtod_l+0x516>
 8009226:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800922a:	dd47      	ble.n	80092bc <_strtod_l+0x4c4>
 800922c:	2400      	movs	r4, #0
 800922e:	46a0      	mov	r8, r4
 8009230:	9407      	str	r4, [sp, #28]
 8009232:	9405      	str	r4, [sp, #20]
 8009234:	2322      	movs	r3, #34	; 0x22
 8009236:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009390 <_strtod_l+0x598>
 800923a:	f8c9 3000 	str.w	r3, [r9]
 800923e:	f04f 0a00 	mov.w	sl, #0
 8009242:	9b07      	ldr	r3, [sp, #28]
 8009244:	2b00      	cmp	r3, #0
 8009246:	f43f ae16 	beq.w	8008e76 <_strtod_l+0x7e>
 800924a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800924c:	4648      	mov	r0, r9
 800924e:	f001 fda8 	bl	800ada2 <_Bfree>
 8009252:	9905      	ldr	r1, [sp, #20]
 8009254:	4648      	mov	r0, r9
 8009256:	f001 fda4 	bl	800ada2 <_Bfree>
 800925a:	4641      	mov	r1, r8
 800925c:	4648      	mov	r0, r9
 800925e:	f001 fda0 	bl	800ada2 <_Bfree>
 8009262:	9907      	ldr	r1, [sp, #28]
 8009264:	4648      	mov	r0, r9
 8009266:	f001 fd9c 	bl	800ada2 <_Bfree>
 800926a:	4621      	mov	r1, r4
 800926c:	4648      	mov	r0, r9
 800926e:	f001 fd98 	bl	800ada2 <_Bfree>
 8009272:	e600      	b.n	8008e76 <_strtod_l+0x7e>
 8009274:	9a06      	ldr	r2, [sp, #24]
 8009276:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800927a:	4293      	cmp	r3, r2
 800927c:	dbba      	blt.n	80091f4 <_strtod_l+0x3fc>
 800927e:	4d42      	ldr	r5, [pc, #264]	; (8009388 <_strtod_l+0x590>)
 8009280:	f1c4 040f 	rsb	r4, r4, #15
 8009284:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009288:	4652      	mov	r2, sl
 800928a:	465b      	mov	r3, fp
 800928c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009290:	f7f7 f9b2 	bl	80005f8 <__aeabi_dmul>
 8009294:	9b06      	ldr	r3, [sp, #24]
 8009296:	1b1c      	subs	r4, r3, r4
 8009298:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800929c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092a0:	e78d      	b.n	80091be <_strtod_l+0x3c6>
 80092a2:	f113 0f16 	cmn.w	r3, #22
 80092a6:	dba5      	blt.n	80091f4 <_strtod_l+0x3fc>
 80092a8:	4a37      	ldr	r2, [pc, #220]	; (8009388 <_strtod_l+0x590>)
 80092aa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80092ae:	e9d2 2300 	ldrd	r2, r3, [r2]
 80092b2:	4650      	mov	r0, sl
 80092b4:	4659      	mov	r1, fp
 80092b6:	f7f7 fac9 	bl	800084c <__aeabi_ddiv>
 80092ba:	e782      	b.n	80091c2 <_strtod_l+0x3ca>
 80092bc:	2300      	movs	r3, #0
 80092be:	4e33      	ldr	r6, [pc, #204]	; (800938c <_strtod_l+0x594>)
 80092c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80092c4:	4650      	mov	r0, sl
 80092c6:	4659      	mov	r1, fp
 80092c8:	461d      	mov	r5, r3
 80092ca:	f1b8 0f01 	cmp.w	r8, #1
 80092ce:	dc21      	bgt.n	8009314 <_strtod_l+0x51c>
 80092d0:	b10b      	cbz	r3, 80092d6 <_strtod_l+0x4de>
 80092d2:	4682      	mov	sl, r0
 80092d4:	468b      	mov	fp, r1
 80092d6:	4b2d      	ldr	r3, [pc, #180]	; (800938c <_strtod_l+0x594>)
 80092d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80092dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80092e0:	4652      	mov	r2, sl
 80092e2:	465b      	mov	r3, fp
 80092e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80092e8:	f7f7 f986 	bl	80005f8 <__aeabi_dmul>
 80092ec:	4b28      	ldr	r3, [pc, #160]	; (8009390 <_strtod_l+0x598>)
 80092ee:	460a      	mov	r2, r1
 80092f0:	400b      	ands	r3, r1
 80092f2:	4928      	ldr	r1, [pc, #160]	; (8009394 <_strtod_l+0x59c>)
 80092f4:	428b      	cmp	r3, r1
 80092f6:	4682      	mov	sl, r0
 80092f8:	d898      	bhi.n	800922c <_strtod_l+0x434>
 80092fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80092fe:	428b      	cmp	r3, r1
 8009300:	bf86      	itte	hi
 8009302:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800939c <_strtod_l+0x5a4>
 8009306:	f04f 3aff 	movhi.w	sl, #4294967295
 800930a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800930e:	2300      	movs	r3, #0
 8009310:	9304      	str	r3, [sp, #16]
 8009312:	e077      	b.n	8009404 <_strtod_l+0x60c>
 8009314:	f018 0f01 	tst.w	r8, #1
 8009318:	d006      	beq.n	8009328 <_strtod_l+0x530>
 800931a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f7f7 f969 	bl	80005f8 <__aeabi_dmul>
 8009326:	2301      	movs	r3, #1
 8009328:	3501      	adds	r5, #1
 800932a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800932e:	e7cc      	b.n	80092ca <_strtod_l+0x4d2>
 8009330:	d0ed      	beq.n	800930e <_strtod_l+0x516>
 8009332:	f1c8 0800 	rsb	r8, r8, #0
 8009336:	f018 020f 	ands.w	r2, r8, #15
 800933a:	d00a      	beq.n	8009352 <_strtod_l+0x55a>
 800933c:	4b12      	ldr	r3, [pc, #72]	; (8009388 <_strtod_l+0x590>)
 800933e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009342:	4650      	mov	r0, sl
 8009344:	4659      	mov	r1, fp
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f7f7 fa7f 	bl	800084c <__aeabi_ddiv>
 800934e:	4682      	mov	sl, r0
 8009350:	468b      	mov	fp, r1
 8009352:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009356:	d0da      	beq.n	800930e <_strtod_l+0x516>
 8009358:	f1b8 0f1f 	cmp.w	r8, #31
 800935c:	dd20      	ble.n	80093a0 <_strtod_l+0x5a8>
 800935e:	2400      	movs	r4, #0
 8009360:	46a0      	mov	r8, r4
 8009362:	9407      	str	r4, [sp, #28]
 8009364:	9405      	str	r4, [sp, #20]
 8009366:	2322      	movs	r3, #34	; 0x22
 8009368:	f04f 0a00 	mov.w	sl, #0
 800936c:	f04f 0b00 	mov.w	fp, #0
 8009370:	f8c9 3000 	str.w	r3, [r9]
 8009374:	e765      	b.n	8009242 <_strtod_l+0x44a>
 8009376:	bf00      	nop
 8009378:	0800b941 	.word	0x0800b941
 800937c:	0800b9c3 	.word	0x0800b9c3
 8009380:	0800b949 	.word	0x0800b949
 8009384:	0800b984 	.word	0x0800b984
 8009388:	0800ba00 	.word	0x0800ba00
 800938c:	0800b9d8 	.word	0x0800b9d8
 8009390:	7ff00000 	.word	0x7ff00000
 8009394:	7ca00000 	.word	0x7ca00000
 8009398:	fff80000 	.word	0xfff80000
 800939c:	7fefffff 	.word	0x7fefffff
 80093a0:	f018 0310 	ands.w	r3, r8, #16
 80093a4:	bf18      	it	ne
 80093a6:	236a      	movne	r3, #106	; 0x6a
 80093a8:	4da0      	ldr	r5, [pc, #640]	; (800962c <_strtod_l+0x834>)
 80093aa:	9304      	str	r3, [sp, #16]
 80093ac:	4650      	mov	r0, sl
 80093ae:	4659      	mov	r1, fp
 80093b0:	2300      	movs	r3, #0
 80093b2:	f1b8 0f00 	cmp.w	r8, #0
 80093b6:	f300 810a 	bgt.w	80095ce <_strtod_l+0x7d6>
 80093ba:	b10b      	cbz	r3, 80093c0 <_strtod_l+0x5c8>
 80093bc:	4682      	mov	sl, r0
 80093be:	468b      	mov	fp, r1
 80093c0:	9b04      	ldr	r3, [sp, #16]
 80093c2:	b1bb      	cbz	r3, 80093f4 <_strtod_l+0x5fc>
 80093c4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80093c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	4659      	mov	r1, fp
 80093d0:	dd10      	ble.n	80093f4 <_strtod_l+0x5fc>
 80093d2:	2b1f      	cmp	r3, #31
 80093d4:	f340 8107 	ble.w	80095e6 <_strtod_l+0x7ee>
 80093d8:	2b34      	cmp	r3, #52	; 0x34
 80093da:	bfde      	ittt	le
 80093dc:	3b20      	suble	r3, #32
 80093de:	f04f 32ff 	movle.w	r2, #4294967295
 80093e2:	fa02 f303 	lslle.w	r3, r2, r3
 80093e6:	f04f 0a00 	mov.w	sl, #0
 80093ea:	bfcc      	ite	gt
 80093ec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80093f0:	ea03 0b01 	andle.w	fp, r3, r1
 80093f4:	2200      	movs	r2, #0
 80093f6:	2300      	movs	r3, #0
 80093f8:	4650      	mov	r0, sl
 80093fa:	4659      	mov	r1, fp
 80093fc:	f7f7 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 8009400:	2800      	cmp	r0, #0
 8009402:	d1ac      	bne.n	800935e <_strtod_l+0x566>
 8009404:	9b07      	ldr	r3, [sp, #28]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	9a05      	ldr	r2, [sp, #20]
 800940a:	9908      	ldr	r1, [sp, #32]
 800940c:	4623      	mov	r3, r4
 800940e:	4648      	mov	r0, r9
 8009410:	f001 fd19 	bl	800ae46 <__s2b>
 8009414:	9007      	str	r0, [sp, #28]
 8009416:	2800      	cmp	r0, #0
 8009418:	f43f af08 	beq.w	800922c <_strtod_l+0x434>
 800941c:	9a06      	ldr	r2, [sp, #24]
 800941e:	9b06      	ldr	r3, [sp, #24]
 8009420:	2a00      	cmp	r2, #0
 8009422:	f1c3 0300 	rsb	r3, r3, #0
 8009426:	bfa8      	it	ge
 8009428:	2300      	movge	r3, #0
 800942a:	930e      	str	r3, [sp, #56]	; 0x38
 800942c:	2400      	movs	r4, #0
 800942e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009432:	9316      	str	r3, [sp, #88]	; 0x58
 8009434:	46a0      	mov	r8, r4
 8009436:	9b07      	ldr	r3, [sp, #28]
 8009438:	4648      	mov	r0, r9
 800943a:	6859      	ldr	r1, [r3, #4]
 800943c:	f001 fc7d 	bl	800ad3a <_Balloc>
 8009440:	9005      	str	r0, [sp, #20]
 8009442:	2800      	cmp	r0, #0
 8009444:	f43f aef6 	beq.w	8009234 <_strtod_l+0x43c>
 8009448:	9b07      	ldr	r3, [sp, #28]
 800944a:	691a      	ldr	r2, [r3, #16]
 800944c:	3202      	adds	r2, #2
 800944e:	f103 010c 	add.w	r1, r3, #12
 8009452:	0092      	lsls	r2, r2, #2
 8009454:	300c      	adds	r0, #12
 8009456:	f001 fc63 	bl	800ad20 <memcpy>
 800945a:	aa1e      	add	r2, sp, #120	; 0x78
 800945c:	a91d      	add	r1, sp, #116	; 0x74
 800945e:	ec4b ab10 	vmov	d0, sl, fp
 8009462:	4648      	mov	r0, r9
 8009464:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009468:	f001 ffa8 	bl	800b3bc <__d2b>
 800946c:	901c      	str	r0, [sp, #112]	; 0x70
 800946e:	2800      	cmp	r0, #0
 8009470:	f43f aee0 	beq.w	8009234 <_strtod_l+0x43c>
 8009474:	2101      	movs	r1, #1
 8009476:	4648      	mov	r0, r9
 8009478:	f001 fd71 	bl	800af5e <__i2b>
 800947c:	4680      	mov	r8, r0
 800947e:	2800      	cmp	r0, #0
 8009480:	f43f aed8 	beq.w	8009234 <_strtod_l+0x43c>
 8009484:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009486:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009488:	2e00      	cmp	r6, #0
 800948a:	bfab      	itete	ge
 800948c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800948e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009490:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009492:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009494:	bfac      	ite	ge
 8009496:	18f7      	addge	r7, r6, r3
 8009498:	1b9d      	sublt	r5, r3, r6
 800949a:	9b04      	ldr	r3, [sp, #16]
 800949c:	1af6      	subs	r6, r6, r3
 800949e:	4416      	add	r6, r2
 80094a0:	4b63      	ldr	r3, [pc, #396]	; (8009630 <_strtod_l+0x838>)
 80094a2:	3e01      	subs	r6, #1
 80094a4:	429e      	cmp	r6, r3
 80094a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80094aa:	f280 80af 	bge.w	800960c <_strtod_l+0x814>
 80094ae:	1b9b      	subs	r3, r3, r6
 80094b0:	2b1f      	cmp	r3, #31
 80094b2:	eba2 0203 	sub.w	r2, r2, r3
 80094b6:	f04f 0101 	mov.w	r1, #1
 80094ba:	f300 809b 	bgt.w	80095f4 <_strtod_l+0x7fc>
 80094be:	fa01 f303 	lsl.w	r3, r1, r3
 80094c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80094c4:	2300      	movs	r3, #0
 80094c6:	930a      	str	r3, [sp, #40]	; 0x28
 80094c8:	18be      	adds	r6, r7, r2
 80094ca:	9b04      	ldr	r3, [sp, #16]
 80094cc:	42b7      	cmp	r7, r6
 80094ce:	4415      	add	r5, r2
 80094d0:	441d      	add	r5, r3
 80094d2:	463b      	mov	r3, r7
 80094d4:	bfa8      	it	ge
 80094d6:	4633      	movge	r3, r6
 80094d8:	42ab      	cmp	r3, r5
 80094da:	bfa8      	it	ge
 80094dc:	462b      	movge	r3, r5
 80094de:	2b00      	cmp	r3, #0
 80094e0:	bfc2      	ittt	gt
 80094e2:	1af6      	subgt	r6, r6, r3
 80094e4:	1aed      	subgt	r5, r5, r3
 80094e6:	1aff      	subgt	r7, r7, r3
 80094e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094ea:	b1bb      	cbz	r3, 800951c <_strtod_l+0x724>
 80094ec:	4641      	mov	r1, r8
 80094ee:	461a      	mov	r2, r3
 80094f0:	4648      	mov	r0, r9
 80094f2:	f001 fdd3 	bl	800b09c <__pow5mult>
 80094f6:	4680      	mov	r8, r0
 80094f8:	2800      	cmp	r0, #0
 80094fa:	f43f ae9b 	beq.w	8009234 <_strtod_l+0x43c>
 80094fe:	4601      	mov	r1, r0
 8009500:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009502:	4648      	mov	r0, r9
 8009504:	f001 fd34 	bl	800af70 <__multiply>
 8009508:	900c      	str	r0, [sp, #48]	; 0x30
 800950a:	2800      	cmp	r0, #0
 800950c:	f43f ae92 	beq.w	8009234 <_strtod_l+0x43c>
 8009510:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009512:	4648      	mov	r0, r9
 8009514:	f001 fc45 	bl	800ada2 <_Bfree>
 8009518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800951a:	931c      	str	r3, [sp, #112]	; 0x70
 800951c:	2e00      	cmp	r6, #0
 800951e:	dc7a      	bgt.n	8009616 <_strtod_l+0x81e>
 8009520:	9b06      	ldr	r3, [sp, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	dd08      	ble.n	8009538 <_strtod_l+0x740>
 8009526:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009528:	9905      	ldr	r1, [sp, #20]
 800952a:	4648      	mov	r0, r9
 800952c:	f001 fdb6 	bl	800b09c <__pow5mult>
 8009530:	9005      	str	r0, [sp, #20]
 8009532:	2800      	cmp	r0, #0
 8009534:	f43f ae7e 	beq.w	8009234 <_strtod_l+0x43c>
 8009538:	2d00      	cmp	r5, #0
 800953a:	dd08      	ble.n	800954e <_strtod_l+0x756>
 800953c:	462a      	mov	r2, r5
 800953e:	9905      	ldr	r1, [sp, #20]
 8009540:	4648      	mov	r0, r9
 8009542:	f001 fdf9 	bl	800b138 <__lshift>
 8009546:	9005      	str	r0, [sp, #20]
 8009548:	2800      	cmp	r0, #0
 800954a:	f43f ae73 	beq.w	8009234 <_strtod_l+0x43c>
 800954e:	2f00      	cmp	r7, #0
 8009550:	dd08      	ble.n	8009564 <_strtod_l+0x76c>
 8009552:	4641      	mov	r1, r8
 8009554:	463a      	mov	r2, r7
 8009556:	4648      	mov	r0, r9
 8009558:	f001 fdee 	bl	800b138 <__lshift>
 800955c:	4680      	mov	r8, r0
 800955e:	2800      	cmp	r0, #0
 8009560:	f43f ae68 	beq.w	8009234 <_strtod_l+0x43c>
 8009564:	9a05      	ldr	r2, [sp, #20]
 8009566:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009568:	4648      	mov	r0, r9
 800956a:	f001 fe53 	bl	800b214 <__mdiff>
 800956e:	4604      	mov	r4, r0
 8009570:	2800      	cmp	r0, #0
 8009572:	f43f ae5f 	beq.w	8009234 <_strtod_l+0x43c>
 8009576:	68c3      	ldr	r3, [r0, #12]
 8009578:	930c      	str	r3, [sp, #48]	; 0x30
 800957a:	2300      	movs	r3, #0
 800957c:	60c3      	str	r3, [r0, #12]
 800957e:	4641      	mov	r1, r8
 8009580:	f001 fe2e 	bl	800b1e0 <__mcmp>
 8009584:	2800      	cmp	r0, #0
 8009586:	da55      	bge.n	8009634 <_strtod_l+0x83c>
 8009588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800958a:	b9e3      	cbnz	r3, 80095c6 <_strtod_l+0x7ce>
 800958c:	f1ba 0f00 	cmp.w	sl, #0
 8009590:	d119      	bne.n	80095c6 <_strtod_l+0x7ce>
 8009592:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009596:	b9b3      	cbnz	r3, 80095c6 <_strtod_l+0x7ce>
 8009598:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800959c:	0d1b      	lsrs	r3, r3, #20
 800959e:	051b      	lsls	r3, r3, #20
 80095a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80095a4:	d90f      	bls.n	80095c6 <_strtod_l+0x7ce>
 80095a6:	6963      	ldr	r3, [r4, #20]
 80095a8:	b913      	cbnz	r3, 80095b0 <_strtod_l+0x7b8>
 80095aa:	6923      	ldr	r3, [r4, #16]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	dd0a      	ble.n	80095c6 <_strtod_l+0x7ce>
 80095b0:	4621      	mov	r1, r4
 80095b2:	2201      	movs	r2, #1
 80095b4:	4648      	mov	r0, r9
 80095b6:	f001 fdbf 	bl	800b138 <__lshift>
 80095ba:	4641      	mov	r1, r8
 80095bc:	4604      	mov	r4, r0
 80095be:	f001 fe0f 	bl	800b1e0 <__mcmp>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	dc67      	bgt.n	8009696 <_strtod_l+0x89e>
 80095c6:	9b04      	ldr	r3, [sp, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d171      	bne.n	80096b0 <_strtod_l+0x8b8>
 80095cc:	e63d      	b.n	800924a <_strtod_l+0x452>
 80095ce:	f018 0f01 	tst.w	r8, #1
 80095d2:	d004      	beq.n	80095de <_strtod_l+0x7e6>
 80095d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095d8:	f7f7 f80e 	bl	80005f8 <__aeabi_dmul>
 80095dc:	2301      	movs	r3, #1
 80095de:	ea4f 0868 	mov.w	r8, r8, asr #1
 80095e2:	3508      	adds	r5, #8
 80095e4:	e6e5      	b.n	80093b2 <_strtod_l+0x5ba>
 80095e6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ea:	fa02 f303 	lsl.w	r3, r2, r3
 80095ee:	ea03 0a0a 	and.w	sl, r3, sl
 80095f2:	e6ff      	b.n	80093f4 <_strtod_l+0x5fc>
 80095f4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80095f8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80095fc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009600:	36e2      	adds	r6, #226	; 0xe2
 8009602:	fa01 f306 	lsl.w	r3, r1, r6
 8009606:	930a      	str	r3, [sp, #40]	; 0x28
 8009608:	910f      	str	r1, [sp, #60]	; 0x3c
 800960a:	e75d      	b.n	80094c8 <_strtod_l+0x6d0>
 800960c:	2300      	movs	r3, #0
 800960e:	930a      	str	r3, [sp, #40]	; 0x28
 8009610:	2301      	movs	r3, #1
 8009612:	930f      	str	r3, [sp, #60]	; 0x3c
 8009614:	e758      	b.n	80094c8 <_strtod_l+0x6d0>
 8009616:	4632      	mov	r2, r6
 8009618:	991c      	ldr	r1, [sp, #112]	; 0x70
 800961a:	4648      	mov	r0, r9
 800961c:	f001 fd8c 	bl	800b138 <__lshift>
 8009620:	901c      	str	r0, [sp, #112]	; 0x70
 8009622:	2800      	cmp	r0, #0
 8009624:	f47f af7c 	bne.w	8009520 <_strtod_l+0x728>
 8009628:	e604      	b.n	8009234 <_strtod_l+0x43c>
 800962a:	bf00      	nop
 800962c:	0800b998 	.word	0x0800b998
 8009630:	fffffc02 	.word	0xfffffc02
 8009634:	465d      	mov	r5, fp
 8009636:	f040 8086 	bne.w	8009746 <_strtod_l+0x94e>
 800963a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800963c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009640:	b32a      	cbz	r2, 800968e <_strtod_l+0x896>
 8009642:	4aaf      	ldr	r2, [pc, #700]	; (8009900 <_strtod_l+0xb08>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d153      	bne.n	80096f0 <_strtod_l+0x8f8>
 8009648:	9b04      	ldr	r3, [sp, #16]
 800964a:	4650      	mov	r0, sl
 800964c:	b1d3      	cbz	r3, 8009684 <_strtod_l+0x88c>
 800964e:	4aad      	ldr	r2, [pc, #692]	; (8009904 <_strtod_l+0xb0c>)
 8009650:	402a      	ands	r2, r5
 8009652:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009656:	f04f 31ff 	mov.w	r1, #4294967295
 800965a:	d816      	bhi.n	800968a <_strtod_l+0x892>
 800965c:	0d12      	lsrs	r2, r2, #20
 800965e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009662:	fa01 f303 	lsl.w	r3, r1, r3
 8009666:	4298      	cmp	r0, r3
 8009668:	d142      	bne.n	80096f0 <_strtod_l+0x8f8>
 800966a:	4ba7      	ldr	r3, [pc, #668]	; (8009908 <_strtod_l+0xb10>)
 800966c:	429d      	cmp	r5, r3
 800966e:	d102      	bne.n	8009676 <_strtod_l+0x87e>
 8009670:	3001      	adds	r0, #1
 8009672:	f43f addf 	beq.w	8009234 <_strtod_l+0x43c>
 8009676:	4ba3      	ldr	r3, [pc, #652]	; (8009904 <_strtod_l+0xb0c>)
 8009678:	402b      	ands	r3, r5
 800967a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800967e:	f04f 0a00 	mov.w	sl, #0
 8009682:	e7a0      	b.n	80095c6 <_strtod_l+0x7ce>
 8009684:	f04f 33ff 	mov.w	r3, #4294967295
 8009688:	e7ed      	b.n	8009666 <_strtod_l+0x86e>
 800968a:	460b      	mov	r3, r1
 800968c:	e7eb      	b.n	8009666 <_strtod_l+0x86e>
 800968e:	bb7b      	cbnz	r3, 80096f0 <_strtod_l+0x8f8>
 8009690:	f1ba 0f00 	cmp.w	sl, #0
 8009694:	d12c      	bne.n	80096f0 <_strtod_l+0x8f8>
 8009696:	9904      	ldr	r1, [sp, #16]
 8009698:	4a9a      	ldr	r2, [pc, #616]	; (8009904 <_strtod_l+0xb0c>)
 800969a:	465b      	mov	r3, fp
 800969c:	b1f1      	cbz	r1, 80096dc <_strtod_l+0x8e4>
 800969e:	ea02 010b 	and.w	r1, r2, fp
 80096a2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80096a6:	dc19      	bgt.n	80096dc <_strtod_l+0x8e4>
 80096a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80096ac:	f77f ae5b 	ble.w	8009366 <_strtod_l+0x56e>
 80096b0:	4a96      	ldr	r2, [pc, #600]	; (800990c <_strtod_l+0xb14>)
 80096b2:	2300      	movs	r3, #0
 80096b4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80096b8:	4650      	mov	r0, sl
 80096ba:	4659      	mov	r1, fp
 80096bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80096c0:	f7f6 ff9a 	bl	80005f8 <__aeabi_dmul>
 80096c4:	4682      	mov	sl, r0
 80096c6:	468b      	mov	fp, r1
 80096c8:	2900      	cmp	r1, #0
 80096ca:	f47f adbe 	bne.w	800924a <_strtod_l+0x452>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f47f adbb 	bne.w	800924a <_strtod_l+0x452>
 80096d4:	2322      	movs	r3, #34	; 0x22
 80096d6:	f8c9 3000 	str.w	r3, [r9]
 80096da:	e5b6      	b.n	800924a <_strtod_l+0x452>
 80096dc:	4013      	ands	r3, r2
 80096de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80096e2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80096e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80096ea:	f04f 3aff 	mov.w	sl, #4294967295
 80096ee:	e76a      	b.n	80095c6 <_strtod_l+0x7ce>
 80096f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f2:	b193      	cbz	r3, 800971a <_strtod_l+0x922>
 80096f4:	422b      	tst	r3, r5
 80096f6:	f43f af66 	beq.w	80095c6 <_strtod_l+0x7ce>
 80096fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096fc:	9a04      	ldr	r2, [sp, #16]
 80096fe:	4650      	mov	r0, sl
 8009700:	4659      	mov	r1, fp
 8009702:	b173      	cbz	r3, 8009722 <_strtod_l+0x92a>
 8009704:	f7ff fb5a 	bl	8008dbc <sulp>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009710:	f7f6 fdbc 	bl	800028c <__adddf3>
 8009714:	4682      	mov	sl, r0
 8009716:	468b      	mov	fp, r1
 8009718:	e755      	b.n	80095c6 <_strtod_l+0x7ce>
 800971a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800971c:	ea13 0f0a 	tst.w	r3, sl
 8009720:	e7e9      	b.n	80096f6 <_strtod_l+0x8fe>
 8009722:	f7ff fb4b 	bl	8008dbc <sulp>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800972e:	f7f6 fdab 	bl	8000288 <__aeabi_dsub>
 8009732:	2200      	movs	r2, #0
 8009734:	2300      	movs	r3, #0
 8009736:	4682      	mov	sl, r0
 8009738:	468b      	mov	fp, r1
 800973a:	f7f7 f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800973e:	2800      	cmp	r0, #0
 8009740:	f47f ae11 	bne.w	8009366 <_strtod_l+0x56e>
 8009744:	e73f      	b.n	80095c6 <_strtod_l+0x7ce>
 8009746:	4641      	mov	r1, r8
 8009748:	4620      	mov	r0, r4
 800974a:	f001 fe86 	bl	800b45a <__ratio>
 800974e:	ec57 6b10 	vmov	r6, r7, d0
 8009752:	2200      	movs	r2, #0
 8009754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009758:	ee10 0a10 	vmov	r0, s0
 800975c:	4639      	mov	r1, r7
 800975e:	f7f7 f9c7 	bl	8000af0 <__aeabi_dcmple>
 8009762:	2800      	cmp	r0, #0
 8009764:	d077      	beq.n	8009856 <_strtod_l+0xa5e>
 8009766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009768:	2b00      	cmp	r3, #0
 800976a:	d04a      	beq.n	8009802 <_strtod_l+0xa0a>
 800976c:	4b68      	ldr	r3, [pc, #416]	; (8009910 <_strtod_l+0xb18>)
 800976e:	2200      	movs	r2, #0
 8009770:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009774:	4f66      	ldr	r7, [pc, #408]	; (8009910 <_strtod_l+0xb18>)
 8009776:	2600      	movs	r6, #0
 8009778:	4b62      	ldr	r3, [pc, #392]	; (8009904 <_strtod_l+0xb0c>)
 800977a:	402b      	ands	r3, r5
 800977c:	930f      	str	r3, [sp, #60]	; 0x3c
 800977e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009780:	4b64      	ldr	r3, [pc, #400]	; (8009914 <_strtod_l+0xb1c>)
 8009782:	429a      	cmp	r2, r3
 8009784:	f040 80ce 	bne.w	8009924 <_strtod_l+0xb2c>
 8009788:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800978c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009790:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009794:	ec4b ab10 	vmov	d0, sl, fp
 8009798:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800979c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80097a0:	f001 fd96 	bl	800b2d0 <__ulp>
 80097a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80097a8:	ec53 2b10 	vmov	r2, r3, d0
 80097ac:	f7f6 ff24 	bl	80005f8 <__aeabi_dmul>
 80097b0:	4652      	mov	r2, sl
 80097b2:	465b      	mov	r3, fp
 80097b4:	f7f6 fd6a 	bl	800028c <__adddf3>
 80097b8:	460b      	mov	r3, r1
 80097ba:	4952      	ldr	r1, [pc, #328]	; (8009904 <_strtod_l+0xb0c>)
 80097bc:	4a56      	ldr	r2, [pc, #344]	; (8009918 <_strtod_l+0xb20>)
 80097be:	4019      	ands	r1, r3
 80097c0:	4291      	cmp	r1, r2
 80097c2:	4682      	mov	sl, r0
 80097c4:	d95b      	bls.n	800987e <_strtod_l+0xa86>
 80097c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d103      	bne.n	80097d8 <_strtod_l+0x9e0>
 80097d0:	9b08      	ldr	r3, [sp, #32]
 80097d2:	3301      	adds	r3, #1
 80097d4:	f43f ad2e 	beq.w	8009234 <_strtod_l+0x43c>
 80097d8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009908 <_strtod_l+0xb10>
 80097dc:	f04f 3aff 	mov.w	sl, #4294967295
 80097e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80097e2:	4648      	mov	r0, r9
 80097e4:	f001 fadd 	bl	800ada2 <_Bfree>
 80097e8:	9905      	ldr	r1, [sp, #20]
 80097ea:	4648      	mov	r0, r9
 80097ec:	f001 fad9 	bl	800ada2 <_Bfree>
 80097f0:	4641      	mov	r1, r8
 80097f2:	4648      	mov	r0, r9
 80097f4:	f001 fad5 	bl	800ada2 <_Bfree>
 80097f8:	4621      	mov	r1, r4
 80097fa:	4648      	mov	r0, r9
 80097fc:	f001 fad1 	bl	800ada2 <_Bfree>
 8009800:	e619      	b.n	8009436 <_strtod_l+0x63e>
 8009802:	f1ba 0f00 	cmp.w	sl, #0
 8009806:	d11a      	bne.n	800983e <_strtod_l+0xa46>
 8009808:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800980c:	b9eb      	cbnz	r3, 800984a <_strtod_l+0xa52>
 800980e:	2200      	movs	r2, #0
 8009810:	4b3f      	ldr	r3, [pc, #252]	; (8009910 <_strtod_l+0xb18>)
 8009812:	4630      	mov	r0, r6
 8009814:	4639      	mov	r1, r7
 8009816:	f7f7 f961 	bl	8000adc <__aeabi_dcmplt>
 800981a:	b9c8      	cbnz	r0, 8009850 <_strtod_l+0xa58>
 800981c:	4630      	mov	r0, r6
 800981e:	4639      	mov	r1, r7
 8009820:	2200      	movs	r2, #0
 8009822:	4b3e      	ldr	r3, [pc, #248]	; (800991c <_strtod_l+0xb24>)
 8009824:	f7f6 fee8 	bl	80005f8 <__aeabi_dmul>
 8009828:	4606      	mov	r6, r0
 800982a:	460f      	mov	r7, r1
 800982c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009830:	9618      	str	r6, [sp, #96]	; 0x60
 8009832:	9319      	str	r3, [sp, #100]	; 0x64
 8009834:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009838:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800983c:	e79c      	b.n	8009778 <_strtod_l+0x980>
 800983e:	f1ba 0f01 	cmp.w	sl, #1
 8009842:	d102      	bne.n	800984a <_strtod_l+0xa52>
 8009844:	2d00      	cmp	r5, #0
 8009846:	f43f ad8e 	beq.w	8009366 <_strtod_l+0x56e>
 800984a:	2200      	movs	r2, #0
 800984c:	4b34      	ldr	r3, [pc, #208]	; (8009920 <_strtod_l+0xb28>)
 800984e:	e78f      	b.n	8009770 <_strtod_l+0x978>
 8009850:	2600      	movs	r6, #0
 8009852:	4f32      	ldr	r7, [pc, #200]	; (800991c <_strtod_l+0xb24>)
 8009854:	e7ea      	b.n	800982c <_strtod_l+0xa34>
 8009856:	4b31      	ldr	r3, [pc, #196]	; (800991c <_strtod_l+0xb24>)
 8009858:	4630      	mov	r0, r6
 800985a:	4639      	mov	r1, r7
 800985c:	2200      	movs	r2, #0
 800985e:	f7f6 fecb 	bl	80005f8 <__aeabi_dmul>
 8009862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009864:	4606      	mov	r6, r0
 8009866:	460f      	mov	r7, r1
 8009868:	b933      	cbnz	r3, 8009878 <_strtod_l+0xa80>
 800986a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800986e:	9010      	str	r0, [sp, #64]	; 0x40
 8009870:	9311      	str	r3, [sp, #68]	; 0x44
 8009872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009876:	e7df      	b.n	8009838 <_strtod_l+0xa40>
 8009878:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800987c:	e7f9      	b.n	8009872 <_strtod_l+0xa7a>
 800987e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009882:	9b04      	ldr	r3, [sp, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1ab      	bne.n	80097e0 <_strtod_l+0x9e8>
 8009888:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800988c:	0d1b      	lsrs	r3, r3, #20
 800988e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009890:	051b      	lsls	r3, r3, #20
 8009892:	429a      	cmp	r2, r3
 8009894:	465d      	mov	r5, fp
 8009896:	d1a3      	bne.n	80097e0 <_strtod_l+0x9e8>
 8009898:	4639      	mov	r1, r7
 800989a:	4630      	mov	r0, r6
 800989c:	f7f7 f95c 	bl	8000b58 <__aeabi_d2iz>
 80098a0:	f7f6 fe40 	bl	8000524 <__aeabi_i2d>
 80098a4:	460b      	mov	r3, r1
 80098a6:	4602      	mov	r2, r0
 80098a8:	4639      	mov	r1, r7
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7f6 fcec 	bl	8000288 <__aeabi_dsub>
 80098b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098b2:	4606      	mov	r6, r0
 80098b4:	460f      	mov	r7, r1
 80098b6:	b933      	cbnz	r3, 80098c6 <_strtod_l+0xace>
 80098b8:	f1ba 0f00 	cmp.w	sl, #0
 80098bc:	d103      	bne.n	80098c6 <_strtod_l+0xace>
 80098be:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80098c2:	2d00      	cmp	r5, #0
 80098c4:	d06d      	beq.n	80099a2 <_strtod_l+0xbaa>
 80098c6:	a30a      	add	r3, pc, #40	; (adr r3, 80098f0 <_strtod_l+0xaf8>)
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	4630      	mov	r0, r6
 80098ce:	4639      	mov	r1, r7
 80098d0:	f7f7 f904 	bl	8000adc <__aeabi_dcmplt>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	f47f acb8 	bne.w	800924a <_strtod_l+0x452>
 80098da:	a307      	add	r3, pc, #28	; (adr r3, 80098f8 <_strtod_l+0xb00>)
 80098dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e0:	4630      	mov	r0, r6
 80098e2:	4639      	mov	r1, r7
 80098e4:	f7f7 f918 	bl	8000b18 <__aeabi_dcmpgt>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	f43f af79 	beq.w	80097e0 <_strtod_l+0x9e8>
 80098ee:	e4ac      	b.n	800924a <_strtod_l+0x452>
 80098f0:	94a03595 	.word	0x94a03595
 80098f4:	3fdfffff 	.word	0x3fdfffff
 80098f8:	35afe535 	.word	0x35afe535
 80098fc:	3fe00000 	.word	0x3fe00000
 8009900:	000fffff 	.word	0x000fffff
 8009904:	7ff00000 	.word	0x7ff00000
 8009908:	7fefffff 	.word	0x7fefffff
 800990c:	39500000 	.word	0x39500000
 8009910:	3ff00000 	.word	0x3ff00000
 8009914:	7fe00000 	.word	0x7fe00000
 8009918:	7c9fffff 	.word	0x7c9fffff
 800991c:	3fe00000 	.word	0x3fe00000
 8009920:	bff00000 	.word	0xbff00000
 8009924:	9b04      	ldr	r3, [sp, #16]
 8009926:	b333      	cbz	r3, 8009976 <_strtod_l+0xb7e>
 8009928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800992a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800992e:	d822      	bhi.n	8009976 <_strtod_l+0xb7e>
 8009930:	a327      	add	r3, pc, #156	; (adr r3, 80099d0 <_strtod_l+0xbd8>)
 8009932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009936:	4630      	mov	r0, r6
 8009938:	4639      	mov	r1, r7
 800993a:	f7f7 f8d9 	bl	8000af0 <__aeabi_dcmple>
 800993e:	b1a0      	cbz	r0, 800996a <_strtod_l+0xb72>
 8009940:	4639      	mov	r1, r7
 8009942:	4630      	mov	r0, r6
 8009944:	f7f7 f930 	bl	8000ba8 <__aeabi_d2uiz>
 8009948:	2800      	cmp	r0, #0
 800994a:	bf08      	it	eq
 800994c:	2001      	moveq	r0, #1
 800994e:	f7f6 fdd9 	bl	8000504 <__aeabi_ui2d>
 8009952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009954:	4606      	mov	r6, r0
 8009956:	460f      	mov	r7, r1
 8009958:	bb03      	cbnz	r3, 800999c <_strtod_l+0xba4>
 800995a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800995e:	9012      	str	r0, [sp, #72]	; 0x48
 8009960:	9313      	str	r3, [sp, #76]	; 0x4c
 8009962:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009966:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800996a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800996c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800996e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009972:	1a9b      	subs	r3, r3, r2
 8009974:	930b      	str	r3, [sp, #44]	; 0x2c
 8009976:	ed9d 0b08 	vldr	d0, [sp, #32]
 800997a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800997e:	f001 fca7 	bl	800b2d0 <__ulp>
 8009982:	4650      	mov	r0, sl
 8009984:	ec53 2b10 	vmov	r2, r3, d0
 8009988:	4659      	mov	r1, fp
 800998a:	f7f6 fe35 	bl	80005f8 <__aeabi_dmul>
 800998e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009992:	f7f6 fc7b 	bl	800028c <__adddf3>
 8009996:	4682      	mov	sl, r0
 8009998:	468b      	mov	fp, r1
 800999a:	e772      	b.n	8009882 <_strtod_l+0xa8a>
 800999c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80099a0:	e7df      	b.n	8009962 <_strtod_l+0xb6a>
 80099a2:	a30d      	add	r3, pc, #52	; (adr r3, 80099d8 <_strtod_l+0xbe0>)
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	f7f7 f898 	bl	8000adc <__aeabi_dcmplt>
 80099ac:	e79c      	b.n	80098e8 <_strtod_l+0xaf0>
 80099ae:	2300      	movs	r3, #0
 80099b0:	930d      	str	r3, [sp, #52]	; 0x34
 80099b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	f7ff ba61 	b.w	8008e7e <_strtod_l+0x86>
 80099bc:	2b65      	cmp	r3, #101	; 0x65
 80099be:	f04f 0200 	mov.w	r2, #0
 80099c2:	f43f ab4e 	beq.w	8009062 <_strtod_l+0x26a>
 80099c6:	2101      	movs	r1, #1
 80099c8:	4614      	mov	r4, r2
 80099ca:	9104      	str	r1, [sp, #16]
 80099cc:	f7ff bacb 	b.w	8008f66 <_strtod_l+0x16e>
 80099d0:	ffc00000 	.word	0xffc00000
 80099d4:	41dfffff 	.word	0x41dfffff
 80099d8:	94a03595 	.word	0x94a03595
 80099dc:	3fcfffff 	.word	0x3fcfffff

080099e0 <strtod>:
 80099e0:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <strtod+0x20>)
 80099e2:	4a08      	ldr	r2, [pc, #32]	; (8009a04 <strtod+0x24>)
 80099e4:	b410      	push	{r4}
 80099e6:	681c      	ldr	r4, [r3, #0]
 80099e8:	6a23      	ldr	r3, [r4, #32]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	bf08      	it	eq
 80099ee:	4613      	moveq	r3, r2
 80099f0:	460a      	mov	r2, r1
 80099f2:	4601      	mov	r1, r0
 80099f4:	4620      	mov	r0, r4
 80099f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099fa:	f7ff b9fd 	b.w	8008df8 <_strtod_l>
 80099fe:	bf00      	nop
 8009a00:	20000188 	.word	0x20000188
 8009a04:	200001ec 	.word	0x200001ec

08009a08 <quorem>:
 8009a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0c:	6903      	ldr	r3, [r0, #16]
 8009a0e:	690c      	ldr	r4, [r1, #16]
 8009a10:	42a3      	cmp	r3, r4
 8009a12:	4680      	mov	r8, r0
 8009a14:	f2c0 8082 	blt.w	8009b1c <quorem+0x114>
 8009a18:	3c01      	subs	r4, #1
 8009a1a:	f101 0714 	add.w	r7, r1, #20
 8009a1e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009a22:	f100 0614 	add.w	r6, r0, #20
 8009a26:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009a2a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009a2e:	eb06 030c 	add.w	r3, r6, ip
 8009a32:	3501      	adds	r5, #1
 8009a34:	eb07 090c 	add.w	r9, r7, ip
 8009a38:	9301      	str	r3, [sp, #4]
 8009a3a:	fbb0 f5f5 	udiv	r5, r0, r5
 8009a3e:	b395      	cbz	r5, 8009aa6 <quorem+0x9e>
 8009a40:	f04f 0a00 	mov.w	sl, #0
 8009a44:	4638      	mov	r0, r7
 8009a46:	46b6      	mov	lr, r6
 8009a48:	46d3      	mov	fp, sl
 8009a4a:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a4e:	b293      	uxth	r3, r2
 8009a50:	fb05 a303 	mla	r3, r5, r3, sl
 8009a54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	ebab 0303 	sub.w	r3, fp, r3
 8009a5e:	0c12      	lsrs	r2, r2, #16
 8009a60:	f8de b000 	ldr.w	fp, [lr]
 8009a64:	fb05 a202 	mla	r2, r5, r2, sl
 8009a68:	fa13 f38b 	uxtah	r3, r3, fp
 8009a6c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009a70:	fa1f fb82 	uxth.w	fp, r2
 8009a74:	f8de 2000 	ldr.w	r2, [lr]
 8009a78:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009a7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a86:	4581      	cmp	r9, r0
 8009a88:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009a8c:	f84e 3b04 	str.w	r3, [lr], #4
 8009a90:	d2db      	bcs.n	8009a4a <quorem+0x42>
 8009a92:	f856 300c 	ldr.w	r3, [r6, ip]
 8009a96:	b933      	cbnz	r3, 8009aa6 <quorem+0x9e>
 8009a98:	9b01      	ldr	r3, [sp, #4]
 8009a9a:	3b04      	subs	r3, #4
 8009a9c:	429e      	cmp	r6, r3
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	d330      	bcc.n	8009b04 <quorem+0xfc>
 8009aa2:	f8c8 4010 	str.w	r4, [r8, #16]
 8009aa6:	4640      	mov	r0, r8
 8009aa8:	f001 fb9a 	bl	800b1e0 <__mcmp>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	db25      	blt.n	8009afc <quorem+0xf4>
 8009ab0:	3501      	adds	r5, #1
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f04f 0c00 	mov.w	ip, #0
 8009ab8:	f857 2b04 	ldr.w	r2, [r7], #4
 8009abc:	f8d0 e000 	ldr.w	lr, [r0]
 8009ac0:	b293      	uxth	r3, r2
 8009ac2:	ebac 0303 	sub.w	r3, ip, r3
 8009ac6:	0c12      	lsrs	r2, r2, #16
 8009ac8:	fa13 f38e 	uxtah	r3, r3, lr
 8009acc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ad0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ada:	45b9      	cmp	r9, r7
 8009adc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ae0:	f840 3b04 	str.w	r3, [r0], #4
 8009ae4:	d2e8      	bcs.n	8009ab8 <quorem+0xb0>
 8009ae6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009aea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009aee:	b92a      	cbnz	r2, 8009afc <quorem+0xf4>
 8009af0:	3b04      	subs	r3, #4
 8009af2:	429e      	cmp	r6, r3
 8009af4:	461a      	mov	r2, r3
 8009af6:	d30b      	bcc.n	8009b10 <quorem+0x108>
 8009af8:	f8c8 4010 	str.w	r4, [r8, #16]
 8009afc:	4628      	mov	r0, r5
 8009afe:	b003      	add	sp, #12
 8009b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b04:	6812      	ldr	r2, [r2, #0]
 8009b06:	3b04      	subs	r3, #4
 8009b08:	2a00      	cmp	r2, #0
 8009b0a:	d1ca      	bne.n	8009aa2 <quorem+0x9a>
 8009b0c:	3c01      	subs	r4, #1
 8009b0e:	e7c5      	b.n	8009a9c <quorem+0x94>
 8009b10:	6812      	ldr	r2, [r2, #0]
 8009b12:	3b04      	subs	r3, #4
 8009b14:	2a00      	cmp	r2, #0
 8009b16:	d1ef      	bne.n	8009af8 <quorem+0xf0>
 8009b18:	3c01      	subs	r4, #1
 8009b1a:	e7ea      	b.n	8009af2 <quorem+0xea>
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	e7ee      	b.n	8009afe <quorem+0xf6>

08009b20 <_dtoa_r>:
 8009b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	ec57 6b10 	vmov	r6, r7, d0
 8009b28:	b097      	sub	sp, #92	; 0x5c
 8009b2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b2c:	9106      	str	r1, [sp, #24]
 8009b2e:	4604      	mov	r4, r0
 8009b30:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b32:	9312      	str	r3, [sp, #72]	; 0x48
 8009b34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b38:	e9cd 6700 	strd	r6, r7, [sp]
 8009b3c:	b93d      	cbnz	r5, 8009b4e <_dtoa_r+0x2e>
 8009b3e:	2010      	movs	r0, #16
 8009b40:	f7fe fbdc 	bl	80082fc <malloc>
 8009b44:	6260      	str	r0, [r4, #36]	; 0x24
 8009b46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b4a:	6005      	str	r5, [r0, #0]
 8009b4c:	60c5      	str	r5, [r0, #12]
 8009b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b50:	6819      	ldr	r1, [r3, #0]
 8009b52:	b151      	cbz	r1, 8009b6a <_dtoa_r+0x4a>
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	604a      	str	r2, [r1, #4]
 8009b58:	2301      	movs	r3, #1
 8009b5a:	4093      	lsls	r3, r2
 8009b5c:	608b      	str	r3, [r1, #8]
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f001 f91f 	bl	800ada2 <_Bfree>
 8009b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b66:	2200      	movs	r2, #0
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	1e3b      	subs	r3, r7, #0
 8009b6c:	bfbb      	ittet	lt
 8009b6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b72:	9301      	strlt	r3, [sp, #4]
 8009b74:	2300      	movge	r3, #0
 8009b76:	2201      	movlt	r2, #1
 8009b78:	bfac      	ite	ge
 8009b7a:	f8c8 3000 	strge.w	r3, [r8]
 8009b7e:	f8c8 2000 	strlt.w	r2, [r8]
 8009b82:	4baf      	ldr	r3, [pc, #700]	; (8009e40 <_dtoa_r+0x320>)
 8009b84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b88:	ea33 0308 	bics.w	r3, r3, r8
 8009b8c:	d114      	bne.n	8009bb8 <_dtoa_r+0x98>
 8009b8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b90:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b94:	6013      	str	r3, [r2, #0]
 8009b96:	9b00      	ldr	r3, [sp, #0]
 8009b98:	b923      	cbnz	r3, 8009ba4 <_dtoa_r+0x84>
 8009b9a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	f000 8542 	beq.w	800a628 <_dtoa_r+0xb08>
 8009ba4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ba6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009e54 <_dtoa_r+0x334>
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 8544 	beq.w	800a638 <_dtoa_r+0xb18>
 8009bb0:	f10b 0303 	add.w	r3, fp, #3
 8009bb4:	f000 bd3e 	b.w	800a634 <_dtoa_r+0xb14>
 8009bb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	f7f6 ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bc8:	4681      	mov	r9, r0
 8009bca:	b168      	cbz	r0, 8009be8 <_dtoa_r+0xc8>
 8009bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bce:	2301      	movs	r3, #1
 8009bd0:	6013      	str	r3, [r2, #0]
 8009bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 8524 	beq.w	800a622 <_dtoa_r+0xb02>
 8009bda:	4b9a      	ldr	r3, [pc, #616]	; (8009e44 <_dtoa_r+0x324>)
 8009bdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bde:	f103 3bff 	add.w	fp, r3, #4294967295
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	f000 bd28 	b.w	800a638 <_dtoa_r+0xb18>
 8009be8:	aa14      	add	r2, sp, #80	; 0x50
 8009bea:	a915      	add	r1, sp, #84	; 0x54
 8009bec:	ec47 6b10 	vmov	d0, r6, r7
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f001 fbe3 	bl	800b3bc <__d2b>
 8009bf6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009bfa:	9004      	str	r0, [sp, #16]
 8009bfc:	2d00      	cmp	r5, #0
 8009bfe:	d07c      	beq.n	8009cfa <_dtoa_r+0x1da>
 8009c00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c04:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009c08:	46b2      	mov	sl, r6
 8009c0a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009c0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c12:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009c16:	2200      	movs	r2, #0
 8009c18:	4b8b      	ldr	r3, [pc, #556]	; (8009e48 <_dtoa_r+0x328>)
 8009c1a:	4650      	mov	r0, sl
 8009c1c:	4659      	mov	r1, fp
 8009c1e:	f7f6 fb33 	bl	8000288 <__aeabi_dsub>
 8009c22:	a381      	add	r3, pc, #516	; (adr r3, 8009e28 <_dtoa_r+0x308>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	f7f6 fce6 	bl	80005f8 <__aeabi_dmul>
 8009c2c:	a380      	add	r3, pc, #512	; (adr r3, 8009e30 <_dtoa_r+0x310>)
 8009c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c32:	f7f6 fb2b 	bl	800028c <__adddf3>
 8009c36:	4606      	mov	r6, r0
 8009c38:	4628      	mov	r0, r5
 8009c3a:	460f      	mov	r7, r1
 8009c3c:	f7f6 fc72 	bl	8000524 <__aeabi_i2d>
 8009c40:	a37d      	add	r3, pc, #500	; (adr r3, 8009e38 <_dtoa_r+0x318>)
 8009c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c46:	f7f6 fcd7 	bl	80005f8 <__aeabi_dmul>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4630      	mov	r0, r6
 8009c50:	4639      	mov	r1, r7
 8009c52:	f7f6 fb1b 	bl	800028c <__adddf3>
 8009c56:	4606      	mov	r6, r0
 8009c58:	460f      	mov	r7, r1
 8009c5a:	f7f6 ff7d 	bl	8000b58 <__aeabi_d2iz>
 8009c5e:	2200      	movs	r2, #0
 8009c60:	4682      	mov	sl, r0
 8009c62:	2300      	movs	r3, #0
 8009c64:	4630      	mov	r0, r6
 8009c66:	4639      	mov	r1, r7
 8009c68:	f7f6 ff38 	bl	8000adc <__aeabi_dcmplt>
 8009c6c:	b148      	cbz	r0, 8009c82 <_dtoa_r+0x162>
 8009c6e:	4650      	mov	r0, sl
 8009c70:	f7f6 fc58 	bl	8000524 <__aeabi_i2d>
 8009c74:	4632      	mov	r2, r6
 8009c76:	463b      	mov	r3, r7
 8009c78:	f7f6 ff26 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c7c:	b908      	cbnz	r0, 8009c82 <_dtoa_r+0x162>
 8009c7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c82:	f1ba 0f16 	cmp.w	sl, #22
 8009c86:	d859      	bhi.n	8009d3c <_dtoa_r+0x21c>
 8009c88:	4970      	ldr	r1, [pc, #448]	; (8009e4c <_dtoa_r+0x32c>)
 8009c8a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c96:	f7f6 ff3f 	bl	8000b18 <__aeabi_dcmpgt>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d050      	beq.n	8009d40 <_dtoa_r+0x220>
 8009c9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ca6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ca8:	1b5d      	subs	r5, r3, r5
 8009caa:	f1b5 0801 	subs.w	r8, r5, #1
 8009cae:	bf49      	itett	mi
 8009cb0:	f1c5 0301 	rsbmi	r3, r5, #1
 8009cb4:	2300      	movpl	r3, #0
 8009cb6:	9305      	strmi	r3, [sp, #20]
 8009cb8:	f04f 0800 	movmi.w	r8, #0
 8009cbc:	bf58      	it	pl
 8009cbe:	9305      	strpl	r3, [sp, #20]
 8009cc0:	f1ba 0f00 	cmp.w	sl, #0
 8009cc4:	db3e      	blt.n	8009d44 <_dtoa_r+0x224>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	44d0      	add	r8, sl
 8009cca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009cce:	9307      	str	r3, [sp, #28]
 8009cd0:	9b06      	ldr	r3, [sp, #24]
 8009cd2:	2b09      	cmp	r3, #9
 8009cd4:	f200 8090 	bhi.w	8009df8 <_dtoa_r+0x2d8>
 8009cd8:	2b05      	cmp	r3, #5
 8009cda:	bfc4      	itt	gt
 8009cdc:	3b04      	subgt	r3, #4
 8009cde:	9306      	strgt	r3, [sp, #24]
 8009ce0:	9b06      	ldr	r3, [sp, #24]
 8009ce2:	f1a3 0302 	sub.w	r3, r3, #2
 8009ce6:	bfcc      	ite	gt
 8009ce8:	2500      	movgt	r5, #0
 8009cea:	2501      	movle	r5, #1
 8009cec:	2b03      	cmp	r3, #3
 8009cee:	f200 808f 	bhi.w	8009e10 <_dtoa_r+0x2f0>
 8009cf2:	e8df f003 	tbb	[pc, r3]
 8009cf6:	7f7d      	.short	0x7f7d
 8009cf8:	7131      	.short	0x7131
 8009cfa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009cfe:	441d      	add	r5, r3
 8009d00:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009d04:	2820      	cmp	r0, #32
 8009d06:	dd13      	ble.n	8009d30 <_dtoa_r+0x210>
 8009d08:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009d0c:	9b00      	ldr	r3, [sp, #0]
 8009d0e:	fa08 f800 	lsl.w	r8, r8, r0
 8009d12:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009d16:	fa23 f000 	lsr.w	r0, r3, r0
 8009d1a:	ea48 0000 	orr.w	r0, r8, r0
 8009d1e:	f7f6 fbf1 	bl	8000504 <__aeabi_ui2d>
 8009d22:	2301      	movs	r3, #1
 8009d24:	4682      	mov	sl, r0
 8009d26:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009d2a:	3d01      	subs	r5, #1
 8009d2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d2e:	e772      	b.n	8009c16 <_dtoa_r+0xf6>
 8009d30:	9b00      	ldr	r3, [sp, #0]
 8009d32:	f1c0 0020 	rsb	r0, r0, #32
 8009d36:	fa03 f000 	lsl.w	r0, r3, r0
 8009d3a:	e7f0      	b.n	8009d1e <_dtoa_r+0x1fe>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e7b1      	b.n	8009ca4 <_dtoa_r+0x184>
 8009d40:	900f      	str	r0, [sp, #60]	; 0x3c
 8009d42:	e7b0      	b.n	8009ca6 <_dtoa_r+0x186>
 8009d44:	9b05      	ldr	r3, [sp, #20]
 8009d46:	eba3 030a 	sub.w	r3, r3, sl
 8009d4a:	9305      	str	r3, [sp, #20]
 8009d4c:	f1ca 0300 	rsb	r3, sl, #0
 8009d50:	9307      	str	r3, [sp, #28]
 8009d52:	2300      	movs	r3, #0
 8009d54:	930e      	str	r3, [sp, #56]	; 0x38
 8009d56:	e7bb      	b.n	8009cd0 <_dtoa_r+0x1b0>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	dd59      	ble.n	8009e16 <_dtoa_r+0x2f6>
 8009d62:	9302      	str	r3, [sp, #8]
 8009d64:	4699      	mov	r9, r3
 8009d66:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d68:	2200      	movs	r2, #0
 8009d6a:	6072      	str	r2, [r6, #4]
 8009d6c:	2204      	movs	r2, #4
 8009d6e:	f102 0014 	add.w	r0, r2, #20
 8009d72:	4298      	cmp	r0, r3
 8009d74:	6871      	ldr	r1, [r6, #4]
 8009d76:	d953      	bls.n	8009e20 <_dtoa_r+0x300>
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f000 ffde 	bl	800ad3a <_Balloc>
 8009d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d80:	6030      	str	r0, [r6, #0]
 8009d82:	f1b9 0f0e 	cmp.w	r9, #14
 8009d86:	f8d3 b000 	ldr.w	fp, [r3]
 8009d8a:	f200 80e6 	bhi.w	8009f5a <_dtoa_r+0x43a>
 8009d8e:	2d00      	cmp	r5, #0
 8009d90:	f000 80e3 	beq.w	8009f5a <_dtoa_r+0x43a>
 8009d94:	ed9d 7b00 	vldr	d7, [sp]
 8009d98:	f1ba 0f00 	cmp.w	sl, #0
 8009d9c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009da0:	dd74      	ble.n	8009e8c <_dtoa_r+0x36c>
 8009da2:	4a2a      	ldr	r2, [pc, #168]	; (8009e4c <_dtoa_r+0x32c>)
 8009da4:	f00a 030f 	and.w	r3, sl, #15
 8009da8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009dac:	ed93 7b00 	vldr	d7, [r3]
 8009db0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009db4:	06f0      	lsls	r0, r6, #27
 8009db6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009dba:	d565      	bpl.n	8009e88 <_dtoa_r+0x368>
 8009dbc:	4b24      	ldr	r3, [pc, #144]	; (8009e50 <_dtoa_r+0x330>)
 8009dbe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dc2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009dc6:	f7f6 fd41 	bl	800084c <__aeabi_ddiv>
 8009dca:	e9cd 0100 	strd	r0, r1, [sp]
 8009dce:	f006 060f 	and.w	r6, r6, #15
 8009dd2:	2503      	movs	r5, #3
 8009dd4:	4f1e      	ldr	r7, [pc, #120]	; (8009e50 <_dtoa_r+0x330>)
 8009dd6:	e04c      	b.n	8009e72 <_dtoa_r+0x352>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	930a      	str	r3, [sp, #40]	; 0x28
 8009ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dde:	4453      	add	r3, sl
 8009de0:	f103 0901 	add.w	r9, r3, #1
 8009de4:	9302      	str	r3, [sp, #8]
 8009de6:	464b      	mov	r3, r9
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	bfb8      	it	lt
 8009dec:	2301      	movlt	r3, #1
 8009dee:	e7ba      	b.n	8009d66 <_dtoa_r+0x246>
 8009df0:	2300      	movs	r3, #0
 8009df2:	e7b2      	b.n	8009d5a <_dtoa_r+0x23a>
 8009df4:	2300      	movs	r3, #0
 8009df6:	e7f0      	b.n	8009dda <_dtoa_r+0x2ba>
 8009df8:	2501      	movs	r5, #1
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	9306      	str	r3, [sp, #24]
 8009dfe:	950a      	str	r5, [sp, #40]	; 0x28
 8009e00:	f04f 33ff 	mov.w	r3, #4294967295
 8009e04:	9302      	str	r3, [sp, #8]
 8009e06:	4699      	mov	r9, r3
 8009e08:	2200      	movs	r2, #0
 8009e0a:	2312      	movs	r3, #18
 8009e0c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e0e:	e7aa      	b.n	8009d66 <_dtoa_r+0x246>
 8009e10:	2301      	movs	r3, #1
 8009e12:	930a      	str	r3, [sp, #40]	; 0x28
 8009e14:	e7f4      	b.n	8009e00 <_dtoa_r+0x2e0>
 8009e16:	2301      	movs	r3, #1
 8009e18:	9302      	str	r3, [sp, #8]
 8009e1a:	4699      	mov	r9, r3
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	e7f5      	b.n	8009e0c <_dtoa_r+0x2ec>
 8009e20:	3101      	adds	r1, #1
 8009e22:	6071      	str	r1, [r6, #4]
 8009e24:	0052      	lsls	r2, r2, #1
 8009e26:	e7a2      	b.n	8009d6e <_dtoa_r+0x24e>
 8009e28:	636f4361 	.word	0x636f4361
 8009e2c:	3fd287a7 	.word	0x3fd287a7
 8009e30:	8b60c8b3 	.word	0x8b60c8b3
 8009e34:	3fc68a28 	.word	0x3fc68a28
 8009e38:	509f79fb 	.word	0x509f79fb
 8009e3c:	3fd34413 	.word	0x3fd34413
 8009e40:	7ff00000 	.word	0x7ff00000
 8009e44:	0800b94d 	.word	0x0800b94d
 8009e48:	3ff80000 	.word	0x3ff80000
 8009e4c:	0800ba00 	.word	0x0800ba00
 8009e50:	0800b9d8 	.word	0x0800b9d8
 8009e54:	0800b9c9 	.word	0x0800b9c9
 8009e58:	07f1      	lsls	r1, r6, #31
 8009e5a:	d508      	bpl.n	8009e6e <_dtoa_r+0x34e>
 8009e5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e64:	f7f6 fbc8 	bl	80005f8 <__aeabi_dmul>
 8009e68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e6c:	3501      	adds	r5, #1
 8009e6e:	1076      	asrs	r6, r6, #1
 8009e70:	3708      	adds	r7, #8
 8009e72:	2e00      	cmp	r6, #0
 8009e74:	d1f0      	bne.n	8009e58 <_dtoa_r+0x338>
 8009e76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e7e:	f7f6 fce5 	bl	800084c <__aeabi_ddiv>
 8009e82:	e9cd 0100 	strd	r0, r1, [sp]
 8009e86:	e01a      	b.n	8009ebe <_dtoa_r+0x39e>
 8009e88:	2502      	movs	r5, #2
 8009e8a:	e7a3      	b.n	8009dd4 <_dtoa_r+0x2b4>
 8009e8c:	f000 80a0 	beq.w	8009fd0 <_dtoa_r+0x4b0>
 8009e90:	f1ca 0600 	rsb	r6, sl, #0
 8009e94:	4b9f      	ldr	r3, [pc, #636]	; (800a114 <_dtoa_r+0x5f4>)
 8009e96:	4fa0      	ldr	r7, [pc, #640]	; (800a118 <_dtoa_r+0x5f8>)
 8009e98:	f006 020f 	and.w	r2, r6, #15
 8009e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ea8:	f7f6 fba6 	bl	80005f8 <__aeabi_dmul>
 8009eac:	e9cd 0100 	strd	r0, r1, [sp]
 8009eb0:	1136      	asrs	r6, r6, #4
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2502      	movs	r5, #2
 8009eb6:	2e00      	cmp	r6, #0
 8009eb8:	d17f      	bne.n	8009fba <_dtoa_r+0x49a>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e1      	bne.n	8009e82 <_dtoa_r+0x362>
 8009ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 8087 	beq.w	8009fd4 <_dtoa_r+0x4b4>
 8009ec6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	4b93      	ldr	r3, [pc, #588]	; (800a11c <_dtoa_r+0x5fc>)
 8009ece:	4630      	mov	r0, r6
 8009ed0:	4639      	mov	r1, r7
 8009ed2:	f7f6 fe03 	bl	8000adc <__aeabi_dcmplt>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d07c      	beq.n	8009fd4 <_dtoa_r+0x4b4>
 8009eda:	f1b9 0f00 	cmp.w	r9, #0
 8009ede:	d079      	beq.n	8009fd4 <_dtoa_r+0x4b4>
 8009ee0:	9b02      	ldr	r3, [sp, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	dd35      	ble.n	8009f52 <_dtoa_r+0x432>
 8009ee6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009eea:	9308      	str	r3, [sp, #32]
 8009eec:	4639      	mov	r1, r7
 8009eee:	2200      	movs	r2, #0
 8009ef0:	4b8b      	ldr	r3, [pc, #556]	; (800a120 <_dtoa_r+0x600>)
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f7f6 fb80 	bl	80005f8 <__aeabi_dmul>
 8009ef8:	e9cd 0100 	strd	r0, r1, [sp]
 8009efc:	9f02      	ldr	r7, [sp, #8]
 8009efe:	3501      	adds	r5, #1
 8009f00:	4628      	mov	r0, r5
 8009f02:	f7f6 fb0f 	bl	8000524 <__aeabi_i2d>
 8009f06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f0a:	f7f6 fb75 	bl	80005f8 <__aeabi_dmul>
 8009f0e:	2200      	movs	r2, #0
 8009f10:	4b84      	ldr	r3, [pc, #528]	; (800a124 <_dtoa_r+0x604>)
 8009f12:	f7f6 f9bb 	bl	800028c <__adddf3>
 8009f16:	4605      	mov	r5, r0
 8009f18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009f1c:	2f00      	cmp	r7, #0
 8009f1e:	d15d      	bne.n	8009fdc <_dtoa_r+0x4bc>
 8009f20:	2200      	movs	r2, #0
 8009f22:	4b81      	ldr	r3, [pc, #516]	; (800a128 <_dtoa_r+0x608>)
 8009f24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f28:	f7f6 f9ae 	bl	8000288 <__aeabi_dsub>
 8009f2c:	462a      	mov	r2, r5
 8009f2e:	4633      	mov	r3, r6
 8009f30:	e9cd 0100 	strd	r0, r1, [sp]
 8009f34:	f7f6 fdf0 	bl	8000b18 <__aeabi_dcmpgt>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	f040 8288 	bne.w	800a44e <_dtoa_r+0x92e>
 8009f3e:	462a      	mov	r2, r5
 8009f40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009f44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f48:	f7f6 fdc8 	bl	8000adc <__aeabi_dcmplt>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	f040 827c 	bne.w	800a44a <_dtoa_r+0x92a>
 8009f52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f56:	e9cd 2300 	strd	r2, r3, [sp]
 8009f5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f2c0 8150 	blt.w	800a202 <_dtoa_r+0x6e2>
 8009f62:	f1ba 0f0e 	cmp.w	sl, #14
 8009f66:	f300 814c 	bgt.w	800a202 <_dtoa_r+0x6e2>
 8009f6a:	4b6a      	ldr	r3, [pc, #424]	; (800a114 <_dtoa_r+0x5f4>)
 8009f6c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f70:	ed93 7b00 	vldr	d7, [r3]
 8009f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f7c:	f280 80d8 	bge.w	800a130 <_dtoa_r+0x610>
 8009f80:	f1b9 0f00 	cmp.w	r9, #0
 8009f84:	f300 80d4 	bgt.w	800a130 <_dtoa_r+0x610>
 8009f88:	f040 825e 	bne.w	800a448 <_dtoa_r+0x928>
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	4b66      	ldr	r3, [pc, #408]	; (800a128 <_dtoa_r+0x608>)
 8009f90:	ec51 0b17 	vmov	r0, r1, d7
 8009f94:	f7f6 fb30 	bl	80005f8 <__aeabi_dmul>
 8009f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f9c:	f7f6 fdb2 	bl	8000b04 <__aeabi_dcmpge>
 8009fa0:	464f      	mov	r7, r9
 8009fa2:	464e      	mov	r6, r9
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	f040 8234 	bne.w	800a412 <_dtoa_r+0x8f2>
 8009faa:	2331      	movs	r3, #49	; 0x31
 8009fac:	f10b 0501 	add.w	r5, fp, #1
 8009fb0:	f88b 3000 	strb.w	r3, [fp]
 8009fb4:	f10a 0a01 	add.w	sl, sl, #1
 8009fb8:	e22f      	b.n	800a41a <_dtoa_r+0x8fa>
 8009fba:	07f2      	lsls	r2, r6, #31
 8009fbc:	d505      	bpl.n	8009fca <_dtoa_r+0x4aa>
 8009fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc2:	f7f6 fb19 	bl	80005f8 <__aeabi_dmul>
 8009fc6:	3501      	adds	r5, #1
 8009fc8:	2301      	movs	r3, #1
 8009fca:	1076      	asrs	r6, r6, #1
 8009fcc:	3708      	adds	r7, #8
 8009fce:	e772      	b.n	8009eb6 <_dtoa_r+0x396>
 8009fd0:	2502      	movs	r5, #2
 8009fd2:	e774      	b.n	8009ebe <_dtoa_r+0x39e>
 8009fd4:	f8cd a020 	str.w	sl, [sp, #32]
 8009fd8:	464f      	mov	r7, r9
 8009fda:	e791      	b.n	8009f00 <_dtoa_r+0x3e0>
 8009fdc:	4b4d      	ldr	r3, [pc, #308]	; (800a114 <_dtoa_r+0x5f4>)
 8009fde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fe2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d047      	beq.n	800a07c <_dtoa_r+0x55c>
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	494e      	ldr	r1, [pc, #312]	; (800a12c <_dtoa_r+0x60c>)
 8009ff4:	f7f6 fc2a 	bl	800084c <__aeabi_ddiv>
 8009ff8:	462a      	mov	r2, r5
 8009ffa:	4633      	mov	r3, r6
 8009ffc:	f7f6 f944 	bl	8000288 <__aeabi_dsub>
 800a000:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a004:	465d      	mov	r5, fp
 800a006:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a00a:	f7f6 fda5 	bl	8000b58 <__aeabi_d2iz>
 800a00e:	4606      	mov	r6, r0
 800a010:	f7f6 fa88 	bl	8000524 <__aeabi_i2d>
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a01c:	f7f6 f934 	bl	8000288 <__aeabi_dsub>
 800a020:	3630      	adds	r6, #48	; 0x30
 800a022:	f805 6b01 	strb.w	r6, [r5], #1
 800a026:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a02a:	e9cd 0100 	strd	r0, r1, [sp]
 800a02e:	f7f6 fd55 	bl	8000adc <__aeabi_dcmplt>
 800a032:	2800      	cmp	r0, #0
 800a034:	d163      	bne.n	800a0fe <_dtoa_r+0x5de>
 800a036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a03a:	2000      	movs	r0, #0
 800a03c:	4937      	ldr	r1, [pc, #220]	; (800a11c <_dtoa_r+0x5fc>)
 800a03e:	f7f6 f923 	bl	8000288 <__aeabi_dsub>
 800a042:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a046:	f7f6 fd49 	bl	8000adc <__aeabi_dcmplt>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	f040 80b7 	bne.w	800a1be <_dtoa_r+0x69e>
 800a050:	eba5 030b 	sub.w	r3, r5, fp
 800a054:	429f      	cmp	r7, r3
 800a056:	f77f af7c 	ble.w	8009f52 <_dtoa_r+0x432>
 800a05a:	2200      	movs	r2, #0
 800a05c:	4b30      	ldr	r3, [pc, #192]	; (800a120 <_dtoa_r+0x600>)
 800a05e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a062:	f7f6 fac9 	bl	80005f8 <__aeabi_dmul>
 800a066:	2200      	movs	r2, #0
 800a068:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a06c:	4b2c      	ldr	r3, [pc, #176]	; (800a120 <_dtoa_r+0x600>)
 800a06e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a072:	f7f6 fac1 	bl	80005f8 <__aeabi_dmul>
 800a076:	e9cd 0100 	strd	r0, r1, [sp]
 800a07a:	e7c4      	b.n	800a006 <_dtoa_r+0x4e6>
 800a07c:	462a      	mov	r2, r5
 800a07e:	4633      	mov	r3, r6
 800a080:	f7f6 faba 	bl	80005f8 <__aeabi_dmul>
 800a084:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a088:	eb0b 0507 	add.w	r5, fp, r7
 800a08c:	465e      	mov	r6, fp
 800a08e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a092:	f7f6 fd61 	bl	8000b58 <__aeabi_d2iz>
 800a096:	4607      	mov	r7, r0
 800a098:	f7f6 fa44 	bl	8000524 <__aeabi_i2d>
 800a09c:	3730      	adds	r7, #48	; 0x30
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0a6:	f7f6 f8ef 	bl	8000288 <__aeabi_dsub>
 800a0aa:	f806 7b01 	strb.w	r7, [r6], #1
 800a0ae:	42ae      	cmp	r6, r5
 800a0b0:	e9cd 0100 	strd	r0, r1, [sp]
 800a0b4:	f04f 0200 	mov.w	r2, #0
 800a0b8:	d126      	bne.n	800a108 <_dtoa_r+0x5e8>
 800a0ba:	4b1c      	ldr	r3, [pc, #112]	; (800a12c <_dtoa_r+0x60c>)
 800a0bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0c0:	f7f6 f8e4 	bl	800028c <__adddf3>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0cc:	f7f6 fd24 	bl	8000b18 <__aeabi_dcmpgt>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d174      	bne.n	800a1be <_dtoa_r+0x69e>
 800a0d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a0d8:	2000      	movs	r0, #0
 800a0da:	4914      	ldr	r1, [pc, #80]	; (800a12c <_dtoa_r+0x60c>)
 800a0dc:	f7f6 f8d4 	bl	8000288 <__aeabi_dsub>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0e8:	f7f6 fcf8 	bl	8000adc <__aeabi_dcmplt>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	f43f af30 	beq.w	8009f52 <_dtoa_r+0x432>
 800a0f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0f6:	2b30      	cmp	r3, #48	; 0x30
 800a0f8:	f105 32ff 	add.w	r2, r5, #4294967295
 800a0fc:	d002      	beq.n	800a104 <_dtoa_r+0x5e4>
 800a0fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a102:	e04a      	b.n	800a19a <_dtoa_r+0x67a>
 800a104:	4615      	mov	r5, r2
 800a106:	e7f4      	b.n	800a0f2 <_dtoa_r+0x5d2>
 800a108:	4b05      	ldr	r3, [pc, #20]	; (800a120 <_dtoa_r+0x600>)
 800a10a:	f7f6 fa75 	bl	80005f8 <__aeabi_dmul>
 800a10e:	e9cd 0100 	strd	r0, r1, [sp]
 800a112:	e7bc      	b.n	800a08e <_dtoa_r+0x56e>
 800a114:	0800ba00 	.word	0x0800ba00
 800a118:	0800b9d8 	.word	0x0800b9d8
 800a11c:	3ff00000 	.word	0x3ff00000
 800a120:	40240000 	.word	0x40240000
 800a124:	401c0000 	.word	0x401c0000
 800a128:	40140000 	.word	0x40140000
 800a12c:	3fe00000 	.word	0x3fe00000
 800a130:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a134:	465d      	mov	r5, fp
 800a136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a13a:	4630      	mov	r0, r6
 800a13c:	4639      	mov	r1, r7
 800a13e:	f7f6 fb85 	bl	800084c <__aeabi_ddiv>
 800a142:	f7f6 fd09 	bl	8000b58 <__aeabi_d2iz>
 800a146:	4680      	mov	r8, r0
 800a148:	f7f6 f9ec 	bl	8000524 <__aeabi_i2d>
 800a14c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a150:	f7f6 fa52 	bl	80005f8 <__aeabi_dmul>
 800a154:	4602      	mov	r2, r0
 800a156:	460b      	mov	r3, r1
 800a158:	4630      	mov	r0, r6
 800a15a:	4639      	mov	r1, r7
 800a15c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a160:	f7f6 f892 	bl	8000288 <__aeabi_dsub>
 800a164:	f805 6b01 	strb.w	r6, [r5], #1
 800a168:	eba5 060b 	sub.w	r6, r5, fp
 800a16c:	45b1      	cmp	r9, r6
 800a16e:	4602      	mov	r2, r0
 800a170:	460b      	mov	r3, r1
 800a172:	d139      	bne.n	800a1e8 <_dtoa_r+0x6c8>
 800a174:	f7f6 f88a 	bl	800028c <__adddf3>
 800a178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a17c:	4606      	mov	r6, r0
 800a17e:	460f      	mov	r7, r1
 800a180:	f7f6 fcca 	bl	8000b18 <__aeabi_dcmpgt>
 800a184:	b9c8      	cbnz	r0, 800a1ba <_dtoa_r+0x69a>
 800a186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a18a:	4630      	mov	r0, r6
 800a18c:	4639      	mov	r1, r7
 800a18e:	f7f6 fc9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a192:	b110      	cbz	r0, 800a19a <_dtoa_r+0x67a>
 800a194:	f018 0f01 	tst.w	r8, #1
 800a198:	d10f      	bne.n	800a1ba <_dtoa_r+0x69a>
 800a19a:	9904      	ldr	r1, [sp, #16]
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 fe00 	bl	800ada2 <_Bfree>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1a6:	702b      	strb	r3, [r5, #0]
 800a1a8:	f10a 0301 	add.w	r3, sl, #1
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 8241 	beq.w	800a638 <_dtoa_r+0xb18>
 800a1b6:	601d      	str	r5, [r3, #0]
 800a1b8:	e23e      	b.n	800a638 <_dtoa_r+0xb18>
 800a1ba:	f8cd a020 	str.w	sl, [sp, #32]
 800a1be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1c2:	2a39      	cmp	r2, #57	; 0x39
 800a1c4:	f105 33ff 	add.w	r3, r5, #4294967295
 800a1c8:	d108      	bne.n	800a1dc <_dtoa_r+0x6bc>
 800a1ca:	459b      	cmp	fp, r3
 800a1cc:	d10a      	bne.n	800a1e4 <_dtoa_r+0x6c4>
 800a1ce:	9b08      	ldr	r3, [sp, #32]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	9308      	str	r3, [sp, #32]
 800a1d4:	2330      	movs	r3, #48	; 0x30
 800a1d6:	f88b 3000 	strb.w	r3, [fp]
 800a1da:	465b      	mov	r3, fp
 800a1dc:	781a      	ldrb	r2, [r3, #0]
 800a1de:	3201      	adds	r2, #1
 800a1e0:	701a      	strb	r2, [r3, #0]
 800a1e2:	e78c      	b.n	800a0fe <_dtoa_r+0x5de>
 800a1e4:	461d      	mov	r5, r3
 800a1e6:	e7ea      	b.n	800a1be <_dtoa_r+0x69e>
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	4b9b      	ldr	r3, [pc, #620]	; (800a458 <_dtoa_r+0x938>)
 800a1ec:	f7f6 fa04 	bl	80005f8 <__aeabi_dmul>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	460f      	mov	r7, r1
 800a1f8:	f7f6 fc66 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d09a      	beq.n	800a136 <_dtoa_r+0x616>
 800a200:	e7cb      	b.n	800a19a <_dtoa_r+0x67a>
 800a202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a204:	2a00      	cmp	r2, #0
 800a206:	f000 808b 	beq.w	800a320 <_dtoa_r+0x800>
 800a20a:	9a06      	ldr	r2, [sp, #24]
 800a20c:	2a01      	cmp	r2, #1
 800a20e:	dc6e      	bgt.n	800a2ee <_dtoa_r+0x7ce>
 800a210:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a212:	2a00      	cmp	r2, #0
 800a214:	d067      	beq.n	800a2e6 <_dtoa_r+0x7c6>
 800a216:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a21a:	9f07      	ldr	r7, [sp, #28]
 800a21c:	9d05      	ldr	r5, [sp, #20]
 800a21e:	9a05      	ldr	r2, [sp, #20]
 800a220:	2101      	movs	r1, #1
 800a222:	441a      	add	r2, r3
 800a224:	4620      	mov	r0, r4
 800a226:	9205      	str	r2, [sp, #20]
 800a228:	4498      	add	r8, r3
 800a22a:	f000 fe98 	bl	800af5e <__i2b>
 800a22e:	4606      	mov	r6, r0
 800a230:	2d00      	cmp	r5, #0
 800a232:	dd0c      	ble.n	800a24e <_dtoa_r+0x72e>
 800a234:	f1b8 0f00 	cmp.w	r8, #0
 800a238:	dd09      	ble.n	800a24e <_dtoa_r+0x72e>
 800a23a:	4545      	cmp	r5, r8
 800a23c:	9a05      	ldr	r2, [sp, #20]
 800a23e:	462b      	mov	r3, r5
 800a240:	bfa8      	it	ge
 800a242:	4643      	movge	r3, r8
 800a244:	1ad2      	subs	r2, r2, r3
 800a246:	9205      	str	r2, [sp, #20]
 800a248:	1aed      	subs	r5, r5, r3
 800a24a:	eba8 0803 	sub.w	r8, r8, r3
 800a24e:	9b07      	ldr	r3, [sp, #28]
 800a250:	b1eb      	cbz	r3, 800a28e <_dtoa_r+0x76e>
 800a252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a254:	2b00      	cmp	r3, #0
 800a256:	d067      	beq.n	800a328 <_dtoa_r+0x808>
 800a258:	b18f      	cbz	r7, 800a27e <_dtoa_r+0x75e>
 800a25a:	4631      	mov	r1, r6
 800a25c:	463a      	mov	r2, r7
 800a25e:	4620      	mov	r0, r4
 800a260:	f000 ff1c 	bl	800b09c <__pow5mult>
 800a264:	9a04      	ldr	r2, [sp, #16]
 800a266:	4601      	mov	r1, r0
 800a268:	4606      	mov	r6, r0
 800a26a:	4620      	mov	r0, r4
 800a26c:	f000 fe80 	bl	800af70 <__multiply>
 800a270:	9904      	ldr	r1, [sp, #16]
 800a272:	9008      	str	r0, [sp, #32]
 800a274:	4620      	mov	r0, r4
 800a276:	f000 fd94 	bl	800ada2 <_Bfree>
 800a27a:	9b08      	ldr	r3, [sp, #32]
 800a27c:	9304      	str	r3, [sp, #16]
 800a27e:	9b07      	ldr	r3, [sp, #28]
 800a280:	1bda      	subs	r2, r3, r7
 800a282:	d004      	beq.n	800a28e <_dtoa_r+0x76e>
 800a284:	9904      	ldr	r1, [sp, #16]
 800a286:	4620      	mov	r0, r4
 800a288:	f000 ff08 	bl	800b09c <__pow5mult>
 800a28c:	9004      	str	r0, [sp, #16]
 800a28e:	2101      	movs	r1, #1
 800a290:	4620      	mov	r0, r4
 800a292:	f000 fe64 	bl	800af5e <__i2b>
 800a296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a298:	4607      	mov	r7, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f000 81d0 	beq.w	800a640 <_dtoa_r+0xb20>
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	4601      	mov	r1, r0
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f000 fef9 	bl	800b09c <__pow5mult>
 800a2aa:	9b06      	ldr	r3, [sp, #24]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	4607      	mov	r7, r0
 800a2b0:	dc40      	bgt.n	800a334 <_dtoa_r+0x814>
 800a2b2:	9b00      	ldr	r3, [sp, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d139      	bne.n	800a32c <_dtoa_r+0x80c>
 800a2b8:	9b01      	ldr	r3, [sp, #4]
 800a2ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d136      	bne.n	800a330 <_dtoa_r+0x810>
 800a2c2:	9b01      	ldr	r3, [sp, #4]
 800a2c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2c8:	0d1b      	lsrs	r3, r3, #20
 800a2ca:	051b      	lsls	r3, r3, #20
 800a2cc:	b12b      	cbz	r3, 800a2da <_dtoa_r+0x7ba>
 800a2ce:	9b05      	ldr	r3, [sp, #20]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	9305      	str	r3, [sp, #20]
 800a2d4:	f108 0801 	add.w	r8, r8, #1
 800a2d8:	2301      	movs	r3, #1
 800a2da:	9307      	str	r3, [sp, #28]
 800a2dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d12a      	bne.n	800a338 <_dtoa_r+0x818>
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	e030      	b.n	800a348 <_dtoa_r+0x828>
 800a2e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2ec:	e795      	b.n	800a21a <_dtoa_r+0x6fa>
 800a2ee:	9b07      	ldr	r3, [sp, #28]
 800a2f0:	f109 37ff 	add.w	r7, r9, #4294967295
 800a2f4:	42bb      	cmp	r3, r7
 800a2f6:	bfbf      	itttt	lt
 800a2f8:	9b07      	ldrlt	r3, [sp, #28]
 800a2fa:	9707      	strlt	r7, [sp, #28]
 800a2fc:	1afa      	sublt	r2, r7, r3
 800a2fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a300:	bfbb      	ittet	lt
 800a302:	189b      	addlt	r3, r3, r2
 800a304:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a306:	1bdf      	subge	r7, r3, r7
 800a308:	2700      	movlt	r7, #0
 800a30a:	f1b9 0f00 	cmp.w	r9, #0
 800a30e:	bfb5      	itete	lt
 800a310:	9b05      	ldrlt	r3, [sp, #20]
 800a312:	9d05      	ldrge	r5, [sp, #20]
 800a314:	eba3 0509 	sublt.w	r5, r3, r9
 800a318:	464b      	movge	r3, r9
 800a31a:	bfb8      	it	lt
 800a31c:	2300      	movlt	r3, #0
 800a31e:	e77e      	b.n	800a21e <_dtoa_r+0x6fe>
 800a320:	9f07      	ldr	r7, [sp, #28]
 800a322:	9d05      	ldr	r5, [sp, #20]
 800a324:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a326:	e783      	b.n	800a230 <_dtoa_r+0x710>
 800a328:	9a07      	ldr	r2, [sp, #28]
 800a32a:	e7ab      	b.n	800a284 <_dtoa_r+0x764>
 800a32c:	2300      	movs	r3, #0
 800a32e:	e7d4      	b.n	800a2da <_dtoa_r+0x7ba>
 800a330:	9b00      	ldr	r3, [sp, #0]
 800a332:	e7d2      	b.n	800a2da <_dtoa_r+0x7ba>
 800a334:	2300      	movs	r3, #0
 800a336:	9307      	str	r3, [sp, #28]
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a33e:	6918      	ldr	r0, [r3, #16]
 800a340:	f000 fdbf 	bl	800aec2 <__hi0bits>
 800a344:	f1c0 0020 	rsb	r0, r0, #32
 800a348:	4440      	add	r0, r8
 800a34a:	f010 001f 	ands.w	r0, r0, #31
 800a34e:	d047      	beq.n	800a3e0 <_dtoa_r+0x8c0>
 800a350:	f1c0 0320 	rsb	r3, r0, #32
 800a354:	2b04      	cmp	r3, #4
 800a356:	dd3b      	ble.n	800a3d0 <_dtoa_r+0x8b0>
 800a358:	9b05      	ldr	r3, [sp, #20]
 800a35a:	f1c0 001c 	rsb	r0, r0, #28
 800a35e:	4403      	add	r3, r0
 800a360:	9305      	str	r3, [sp, #20]
 800a362:	4405      	add	r5, r0
 800a364:	4480      	add	r8, r0
 800a366:	9b05      	ldr	r3, [sp, #20]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	dd05      	ble.n	800a378 <_dtoa_r+0x858>
 800a36c:	461a      	mov	r2, r3
 800a36e:	9904      	ldr	r1, [sp, #16]
 800a370:	4620      	mov	r0, r4
 800a372:	f000 fee1 	bl	800b138 <__lshift>
 800a376:	9004      	str	r0, [sp, #16]
 800a378:	f1b8 0f00 	cmp.w	r8, #0
 800a37c:	dd05      	ble.n	800a38a <_dtoa_r+0x86a>
 800a37e:	4639      	mov	r1, r7
 800a380:	4642      	mov	r2, r8
 800a382:	4620      	mov	r0, r4
 800a384:	f000 fed8 	bl	800b138 <__lshift>
 800a388:	4607      	mov	r7, r0
 800a38a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a38c:	b353      	cbz	r3, 800a3e4 <_dtoa_r+0x8c4>
 800a38e:	4639      	mov	r1, r7
 800a390:	9804      	ldr	r0, [sp, #16]
 800a392:	f000 ff25 	bl	800b1e0 <__mcmp>
 800a396:	2800      	cmp	r0, #0
 800a398:	da24      	bge.n	800a3e4 <_dtoa_r+0x8c4>
 800a39a:	2300      	movs	r3, #0
 800a39c:	220a      	movs	r2, #10
 800a39e:	9904      	ldr	r1, [sp, #16]
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 fd15 	bl	800add0 <__multadd>
 800a3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a8:	9004      	str	r0, [sp, #16]
 800a3aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f000 814d 	beq.w	800a64e <_dtoa_r+0xb2e>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	220a      	movs	r2, #10
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f000 fd08 	bl	800add0 <__multadd>
 800a3c0:	9b02      	ldr	r3, [sp, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	dc4f      	bgt.n	800a468 <_dtoa_r+0x948>
 800a3c8:	9b06      	ldr	r3, [sp, #24]
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	dd4c      	ble.n	800a468 <_dtoa_r+0x948>
 800a3ce:	e011      	b.n	800a3f4 <_dtoa_r+0x8d4>
 800a3d0:	d0c9      	beq.n	800a366 <_dtoa_r+0x846>
 800a3d2:	9a05      	ldr	r2, [sp, #20]
 800a3d4:	331c      	adds	r3, #28
 800a3d6:	441a      	add	r2, r3
 800a3d8:	9205      	str	r2, [sp, #20]
 800a3da:	441d      	add	r5, r3
 800a3dc:	4498      	add	r8, r3
 800a3de:	e7c2      	b.n	800a366 <_dtoa_r+0x846>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	e7f6      	b.n	800a3d2 <_dtoa_r+0x8b2>
 800a3e4:	f1b9 0f00 	cmp.w	r9, #0
 800a3e8:	dc38      	bgt.n	800a45c <_dtoa_r+0x93c>
 800a3ea:	9b06      	ldr	r3, [sp, #24]
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	dd35      	ble.n	800a45c <_dtoa_r+0x93c>
 800a3f0:	f8cd 9008 	str.w	r9, [sp, #8]
 800a3f4:	9b02      	ldr	r3, [sp, #8]
 800a3f6:	b963      	cbnz	r3, 800a412 <_dtoa_r+0x8f2>
 800a3f8:	4639      	mov	r1, r7
 800a3fa:	2205      	movs	r2, #5
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f000 fce7 	bl	800add0 <__multadd>
 800a402:	4601      	mov	r1, r0
 800a404:	4607      	mov	r7, r0
 800a406:	9804      	ldr	r0, [sp, #16]
 800a408:	f000 feea 	bl	800b1e0 <__mcmp>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	f73f adcc 	bgt.w	8009faa <_dtoa_r+0x48a>
 800a412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a414:	465d      	mov	r5, fp
 800a416:	ea6f 0a03 	mvn.w	sl, r3
 800a41a:	f04f 0900 	mov.w	r9, #0
 800a41e:	4639      	mov	r1, r7
 800a420:	4620      	mov	r0, r4
 800a422:	f000 fcbe 	bl	800ada2 <_Bfree>
 800a426:	2e00      	cmp	r6, #0
 800a428:	f43f aeb7 	beq.w	800a19a <_dtoa_r+0x67a>
 800a42c:	f1b9 0f00 	cmp.w	r9, #0
 800a430:	d005      	beq.n	800a43e <_dtoa_r+0x91e>
 800a432:	45b1      	cmp	r9, r6
 800a434:	d003      	beq.n	800a43e <_dtoa_r+0x91e>
 800a436:	4649      	mov	r1, r9
 800a438:	4620      	mov	r0, r4
 800a43a:	f000 fcb2 	bl	800ada2 <_Bfree>
 800a43e:	4631      	mov	r1, r6
 800a440:	4620      	mov	r0, r4
 800a442:	f000 fcae 	bl	800ada2 <_Bfree>
 800a446:	e6a8      	b.n	800a19a <_dtoa_r+0x67a>
 800a448:	2700      	movs	r7, #0
 800a44a:	463e      	mov	r6, r7
 800a44c:	e7e1      	b.n	800a412 <_dtoa_r+0x8f2>
 800a44e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a452:	463e      	mov	r6, r7
 800a454:	e5a9      	b.n	8009faa <_dtoa_r+0x48a>
 800a456:	bf00      	nop
 800a458:	40240000 	.word	0x40240000
 800a45c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a45e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 80fa 	beq.w	800a65c <_dtoa_r+0xb3c>
 800a468:	2d00      	cmp	r5, #0
 800a46a:	dd05      	ble.n	800a478 <_dtoa_r+0x958>
 800a46c:	4631      	mov	r1, r6
 800a46e:	462a      	mov	r2, r5
 800a470:	4620      	mov	r0, r4
 800a472:	f000 fe61 	bl	800b138 <__lshift>
 800a476:	4606      	mov	r6, r0
 800a478:	9b07      	ldr	r3, [sp, #28]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d04c      	beq.n	800a518 <_dtoa_r+0x9f8>
 800a47e:	6871      	ldr	r1, [r6, #4]
 800a480:	4620      	mov	r0, r4
 800a482:	f000 fc5a 	bl	800ad3a <_Balloc>
 800a486:	6932      	ldr	r2, [r6, #16]
 800a488:	3202      	adds	r2, #2
 800a48a:	4605      	mov	r5, r0
 800a48c:	0092      	lsls	r2, r2, #2
 800a48e:	f106 010c 	add.w	r1, r6, #12
 800a492:	300c      	adds	r0, #12
 800a494:	f000 fc44 	bl	800ad20 <memcpy>
 800a498:	2201      	movs	r2, #1
 800a49a:	4629      	mov	r1, r5
 800a49c:	4620      	mov	r0, r4
 800a49e:	f000 fe4b 	bl	800b138 <__lshift>
 800a4a2:	9b00      	ldr	r3, [sp, #0]
 800a4a4:	f8cd b014 	str.w	fp, [sp, #20]
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	46b1      	mov	r9, r6
 800a4ae:	9307      	str	r3, [sp, #28]
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	9804      	ldr	r0, [sp, #16]
 800a4b6:	f7ff faa7 	bl	8009a08 <quorem>
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	4605      	mov	r5, r0
 800a4be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a4c2:	9804      	ldr	r0, [sp, #16]
 800a4c4:	f000 fe8c 	bl	800b1e0 <__mcmp>
 800a4c8:	4632      	mov	r2, r6
 800a4ca:	9000      	str	r0, [sp, #0]
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f000 fea0 	bl	800b214 <__mdiff>
 800a4d4:	68c3      	ldr	r3, [r0, #12]
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	bb03      	cbnz	r3, 800a51c <_dtoa_r+0x9fc>
 800a4da:	4601      	mov	r1, r0
 800a4dc:	9008      	str	r0, [sp, #32]
 800a4de:	9804      	ldr	r0, [sp, #16]
 800a4e0:	f000 fe7e 	bl	800b1e0 <__mcmp>
 800a4e4:	9a08      	ldr	r2, [sp, #32]
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	9308      	str	r3, [sp, #32]
 800a4ee:	f000 fc58 	bl	800ada2 <_Bfree>
 800a4f2:	9b08      	ldr	r3, [sp, #32]
 800a4f4:	b9a3      	cbnz	r3, 800a520 <_dtoa_r+0xa00>
 800a4f6:	9a06      	ldr	r2, [sp, #24]
 800a4f8:	b992      	cbnz	r2, 800a520 <_dtoa_r+0xa00>
 800a4fa:	9a07      	ldr	r2, [sp, #28]
 800a4fc:	b982      	cbnz	r2, 800a520 <_dtoa_r+0xa00>
 800a4fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a502:	d029      	beq.n	800a558 <_dtoa_r+0xa38>
 800a504:	9b00      	ldr	r3, [sp, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	dd01      	ble.n	800a50e <_dtoa_r+0x9ee>
 800a50a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a50e:	9b05      	ldr	r3, [sp, #20]
 800a510:	1c5d      	adds	r5, r3, #1
 800a512:	f883 8000 	strb.w	r8, [r3]
 800a516:	e782      	b.n	800a41e <_dtoa_r+0x8fe>
 800a518:	4630      	mov	r0, r6
 800a51a:	e7c2      	b.n	800a4a2 <_dtoa_r+0x982>
 800a51c:	2301      	movs	r3, #1
 800a51e:	e7e3      	b.n	800a4e8 <_dtoa_r+0x9c8>
 800a520:	9a00      	ldr	r2, [sp, #0]
 800a522:	2a00      	cmp	r2, #0
 800a524:	db04      	blt.n	800a530 <_dtoa_r+0xa10>
 800a526:	d125      	bne.n	800a574 <_dtoa_r+0xa54>
 800a528:	9a06      	ldr	r2, [sp, #24]
 800a52a:	bb1a      	cbnz	r2, 800a574 <_dtoa_r+0xa54>
 800a52c:	9a07      	ldr	r2, [sp, #28]
 800a52e:	bb0a      	cbnz	r2, 800a574 <_dtoa_r+0xa54>
 800a530:	2b00      	cmp	r3, #0
 800a532:	ddec      	ble.n	800a50e <_dtoa_r+0x9ee>
 800a534:	2201      	movs	r2, #1
 800a536:	9904      	ldr	r1, [sp, #16]
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 fdfd 	bl	800b138 <__lshift>
 800a53e:	4639      	mov	r1, r7
 800a540:	9004      	str	r0, [sp, #16]
 800a542:	f000 fe4d 	bl	800b1e0 <__mcmp>
 800a546:	2800      	cmp	r0, #0
 800a548:	dc03      	bgt.n	800a552 <_dtoa_r+0xa32>
 800a54a:	d1e0      	bne.n	800a50e <_dtoa_r+0x9ee>
 800a54c:	f018 0f01 	tst.w	r8, #1
 800a550:	d0dd      	beq.n	800a50e <_dtoa_r+0x9ee>
 800a552:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a556:	d1d8      	bne.n	800a50a <_dtoa_r+0x9ea>
 800a558:	9b05      	ldr	r3, [sp, #20]
 800a55a:	9a05      	ldr	r2, [sp, #20]
 800a55c:	1c5d      	adds	r5, r3, #1
 800a55e:	2339      	movs	r3, #57	; 0x39
 800a560:	7013      	strb	r3, [r2, #0]
 800a562:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a566:	2b39      	cmp	r3, #57	; 0x39
 800a568:	f105 32ff 	add.w	r2, r5, #4294967295
 800a56c:	d04f      	beq.n	800a60e <_dtoa_r+0xaee>
 800a56e:	3301      	adds	r3, #1
 800a570:	7013      	strb	r3, [r2, #0]
 800a572:	e754      	b.n	800a41e <_dtoa_r+0x8fe>
 800a574:	9a05      	ldr	r2, [sp, #20]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f102 0501 	add.w	r5, r2, #1
 800a57c:	dd06      	ble.n	800a58c <_dtoa_r+0xa6c>
 800a57e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a582:	d0e9      	beq.n	800a558 <_dtoa_r+0xa38>
 800a584:	f108 0801 	add.w	r8, r8, #1
 800a588:	9b05      	ldr	r3, [sp, #20]
 800a58a:	e7c2      	b.n	800a512 <_dtoa_r+0x9f2>
 800a58c:	9a02      	ldr	r2, [sp, #8]
 800a58e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a592:	eba5 030b 	sub.w	r3, r5, fp
 800a596:	4293      	cmp	r3, r2
 800a598:	d021      	beq.n	800a5de <_dtoa_r+0xabe>
 800a59a:	2300      	movs	r3, #0
 800a59c:	220a      	movs	r2, #10
 800a59e:	9904      	ldr	r1, [sp, #16]
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f000 fc15 	bl	800add0 <__multadd>
 800a5a6:	45b1      	cmp	r9, r6
 800a5a8:	9004      	str	r0, [sp, #16]
 800a5aa:	f04f 0300 	mov.w	r3, #0
 800a5ae:	f04f 020a 	mov.w	r2, #10
 800a5b2:	4649      	mov	r1, r9
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	d105      	bne.n	800a5c4 <_dtoa_r+0xaa4>
 800a5b8:	f000 fc0a 	bl	800add0 <__multadd>
 800a5bc:	4681      	mov	r9, r0
 800a5be:	4606      	mov	r6, r0
 800a5c0:	9505      	str	r5, [sp, #20]
 800a5c2:	e776      	b.n	800a4b2 <_dtoa_r+0x992>
 800a5c4:	f000 fc04 	bl	800add0 <__multadd>
 800a5c8:	4631      	mov	r1, r6
 800a5ca:	4681      	mov	r9, r0
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	220a      	movs	r2, #10
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 fbfd 	bl	800add0 <__multadd>
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	e7f2      	b.n	800a5c0 <_dtoa_r+0xaa0>
 800a5da:	f04f 0900 	mov.w	r9, #0
 800a5de:	2201      	movs	r2, #1
 800a5e0:	9904      	ldr	r1, [sp, #16]
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 fda8 	bl	800b138 <__lshift>
 800a5e8:	4639      	mov	r1, r7
 800a5ea:	9004      	str	r0, [sp, #16]
 800a5ec:	f000 fdf8 	bl	800b1e0 <__mcmp>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	dcb6      	bgt.n	800a562 <_dtoa_r+0xa42>
 800a5f4:	d102      	bne.n	800a5fc <_dtoa_r+0xadc>
 800a5f6:	f018 0f01 	tst.w	r8, #1
 800a5fa:	d1b2      	bne.n	800a562 <_dtoa_r+0xa42>
 800a5fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a600:	2b30      	cmp	r3, #48	; 0x30
 800a602:	f105 32ff 	add.w	r2, r5, #4294967295
 800a606:	f47f af0a 	bne.w	800a41e <_dtoa_r+0x8fe>
 800a60a:	4615      	mov	r5, r2
 800a60c:	e7f6      	b.n	800a5fc <_dtoa_r+0xadc>
 800a60e:	4593      	cmp	fp, r2
 800a610:	d105      	bne.n	800a61e <_dtoa_r+0xafe>
 800a612:	2331      	movs	r3, #49	; 0x31
 800a614:	f10a 0a01 	add.w	sl, sl, #1
 800a618:	f88b 3000 	strb.w	r3, [fp]
 800a61c:	e6ff      	b.n	800a41e <_dtoa_r+0x8fe>
 800a61e:	4615      	mov	r5, r2
 800a620:	e79f      	b.n	800a562 <_dtoa_r+0xa42>
 800a622:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a688 <_dtoa_r+0xb68>
 800a626:	e007      	b.n	800a638 <_dtoa_r+0xb18>
 800a628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a62a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a68c <_dtoa_r+0xb6c>
 800a62e:	b11b      	cbz	r3, 800a638 <_dtoa_r+0xb18>
 800a630:	f10b 0308 	add.w	r3, fp, #8
 800a634:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	4658      	mov	r0, fp
 800a63a:	b017      	add	sp, #92	; 0x5c
 800a63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a640:	9b06      	ldr	r3, [sp, #24]
 800a642:	2b01      	cmp	r3, #1
 800a644:	f77f ae35 	ble.w	800a2b2 <_dtoa_r+0x792>
 800a648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a64a:	9307      	str	r3, [sp, #28]
 800a64c:	e649      	b.n	800a2e2 <_dtoa_r+0x7c2>
 800a64e:	9b02      	ldr	r3, [sp, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	dc03      	bgt.n	800a65c <_dtoa_r+0xb3c>
 800a654:	9b06      	ldr	r3, [sp, #24]
 800a656:	2b02      	cmp	r3, #2
 800a658:	f73f aecc 	bgt.w	800a3f4 <_dtoa_r+0x8d4>
 800a65c:	465d      	mov	r5, fp
 800a65e:	4639      	mov	r1, r7
 800a660:	9804      	ldr	r0, [sp, #16]
 800a662:	f7ff f9d1 	bl	8009a08 <quorem>
 800a666:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a66a:	f805 8b01 	strb.w	r8, [r5], #1
 800a66e:	9a02      	ldr	r2, [sp, #8]
 800a670:	eba5 030b 	sub.w	r3, r5, fp
 800a674:	429a      	cmp	r2, r3
 800a676:	ddb0      	ble.n	800a5da <_dtoa_r+0xaba>
 800a678:	2300      	movs	r3, #0
 800a67a:	220a      	movs	r2, #10
 800a67c:	9904      	ldr	r1, [sp, #16]
 800a67e:	4620      	mov	r0, r4
 800a680:	f000 fba6 	bl	800add0 <__multadd>
 800a684:	9004      	str	r0, [sp, #16]
 800a686:	e7ea      	b.n	800a65e <_dtoa_r+0xb3e>
 800a688:	0800b94c 	.word	0x0800b94c
 800a68c:	0800b9c0 	.word	0x0800b9c0

0800a690 <rshift>:
 800a690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a692:	6906      	ldr	r6, [r0, #16]
 800a694:	114b      	asrs	r3, r1, #5
 800a696:	429e      	cmp	r6, r3
 800a698:	f100 0414 	add.w	r4, r0, #20
 800a69c:	dd30      	ble.n	800a700 <rshift+0x70>
 800a69e:	f011 011f 	ands.w	r1, r1, #31
 800a6a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a6a6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a6aa:	d108      	bne.n	800a6be <rshift+0x2e>
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	42b2      	cmp	r2, r6
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	d211      	bcs.n	800a6d8 <rshift+0x48>
 800a6b4:	f852 3b04 	ldr.w	r3, [r2], #4
 800a6b8:	f841 3b04 	str.w	r3, [r1], #4
 800a6bc:	e7f7      	b.n	800a6ae <rshift+0x1e>
 800a6be:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a6c2:	f1c1 0c20 	rsb	ip, r1, #32
 800a6c6:	40cd      	lsrs	r5, r1
 800a6c8:	3204      	adds	r2, #4
 800a6ca:	4623      	mov	r3, r4
 800a6cc:	42b2      	cmp	r2, r6
 800a6ce:	4617      	mov	r7, r2
 800a6d0:	d30c      	bcc.n	800a6ec <rshift+0x5c>
 800a6d2:	601d      	str	r5, [r3, #0]
 800a6d4:	b105      	cbz	r5, 800a6d8 <rshift+0x48>
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	1b1a      	subs	r2, r3, r4
 800a6da:	42a3      	cmp	r3, r4
 800a6dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a6e0:	bf08      	it	eq
 800a6e2:	2300      	moveq	r3, #0
 800a6e4:	6102      	str	r2, [r0, #16]
 800a6e6:	bf08      	it	eq
 800a6e8:	6143      	streq	r3, [r0, #20]
 800a6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ec:	683f      	ldr	r7, [r7, #0]
 800a6ee:	fa07 f70c 	lsl.w	r7, r7, ip
 800a6f2:	433d      	orrs	r5, r7
 800a6f4:	f843 5b04 	str.w	r5, [r3], #4
 800a6f8:	f852 5b04 	ldr.w	r5, [r2], #4
 800a6fc:	40cd      	lsrs	r5, r1
 800a6fe:	e7e5      	b.n	800a6cc <rshift+0x3c>
 800a700:	4623      	mov	r3, r4
 800a702:	e7e9      	b.n	800a6d8 <rshift+0x48>

0800a704 <__hexdig_fun>:
 800a704:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a708:	2b09      	cmp	r3, #9
 800a70a:	d802      	bhi.n	800a712 <__hexdig_fun+0xe>
 800a70c:	3820      	subs	r0, #32
 800a70e:	b2c0      	uxtb	r0, r0
 800a710:	4770      	bx	lr
 800a712:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a716:	2b05      	cmp	r3, #5
 800a718:	d801      	bhi.n	800a71e <__hexdig_fun+0x1a>
 800a71a:	3847      	subs	r0, #71	; 0x47
 800a71c:	e7f7      	b.n	800a70e <__hexdig_fun+0xa>
 800a71e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a722:	2b05      	cmp	r3, #5
 800a724:	d801      	bhi.n	800a72a <__hexdig_fun+0x26>
 800a726:	3827      	subs	r0, #39	; 0x27
 800a728:	e7f1      	b.n	800a70e <__hexdig_fun+0xa>
 800a72a:	2000      	movs	r0, #0
 800a72c:	4770      	bx	lr

0800a72e <__gethex>:
 800a72e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a732:	b08b      	sub	sp, #44	; 0x2c
 800a734:	468a      	mov	sl, r1
 800a736:	9002      	str	r0, [sp, #8]
 800a738:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a73a:	9306      	str	r3, [sp, #24]
 800a73c:	4690      	mov	r8, r2
 800a73e:	f000 facd 	bl	800acdc <__localeconv_l>
 800a742:	6803      	ldr	r3, [r0, #0]
 800a744:	9303      	str	r3, [sp, #12]
 800a746:	4618      	mov	r0, r3
 800a748:	f7f5 fd42 	bl	80001d0 <strlen>
 800a74c:	9b03      	ldr	r3, [sp, #12]
 800a74e:	9001      	str	r0, [sp, #4]
 800a750:	4403      	add	r3, r0
 800a752:	f04f 0b00 	mov.w	fp, #0
 800a756:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a75a:	9307      	str	r3, [sp, #28]
 800a75c:	f8da 3000 	ldr.w	r3, [sl]
 800a760:	3302      	adds	r3, #2
 800a762:	461f      	mov	r7, r3
 800a764:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a768:	2830      	cmp	r0, #48	; 0x30
 800a76a:	d06c      	beq.n	800a846 <__gethex+0x118>
 800a76c:	f7ff ffca 	bl	800a704 <__hexdig_fun>
 800a770:	4604      	mov	r4, r0
 800a772:	2800      	cmp	r0, #0
 800a774:	d16a      	bne.n	800a84c <__gethex+0x11e>
 800a776:	9a01      	ldr	r2, [sp, #4]
 800a778:	9903      	ldr	r1, [sp, #12]
 800a77a:	4638      	mov	r0, r7
 800a77c:	f001 f83c 	bl	800b7f8 <strncmp>
 800a780:	2800      	cmp	r0, #0
 800a782:	d166      	bne.n	800a852 <__gethex+0x124>
 800a784:	9b01      	ldr	r3, [sp, #4]
 800a786:	5cf8      	ldrb	r0, [r7, r3]
 800a788:	18fe      	adds	r6, r7, r3
 800a78a:	f7ff ffbb 	bl	800a704 <__hexdig_fun>
 800a78e:	2800      	cmp	r0, #0
 800a790:	d062      	beq.n	800a858 <__gethex+0x12a>
 800a792:	4633      	mov	r3, r6
 800a794:	7818      	ldrb	r0, [r3, #0]
 800a796:	2830      	cmp	r0, #48	; 0x30
 800a798:	461f      	mov	r7, r3
 800a79a:	f103 0301 	add.w	r3, r3, #1
 800a79e:	d0f9      	beq.n	800a794 <__gethex+0x66>
 800a7a0:	f7ff ffb0 	bl	800a704 <__hexdig_fun>
 800a7a4:	fab0 f580 	clz	r5, r0
 800a7a8:	096d      	lsrs	r5, r5, #5
 800a7aa:	4634      	mov	r4, r6
 800a7ac:	f04f 0b01 	mov.w	fp, #1
 800a7b0:	463a      	mov	r2, r7
 800a7b2:	4616      	mov	r6, r2
 800a7b4:	3201      	adds	r2, #1
 800a7b6:	7830      	ldrb	r0, [r6, #0]
 800a7b8:	f7ff ffa4 	bl	800a704 <__hexdig_fun>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d1f8      	bne.n	800a7b2 <__gethex+0x84>
 800a7c0:	9a01      	ldr	r2, [sp, #4]
 800a7c2:	9903      	ldr	r1, [sp, #12]
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f001 f817 	bl	800b7f8 <strncmp>
 800a7ca:	b950      	cbnz	r0, 800a7e2 <__gethex+0xb4>
 800a7cc:	b954      	cbnz	r4, 800a7e4 <__gethex+0xb6>
 800a7ce:	9b01      	ldr	r3, [sp, #4]
 800a7d0:	18f4      	adds	r4, r6, r3
 800a7d2:	4622      	mov	r2, r4
 800a7d4:	4616      	mov	r6, r2
 800a7d6:	3201      	adds	r2, #1
 800a7d8:	7830      	ldrb	r0, [r6, #0]
 800a7da:	f7ff ff93 	bl	800a704 <__hexdig_fun>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d1f8      	bne.n	800a7d4 <__gethex+0xa6>
 800a7e2:	b10c      	cbz	r4, 800a7e8 <__gethex+0xba>
 800a7e4:	1ba4      	subs	r4, r4, r6
 800a7e6:	00a4      	lsls	r4, r4, #2
 800a7e8:	7833      	ldrb	r3, [r6, #0]
 800a7ea:	2b50      	cmp	r3, #80	; 0x50
 800a7ec:	d001      	beq.n	800a7f2 <__gethex+0xc4>
 800a7ee:	2b70      	cmp	r3, #112	; 0x70
 800a7f0:	d140      	bne.n	800a874 <__gethex+0x146>
 800a7f2:	7873      	ldrb	r3, [r6, #1]
 800a7f4:	2b2b      	cmp	r3, #43	; 0x2b
 800a7f6:	d031      	beq.n	800a85c <__gethex+0x12e>
 800a7f8:	2b2d      	cmp	r3, #45	; 0x2d
 800a7fa:	d033      	beq.n	800a864 <__gethex+0x136>
 800a7fc:	1c71      	adds	r1, r6, #1
 800a7fe:	f04f 0900 	mov.w	r9, #0
 800a802:	7808      	ldrb	r0, [r1, #0]
 800a804:	f7ff ff7e 	bl	800a704 <__hexdig_fun>
 800a808:	1e43      	subs	r3, r0, #1
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b18      	cmp	r3, #24
 800a80e:	d831      	bhi.n	800a874 <__gethex+0x146>
 800a810:	f1a0 0210 	sub.w	r2, r0, #16
 800a814:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a818:	f7ff ff74 	bl	800a704 <__hexdig_fun>
 800a81c:	1e43      	subs	r3, r0, #1
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b18      	cmp	r3, #24
 800a822:	d922      	bls.n	800a86a <__gethex+0x13c>
 800a824:	f1b9 0f00 	cmp.w	r9, #0
 800a828:	d000      	beq.n	800a82c <__gethex+0xfe>
 800a82a:	4252      	negs	r2, r2
 800a82c:	4414      	add	r4, r2
 800a82e:	f8ca 1000 	str.w	r1, [sl]
 800a832:	b30d      	cbz	r5, 800a878 <__gethex+0x14a>
 800a834:	f1bb 0f00 	cmp.w	fp, #0
 800a838:	bf0c      	ite	eq
 800a83a:	2706      	moveq	r7, #6
 800a83c:	2700      	movne	r7, #0
 800a83e:	4638      	mov	r0, r7
 800a840:	b00b      	add	sp, #44	; 0x2c
 800a842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a846:	f10b 0b01 	add.w	fp, fp, #1
 800a84a:	e78a      	b.n	800a762 <__gethex+0x34>
 800a84c:	2500      	movs	r5, #0
 800a84e:	462c      	mov	r4, r5
 800a850:	e7ae      	b.n	800a7b0 <__gethex+0x82>
 800a852:	463e      	mov	r6, r7
 800a854:	2501      	movs	r5, #1
 800a856:	e7c7      	b.n	800a7e8 <__gethex+0xba>
 800a858:	4604      	mov	r4, r0
 800a85a:	e7fb      	b.n	800a854 <__gethex+0x126>
 800a85c:	f04f 0900 	mov.w	r9, #0
 800a860:	1cb1      	adds	r1, r6, #2
 800a862:	e7ce      	b.n	800a802 <__gethex+0xd4>
 800a864:	f04f 0901 	mov.w	r9, #1
 800a868:	e7fa      	b.n	800a860 <__gethex+0x132>
 800a86a:	230a      	movs	r3, #10
 800a86c:	fb03 0202 	mla	r2, r3, r2, r0
 800a870:	3a10      	subs	r2, #16
 800a872:	e7cf      	b.n	800a814 <__gethex+0xe6>
 800a874:	4631      	mov	r1, r6
 800a876:	e7da      	b.n	800a82e <__gethex+0x100>
 800a878:	1bf3      	subs	r3, r6, r7
 800a87a:	3b01      	subs	r3, #1
 800a87c:	4629      	mov	r1, r5
 800a87e:	2b07      	cmp	r3, #7
 800a880:	dc49      	bgt.n	800a916 <__gethex+0x1e8>
 800a882:	9802      	ldr	r0, [sp, #8]
 800a884:	f000 fa59 	bl	800ad3a <_Balloc>
 800a888:	9b01      	ldr	r3, [sp, #4]
 800a88a:	f100 0914 	add.w	r9, r0, #20
 800a88e:	f04f 0b00 	mov.w	fp, #0
 800a892:	f1c3 0301 	rsb	r3, r3, #1
 800a896:	4605      	mov	r5, r0
 800a898:	f8cd 9010 	str.w	r9, [sp, #16]
 800a89c:	46da      	mov	sl, fp
 800a89e:	9308      	str	r3, [sp, #32]
 800a8a0:	42b7      	cmp	r7, r6
 800a8a2:	d33b      	bcc.n	800a91c <__gethex+0x1ee>
 800a8a4:	9804      	ldr	r0, [sp, #16]
 800a8a6:	f840 ab04 	str.w	sl, [r0], #4
 800a8aa:	eba0 0009 	sub.w	r0, r0, r9
 800a8ae:	1080      	asrs	r0, r0, #2
 800a8b0:	6128      	str	r0, [r5, #16]
 800a8b2:	0147      	lsls	r7, r0, #5
 800a8b4:	4650      	mov	r0, sl
 800a8b6:	f000 fb04 	bl	800aec2 <__hi0bits>
 800a8ba:	f8d8 6000 	ldr.w	r6, [r8]
 800a8be:	1a3f      	subs	r7, r7, r0
 800a8c0:	42b7      	cmp	r7, r6
 800a8c2:	dd64      	ble.n	800a98e <__gethex+0x260>
 800a8c4:	1bbf      	subs	r7, r7, r6
 800a8c6:	4639      	mov	r1, r7
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f000 fe13 	bl	800b4f4 <__any_on>
 800a8ce:	4682      	mov	sl, r0
 800a8d0:	b178      	cbz	r0, 800a8f2 <__gethex+0x1c4>
 800a8d2:	1e7b      	subs	r3, r7, #1
 800a8d4:	1159      	asrs	r1, r3, #5
 800a8d6:	f003 021f 	and.w	r2, r3, #31
 800a8da:	f04f 0a01 	mov.w	sl, #1
 800a8de:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a8e2:	fa0a f202 	lsl.w	r2, sl, r2
 800a8e6:	420a      	tst	r2, r1
 800a8e8:	d003      	beq.n	800a8f2 <__gethex+0x1c4>
 800a8ea:	4553      	cmp	r3, sl
 800a8ec:	dc46      	bgt.n	800a97c <__gethex+0x24e>
 800a8ee:	f04f 0a02 	mov.w	sl, #2
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	f7ff fecb 	bl	800a690 <rshift>
 800a8fa:	443c      	add	r4, r7
 800a8fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a900:	42a3      	cmp	r3, r4
 800a902:	da52      	bge.n	800a9aa <__gethex+0x27c>
 800a904:	4629      	mov	r1, r5
 800a906:	9802      	ldr	r0, [sp, #8]
 800a908:	f000 fa4b 	bl	800ada2 <_Bfree>
 800a90c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a90e:	2300      	movs	r3, #0
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	27a3      	movs	r7, #163	; 0xa3
 800a914:	e793      	b.n	800a83e <__gethex+0x110>
 800a916:	3101      	adds	r1, #1
 800a918:	105b      	asrs	r3, r3, #1
 800a91a:	e7b0      	b.n	800a87e <__gethex+0x150>
 800a91c:	1e73      	subs	r3, r6, #1
 800a91e:	9305      	str	r3, [sp, #20]
 800a920:	9a07      	ldr	r2, [sp, #28]
 800a922:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a926:	4293      	cmp	r3, r2
 800a928:	d018      	beq.n	800a95c <__gethex+0x22e>
 800a92a:	f1bb 0f20 	cmp.w	fp, #32
 800a92e:	d107      	bne.n	800a940 <__gethex+0x212>
 800a930:	9b04      	ldr	r3, [sp, #16]
 800a932:	f8c3 a000 	str.w	sl, [r3]
 800a936:	3304      	adds	r3, #4
 800a938:	f04f 0a00 	mov.w	sl, #0
 800a93c:	9304      	str	r3, [sp, #16]
 800a93e:	46d3      	mov	fp, sl
 800a940:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a944:	f7ff fede 	bl	800a704 <__hexdig_fun>
 800a948:	f000 000f 	and.w	r0, r0, #15
 800a94c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a950:	ea4a 0a00 	orr.w	sl, sl, r0
 800a954:	f10b 0b04 	add.w	fp, fp, #4
 800a958:	9b05      	ldr	r3, [sp, #20]
 800a95a:	e00d      	b.n	800a978 <__gethex+0x24a>
 800a95c:	9b05      	ldr	r3, [sp, #20]
 800a95e:	9a08      	ldr	r2, [sp, #32]
 800a960:	4413      	add	r3, r2
 800a962:	42bb      	cmp	r3, r7
 800a964:	d3e1      	bcc.n	800a92a <__gethex+0x1fc>
 800a966:	4618      	mov	r0, r3
 800a968:	9a01      	ldr	r2, [sp, #4]
 800a96a:	9903      	ldr	r1, [sp, #12]
 800a96c:	9309      	str	r3, [sp, #36]	; 0x24
 800a96e:	f000 ff43 	bl	800b7f8 <strncmp>
 800a972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a974:	2800      	cmp	r0, #0
 800a976:	d1d8      	bne.n	800a92a <__gethex+0x1fc>
 800a978:	461e      	mov	r6, r3
 800a97a:	e791      	b.n	800a8a0 <__gethex+0x172>
 800a97c:	1eb9      	subs	r1, r7, #2
 800a97e:	4628      	mov	r0, r5
 800a980:	f000 fdb8 	bl	800b4f4 <__any_on>
 800a984:	2800      	cmp	r0, #0
 800a986:	d0b2      	beq.n	800a8ee <__gethex+0x1c0>
 800a988:	f04f 0a03 	mov.w	sl, #3
 800a98c:	e7b1      	b.n	800a8f2 <__gethex+0x1c4>
 800a98e:	da09      	bge.n	800a9a4 <__gethex+0x276>
 800a990:	1bf7      	subs	r7, r6, r7
 800a992:	4629      	mov	r1, r5
 800a994:	463a      	mov	r2, r7
 800a996:	9802      	ldr	r0, [sp, #8]
 800a998:	f000 fbce 	bl	800b138 <__lshift>
 800a99c:	1be4      	subs	r4, r4, r7
 800a99e:	4605      	mov	r5, r0
 800a9a0:	f100 0914 	add.w	r9, r0, #20
 800a9a4:	f04f 0a00 	mov.w	sl, #0
 800a9a8:	e7a8      	b.n	800a8fc <__gethex+0x1ce>
 800a9aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a9ae:	42a0      	cmp	r0, r4
 800a9b0:	dd6a      	ble.n	800aa88 <__gethex+0x35a>
 800a9b2:	1b04      	subs	r4, r0, r4
 800a9b4:	42a6      	cmp	r6, r4
 800a9b6:	dc2e      	bgt.n	800aa16 <__gethex+0x2e8>
 800a9b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d022      	beq.n	800aa06 <__gethex+0x2d8>
 800a9c0:	2b03      	cmp	r3, #3
 800a9c2:	d024      	beq.n	800aa0e <__gethex+0x2e0>
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d115      	bne.n	800a9f4 <__gethex+0x2c6>
 800a9c8:	42a6      	cmp	r6, r4
 800a9ca:	d113      	bne.n	800a9f4 <__gethex+0x2c6>
 800a9cc:	2e01      	cmp	r6, #1
 800a9ce:	dc0b      	bgt.n	800a9e8 <__gethex+0x2ba>
 800a9d0:	9a06      	ldr	r2, [sp, #24]
 800a9d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	2301      	movs	r3, #1
 800a9da:	612b      	str	r3, [r5, #16]
 800a9dc:	f8c9 3000 	str.w	r3, [r9]
 800a9e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9e2:	2762      	movs	r7, #98	; 0x62
 800a9e4:	601d      	str	r5, [r3, #0]
 800a9e6:	e72a      	b.n	800a83e <__gethex+0x110>
 800a9e8:	1e71      	subs	r1, r6, #1
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f000 fd82 	bl	800b4f4 <__any_on>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d1ed      	bne.n	800a9d0 <__gethex+0x2a2>
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	9802      	ldr	r0, [sp, #8]
 800a9f8:	f000 f9d3 	bl	800ada2 <_Bfree>
 800a9fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9fe:	2300      	movs	r3, #0
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	2750      	movs	r7, #80	; 0x50
 800aa04:	e71b      	b.n	800a83e <__gethex+0x110>
 800aa06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d0e1      	beq.n	800a9d0 <__gethex+0x2a2>
 800aa0c:	e7f2      	b.n	800a9f4 <__gethex+0x2c6>
 800aa0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1dd      	bne.n	800a9d0 <__gethex+0x2a2>
 800aa14:	e7ee      	b.n	800a9f4 <__gethex+0x2c6>
 800aa16:	1e67      	subs	r7, r4, #1
 800aa18:	f1ba 0f00 	cmp.w	sl, #0
 800aa1c:	d131      	bne.n	800aa82 <__gethex+0x354>
 800aa1e:	b127      	cbz	r7, 800aa2a <__gethex+0x2fc>
 800aa20:	4639      	mov	r1, r7
 800aa22:	4628      	mov	r0, r5
 800aa24:	f000 fd66 	bl	800b4f4 <__any_on>
 800aa28:	4682      	mov	sl, r0
 800aa2a:	117a      	asrs	r2, r7, #5
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	f007 071f 	and.w	r7, r7, #31
 800aa32:	fa03 f707 	lsl.w	r7, r3, r7
 800aa36:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	421f      	tst	r7, r3
 800aa3e:	4628      	mov	r0, r5
 800aa40:	bf18      	it	ne
 800aa42:	f04a 0a02 	orrne.w	sl, sl, #2
 800aa46:	1b36      	subs	r6, r6, r4
 800aa48:	f7ff fe22 	bl	800a690 <rshift>
 800aa4c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800aa50:	2702      	movs	r7, #2
 800aa52:	f1ba 0f00 	cmp.w	sl, #0
 800aa56:	d048      	beq.n	800aaea <__gethex+0x3bc>
 800aa58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d015      	beq.n	800aa8c <__gethex+0x35e>
 800aa60:	2b03      	cmp	r3, #3
 800aa62:	d017      	beq.n	800aa94 <__gethex+0x366>
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d109      	bne.n	800aa7c <__gethex+0x34e>
 800aa68:	f01a 0f02 	tst.w	sl, #2
 800aa6c:	d006      	beq.n	800aa7c <__gethex+0x34e>
 800aa6e:	f8d9 3000 	ldr.w	r3, [r9]
 800aa72:	ea4a 0a03 	orr.w	sl, sl, r3
 800aa76:	f01a 0f01 	tst.w	sl, #1
 800aa7a:	d10e      	bne.n	800aa9a <__gethex+0x36c>
 800aa7c:	f047 0710 	orr.w	r7, r7, #16
 800aa80:	e033      	b.n	800aaea <__gethex+0x3bc>
 800aa82:	f04f 0a01 	mov.w	sl, #1
 800aa86:	e7d0      	b.n	800aa2a <__gethex+0x2fc>
 800aa88:	2701      	movs	r7, #1
 800aa8a:	e7e2      	b.n	800aa52 <__gethex+0x324>
 800aa8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa8e:	f1c3 0301 	rsb	r3, r3, #1
 800aa92:	9315      	str	r3, [sp, #84]	; 0x54
 800aa94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d0f0      	beq.n	800aa7c <__gethex+0x34e>
 800aa9a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800aa9e:	f105 0314 	add.w	r3, r5, #20
 800aaa2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800aaa6:	eb03 010a 	add.w	r1, r3, sl
 800aaaa:	f04f 0c00 	mov.w	ip, #0
 800aaae:	4618      	mov	r0, r3
 800aab0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aab4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aab8:	d01c      	beq.n	800aaf4 <__gethex+0x3c6>
 800aaba:	3201      	adds	r2, #1
 800aabc:	6002      	str	r2, [r0, #0]
 800aabe:	2f02      	cmp	r7, #2
 800aac0:	f105 0314 	add.w	r3, r5, #20
 800aac4:	d138      	bne.n	800ab38 <__gethex+0x40a>
 800aac6:	f8d8 2000 	ldr.w	r2, [r8]
 800aaca:	3a01      	subs	r2, #1
 800aacc:	42b2      	cmp	r2, r6
 800aace:	d10a      	bne.n	800aae6 <__gethex+0x3b8>
 800aad0:	1171      	asrs	r1, r6, #5
 800aad2:	2201      	movs	r2, #1
 800aad4:	f006 061f 	and.w	r6, r6, #31
 800aad8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aadc:	fa02 f606 	lsl.w	r6, r2, r6
 800aae0:	421e      	tst	r6, r3
 800aae2:	bf18      	it	ne
 800aae4:	4617      	movne	r7, r2
 800aae6:	f047 0720 	orr.w	r7, r7, #32
 800aaea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aaec:	601d      	str	r5, [r3, #0]
 800aaee:	9b06      	ldr	r3, [sp, #24]
 800aaf0:	601c      	str	r4, [r3, #0]
 800aaf2:	e6a4      	b.n	800a83e <__gethex+0x110>
 800aaf4:	4299      	cmp	r1, r3
 800aaf6:	f843 cc04 	str.w	ip, [r3, #-4]
 800aafa:	d8d8      	bhi.n	800aaae <__gethex+0x380>
 800aafc:	68ab      	ldr	r3, [r5, #8]
 800aafe:	4599      	cmp	r9, r3
 800ab00:	db12      	blt.n	800ab28 <__gethex+0x3fa>
 800ab02:	6869      	ldr	r1, [r5, #4]
 800ab04:	9802      	ldr	r0, [sp, #8]
 800ab06:	3101      	adds	r1, #1
 800ab08:	f000 f917 	bl	800ad3a <_Balloc>
 800ab0c:	692a      	ldr	r2, [r5, #16]
 800ab0e:	3202      	adds	r2, #2
 800ab10:	f105 010c 	add.w	r1, r5, #12
 800ab14:	4683      	mov	fp, r0
 800ab16:	0092      	lsls	r2, r2, #2
 800ab18:	300c      	adds	r0, #12
 800ab1a:	f000 f901 	bl	800ad20 <memcpy>
 800ab1e:	4629      	mov	r1, r5
 800ab20:	9802      	ldr	r0, [sp, #8]
 800ab22:	f000 f93e 	bl	800ada2 <_Bfree>
 800ab26:	465d      	mov	r5, fp
 800ab28:	692b      	ldr	r3, [r5, #16]
 800ab2a:	1c5a      	adds	r2, r3, #1
 800ab2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ab30:	612a      	str	r2, [r5, #16]
 800ab32:	2201      	movs	r2, #1
 800ab34:	615a      	str	r2, [r3, #20]
 800ab36:	e7c2      	b.n	800aabe <__gethex+0x390>
 800ab38:	692a      	ldr	r2, [r5, #16]
 800ab3a:	454a      	cmp	r2, r9
 800ab3c:	dd0b      	ble.n	800ab56 <__gethex+0x428>
 800ab3e:	2101      	movs	r1, #1
 800ab40:	4628      	mov	r0, r5
 800ab42:	f7ff fda5 	bl	800a690 <rshift>
 800ab46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab4a:	3401      	adds	r4, #1
 800ab4c:	42a3      	cmp	r3, r4
 800ab4e:	f6ff aed9 	blt.w	800a904 <__gethex+0x1d6>
 800ab52:	2701      	movs	r7, #1
 800ab54:	e7c7      	b.n	800aae6 <__gethex+0x3b8>
 800ab56:	f016 061f 	ands.w	r6, r6, #31
 800ab5a:	d0fa      	beq.n	800ab52 <__gethex+0x424>
 800ab5c:	449a      	add	sl, r3
 800ab5e:	f1c6 0620 	rsb	r6, r6, #32
 800ab62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ab66:	f000 f9ac 	bl	800aec2 <__hi0bits>
 800ab6a:	42b0      	cmp	r0, r6
 800ab6c:	dbe7      	blt.n	800ab3e <__gethex+0x410>
 800ab6e:	e7f0      	b.n	800ab52 <__gethex+0x424>

0800ab70 <L_shift>:
 800ab70:	f1c2 0208 	rsb	r2, r2, #8
 800ab74:	0092      	lsls	r2, r2, #2
 800ab76:	b570      	push	{r4, r5, r6, lr}
 800ab78:	f1c2 0620 	rsb	r6, r2, #32
 800ab7c:	6843      	ldr	r3, [r0, #4]
 800ab7e:	6804      	ldr	r4, [r0, #0]
 800ab80:	fa03 f506 	lsl.w	r5, r3, r6
 800ab84:	432c      	orrs	r4, r5
 800ab86:	40d3      	lsrs	r3, r2
 800ab88:	6004      	str	r4, [r0, #0]
 800ab8a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ab8e:	4288      	cmp	r0, r1
 800ab90:	d3f4      	bcc.n	800ab7c <L_shift+0xc>
 800ab92:	bd70      	pop	{r4, r5, r6, pc}

0800ab94 <__match>:
 800ab94:	b530      	push	{r4, r5, lr}
 800ab96:	6803      	ldr	r3, [r0, #0]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab9e:	b914      	cbnz	r4, 800aba6 <__match+0x12>
 800aba0:	6003      	str	r3, [r0, #0]
 800aba2:	2001      	movs	r0, #1
 800aba4:	bd30      	pop	{r4, r5, pc}
 800aba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800abae:	2d19      	cmp	r5, #25
 800abb0:	bf98      	it	ls
 800abb2:	3220      	addls	r2, #32
 800abb4:	42a2      	cmp	r2, r4
 800abb6:	d0f0      	beq.n	800ab9a <__match+0x6>
 800abb8:	2000      	movs	r0, #0
 800abba:	e7f3      	b.n	800aba4 <__match+0x10>

0800abbc <__hexnan>:
 800abbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc0:	680b      	ldr	r3, [r1, #0]
 800abc2:	6801      	ldr	r1, [r0, #0]
 800abc4:	115f      	asrs	r7, r3, #5
 800abc6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800abca:	f013 031f 	ands.w	r3, r3, #31
 800abce:	b087      	sub	sp, #28
 800abd0:	bf18      	it	ne
 800abd2:	3704      	addne	r7, #4
 800abd4:	2500      	movs	r5, #0
 800abd6:	1f3e      	subs	r6, r7, #4
 800abd8:	4682      	mov	sl, r0
 800abda:	4690      	mov	r8, r2
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	f847 5c04 	str.w	r5, [r7, #-4]
 800abe2:	46b1      	mov	r9, r6
 800abe4:	4634      	mov	r4, r6
 800abe6:	9502      	str	r5, [sp, #8]
 800abe8:	46ab      	mov	fp, r5
 800abea:	784a      	ldrb	r2, [r1, #1]
 800abec:	1c4b      	adds	r3, r1, #1
 800abee:	9303      	str	r3, [sp, #12]
 800abf0:	b342      	cbz	r2, 800ac44 <__hexnan+0x88>
 800abf2:	4610      	mov	r0, r2
 800abf4:	9105      	str	r1, [sp, #20]
 800abf6:	9204      	str	r2, [sp, #16]
 800abf8:	f7ff fd84 	bl	800a704 <__hexdig_fun>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d143      	bne.n	800ac88 <__hexnan+0xcc>
 800ac00:	9a04      	ldr	r2, [sp, #16]
 800ac02:	9905      	ldr	r1, [sp, #20]
 800ac04:	2a20      	cmp	r2, #32
 800ac06:	d818      	bhi.n	800ac3a <__hexnan+0x7e>
 800ac08:	9b02      	ldr	r3, [sp, #8]
 800ac0a:	459b      	cmp	fp, r3
 800ac0c:	dd13      	ble.n	800ac36 <__hexnan+0x7a>
 800ac0e:	454c      	cmp	r4, r9
 800ac10:	d206      	bcs.n	800ac20 <__hexnan+0x64>
 800ac12:	2d07      	cmp	r5, #7
 800ac14:	dc04      	bgt.n	800ac20 <__hexnan+0x64>
 800ac16:	462a      	mov	r2, r5
 800ac18:	4649      	mov	r1, r9
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f7ff ffa8 	bl	800ab70 <L_shift>
 800ac20:	4544      	cmp	r4, r8
 800ac22:	d944      	bls.n	800acae <__hexnan+0xf2>
 800ac24:	2300      	movs	r3, #0
 800ac26:	f1a4 0904 	sub.w	r9, r4, #4
 800ac2a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac2e:	f8cd b008 	str.w	fp, [sp, #8]
 800ac32:	464c      	mov	r4, r9
 800ac34:	461d      	mov	r5, r3
 800ac36:	9903      	ldr	r1, [sp, #12]
 800ac38:	e7d7      	b.n	800abea <__hexnan+0x2e>
 800ac3a:	2a29      	cmp	r2, #41	; 0x29
 800ac3c:	d14a      	bne.n	800acd4 <__hexnan+0x118>
 800ac3e:	3102      	adds	r1, #2
 800ac40:	f8ca 1000 	str.w	r1, [sl]
 800ac44:	f1bb 0f00 	cmp.w	fp, #0
 800ac48:	d044      	beq.n	800acd4 <__hexnan+0x118>
 800ac4a:	454c      	cmp	r4, r9
 800ac4c:	d206      	bcs.n	800ac5c <__hexnan+0xa0>
 800ac4e:	2d07      	cmp	r5, #7
 800ac50:	dc04      	bgt.n	800ac5c <__hexnan+0xa0>
 800ac52:	462a      	mov	r2, r5
 800ac54:	4649      	mov	r1, r9
 800ac56:	4620      	mov	r0, r4
 800ac58:	f7ff ff8a 	bl	800ab70 <L_shift>
 800ac5c:	4544      	cmp	r4, r8
 800ac5e:	d928      	bls.n	800acb2 <__hexnan+0xf6>
 800ac60:	4643      	mov	r3, r8
 800ac62:	f854 2b04 	ldr.w	r2, [r4], #4
 800ac66:	f843 2b04 	str.w	r2, [r3], #4
 800ac6a:	42a6      	cmp	r6, r4
 800ac6c:	d2f9      	bcs.n	800ac62 <__hexnan+0xa6>
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f843 2b04 	str.w	r2, [r3], #4
 800ac74:	429e      	cmp	r6, r3
 800ac76:	d2fb      	bcs.n	800ac70 <__hexnan+0xb4>
 800ac78:	6833      	ldr	r3, [r6, #0]
 800ac7a:	b91b      	cbnz	r3, 800ac84 <__hexnan+0xc8>
 800ac7c:	4546      	cmp	r6, r8
 800ac7e:	d127      	bne.n	800acd0 <__hexnan+0x114>
 800ac80:	2301      	movs	r3, #1
 800ac82:	6033      	str	r3, [r6, #0]
 800ac84:	2005      	movs	r0, #5
 800ac86:	e026      	b.n	800acd6 <__hexnan+0x11a>
 800ac88:	3501      	adds	r5, #1
 800ac8a:	2d08      	cmp	r5, #8
 800ac8c:	f10b 0b01 	add.w	fp, fp, #1
 800ac90:	dd06      	ble.n	800aca0 <__hexnan+0xe4>
 800ac92:	4544      	cmp	r4, r8
 800ac94:	d9cf      	bls.n	800ac36 <__hexnan+0x7a>
 800ac96:	2300      	movs	r3, #0
 800ac98:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac9c:	2501      	movs	r5, #1
 800ac9e:	3c04      	subs	r4, #4
 800aca0:	6822      	ldr	r2, [r4, #0]
 800aca2:	f000 000f 	and.w	r0, r0, #15
 800aca6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800acaa:	6020      	str	r0, [r4, #0]
 800acac:	e7c3      	b.n	800ac36 <__hexnan+0x7a>
 800acae:	2508      	movs	r5, #8
 800acb0:	e7c1      	b.n	800ac36 <__hexnan+0x7a>
 800acb2:	9b01      	ldr	r3, [sp, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d0df      	beq.n	800ac78 <__hexnan+0xbc>
 800acb8:	f04f 32ff 	mov.w	r2, #4294967295
 800acbc:	f1c3 0320 	rsb	r3, r3, #32
 800acc0:	fa22 f303 	lsr.w	r3, r2, r3
 800acc4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800acc8:	401a      	ands	r2, r3
 800acca:	f847 2c04 	str.w	r2, [r7, #-4]
 800acce:	e7d3      	b.n	800ac78 <__hexnan+0xbc>
 800acd0:	3e04      	subs	r6, #4
 800acd2:	e7d1      	b.n	800ac78 <__hexnan+0xbc>
 800acd4:	2004      	movs	r0, #4
 800acd6:	b007      	add	sp, #28
 800acd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acdc <__localeconv_l>:
 800acdc:	30f0      	adds	r0, #240	; 0xf0
 800acde:	4770      	bx	lr

0800ace0 <_localeconv_r>:
 800ace0:	4b04      	ldr	r3, [pc, #16]	; (800acf4 <_localeconv_r+0x14>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	6a18      	ldr	r0, [r3, #32]
 800ace6:	4b04      	ldr	r3, [pc, #16]	; (800acf8 <_localeconv_r+0x18>)
 800ace8:	2800      	cmp	r0, #0
 800acea:	bf08      	it	eq
 800acec:	4618      	moveq	r0, r3
 800acee:	30f0      	adds	r0, #240	; 0xf0
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	20000188 	.word	0x20000188
 800acf8:	200001ec 	.word	0x200001ec

0800acfc <__ascii_mbtowc>:
 800acfc:	b082      	sub	sp, #8
 800acfe:	b901      	cbnz	r1, 800ad02 <__ascii_mbtowc+0x6>
 800ad00:	a901      	add	r1, sp, #4
 800ad02:	b142      	cbz	r2, 800ad16 <__ascii_mbtowc+0x1a>
 800ad04:	b14b      	cbz	r3, 800ad1a <__ascii_mbtowc+0x1e>
 800ad06:	7813      	ldrb	r3, [r2, #0]
 800ad08:	600b      	str	r3, [r1, #0]
 800ad0a:	7812      	ldrb	r2, [r2, #0]
 800ad0c:	1c10      	adds	r0, r2, #0
 800ad0e:	bf18      	it	ne
 800ad10:	2001      	movne	r0, #1
 800ad12:	b002      	add	sp, #8
 800ad14:	4770      	bx	lr
 800ad16:	4610      	mov	r0, r2
 800ad18:	e7fb      	b.n	800ad12 <__ascii_mbtowc+0x16>
 800ad1a:	f06f 0001 	mvn.w	r0, #1
 800ad1e:	e7f8      	b.n	800ad12 <__ascii_mbtowc+0x16>

0800ad20 <memcpy>:
 800ad20:	b510      	push	{r4, lr}
 800ad22:	1e43      	subs	r3, r0, #1
 800ad24:	440a      	add	r2, r1
 800ad26:	4291      	cmp	r1, r2
 800ad28:	d100      	bne.n	800ad2c <memcpy+0xc>
 800ad2a:	bd10      	pop	{r4, pc}
 800ad2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad34:	e7f7      	b.n	800ad26 <memcpy+0x6>

0800ad36 <__malloc_lock>:
 800ad36:	4770      	bx	lr

0800ad38 <__malloc_unlock>:
 800ad38:	4770      	bx	lr

0800ad3a <_Balloc>:
 800ad3a:	b570      	push	{r4, r5, r6, lr}
 800ad3c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ad3e:	4604      	mov	r4, r0
 800ad40:	460e      	mov	r6, r1
 800ad42:	b93d      	cbnz	r5, 800ad54 <_Balloc+0x1a>
 800ad44:	2010      	movs	r0, #16
 800ad46:	f7fd fad9 	bl	80082fc <malloc>
 800ad4a:	6260      	str	r0, [r4, #36]	; 0x24
 800ad4c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad50:	6005      	str	r5, [r0, #0]
 800ad52:	60c5      	str	r5, [r0, #12]
 800ad54:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ad56:	68eb      	ldr	r3, [r5, #12]
 800ad58:	b183      	cbz	r3, 800ad7c <_Balloc+0x42>
 800ad5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ad62:	b9b8      	cbnz	r0, 800ad94 <_Balloc+0x5a>
 800ad64:	2101      	movs	r1, #1
 800ad66:	fa01 f506 	lsl.w	r5, r1, r6
 800ad6a:	1d6a      	adds	r2, r5, #5
 800ad6c:	0092      	lsls	r2, r2, #2
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fbe1 	bl	800b536 <_calloc_r>
 800ad74:	b160      	cbz	r0, 800ad90 <_Balloc+0x56>
 800ad76:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ad7a:	e00e      	b.n	800ad9a <_Balloc+0x60>
 800ad7c:	2221      	movs	r2, #33	; 0x21
 800ad7e:	2104      	movs	r1, #4
 800ad80:	4620      	mov	r0, r4
 800ad82:	f000 fbd8 	bl	800b536 <_calloc_r>
 800ad86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad88:	60e8      	str	r0, [r5, #12]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1e4      	bne.n	800ad5a <_Balloc+0x20>
 800ad90:	2000      	movs	r0, #0
 800ad92:	bd70      	pop	{r4, r5, r6, pc}
 800ad94:	6802      	ldr	r2, [r0, #0]
 800ad96:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ada0:	e7f7      	b.n	800ad92 <_Balloc+0x58>

0800ada2 <_Bfree>:
 800ada2:	b570      	push	{r4, r5, r6, lr}
 800ada4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ada6:	4606      	mov	r6, r0
 800ada8:	460d      	mov	r5, r1
 800adaa:	b93c      	cbnz	r4, 800adbc <_Bfree+0x1a>
 800adac:	2010      	movs	r0, #16
 800adae:	f7fd faa5 	bl	80082fc <malloc>
 800adb2:	6270      	str	r0, [r6, #36]	; 0x24
 800adb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adb8:	6004      	str	r4, [r0, #0]
 800adba:	60c4      	str	r4, [r0, #12]
 800adbc:	b13d      	cbz	r5, 800adce <_Bfree+0x2c>
 800adbe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800adc0:	686a      	ldr	r2, [r5, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800adc8:	6029      	str	r1, [r5, #0]
 800adca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800adce:	bd70      	pop	{r4, r5, r6, pc}

0800add0 <__multadd>:
 800add0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add4:	690d      	ldr	r5, [r1, #16]
 800add6:	461f      	mov	r7, r3
 800add8:	4606      	mov	r6, r0
 800adda:	460c      	mov	r4, r1
 800addc:	f101 0c14 	add.w	ip, r1, #20
 800ade0:	2300      	movs	r3, #0
 800ade2:	f8dc 0000 	ldr.w	r0, [ip]
 800ade6:	b281      	uxth	r1, r0
 800ade8:	fb02 7101 	mla	r1, r2, r1, r7
 800adec:	0c0f      	lsrs	r7, r1, #16
 800adee:	0c00      	lsrs	r0, r0, #16
 800adf0:	fb02 7000 	mla	r0, r2, r0, r7
 800adf4:	b289      	uxth	r1, r1
 800adf6:	3301      	adds	r3, #1
 800adf8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800adfc:	429d      	cmp	r5, r3
 800adfe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ae02:	f84c 1b04 	str.w	r1, [ip], #4
 800ae06:	dcec      	bgt.n	800ade2 <__multadd+0x12>
 800ae08:	b1d7      	cbz	r7, 800ae40 <__multadd+0x70>
 800ae0a:	68a3      	ldr	r3, [r4, #8]
 800ae0c:	42ab      	cmp	r3, r5
 800ae0e:	dc12      	bgt.n	800ae36 <__multadd+0x66>
 800ae10:	6861      	ldr	r1, [r4, #4]
 800ae12:	4630      	mov	r0, r6
 800ae14:	3101      	adds	r1, #1
 800ae16:	f7ff ff90 	bl	800ad3a <_Balloc>
 800ae1a:	6922      	ldr	r2, [r4, #16]
 800ae1c:	3202      	adds	r2, #2
 800ae1e:	f104 010c 	add.w	r1, r4, #12
 800ae22:	4680      	mov	r8, r0
 800ae24:	0092      	lsls	r2, r2, #2
 800ae26:	300c      	adds	r0, #12
 800ae28:	f7ff ff7a 	bl	800ad20 <memcpy>
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	4630      	mov	r0, r6
 800ae30:	f7ff ffb7 	bl	800ada2 <_Bfree>
 800ae34:	4644      	mov	r4, r8
 800ae36:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae3a:	3501      	adds	r5, #1
 800ae3c:	615f      	str	r7, [r3, #20]
 800ae3e:	6125      	str	r5, [r4, #16]
 800ae40:	4620      	mov	r0, r4
 800ae42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ae46 <__s2b>:
 800ae46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	4615      	mov	r5, r2
 800ae4e:	461f      	mov	r7, r3
 800ae50:	2209      	movs	r2, #9
 800ae52:	3308      	adds	r3, #8
 800ae54:	4606      	mov	r6, r0
 800ae56:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	db20      	blt.n	800aea4 <__s2b+0x5e>
 800ae62:	4630      	mov	r0, r6
 800ae64:	f7ff ff69 	bl	800ad3a <_Balloc>
 800ae68:	9b08      	ldr	r3, [sp, #32]
 800ae6a:	6143      	str	r3, [r0, #20]
 800ae6c:	2d09      	cmp	r5, #9
 800ae6e:	f04f 0301 	mov.w	r3, #1
 800ae72:	6103      	str	r3, [r0, #16]
 800ae74:	dd19      	ble.n	800aeaa <__s2b+0x64>
 800ae76:	f104 0809 	add.w	r8, r4, #9
 800ae7a:	46c1      	mov	r9, r8
 800ae7c:	442c      	add	r4, r5
 800ae7e:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ae82:	4601      	mov	r1, r0
 800ae84:	3b30      	subs	r3, #48	; 0x30
 800ae86:	220a      	movs	r2, #10
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f7ff ffa1 	bl	800add0 <__multadd>
 800ae8e:	45a1      	cmp	r9, r4
 800ae90:	d1f5      	bne.n	800ae7e <__s2b+0x38>
 800ae92:	eb08 0405 	add.w	r4, r8, r5
 800ae96:	3c08      	subs	r4, #8
 800ae98:	1b2d      	subs	r5, r5, r4
 800ae9a:	1963      	adds	r3, r4, r5
 800ae9c:	42bb      	cmp	r3, r7
 800ae9e:	db07      	blt.n	800aeb0 <__s2b+0x6a>
 800aea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aea4:	0052      	lsls	r2, r2, #1
 800aea6:	3101      	adds	r1, #1
 800aea8:	e7d9      	b.n	800ae5e <__s2b+0x18>
 800aeaa:	340a      	adds	r4, #10
 800aeac:	2509      	movs	r5, #9
 800aeae:	e7f3      	b.n	800ae98 <__s2b+0x52>
 800aeb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aeb4:	4601      	mov	r1, r0
 800aeb6:	3b30      	subs	r3, #48	; 0x30
 800aeb8:	220a      	movs	r2, #10
 800aeba:	4630      	mov	r0, r6
 800aebc:	f7ff ff88 	bl	800add0 <__multadd>
 800aec0:	e7eb      	b.n	800ae9a <__s2b+0x54>

0800aec2 <__hi0bits>:
 800aec2:	0c02      	lsrs	r2, r0, #16
 800aec4:	0412      	lsls	r2, r2, #16
 800aec6:	4603      	mov	r3, r0
 800aec8:	b9b2      	cbnz	r2, 800aef8 <__hi0bits+0x36>
 800aeca:	0403      	lsls	r3, r0, #16
 800aecc:	2010      	movs	r0, #16
 800aece:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aed2:	bf04      	itt	eq
 800aed4:	021b      	lsleq	r3, r3, #8
 800aed6:	3008      	addeq	r0, #8
 800aed8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aedc:	bf04      	itt	eq
 800aede:	011b      	lsleq	r3, r3, #4
 800aee0:	3004      	addeq	r0, #4
 800aee2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aee6:	bf04      	itt	eq
 800aee8:	009b      	lsleq	r3, r3, #2
 800aeea:	3002      	addeq	r0, #2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	db06      	blt.n	800aefe <__hi0bits+0x3c>
 800aef0:	005b      	lsls	r3, r3, #1
 800aef2:	d503      	bpl.n	800aefc <__hi0bits+0x3a>
 800aef4:	3001      	adds	r0, #1
 800aef6:	4770      	bx	lr
 800aef8:	2000      	movs	r0, #0
 800aefa:	e7e8      	b.n	800aece <__hi0bits+0xc>
 800aefc:	2020      	movs	r0, #32
 800aefe:	4770      	bx	lr

0800af00 <__lo0bits>:
 800af00:	6803      	ldr	r3, [r0, #0]
 800af02:	f013 0207 	ands.w	r2, r3, #7
 800af06:	4601      	mov	r1, r0
 800af08:	d00b      	beq.n	800af22 <__lo0bits+0x22>
 800af0a:	07da      	lsls	r2, r3, #31
 800af0c:	d423      	bmi.n	800af56 <__lo0bits+0x56>
 800af0e:	0798      	lsls	r0, r3, #30
 800af10:	bf49      	itett	mi
 800af12:	085b      	lsrmi	r3, r3, #1
 800af14:	089b      	lsrpl	r3, r3, #2
 800af16:	2001      	movmi	r0, #1
 800af18:	600b      	strmi	r3, [r1, #0]
 800af1a:	bf5c      	itt	pl
 800af1c:	600b      	strpl	r3, [r1, #0]
 800af1e:	2002      	movpl	r0, #2
 800af20:	4770      	bx	lr
 800af22:	b298      	uxth	r0, r3
 800af24:	b9a8      	cbnz	r0, 800af52 <__lo0bits+0x52>
 800af26:	0c1b      	lsrs	r3, r3, #16
 800af28:	2010      	movs	r0, #16
 800af2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800af2e:	bf04      	itt	eq
 800af30:	0a1b      	lsreq	r3, r3, #8
 800af32:	3008      	addeq	r0, #8
 800af34:	071a      	lsls	r2, r3, #28
 800af36:	bf04      	itt	eq
 800af38:	091b      	lsreq	r3, r3, #4
 800af3a:	3004      	addeq	r0, #4
 800af3c:	079a      	lsls	r2, r3, #30
 800af3e:	bf04      	itt	eq
 800af40:	089b      	lsreq	r3, r3, #2
 800af42:	3002      	addeq	r0, #2
 800af44:	07da      	lsls	r2, r3, #31
 800af46:	d402      	bmi.n	800af4e <__lo0bits+0x4e>
 800af48:	085b      	lsrs	r3, r3, #1
 800af4a:	d006      	beq.n	800af5a <__lo0bits+0x5a>
 800af4c:	3001      	adds	r0, #1
 800af4e:	600b      	str	r3, [r1, #0]
 800af50:	4770      	bx	lr
 800af52:	4610      	mov	r0, r2
 800af54:	e7e9      	b.n	800af2a <__lo0bits+0x2a>
 800af56:	2000      	movs	r0, #0
 800af58:	4770      	bx	lr
 800af5a:	2020      	movs	r0, #32
 800af5c:	4770      	bx	lr

0800af5e <__i2b>:
 800af5e:	b510      	push	{r4, lr}
 800af60:	460c      	mov	r4, r1
 800af62:	2101      	movs	r1, #1
 800af64:	f7ff fee9 	bl	800ad3a <_Balloc>
 800af68:	2201      	movs	r2, #1
 800af6a:	6144      	str	r4, [r0, #20]
 800af6c:	6102      	str	r2, [r0, #16]
 800af6e:	bd10      	pop	{r4, pc}

0800af70 <__multiply>:
 800af70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af74:	4614      	mov	r4, r2
 800af76:	690a      	ldr	r2, [r1, #16]
 800af78:	6923      	ldr	r3, [r4, #16]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	bfb8      	it	lt
 800af7e:	460b      	movlt	r3, r1
 800af80:	4688      	mov	r8, r1
 800af82:	bfbc      	itt	lt
 800af84:	46a0      	movlt	r8, r4
 800af86:	461c      	movlt	r4, r3
 800af88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800af90:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af98:	eb07 0609 	add.w	r6, r7, r9
 800af9c:	42b3      	cmp	r3, r6
 800af9e:	bfb8      	it	lt
 800afa0:	3101      	addlt	r1, #1
 800afa2:	f7ff feca 	bl	800ad3a <_Balloc>
 800afa6:	f100 0514 	add.w	r5, r0, #20
 800afaa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800afae:	462b      	mov	r3, r5
 800afb0:	2200      	movs	r2, #0
 800afb2:	4573      	cmp	r3, lr
 800afb4:	d316      	bcc.n	800afe4 <__multiply+0x74>
 800afb6:	f104 0214 	add.w	r2, r4, #20
 800afba:	f108 0114 	add.w	r1, r8, #20
 800afbe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800afc2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	9b00      	ldr	r3, [sp, #0]
 800afca:	9201      	str	r2, [sp, #4]
 800afcc:	4293      	cmp	r3, r2
 800afce:	d80c      	bhi.n	800afea <__multiply+0x7a>
 800afd0:	2e00      	cmp	r6, #0
 800afd2:	dd03      	ble.n	800afdc <__multiply+0x6c>
 800afd4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d05d      	beq.n	800b098 <__multiply+0x128>
 800afdc:	6106      	str	r6, [r0, #16]
 800afde:	b003      	add	sp, #12
 800afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe4:	f843 2b04 	str.w	r2, [r3], #4
 800afe8:	e7e3      	b.n	800afb2 <__multiply+0x42>
 800afea:	f8b2 b000 	ldrh.w	fp, [r2]
 800afee:	f1bb 0f00 	cmp.w	fp, #0
 800aff2:	d023      	beq.n	800b03c <__multiply+0xcc>
 800aff4:	4689      	mov	r9, r1
 800aff6:	46ac      	mov	ip, r5
 800aff8:	f04f 0800 	mov.w	r8, #0
 800affc:	f859 4b04 	ldr.w	r4, [r9], #4
 800b000:	f8dc a000 	ldr.w	sl, [ip]
 800b004:	b2a3      	uxth	r3, r4
 800b006:	fa1f fa8a 	uxth.w	sl, sl
 800b00a:	fb0b a303 	mla	r3, fp, r3, sl
 800b00e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b012:	f8dc 4000 	ldr.w	r4, [ip]
 800b016:	4443      	add	r3, r8
 800b018:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b01c:	fb0b 840a 	mla	r4, fp, sl, r8
 800b020:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b024:	46e2      	mov	sl, ip
 800b026:	b29b      	uxth	r3, r3
 800b028:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b02c:	454f      	cmp	r7, r9
 800b02e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b032:	f84a 3b04 	str.w	r3, [sl], #4
 800b036:	d82b      	bhi.n	800b090 <__multiply+0x120>
 800b038:	f8cc 8004 	str.w	r8, [ip, #4]
 800b03c:	9b01      	ldr	r3, [sp, #4]
 800b03e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b042:	3204      	adds	r2, #4
 800b044:	f1ba 0f00 	cmp.w	sl, #0
 800b048:	d020      	beq.n	800b08c <__multiply+0x11c>
 800b04a:	682b      	ldr	r3, [r5, #0]
 800b04c:	4689      	mov	r9, r1
 800b04e:	46a8      	mov	r8, r5
 800b050:	f04f 0b00 	mov.w	fp, #0
 800b054:	f8b9 c000 	ldrh.w	ip, [r9]
 800b058:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b05c:	fb0a 440c 	mla	r4, sl, ip, r4
 800b060:	445c      	add	r4, fp
 800b062:	46c4      	mov	ip, r8
 800b064:	b29b      	uxth	r3, r3
 800b066:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b06a:	f84c 3b04 	str.w	r3, [ip], #4
 800b06e:	f859 3b04 	ldr.w	r3, [r9], #4
 800b072:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b076:	0c1b      	lsrs	r3, r3, #16
 800b078:	fb0a b303 	mla	r3, sl, r3, fp
 800b07c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b080:	454f      	cmp	r7, r9
 800b082:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b086:	d805      	bhi.n	800b094 <__multiply+0x124>
 800b088:	f8c8 3004 	str.w	r3, [r8, #4]
 800b08c:	3504      	adds	r5, #4
 800b08e:	e79b      	b.n	800afc8 <__multiply+0x58>
 800b090:	46d4      	mov	ip, sl
 800b092:	e7b3      	b.n	800affc <__multiply+0x8c>
 800b094:	46e0      	mov	r8, ip
 800b096:	e7dd      	b.n	800b054 <__multiply+0xe4>
 800b098:	3e01      	subs	r6, #1
 800b09a:	e799      	b.n	800afd0 <__multiply+0x60>

0800b09c <__pow5mult>:
 800b09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a0:	4615      	mov	r5, r2
 800b0a2:	f012 0203 	ands.w	r2, r2, #3
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	460f      	mov	r7, r1
 800b0aa:	d007      	beq.n	800b0bc <__pow5mult+0x20>
 800b0ac:	3a01      	subs	r2, #1
 800b0ae:	4c21      	ldr	r4, [pc, #132]	; (800b134 <__pow5mult+0x98>)
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0b6:	f7ff fe8b 	bl	800add0 <__multadd>
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	10ad      	asrs	r5, r5, #2
 800b0be:	d035      	beq.n	800b12c <__pow5mult+0x90>
 800b0c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b0c2:	b93c      	cbnz	r4, 800b0d4 <__pow5mult+0x38>
 800b0c4:	2010      	movs	r0, #16
 800b0c6:	f7fd f919 	bl	80082fc <malloc>
 800b0ca:	6270      	str	r0, [r6, #36]	; 0x24
 800b0cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0d0:	6004      	str	r4, [r0, #0]
 800b0d2:	60c4      	str	r4, [r0, #12]
 800b0d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0dc:	b94c      	cbnz	r4, 800b0f2 <__pow5mult+0x56>
 800b0de:	f240 2171 	movw	r1, #625	; 0x271
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7ff ff3b 	bl	800af5e <__i2b>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	6003      	str	r3, [r0, #0]
 800b0f2:	f04f 0800 	mov.w	r8, #0
 800b0f6:	07eb      	lsls	r3, r5, #31
 800b0f8:	d50a      	bpl.n	800b110 <__pow5mult+0x74>
 800b0fa:	4639      	mov	r1, r7
 800b0fc:	4622      	mov	r2, r4
 800b0fe:	4630      	mov	r0, r6
 800b100:	f7ff ff36 	bl	800af70 <__multiply>
 800b104:	4639      	mov	r1, r7
 800b106:	4681      	mov	r9, r0
 800b108:	4630      	mov	r0, r6
 800b10a:	f7ff fe4a 	bl	800ada2 <_Bfree>
 800b10e:	464f      	mov	r7, r9
 800b110:	106d      	asrs	r5, r5, #1
 800b112:	d00b      	beq.n	800b12c <__pow5mult+0x90>
 800b114:	6820      	ldr	r0, [r4, #0]
 800b116:	b938      	cbnz	r0, 800b128 <__pow5mult+0x8c>
 800b118:	4622      	mov	r2, r4
 800b11a:	4621      	mov	r1, r4
 800b11c:	4630      	mov	r0, r6
 800b11e:	f7ff ff27 	bl	800af70 <__multiply>
 800b122:	6020      	str	r0, [r4, #0]
 800b124:	f8c0 8000 	str.w	r8, [r0]
 800b128:	4604      	mov	r4, r0
 800b12a:	e7e4      	b.n	800b0f6 <__pow5mult+0x5a>
 800b12c:	4638      	mov	r0, r7
 800b12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b132:	bf00      	nop
 800b134:	0800bac8 	.word	0x0800bac8

0800b138 <__lshift>:
 800b138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b13c:	460c      	mov	r4, r1
 800b13e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b142:	6923      	ldr	r3, [r4, #16]
 800b144:	6849      	ldr	r1, [r1, #4]
 800b146:	eb0a 0903 	add.w	r9, sl, r3
 800b14a:	68a3      	ldr	r3, [r4, #8]
 800b14c:	4607      	mov	r7, r0
 800b14e:	4616      	mov	r6, r2
 800b150:	f109 0501 	add.w	r5, r9, #1
 800b154:	42ab      	cmp	r3, r5
 800b156:	db32      	blt.n	800b1be <__lshift+0x86>
 800b158:	4638      	mov	r0, r7
 800b15a:	f7ff fdee 	bl	800ad3a <_Balloc>
 800b15e:	2300      	movs	r3, #0
 800b160:	4680      	mov	r8, r0
 800b162:	f100 0114 	add.w	r1, r0, #20
 800b166:	461a      	mov	r2, r3
 800b168:	4553      	cmp	r3, sl
 800b16a:	db2b      	blt.n	800b1c4 <__lshift+0x8c>
 800b16c:	6920      	ldr	r0, [r4, #16]
 800b16e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b172:	f104 0314 	add.w	r3, r4, #20
 800b176:	f016 021f 	ands.w	r2, r6, #31
 800b17a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b17e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b182:	d025      	beq.n	800b1d0 <__lshift+0x98>
 800b184:	f1c2 0e20 	rsb	lr, r2, #32
 800b188:	2000      	movs	r0, #0
 800b18a:	681e      	ldr	r6, [r3, #0]
 800b18c:	468a      	mov	sl, r1
 800b18e:	4096      	lsls	r6, r2
 800b190:	4330      	orrs	r0, r6
 800b192:	f84a 0b04 	str.w	r0, [sl], #4
 800b196:	f853 0b04 	ldr.w	r0, [r3], #4
 800b19a:	459c      	cmp	ip, r3
 800b19c:	fa20 f00e 	lsr.w	r0, r0, lr
 800b1a0:	d814      	bhi.n	800b1cc <__lshift+0x94>
 800b1a2:	6048      	str	r0, [r1, #4]
 800b1a4:	b108      	cbz	r0, 800b1aa <__lshift+0x72>
 800b1a6:	f109 0502 	add.w	r5, r9, #2
 800b1aa:	3d01      	subs	r5, #1
 800b1ac:	4638      	mov	r0, r7
 800b1ae:	f8c8 5010 	str.w	r5, [r8, #16]
 800b1b2:	4621      	mov	r1, r4
 800b1b4:	f7ff fdf5 	bl	800ada2 <_Bfree>
 800b1b8:	4640      	mov	r0, r8
 800b1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1be:	3101      	adds	r1, #1
 800b1c0:	005b      	lsls	r3, r3, #1
 800b1c2:	e7c7      	b.n	800b154 <__lshift+0x1c>
 800b1c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	e7cd      	b.n	800b168 <__lshift+0x30>
 800b1cc:	4651      	mov	r1, sl
 800b1ce:	e7dc      	b.n	800b18a <__lshift+0x52>
 800b1d0:	3904      	subs	r1, #4
 800b1d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1da:	459c      	cmp	ip, r3
 800b1dc:	d8f9      	bhi.n	800b1d2 <__lshift+0x9a>
 800b1de:	e7e4      	b.n	800b1aa <__lshift+0x72>

0800b1e0 <__mcmp>:
 800b1e0:	6903      	ldr	r3, [r0, #16]
 800b1e2:	690a      	ldr	r2, [r1, #16]
 800b1e4:	1a9b      	subs	r3, r3, r2
 800b1e6:	b530      	push	{r4, r5, lr}
 800b1e8:	d10c      	bne.n	800b204 <__mcmp+0x24>
 800b1ea:	0092      	lsls	r2, r2, #2
 800b1ec:	3014      	adds	r0, #20
 800b1ee:	3114      	adds	r1, #20
 800b1f0:	1884      	adds	r4, r0, r2
 800b1f2:	4411      	add	r1, r2
 800b1f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1fc:	4295      	cmp	r5, r2
 800b1fe:	d003      	beq.n	800b208 <__mcmp+0x28>
 800b200:	d305      	bcc.n	800b20e <__mcmp+0x2e>
 800b202:	2301      	movs	r3, #1
 800b204:	4618      	mov	r0, r3
 800b206:	bd30      	pop	{r4, r5, pc}
 800b208:	42a0      	cmp	r0, r4
 800b20a:	d3f3      	bcc.n	800b1f4 <__mcmp+0x14>
 800b20c:	e7fa      	b.n	800b204 <__mcmp+0x24>
 800b20e:	f04f 33ff 	mov.w	r3, #4294967295
 800b212:	e7f7      	b.n	800b204 <__mcmp+0x24>

0800b214 <__mdiff>:
 800b214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b218:	460d      	mov	r5, r1
 800b21a:	4607      	mov	r7, r0
 800b21c:	4611      	mov	r1, r2
 800b21e:	4628      	mov	r0, r5
 800b220:	4614      	mov	r4, r2
 800b222:	f7ff ffdd 	bl	800b1e0 <__mcmp>
 800b226:	1e06      	subs	r6, r0, #0
 800b228:	d108      	bne.n	800b23c <__mdiff+0x28>
 800b22a:	4631      	mov	r1, r6
 800b22c:	4638      	mov	r0, r7
 800b22e:	f7ff fd84 	bl	800ad3a <_Balloc>
 800b232:	2301      	movs	r3, #1
 800b234:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b23c:	bfa4      	itt	ge
 800b23e:	4623      	movge	r3, r4
 800b240:	462c      	movge	r4, r5
 800b242:	4638      	mov	r0, r7
 800b244:	6861      	ldr	r1, [r4, #4]
 800b246:	bfa6      	itte	ge
 800b248:	461d      	movge	r5, r3
 800b24a:	2600      	movge	r6, #0
 800b24c:	2601      	movlt	r6, #1
 800b24e:	f7ff fd74 	bl	800ad3a <_Balloc>
 800b252:	692b      	ldr	r3, [r5, #16]
 800b254:	60c6      	str	r6, [r0, #12]
 800b256:	6926      	ldr	r6, [r4, #16]
 800b258:	f105 0914 	add.w	r9, r5, #20
 800b25c:	f104 0214 	add.w	r2, r4, #20
 800b260:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b264:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b268:	f100 0514 	add.w	r5, r0, #20
 800b26c:	f04f 0e00 	mov.w	lr, #0
 800b270:	f852 ab04 	ldr.w	sl, [r2], #4
 800b274:	f859 4b04 	ldr.w	r4, [r9], #4
 800b278:	fa1e f18a 	uxtah	r1, lr, sl
 800b27c:	b2a3      	uxth	r3, r4
 800b27e:	1ac9      	subs	r1, r1, r3
 800b280:	0c23      	lsrs	r3, r4, #16
 800b282:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b286:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b28a:	b289      	uxth	r1, r1
 800b28c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b290:	45c8      	cmp	r8, r9
 800b292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b296:	4694      	mov	ip, r2
 800b298:	f845 3b04 	str.w	r3, [r5], #4
 800b29c:	d8e8      	bhi.n	800b270 <__mdiff+0x5c>
 800b29e:	45bc      	cmp	ip, r7
 800b2a0:	d304      	bcc.n	800b2ac <__mdiff+0x98>
 800b2a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b2a6:	b183      	cbz	r3, 800b2ca <__mdiff+0xb6>
 800b2a8:	6106      	str	r6, [r0, #16]
 800b2aa:	e7c5      	b.n	800b238 <__mdiff+0x24>
 800b2ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b2b0:	fa1e f381 	uxtah	r3, lr, r1
 800b2b4:	141a      	asrs	r2, r3, #16
 800b2b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b2c4:	f845 3b04 	str.w	r3, [r5], #4
 800b2c8:	e7e9      	b.n	800b29e <__mdiff+0x8a>
 800b2ca:	3e01      	subs	r6, #1
 800b2cc:	e7e9      	b.n	800b2a2 <__mdiff+0x8e>
	...

0800b2d0 <__ulp>:
 800b2d0:	4b12      	ldr	r3, [pc, #72]	; (800b31c <__ulp+0x4c>)
 800b2d2:	ee10 2a90 	vmov	r2, s1
 800b2d6:	401a      	ands	r2, r3
 800b2d8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	dd04      	ble.n	800b2ea <__ulp+0x1a>
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	ec41 0b10 	vmov	d0, r0, r1
 800b2e8:	4770      	bx	lr
 800b2ea:	425b      	negs	r3, r3
 800b2ec:	151b      	asrs	r3, r3, #20
 800b2ee:	2b13      	cmp	r3, #19
 800b2f0:	f04f 0000 	mov.w	r0, #0
 800b2f4:	f04f 0100 	mov.w	r1, #0
 800b2f8:	dc04      	bgt.n	800b304 <__ulp+0x34>
 800b2fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b2fe:	fa42 f103 	asr.w	r1, r2, r3
 800b302:	e7ef      	b.n	800b2e4 <__ulp+0x14>
 800b304:	3b14      	subs	r3, #20
 800b306:	2b1e      	cmp	r3, #30
 800b308:	f04f 0201 	mov.w	r2, #1
 800b30c:	bfda      	itte	le
 800b30e:	f1c3 031f 	rsble	r3, r3, #31
 800b312:	fa02 f303 	lslle.w	r3, r2, r3
 800b316:	4613      	movgt	r3, r2
 800b318:	4618      	mov	r0, r3
 800b31a:	e7e3      	b.n	800b2e4 <__ulp+0x14>
 800b31c:	7ff00000 	.word	0x7ff00000

0800b320 <__b2d>:
 800b320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b322:	6905      	ldr	r5, [r0, #16]
 800b324:	f100 0714 	add.w	r7, r0, #20
 800b328:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b32c:	1f2e      	subs	r6, r5, #4
 800b32e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b332:	4620      	mov	r0, r4
 800b334:	f7ff fdc5 	bl	800aec2 <__hi0bits>
 800b338:	f1c0 0320 	rsb	r3, r0, #32
 800b33c:	280a      	cmp	r0, #10
 800b33e:	600b      	str	r3, [r1, #0]
 800b340:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b3b8 <__b2d+0x98>
 800b344:	dc14      	bgt.n	800b370 <__b2d+0x50>
 800b346:	f1c0 0e0b 	rsb	lr, r0, #11
 800b34a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b34e:	42b7      	cmp	r7, r6
 800b350:	ea41 030c 	orr.w	r3, r1, ip
 800b354:	bf34      	ite	cc
 800b356:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b35a:	2100      	movcs	r1, #0
 800b35c:	3015      	adds	r0, #21
 800b35e:	fa04 f000 	lsl.w	r0, r4, r0
 800b362:	fa21 f10e 	lsr.w	r1, r1, lr
 800b366:	ea40 0201 	orr.w	r2, r0, r1
 800b36a:	ec43 2b10 	vmov	d0, r2, r3
 800b36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b370:	42b7      	cmp	r7, r6
 800b372:	bf3a      	itte	cc
 800b374:	f1a5 0608 	subcc.w	r6, r5, #8
 800b378:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b37c:	2100      	movcs	r1, #0
 800b37e:	380b      	subs	r0, #11
 800b380:	d015      	beq.n	800b3ae <__b2d+0x8e>
 800b382:	4084      	lsls	r4, r0
 800b384:	f1c0 0520 	rsb	r5, r0, #32
 800b388:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b38c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b390:	42be      	cmp	r6, r7
 800b392:	fa21 fc05 	lsr.w	ip, r1, r5
 800b396:	ea44 030c 	orr.w	r3, r4, ip
 800b39a:	bf8c      	ite	hi
 800b39c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b3a0:	2400      	movls	r4, #0
 800b3a2:	fa01 f000 	lsl.w	r0, r1, r0
 800b3a6:	40ec      	lsrs	r4, r5
 800b3a8:	ea40 0204 	orr.w	r2, r0, r4
 800b3ac:	e7dd      	b.n	800b36a <__b2d+0x4a>
 800b3ae:	ea44 030c 	orr.w	r3, r4, ip
 800b3b2:	460a      	mov	r2, r1
 800b3b4:	e7d9      	b.n	800b36a <__b2d+0x4a>
 800b3b6:	bf00      	nop
 800b3b8:	3ff00000 	.word	0x3ff00000

0800b3bc <__d2b>:
 800b3bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3c0:	460e      	mov	r6, r1
 800b3c2:	2101      	movs	r1, #1
 800b3c4:	ec59 8b10 	vmov	r8, r9, d0
 800b3c8:	4615      	mov	r5, r2
 800b3ca:	f7ff fcb6 	bl	800ad3a <_Balloc>
 800b3ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b3d2:	4607      	mov	r7, r0
 800b3d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3d8:	bb34      	cbnz	r4, 800b428 <__d2b+0x6c>
 800b3da:	9301      	str	r3, [sp, #4]
 800b3dc:	f1b8 0300 	subs.w	r3, r8, #0
 800b3e0:	d027      	beq.n	800b432 <__d2b+0x76>
 800b3e2:	a802      	add	r0, sp, #8
 800b3e4:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b3e8:	f7ff fd8a 	bl	800af00 <__lo0bits>
 800b3ec:	9900      	ldr	r1, [sp, #0]
 800b3ee:	b1f0      	cbz	r0, 800b42e <__d2b+0x72>
 800b3f0:	9a01      	ldr	r2, [sp, #4]
 800b3f2:	f1c0 0320 	rsb	r3, r0, #32
 800b3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3fa:	430b      	orrs	r3, r1
 800b3fc:	40c2      	lsrs	r2, r0
 800b3fe:	617b      	str	r3, [r7, #20]
 800b400:	9201      	str	r2, [sp, #4]
 800b402:	9b01      	ldr	r3, [sp, #4]
 800b404:	61bb      	str	r3, [r7, #24]
 800b406:	2b00      	cmp	r3, #0
 800b408:	bf14      	ite	ne
 800b40a:	2102      	movne	r1, #2
 800b40c:	2101      	moveq	r1, #1
 800b40e:	6139      	str	r1, [r7, #16]
 800b410:	b1c4      	cbz	r4, 800b444 <__d2b+0x88>
 800b412:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b416:	4404      	add	r4, r0
 800b418:	6034      	str	r4, [r6, #0]
 800b41a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b41e:	6028      	str	r0, [r5, #0]
 800b420:	4638      	mov	r0, r7
 800b422:	b003      	add	sp, #12
 800b424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b42c:	e7d5      	b.n	800b3da <__d2b+0x1e>
 800b42e:	6179      	str	r1, [r7, #20]
 800b430:	e7e7      	b.n	800b402 <__d2b+0x46>
 800b432:	a801      	add	r0, sp, #4
 800b434:	f7ff fd64 	bl	800af00 <__lo0bits>
 800b438:	9b01      	ldr	r3, [sp, #4]
 800b43a:	617b      	str	r3, [r7, #20]
 800b43c:	2101      	movs	r1, #1
 800b43e:	6139      	str	r1, [r7, #16]
 800b440:	3020      	adds	r0, #32
 800b442:	e7e5      	b.n	800b410 <__d2b+0x54>
 800b444:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b448:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b44c:	6030      	str	r0, [r6, #0]
 800b44e:	6918      	ldr	r0, [r3, #16]
 800b450:	f7ff fd37 	bl	800aec2 <__hi0bits>
 800b454:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b458:	e7e1      	b.n	800b41e <__d2b+0x62>

0800b45a <__ratio>:
 800b45a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45e:	4688      	mov	r8, r1
 800b460:	4669      	mov	r1, sp
 800b462:	4681      	mov	r9, r0
 800b464:	f7ff ff5c 	bl	800b320 <__b2d>
 800b468:	a901      	add	r1, sp, #4
 800b46a:	4640      	mov	r0, r8
 800b46c:	ec57 6b10 	vmov	r6, r7, d0
 800b470:	f7ff ff56 	bl	800b320 <__b2d>
 800b474:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b478:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b47c:	eba3 0c02 	sub.w	ip, r3, r2
 800b480:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b484:	1a9b      	subs	r3, r3, r2
 800b486:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b48a:	ec5b ab10 	vmov	sl, fp, d0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	bfce      	itee	gt
 800b492:	463a      	movgt	r2, r7
 800b494:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b498:	465a      	movle	r2, fp
 800b49a:	4659      	mov	r1, fp
 800b49c:	463d      	mov	r5, r7
 800b49e:	bfd4      	ite	le
 800b4a0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b4a4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	ee10 2a10 	vmov	r2, s0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	f7f5 f9cb 	bl	800084c <__aeabi_ddiv>
 800b4b6:	ec41 0b10 	vmov	d0, r0, r1
 800b4ba:	b003      	add	sp, #12
 800b4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4c0 <__copybits>:
 800b4c0:	3901      	subs	r1, #1
 800b4c2:	b510      	push	{r4, lr}
 800b4c4:	1149      	asrs	r1, r1, #5
 800b4c6:	6914      	ldr	r4, [r2, #16]
 800b4c8:	3101      	adds	r1, #1
 800b4ca:	f102 0314 	add.w	r3, r2, #20
 800b4ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b4d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b4d6:	42a3      	cmp	r3, r4
 800b4d8:	4602      	mov	r2, r0
 800b4da:	d303      	bcc.n	800b4e4 <__copybits+0x24>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	428a      	cmp	r2, r1
 800b4e0:	d305      	bcc.n	800b4ee <__copybits+0x2e>
 800b4e2:	bd10      	pop	{r4, pc}
 800b4e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4e8:	f840 2b04 	str.w	r2, [r0], #4
 800b4ec:	e7f3      	b.n	800b4d6 <__copybits+0x16>
 800b4ee:	f842 3b04 	str.w	r3, [r2], #4
 800b4f2:	e7f4      	b.n	800b4de <__copybits+0x1e>

0800b4f4 <__any_on>:
 800b4f4:	f100 0214 	add.w	r2, r0, #20
 800b4f8:	6900      	ldr	r0, [r0, #16]
 800b4fa:	114b      	asrs	r3, r1, #5
 800b4fc:	4298      	cmp	r0, r3
 800b4fe:	b510      	push	{r4, lr}
 800b500:	db11      	blt.n	800b526 <__any_on+0x32>
 800b502:	dd0a      	ble.n	800b51a <__any_on+0x26>
 800b504:	f011 011f 	ands.w	r1, r1, #31
 800b508:	d007      	beq.n	800b51a <__any_on+0x26>
 800b50a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b50e:	fa24 f001 	lsr.w	r0, r4, r1
 800b512:	fa00 f101 	lsl.w	r1, r0, r1
 800b516:	428c      	cmp	r4, r1
 800b518:	d10b      	bne.n	800b532 <__any_on+0x3e>
 800b51a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b51e:	4293      	cmp	r3, r2
 800b520:	d803      	bhi.n	800b52a <__any_on+0x36>
 800b522:	2000      	movs	r0, #0
 800b524:	bd10      	pop	{r4, pc}
 800b526:	4603      	mov	r3, r0
 800b528:	e7f7      	b.n	800b51a <__any_on+0x26>
 800b52a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b52e:	2900      	cmp	r1, #0
 800b530:	d0f5      	beq.n	800b51e <__any_on+0x2a>
 800b532:	2001      	movs	r0, #1
 800b534:	e7f6      	b.n	800b524 <__any_on+0x30>

0800b536 <_calloc_r>:
 800b536:	b538      	push	{r3, r4, r5, lr}
 800b538:	fb02 f401 	mul.w	r4, r2, r1
 800b53c:	4621      	mov	r1, r4
 800b53e:	f7fc ff43 	bl	80083c8 <_malloc_r>
 800b542:	4605      	mov	r5, r0
 800b544:	b118      	cbz	r0, 800b54e <_calloc_r+0x18>
 800b546:	4622      	mov	r2, r4
 800b548:	2100      	movs	r1, #0
 800b54a:	f7fc fee7 	bl	800831c <memset>
 800b54e:	4628      	mov	r0, r5
 800b550:	bd38      	pop	{r3, r4, r5, pc}

0800b552 <__ssputs_r>:
 800b552:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b556:	688e      	ldr	r6, [r1, #8]
 800b558:	429e      	cmp	r6, r3
 800b55a:	4682      	mov	sl, r0
 800b55c:	460c      	mov	r4, r1
 800b55e:	4690      	mov	r8, r2
 800b560:	4699      	mov	r9, r3
 800b562:	d837      	bhi.n	800b5d4 <__ssputs_r+0x82>
 800b564:	898a      	ldrh	r2, [r1, #12]
 800b566:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b56a:	d031      	beq.n	800b5d0 <__ssputs_r+0x7e>
 800b56c:	6825      	ldr	r5, [r4, #0]
 800b56e:	6909      	ldr	r1, [r1, #16]
 800b570:	1a6f      	subs	r7, r5, r1
 800b572:	6965      	ldr	r5, [r4, #20]
 800b574:	2302      	movs	r3, #2
 800b576:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b57a:	fb95 f5f3 	sdiv	r5, r5, r3
 800b57e:	f109 0301 	add.w	r3, r9, #1
 800b582:	443b      	add	r3, r7
 800b584:	429d      	cmp	r5, r3
 800b586:	bf38      	it	cc
 800b588:	461d      	movcc	r5, r3
 800b58a:	0553      	lsls	r3, r2, #21
 800b58c:	d530      	bpl.n	800b5f0 <__ssputs_r+0x9e>
 800b58e:	4629      	mov	r1, r5
 800b590:	f7fc ff1a 	bl	80083c8 <_malloc_r>
 800b594:	4606      	mov	r6, r0
 800b596:	b950      	cbnz	r0, 800b5ae <__ssputs_r+0x5c>
 800b598:	230c      	movs	r3, #12
 800b59a:	f8ca 3000 	str.w	r3, [sl]
 800b59e:	89a3      	ldrh	r3, [r4, #12]
 800b5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5a4:	81a3      	strh	r3, [r4, #12]
 800b5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ae:	463a      	mov	r2, r7
 800b5b0:	6921      	ldr	r1, [r4, #16]
 800b5b2:	f7ff fbb5 	bl	800ad20 <memcpy>
 800b5b6:	89a3      	ldrh	r3, [r4, #12]
 800b5b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5c0:	81a3      	strh	r3, [r4, #12]
 800b5c2:	6126      	str	r6, [r4, #16]
 800b5c4:	6165      	str	r5, [r4, #20]
 800b5c6:	443e      	add	r6, r7
 800b5c8:	1bed      	subs	r5, r5, r7
 800b5ca:	6026      	str	r6, [r4, #0]
 800b5cc:	60a5      	str	r5, [r4, #8]
 800b5ce:	464e      	mov	r6, r9
 800b5d0:	454e      	cmp	r6, r9
 800b5d2:	d900      	bls.n	800b5d6 <__ssputs_r+0x84>
 800b5d4:	464e      	mov	r6, r9
 800b5d6:	4632      	mov	r2, r6
 800b5d8:	4641      	mov	r1, r8
 800b5da:	6820      	ldr	r0, [r4, #0]
 800b5dc:	f000 f92b 	bl	800b836 <memmove>
 800b5e0:	68a3      	ldr	r3, [r4, #8]
 800b5e2:	1b9b      	subs	r3, r3, r6
 800b5e4:	60a3      	str	r3, [r4, #8]
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	441e      	add	r6, r3
 800b5ea:	6026      	str	r6, [r4, #0]
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	e7dc      	b.n	800b5aa <__ssputs_r+0x58>
 800b5f0:	462a      	mov	r2, r5
 800b5f2:	f000 f939 	bl	800b868 <_realloc_r>
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d1e2      	bne.n	800b5c2 <__ssputs_r+0x70>
 800b5fc:	6921      	ldr	r1, [r4, #16]
 800b5fe:	4650      	mov	r0, sl
 800b600:	f7fc fe94 	bl	800832c <_free_r>
 800b604:	e7c8      	b.n	800b598 <__ssputs_r+0x46>
	...

0800b608 <_svfiprintf_r>:
 800b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	461d      	mov	r5, r3
 800b60e:	898b      	ldrh	r3, [r1, #12]
 800b610:	061f      	lsls	r7, r3, #24
 800b612:	b09d      	sub	sp, #116	; 0x74
 800b614:	4680      	mov	r8, r0
 800b616:	460c      	mov	r4, r1
 800b618:	4616      	mov	r6, r2
 800b61a:	d50f      	bpl.n	800b63c <_svfiprintf_r+0x34>
 800b61c:	690b      	ldr	r3, [r1, #16]
 800b61e:	b96b      	cbnz	r3, 800b63c <_svfiprintf_r+0x34>
 800b620:	2140      	movs	r1, #64	; 0x40
 800b622:	f7fc fed1 	bl	80083c8 <_malloc_r>
 800b626:	6020      	str	r0, [r4, #0]
 800b628:	6120      	str	r0, [r4, #16]
 800b62a:	b928      	cbnz	r0, 800b638 <_svfiprintf_r+0x30>
 800b62c:	230c      	movs	r3, #12
 800b62e:	f8c8 3000 	str.w	r3, [r8]
 800b632:	f04f 30ff 	mov.w	r0, #4294967295
 800b636:	e0c8      	b.n	800b7ca <_svfiprintf_r+0x1c2>
 800b638:	2340      	movs	r3, #64	; 0x40
 800b63a:	6163      	str	r3, [r4, #20]
 800b63c:	2300      	movs	r3, #0
 800b63e:	9309      	str	r3, [sp, #36]	; 0x24
 800b640:	2320      	movs	r3, #32
 800b642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b646:	2330      	movs	r3, #48	; 0x30
 800b648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b64c:	9503      	str	r5, [sp, #12]
 800b64e:	f04f 0b01 	mov.w	fp, #1
 800b652:	4637      	mov	r7, r6
 800b654:	463d      	mov	r5, r7
 800b656:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b65a:	b10b      	cbz	r3, 800b660 <_svfiprintf_r+0x58>
 800b65c:	2b25      	cmp	r3, #37	; 0x25
 800b65e:	d13e      	bne.n	800b6de <_svfiprintf_r+0xd6>
 800b660:	ebb7 0a06 	subs.w	sl, r7, r6
 800b664:	d00b      	beq.n	800b67e <_svfiprintf_r+0x76>
 800b666:	4653      	mov	r3, sl
 800b668:	4632      	mov	r2, r6
 800b66a:	4621      	mov	r1, r4
 800b66c:	4640      	mov	r0, r8
 800b66e:	f7ff ff70 	bl	800b552 <__ssputs_r>
 800b672:	3001      	adds	r0, #1
 800b674:	f000 80a4 	beq.w	800b7c0 <_svfiprintf_r+0x1b8>
 800b678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b67a:	4453      	add	r3, sl
 800b67c:	9309      	str	r3, [sp, #36]	; 0x24
 800b67e:	783b      	ldrb	r3, [r7, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	f000 809d 	beq.w	800b7c0 <_svfiprintf_r+0x1b8>
 800b686:	2300      	movs	r3, #0
 800b688:	f04f 32ff 	mov.w	r2, #4294967295
 800b68c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b690:	9304      	str	r3, [sp, #16]
 800b692:	9307      	str	r3, [sp, #28]
 800b694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b698:	931a      	str	r3, [sp, #104]	; 0x68
 800b69a:	462f      	mov	r7, r5
 800b69c:	2205      	movs	r2, #5
 800b69e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b6a2:	4850      	ldr	r0, [pc, #320]	; (800b7e4 <_svfiprintf_r+0x1dc>)
 800b6a4:	f7f4 fd9c 	bl	80001e0 <memchr>
 800b6a8:	9b04      	ldr	r3, [sp, #16]
 800b6aa:	b9d0      	cbnz	r0, 800b6e2 <_svfiprintf_r+0xda>
 800b6ac:	06d9      	lsls	r1, r3, #27
 800b6ae:	bf44      	itt	mi
 800b6b0:	2220      	movmi	r2, #32
 800b6b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b6b6:	071a      	lsls	r2, r3, #28
 800b6b8:	bf44      	itt	mi
 800b6ba:	222b      	movmi	r2, #43	; 0x2b
 800b6bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b6c0:	782a      	ldrb	r2, [r5, #0]
 800b6c2:	2a2a      	cmp	r2, #42	; 0x2a
 800b6c4:	d015      	beq.n	800b6f2 <_svfiprintf_r+0xea>
 800b6c6:	9a07      	ldr	r2, [sp, #28]
 800b6c8:	462f      	mov	r7, r5
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	250a      	movs	r5, #10
 800b6ce:	4639      	mov	r1, r7
 800b6d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6d4:	3b30      	subs	r3, #48	; 0x30
 800b6d6:	2b09      	cmp	r3, #9
 800b6d8:	d94d      	bls.n	800b776 <_svfiprintf_r+0x16e>
 800b6da:	b1b8      	cbz	r0, 800b70c <_svfiprintf_r+0x104>
 800b6dc:	e00f      	b.n	800b6fe <_svfiprintf_r+0xf6>
 800b6de:	462f      	mov	r7, r5
 800b6e0:	e7b8      	b.n	800b654 <_svfiprintf_r+0x4c>
 800b6e2:	4a40      	ldr	r2, [pc, #256]	; (800b7e4 <_svfiprintf_r+0x1dc>)
 800b6e4:	1a80      	subs	r0, r0, r2
 800b6e6:	fa0b f000 	lsl.w	r0, fp, r0
 800b6ea:	4318      	orrs	r0, r3
 800b6ec:	9004      	str	r0, [sp, #16]
 800b6ee:	463d      	mov	r5, r7
 800b6f0:	e7d3      	b.n	800b69a <_svfiprintf_r+0x92>
 800b6f2:	9a03      	ldr	r2, [sp, #12]
 800b6f4:	1d11      	adds	r1, r2, #4
 800b6f6:	6812      	ldr	r2, [r2, #0]
 800b6f8:	9103      	str	r1, [sp, #12]
 800b6fa:	2a00      	cmp	r2, #0
 800b6fc:	db01      	blt.n	800b702 <_svfiprintf_r+0xfa>
 800b6fe:	9207      	str	r2, [sp, #28]
 800b700:	e004      	b.n	800b70c <_svfiprintf_r+0x104>
 800b702:	4252      	negs	r2, r2
 800b704:	f043 0302 	orr.w	r3, r3, #2
 800b708:	9207      	str	r2, [sp, #28]
 800b70a:	9304      	str	r3, [sp, #16]
 800b70c:	783b      	ldrb	r3, [r7, #0]
 800b70e:	2b2e      	cmp	r3, #46	; 0x2e
 800b710:	d10c      	bne.n	800b72c <_svfiprintf_r+0x124>
 800b712:	787b      	ldrb	r3, [r7, #1]
 800b714:	2b2a      	cmp	r3, #42	; 0x2a
 800b716:	d133      	bne.n	800b780 <_svfiprintf_r+0x178>
 800b718:	9b03      	ldr	r3, [sp, #12]
 800b71a:	1d1a      	adds	r2, r3, #4
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	9203      	str	r2, [sp, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	bfb8      	it	lt
 800b724:	f04f 33ff 	movlt.w	r3, #4294967295
 800b728:	3702      	adds	r7, #2
 800b72a:	9305      	str	r3, [sp, #20]
 800b72c:	4d2e      	ldr	r5, [pc, #184]	; (800b7e8 <_svfiprintf_r+0x1e0>)
 800b72e:	7839      	ldrb	r1, [r7, #0]
 800b730:	2203      	movs	r2, #3
 800b732:	4628      	mov	r0, r5
 800b734:	f7f4 fd54 	bl	80001e0 <memchr>
 800b738:	b138      	cbz	r0, 800b74a <_svfiprintf_r+0x142>
 800b73a:	2340      	movs	r3, #64	; 0x40
 800b73c:	1b40      	subs	r0, r0, r5
 800b73e:	fa03 f000 	lsl.w	r0, r3, r0
 800b742:	9b04      	ldr	r3, [sp, #16]
 800b744:	4303      	orrs	r3, r0
 800b746:	3701      	adds	r7, #1
 800b748:	9304      	str	r3, [sp, #16]
 800b74a:	7839      	ldrb	r1, [r7, #0]
 800b74c:	4827      	ldr	r0, [pc, #156]	; (800b7ec <_svfiprintf_r+0x1e4>)
 800b74e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b752:	2206      	movs	r2, #6
 800b754:	1c7e      	adds	r6, r7, #1
 800b756:	f7f4 fd43 	bl	80001e0 <memchr>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d038      	beq.n	800b7d0 <_svfiprintf_r+0x1c8>
 800b75e:	4b24      	ldr	r3, [pc, #144]	; (800b7f0 <_svfiprintf_r+0x1e8>)
 800b760:	bb13      	cbnz	r3, 800b7a8 <_svfiprintf_r+0x1a0>
 800b762:	9b03      	ldr	r3, [sp, #12]
 800b764:	3307      	adds	r3, #7
 800b766:	f023 0307 	bic.w	r3, r3, #7
 800b76a:	3308      	adds	r3, #8
 800b76c:	9303      	str	r3, [sp, #12]
 800b76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b770:	444b      	add	r3, r9
 800b772:	9309      	str	r3, [sp, #36]	; 0x24
 800b774:	e76d      	b.n	800b652 <_svfiprintf_r+0x4a>
 800b776:	fb05 3202 	mla	r2, r5, r2, r3
 800b77a:	2001      	movs	r0, #1
 800b77c:	460f      	mov	r7, r1
 800b77e:	e7a6      	b.n	800b6ce <_svfiprintf_r+0xc6>
 800b780:	2300      	movs	r3, #0
 800b782:	3701      	adds	r7, #1
 800b784:	9305      	str	r3, [sp, #20]
 800b786:	4619      	mov	r1, r3
 800b788:	250a      	movs	r5, #10
 800b78a:	4638      	mov	r0, r7
 800b78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b790:	3a30      	subs	r2, #48	; 0x30
 800b792:	2a09      	cmp	r2, #9
 800b794:	d903      	bls.n	800b79e <_svfiprintf_r+0x196>
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0c8      	beq.n	800b72c <_svfiprintf_r+0x124>
 800b79a:	9105      	str	r1, [sp, #20]
 800b79c:	e7c6      	b.n	800b72c <_svfiprintf_r+0x124>
 800b79e:	fb05 2101 	mla	r1, r5, r1, r2
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	e7f0      	b.n	800b78a <_svfiprintf_r+0x182>
 800b7a8:	ab03      	add	r3, sp, #12
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	4622      	mov	r2, r4
 800b7ae:	4b11      	ldr	r3, [pc, #68]	; (800b7f4 <_svfiprintf_r+0x1ec>)
 800b7b0:	a904      	add	r1, sp, #16
 800b7b2:	4640      	mov	r0, r8
 800b7b4:	f7fc fef6 	bl	80085a4 <_printf_float>
 800b7b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b7bc:	4681      	mov	r9, r0
 800b7be:	d1d6      	bne.n	800b76e <_svfiprintf_r+0x166>
 800b7c0:	89a3      	ldrh	r3, [r4, #12]
 800b7c2:	065b      	lsls	r3, r3, #25
 800b7c4:	f53f af35 	bmi.w	800b632 <_svfiprintf_r+0x2a>
 800b7c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7ca:	b01d      	add	sp, #116	; 0x74
 800b7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d0:	ab03      	add	r3, sp, #12
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	4622      	mov	r2, r4
 800b7d6:	4b07      	ldr	r3, [pc, #28]	; (800b7f4 <_svfiprintf_r+0x1ec>)
 800b7d8:	a904      	add	r1, sp, #16
 800b7da:	4640      	mov	r0, r8
 800b7dc:	f7fd f998 	bl	8008b10 <_printf_i>
 800b7e0:	e7ea      	b.n	800b7b8 <_svfiprintf_r+0x1b0>
 800b7e2:	bf00      	nop
 800b7e4:	0800bad4 	.word	0x0800bad4
 800b7e8:	0800bada 	.word	0x0800bada
 800b7ec:	0800bade 	.word	0x0800bade
 800b7f0:	080085a5 	.word	0x080085a5
 800b7f4:	0800b553 	.word	0x0800b553

0800b7f8 <strncmp>:
 800b7f8:	b510      	push	{r4, lr}
 800b7fa:	b16a      	cbz	r2, 800b818 <strncmp+0x20>
 800b7fc:	3901      	subs	r1, #1
 800b7fe:	1884      	adds	r4, r0, r2
 800b800:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b804:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b808:	4293      	cmp	r3, r2
 800b80a:	d103      	bne.n	800b814 <strncmp+0x1c>
 800b80c:	42a0      	cmp	r0, r4
 800b80e:	d001      	beq.n	800b814 <strncmp+0x1c>
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1f5      	bne.n	800b800 <strncmp+0x8>
 800b814:	1a98      	subs	r0, r3, r2
 800b816:	bd10      	pop	{r4, pc}
 800b818:	4610      	mov	r0, r2
 800b81a:	e7fc      	b.n	800b816 <strncmp+0x1e>

0800b81c <__ascii_wctomb>:
 800b81c:	b149      	cbz	r1, 800b832 <__ascii_wctomb+0x16>
 800b81e:	2aff      	cmp	r2, #255	; 0xff
 800b820:	bf85      	ittet	hi
 800b822:	238a      	movhi	r3, #138	; 0x8a
 800b824:	6003      	strhi	r3, [r0, #0]
 800b826:	700a      	strbls	r2, [r1, #0]
 800b828:	f04f 30ff 	movhi.w	r0, #4294967295
 800b82c:	bf98      	it	ls
 800b82e:	2001      	movls	r0, #1
 800b830:	4770      	bx	lr
 800b832:	4608      	mov	r0, r1
 800b834:	4770      	bx	lr

0800b836 <memmove>:
 800b836:	4288      	cmp	r0, r1
 800b838:	b510      	push	{r4, lr}
 800b83a:	eb01 0302 	add.w	r3, r1, r2
 800b83e:	d807      	bhi.n	800b850 <memmove+0x1a>
 800b840:	1e42      	subs	r2, r0, #1
 800b842:	4299      	cmp	r1, r3
 800b844:	d00a      	beq.n	800b85c <memmove+0x26>
 800b846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b84a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b84e:	e7f8      	b.n	800b842 <memmove+0xc>
 800b850:	4283      	cmp	r3, r0
 800b852:	d9f5      	bls.n	800b840 <memmove+0xa>
 800b854:	1881      	adds	r1, r0, r2
 800b856:	1ad2      	subs	r2, r2, r3
 800b858:	42d3      	cmn	r3, r2
 800b85a:	d100      	bne.n	800b85e <memmove+0x28>
 800b85c:	bd10      	pop	{r4, pc}
 800b85e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b862:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b866:	e7f7      	b.n	800b858 <memmove+0x22>

0800b868 <_realloc_r>:
 800b868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86a:	4607      	mov	r7, r0
 800b86c:	4614      	mov	r4, r2
 800b86e:	460e      	mov	r6, r1
 800b870:	b921      	cbnz	r1, 800b87c <_realloc_r+0x14>
 800b872:	4611      	mov	r1, r2
 800b874:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b878:	f7fc bda6 	b.w	80083c8 <_malloc_r>
 800b87c:	b922      	cbnz	r2, 800b888 <_realloc_r+0x20>
 800b87e:	f7fc fd55 	bl	800832c <_free_r>
 800b882:	4625      	mov	r5, r4
 800b884:	4628      	mov	r0, r5
 800b886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b888:	f000 f814 	bl	800b8b4 <_malloc_usable_size_r>
 800b88c:	42a0      	cmp	r0, r4
 800b88e:	d20f      	bcs.n	800b8b0 <_realloc_r+0x48>
 800b890:	4621      	mov	r1, r4
 800b892:	4638      	mov	r0, r7
 800b894:	f7fc fd98 	bl	80083c8 <_malloc_r>
 800b898:	4605      	mov	r5, r0
 800b89a:	2800      	cmp	r0, #0
 800b89c:	d0f2      	beq.n	800b884 <_realloc_r+0x1c>
 800b89e:	4631      	mov	r1, r6
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	f7ff fa3d 	bl	800ad20 <memcpy>
 800b8a6:	4631      	mov	r1, r6
 800b8a8:	4638      	mov	r0, r7
 800b8aa:	f7fc fd3f 	bl	800832c <_free_r>
 800b8ae:	e7e9      	b.n	800b884 <_realloc_r+0x1c>
 800b8b0:	4635      	mov	r5, r6
 800b8b2:	e7e7      	b.n	800b884 <_realloc_r+0x1c>

0800b8b4 <_malloc_usable_size_r>:
 800b8b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8b8:	1f18      	subs	r0, r3, #4
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	bfbc      	itt	lt
 800b8be:	580b      	ldrlt	r3, [r1, r0]
 800b8c0:	18c0      	addlt	r0, r0, r3
 800b8c2:	4770      	bx	lr

0800b8c4 <_init>:
 800b8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c6:	bf00      	nop
 800b8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ca:	bc08      	pop	{r3}
 800b8cc:	469e      	mov	lr, r3
 800b8ce:	4770      	bx	lr

0800b8d0 <_fini>:
 800b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d2:	bf00      	nop
 800b8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8d6:	bc08      	pop	{r3}
 800b8d8:	469e      	mov	lr, r3
 800b8da:	4770      	bx	lr
