
Maestro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b534  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800b6c8  0800b6c8  0001b6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9d0  0800b9d0  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9d0  0800b9d0  0001b9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9d8  0800b9d8  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9d8  0800b9d8  0001b9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9dc  0800b9dc  0001b9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800b9e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001970  20000354  0800bd34  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20001cc4  0800bd34  00021cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001621f  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033bf  00000000  00000000  000365a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de8  00000000  00000000  00039968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  0003a750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023f53  00000000  00000000  0003b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f347  00000000  00000000  0005f2f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5975  00000000  00000000  0006e63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133faf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004328  00000000  00000000  0013402c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b6ac 	.word	0x0800b6ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	0800b6ac 	.word	0x0800b6ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <MX_GPIO_Init+0xec>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a33      	ldr	r2, [pc, #204]	; (8000fd4 <MX_GPIO_Init+0xec>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <MX_GPIO_Init+0xec>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <MX_GPIO_Init+0xec>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a2c      	ldr	r2, [pc, #176]	; (8000fd4 <MX_GPIO_Init+0xec>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <MX_GPIO_Init+0xec>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <MX_GPIO_Init+0xec>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a25      	ldr	r2, [pc, #148]	; (8000fd4 <MX_GPIO_Init+0xec>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <MX_GPIO_Init+0xec>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <MX_GPIO_Init+0xec>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <MX_GPIO_Init+0xec>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_GPIO_Init+0xec>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Slave_1_GPIO_Port, Slave_1_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2140      	movs	r1, #64	; 0x40
 8000f72:	4819      	ldr	r0, [pc, #100]	; (8000fd8 <MX_GPIO_Init+0xf0>)
 8000f74:	f001 fa92 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Slave_2_GPIO_Port, Slave_2_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7e:	4816      	ldr	r0, [pc, #88]	; (8000fd8 <MX_GPIO_Init+0xf0>)
 8000f80:	f001 fa8c 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Slave_1_Pin|Slave_2_Pin;
 8000f84:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f92:	2302      	movs	r3, #2
 8000f94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <MX_GPIO_Init+0xf0>)
 8000f9e:	f001 f8e3 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Int_1_Pin|Int_2_Pin;
 8000fa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_GPIO_Init+0xf4>)
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <MX_GPIO_Init+0xf0>)
 8000fb8:	f001 f8d6 	bl	8002168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2017      	movs	r0, #23
 8000fc2:	f001 f878 	bl	80020b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fc6:	2017      	movs	r0, #23
 8000fc8:	f001 f891 	bl	80020ee <HAL_NVIC_EnableIRQ>

}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	10110000 	.word	0x10110000

08000fe0 <identificador>:
 *
 * Created: 10/12/2019 06:15:29 p.m.
 *  Author: Rodri
 */
#include "identificador.h"
int identificador(char *str, double *instrucciones, int cont) {
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b0c7      	sub	sp, #284	; 0x11c
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	6018      	str	r0, [r3, #0]
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	6019      	str	r1, [r3, #0]
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	601a      	str	r2, [r3, #0]
	char tmp[50] = { 0 };
 8000ff6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ffa:	2232      	movs	r2, #50	; 0x32
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f007 f880 	bl	8008104 <memset>
	double vec[20];
	char *puntero;
	int i = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	int j = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	int k = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	int l = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	int cont1 = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	double numero;
	while (i < cont) {
 8001022:	e2b0      	b.n	8001586 <identificador+0x5a6>
		switch (str[i]) {
 8001024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001028:	f107 020c 	add.w	r2, r7, #12
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	4413      	add	r3, r2
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	3b41      	subs	r3, #65	; 0x41
 8001034:	2b31      	cmp	r3, #49	; 0x31
 8001036:	f200 82a1 	bhi.w	800157c <identificador+0x59c>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <identificador+0x60>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	08001161 	.word	0x08001161
 8001044:	0800157d 	.word	0x0800157d
 8001048:	08001265 	.word	0x08001265
 800104c:	08001109 	.word	0x08001109
 8001050:	0800157d 	.word	0x0800157d
 8001054:	0800157d 	.word	0x0800157d
 8001058:	0800157d 	.word	0x0800157d
 800105c:	080011b7 	.word	0x080011b7
 8001060:	080013e9 	.word	0x080013e9
 8001064:	0800157d 	.word	0x0800157d
 8001068:	0800157d 	.word	0x0800157d
 800106c:	0800157d 	.word	0x0800157d
 8001070:	0800157d 	.word	0x0800157d
 8001074:	0800157d 	.word	0x0800157d
 8001078:	0800157d 	.word	0x0800157d
 800107c:	0800157d 	.word	0x0800157d
 8001080:	0800157d 	.word	0x0800157d
 8001084:	0800120f 	.word	0x0800120f
 8001088:	0800157d 	.word	0x0800157d
 800108c:	0800157d 	.word	0x0800157d
 8001090:	0800157d 	.word	0x0800157d
 8001094:	0800157d 	.word	0x0800157d
 8001098:	0800157d 	.word	0x0800157d
 800109c:	0800157d 	.word	0x0800157d
 80010a0:	0800157d 	.word	0x0800157d
 80010a4:	0800157d 	.word	0x0800157d
 80010a8:	0800157d 	.word	0x0800157d
 80010ac:	0800157d 	.word	0x0800157d
 80010b0:	0800157d 	.word	0x0800157d
 80010b4:	0800157d 	.word	0x0800157d
 80010b8:	0800157d 	.word	0x0800157d
 80010bc:	0800157d 	.word	0x0800157d
 80010c0:	08001161 	.word	0x08001161
 80010c4:	0800157d 	.word	0x0800157d
 80010c8:	08001265 	.word	0x08001265
 80010cc:	08001109 	.word	0x08001109
 80010d0:	0800157d 	.word	0x0800157d
 80010d4:	0800157d 	.word	0x0800157d
 80010d8:	0800157d 	.word	0x0800157d
 80010dc:	080011b7 	.word	0x080011b7
 80010e0:	080013e9 	.word	0x080013e9
 80010e4:	0800157d 	.word	0x0800157d
 80010e8:	0800157d 	.word	0x0800157d
 80010ec:	0800157d 	.word	0x0800157d
 80010f0:	0800157d 	.word	0x0800157d
 80010f4:	0800157d 	.word	0x0800157d
 80010f8:	0800157d 	.word	0x0800157d
 80010fc:	0800157d 	.word	0x0800157d
 8001100:	0800157d 	.word	0x0800157d
 8001104:	0800120f 	.word	0x0800120f
		case 'd':
		case 'D':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 8001108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800110c:	3301      	adds	r3, #1
 800110e:	f107 020c 	add.w	r2, r7, #12
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	4413      	add	r3, r2
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b2d      	cmp	r3, #45	; 0x2d
 800111a:	d009      	beq.n	8001130 <identificador+0x150>
 800111c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001120:	3301      	adds	r3, #1
 8001122:	f107 020c 	add.w	r2, r7, #12
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	4413      	add	r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b3a      	cmp	r3, #58	; 0x3a
 800112e:	d111      	bne.n	8001154 <identificador+0x174>
				instrucciones[j] = Modo_desactivado;
 8001130:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	f107 0208 	add.w	r2, r7, #8
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	441a      	add	r2, r3
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	f04f 0400 	mov.w	r4, #0
 8001146:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 800114a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800114e:	3301      	adds	r3, #1
 8001150:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			}
			i++;
 8001154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001158:	3301      	adds	r3, #1
 800115a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			break;
 800115e:	e212      	b.n	8001586 <identificador+0x5a6>
		case 'a':
		case 'A':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 8001160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001164:	3301      	adds	r3, #1
 8001166:	f107 020c 	add.w	r2, r7, #12
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b2d      	cmp	r3, #45	; 0x2d
 8001172:	d009      	beq.n	8001188 <identificador+0x1a8>
 8001174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001178:	3301      	adds	r3, #1
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b3a      	cmp	r3, #58	; 0x3a
 8001186:	d110      	bne.n	80011aa <identificador+0x1ca>
				instrucciones[j] = Modo_activado;
 8001188:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	f107 0208 	add.w	r2, r7, #8
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	441a      	add	r2, r3
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	4cc6      	ldr	r4, [pc, #792]	; (80014b4 <identificador+0x4d4>)
 800119c:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 80011a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011a4:	3301      	adds	r3, #1
 80011a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			}
			i++;
 80011aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011ae:	3301      	adds	r3, #1
 80011b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			break;
 80011b4:	e1e7      	b.n	8001586 <identificador+0x5a6>
		case 'h':
		case 'H':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 80011b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011ba:	3301      	adds	r3, #1
 80011bc:	f107 020c 	add.w	r2, r7, #12
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b2d      	cmp	r3, #45	; 0x2d
 80011c8:	d009      	beq.n	80011de <identificador+0x1fe>
 80011ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011ce:	3301      	adds	r3, #1
 80011d0:	f107 020c 	add.w	r2, r7, #12
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b3a      	cmp	r3, #58	; 0x3a
 80011dc:	d111      	bne.n	8001202 <identificador+0x222>
				instrucciones[j] = Modo_homing;
 80011de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	f107 0208 	add.w	r2, r7, #8
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	441a      	add	r2, r3
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80011f4:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 80011f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011fc:	3301      	adds	r3, #1
 80011fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			}
			i++;
 8001202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001206:	3301      	adds	r3, #1
 8001208:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			break;
 800120c:	e1bb      	b.n	8001586 <identificador+0x5a6>
		case 'r':
		case 'R':
			if (str[i + 1] == '-' || str[i + 1] == ':') {
 800120e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001212:	3301      	adds	r3, #1
 8001214:	f107 020c 	add.w	r2, r7, #12
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	4413      	add	r3, r2
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b2d      	cmp	r3, #45	; 0x2d
 8001220:	d009      	beq.n	8001236 <identificador+0x256>
 8001222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001226:	3301      	adds	r3, #1
 8001228:	f107 020c 	add.w	r2, r7, #12
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	4413      	add	r3, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b3a      	cmp	r3, #58	; 0x3a
 8001234:	d110      	bne.n	8001258 <identificador+0x278>
				instrucciones[j] = Resumen;
 8001236:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	f107 0208 	add.w	r2, r7, #8
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	441a      	add	r2, r3
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	4c9b      	ldr	r4, [pc, #620]	; (80014b8 <identificador+0x4d8>)
 800124a:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 800124e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001252:	3301      	adds	r3, #1
 8001254:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			}
			i++;
 8001258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800125c:	3301      	adds	r3, #1
 800125e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			break;
 8001262:	e190      	b.n	8001586 <identificador+0x5a6>
		case 'c':
		case 'C':
			i++;
 8001264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001268:	3301      	adds	r3, #1
 800126a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			while ((str[i] != '-') && (i < cont)) {
 800126e:	e06e      	b.n	800134e <identificador+0x36e>
				k = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				if (str[i] == '_') {
 8001276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800127a:	f107 020c 	add.w	r2, r7, #12
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b5f      	cmp	r3, #95	; 0x5f
 8001286:	d11d      	bne.n	80012c4 <identificador+0x2e4>
					i++;
 8001288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800128c:	3301      	adds	r3, #1
 800128e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
				}
				while ((str[i] != '_') && (i < cont) && (str[i] != '-')) {
 8001292:	e017      	b.n	80012c4 <identificador+0x2e4>
					tmp[k] = str[i];
 8001294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001298:	f107 020c 	add.w	r2, r7, #12
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	7819      	ldrb	r1, [r3, #0]
 80012a2:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80012a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012aa:	4413      	add	r3, r2
 80012ac:	460a      	mov	r2, r1
 80012ae:	701a      	strb	r2, [r3, #0]
					k++;
 80012b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012b4:	3301      	adds	r3, #1
 80012b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
					i++;
 80012ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012be:	3301      	adds	r3, #1
 80012c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
				while ((str[i] != '_') && (i < cont) && (str[i] != '-')) {
 80012c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012c8:	f107 020c 	add.w	r2, r7, #12
 80012cc:	6812      	ldr	r2, [r2, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b5f      	cmp	r3, #95	; 0x5f
 80012d4:	d00e      	beq.n	80012f4 <identificador+0x314>
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	da08      	bge.n	80012f4 <identificador+0x314>
 80012e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012e6:	f107 020c 	add.w	r2, r7, #12
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b2d      	cmp	r3, #45	; 0x2d
 80012f2:	d1cf      	bne.n	8001294 <identificador+0x2b4>
				}
				numero = strtod(tmp, &puntero);
 80012f4:	f107 0214 	add.w	r2, r7, #20
 80012f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f008 fa62 	bl	80097c8 <strtod>
 8001304:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
				vec[cont1] = numero;
 8001308:	f107 0218 	add.w	r2, r7, #24
 800130c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	441a      	add	r2, r3
 8001314:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8001318:	e9c2 3400 	strd	r3, r4, [r2]
				cont1++;
 800131c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001320:	3301      	adds	r3, #1
 8001322:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
				for (int m = 0; m < 50; m++) {
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800132c:	e00b      	b.n	8001346 <identificador+0x366>
					tmp[m] = 0;
 800132e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001332:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001336:	4413      	add	r3, r2
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
				for (int m = 0; m < 50; m++) {
 800133c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001340:	3301      	adds	r3, #1
 8001342:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001346:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800134a:	2b31      	cmp	r3, #49	; 0x31
 800134c:	ddef      	ble.n	800132e <identificador+0x34e>
			while ((str[i] != '-') && (i < cont)) {
 800134e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001352:	f107 020c 	add.w	r2, r7, #12
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b2d      	cmp	r3, #45	; 0x2d
 800135e:	d005      	beq.n	800136c <identificador+0x38c>
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	db81      	blt.n	8001270 <identificador+0x290>
				}
			}
			if (cont1 == 5) {
 800136c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001370:	2b05      	cmp	r3, #5
 8001372:	d135      	bne.n	80013e0 <identificador+0x400>
				instrucciones[j] = Cin_dir;
 8001374:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	f107 0208 	add.w	r2, r7, #8
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	441a      	add	r2, r3
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	4c4d      	ldr	r4, [pc, #308]	; (80014bc <identificador+0x4dc>)
 8001388:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 800138c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001390:	3301      	adds	r3, #1
 8001392:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				for (l = 0; l < cont1; l++) {
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800139c:	e01a      	b.n	80013d4 <identificador+0x3f4>
					instrucciones[j] = vec[l];
 800139e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	f107 0208 	add.w	r2, r7, #8
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	441a      	add	r2, r3
 80013ac:	f107 0118 	add.w	r1, r7, #24
 80013b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	440b      	add	r3, r1
 80013b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013bc:	e9c2 3400 	strd	r3, r4, [r2]
					j++;
 80013c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013c4:	3301      	adds	r3, #1
 80013c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				for (l = 0; l < cont1; l++) {
 80013ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013ce:	3301      	adds	r3, #1
 80013d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80013d4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80013d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbde      	blt.n	800139e <identificador+0x3be>
				}
			}
			cont1 = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			break;
 80013e6:	e0ce      	b.n	8001586 <identificador+0x5a6>
		case 'i':
		case 'I':
			i++;
 80013e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013ec:	3301      	adds	r3, #1
 80013ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			while ((str[i] != '-') && (i < cont)) {
 80013f2:	e075      	b.n	80014e0 <identificador+0x500>
				k = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				if (str[i] == '_') {
 80013fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013fe:	f107 020c 	add.w	r2, r7, #12
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b5f      	cmp	r3, #95	; 0x5f
 800140a:	d11d      	bne.n	8001448 <identificador+0x468>
					i++;
 800140c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001410:	3301      	adds	r3, #1
 8001412:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
				}
				while ((str[i] != '_') && (i < cont) && (str[i] != '-')) {
 8001416:	e017      	b.n	8001448 <identificador+0x468>
					tmp[k] = str[i];
 8001418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800141c:	f107 020c 	add.w	r2, r7, #12
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	4413      	add	r3, r2
 8001424:	7819      	ldrb	r1, [r3, #0]
 8001426:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800142a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800142e:	4413      	add	r3, r2
 8001430:	460a      	mov	r2, r1
 8001432:	701a      	strb	r2, [r3, #0]
					k++;
 8001434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001438:	3301      	adds	r3, #1
 800143a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
					i++;
 800143e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001442:	3301      	adds	r3, #1
 8001444:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
				while ((str[i] != '_') && (i < cont) && (str[i] != '-')) {
 8001448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800144c:	f107 020c 	add.w	r2, r7, #12
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	4413      	add	r3, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b5f      	cmp	r3, #95	; 0x5f
 8001458:	d00e      	beq.n	8001478 <identificador+0x498>
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	da08      	bge.n	8001478 <identificador+0x498>
 8001466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800146a:	f107 020c 	add.w	r2, r7, #12
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	4413      	add	r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b2d      	cmp	r3, #45	; 0x2d
 8001476:	d1cf      	bne.n	8001418 <identificador+0x438>
				}
				numero = strtod(tmp, &puntero);
 8001478:	f107 0214 	add.w	r2, r7, #20
 800147c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001480:	4611      	mov	r1, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f008 f9a0 	bl	80097c8 <strtod>
 8001488:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
				vec[cont1] = numero;
 800148c:	f107 0218 	add.w	r2, r7, #24
 8001490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	441a      	add	r2, r3
 8001498:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800149c:	e9c2 3400 	strd	r3, r4, [r2]
				cont1++;
 80014a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014a4:	3301      	adds	r3, #1
 80014a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
				for (int m = 0; m < 50; m++) {
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80014b0:	e012      	b.n	80014d8 <identificador+0x4f8>
 80014b2:	bf00      	nop
 80014b4:	3ff00000 	.word	0x3ff00000
 80014b8:	40140000 	.word	0x40140000
 80014bc:	40080000 	.word	0x40080000
					tmp[m] = 0;
 80014c0:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80014c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014c8:	4413      	add	r3, r2
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
				for (int m = 0; m < 50; m++) {
 80014ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014d2:	3301      	adds	r3, #1
 80014d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80014d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014dc:	2b31      	cmp	r3, #49	; 0x31
 80014de:	ddef      	ble.n	80014c0 <identificador+0x4e0>
			while ((str[i] != '-') && (i < cont)) {
 80014e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014e4:	f107 020c 	add.w	r2, r7, #12
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b2d      	cmp	r3, #45	; 0x2d
 80014f0:	d006      	beq.n	8001500 <identificador+0x520>
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	f6ff af7a 	blt.w	80013f4 <identificador+0x414>
				}
			}
			if (cont1 == 5) {
 8001500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001504:	2b05      	cmp	r3, #5
 8001506:	d135      	bne.n	8001574 <identificador+0x594>
				instrucciones[j] = Cin_inv;
 8001508:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	f107 0208 	add.w	r2, r7, #8
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	441a      	add	r2, r3
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	4c22      	ldr	r4, [pc, #136]	; (80015a4 <identificador+0x5c4>)
 800151c:	e9c2 3400 	strd	r3, r4, [r2]
				j++;
 8001520:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001524:	3301      	adds	r3, #1
 8001526:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				for (l = 0; l < cont1; l++) {
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001530:	e01a      	b.n	8001568 <identificador+0x588>
					instrucciones[j] = vec[l];
 8001532:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	f107 0208 	add.w	r2, r7, #8
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	441a      	add	r2, r3
 8001540:	f107 0118 	add.w	r1, r7, #24
 8001544:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	440b      	add	r3, r1
 800154c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001550:	e9c2 3400 	strd	r3, r4, [r2]
					j++;
 8001554:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001558:	3301      	adds	r3, #1
 800155a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				for (l = 0; l < cont1; l++) {
 800155e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001562:	3301      	adds	r3, #1
 8001564:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001568:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800156c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001570:	429a      	cmp	r2, r3
 8001572:	dbde      	blt.n	8001532 <identificador+0x552>
				}
			}
			cont1 = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			break;
 800157a:	e004      	b.n	8001586 <identificador+0x5a6>
		default:
			i++;
 800157c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001580:	3301      	adds	r3, #1
 8001582:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	while (i < cont) {
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	f6ff ad48 	blt.w	8001024 <identificador+0x44>
		}
	}
	return j;
 8001594:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001598:	4618      	mov	r0, r3
 800159a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40100000 	.word	0x40100000

080015a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b0ff      	sub	sp, #508	; 0x1fc
 80015ac:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	int cant = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	char str[50];
	double instrucciones[50];
	//Flags
	int flag_activacion = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	int flag_homing = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	//Variables enum
	enum Estado estado = Desactivado;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015c6:	f000 fc07 	bl	8001dd8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015ca:	f000 f9ab 	bl	8001924 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015ce:	f7ff fc8b 	bl	8000ee8 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80015d2:	f006 f83b 	bl	800764c <MX_USB_DEVICE_Init>
	MX_SPI2_Init();
 80015d6:	f000 fa77 	bl	8001ac8 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	SPI_Transmit_1(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 fa0c 	bl	80019f8 <SPI_Transmit_1>
	/* USER CODE END 2 */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//Generar string
		if (flag_recepcion_USB) {
 80015e0:	4bc9      	ldr	r3, [pc, #804]	; (8001908 <main+0x360>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00f      	beq.n	8001608 <main+0x60>
			str[cont_datos_USB - 1] = dato_recepcion_USB;
 80015e8:	4bc8      	ldr	r3, [pc, #800]	; (800190c <main+0x364>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	4ac8      	ldr	r2, [pc, #800]	; (8001910 <main+0x368>)
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 80015f6:	440b      	add	r3, r1
 80015f8:	f803 2c54 	strb.w	r2, [r3, #-84]
			flag_recepcion_USB = 0;
 80015fc:	4bc2      	ldr	r3, [pc, #776]	; (8001908 <main+0x360>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
			flag_mensaje_completo = 0;
 8001602:	4bc4      	ldr	r3, [pc, #784]	; (8001914 <main+0x36c>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
		}
		//Generar comandos
		if (str[cont_datos_USB - 1] == ':' && flag_mensaje_completo == 0) {
 8001608:	4bc0      	ldr	r3, [pc, #768]	; (800190c <main+0x364>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3b01      	subs	r3, #1
 800160e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8001612:	4413      	add	r3, r2
 8001614:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8001618:	2b3a      	cmp	r3, #58	; 0x3a
 800161a:	d114      	bne.n	8001646 <main+0x9e>
 800161c:	4bbd      	ldr	r3, [pc, #756]	; (8001914 <main+0x36c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d110      	bne.n	8001646 <main+0x9e>
			cant = identificador(str, instrucciones, cont_datos_USB);
 8001624:	4bb9      	ldr	r3, [pc, #740]	; (800190c <main+0x364>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	f107 0108 	add.w	r1, r7, #8
 800162c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fcd5 	bl	8000fe0 <identificador>
 8001636:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
			flag_mensaje_completo = 1;
 800163a:	4bb6      	ldr	r3, [pc, #728]	; (8001914 <main+0x36c>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]
			cont_datos_USB = 0;
 8001640:	4bb2      	ldr	r3, [pc, #712]	; (800190c <main+0x364>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
		}
		//Identificar comandos
		if (flag_mensaje_completo == 1) {
 8001646:	4bb3      	ldr	r3, [pc, #716]	; (8001914 <main+0x36c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	f040 8149 	bne.w	80018e2 <main+0x33a>
			for (int i = 0; i < cant; i++) {
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001656:	e13a      	b.n	80018ce <main+0x326>
				comando = (int) instrucciones[i];
 8001658:	f107 0208 	add.w	r2, r7, #8
 800165c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001668:	4618      	mov	r0, r3
 800166a:	4621      	mov	r1, r4
 800166c:	f7ff fa74 	bl	8000b58 <__aeabi_d2iz>
 8001670:	4603      	mov	r3, r0
 8001672:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
				switch (comando) {
 8001676:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800167a:	2b05      	cmp	r3, #5
 800167c:	f200 811f 	bhi.w	80018be <main+0x316>
 8001680:	a201      	add	r2, pc, #4	; (adr r2, 8001688 <main+0xe0>)
 8001682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001686:	bf00      	nop
 8001688:	080016a1 	.word	0x080016a1
 800168c:	080016ef 	.word	0x080016ef
 8001690:	08001737 	.word	0x08001737
 8001694:	0800177f 	.word	0x0800177f
 8001698:	080018a9 	.word	0x080018a9
 800169c:	080018bf 	.word	0x080018bf
				case Modo_desactivado:
					if (flag_activacion) {
 80016a0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 8105 	beq.w	80018b4 <main+0x30c>
						SPI_Transmit_1('D');
 80016aa:	2044      	movs	r0, #68	; 0x44
 80016ac:	f000 f9a4 	bl	80019f8 <SPI_Transmit_1>
						SPI_Transmit_1('-');
 80016b0:	202d      	movs	r0, #45	; 0x2d
 80016b2:	f000 f9a1 	bl	80019f8 <SPI_Transmit_1>
						SPI_Transmit_1('P');
 80016b6:	2050      	movs	r0, #80	; 0x50
 80016b8:	f000 f99e 	bl	80019f8 <SPI_Transmit_1>
						SPI_Transmit_1(':');
 80016bc:	203a      	movs	r0, #58	; 0x3a
 80016be:	f000 f99b 	bl	80019f8 <SPI_Transmit_1>
						Mi_Timer();
 80016c2:	f000 f9b7 	bl	8001a34 <Mi_Timer>
						if (pRxData == 'D') {
 80016c6:	4b94      	ldr	r3, [pc, #592]	; (8001918 <main+0x370>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b44      	cmp	r3, #68	; 0x44
 80016cc:	d109      	bne.n	80016e2 <main+0x13a>
							estado = Desactivado;
 80016ce:	2301      	movs	r3, #1
 80016d0:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
							flag_activacion = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
							flag_homing = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4

						} else {
							i--;
						}
					}
					break;
 80016e0:	e0e8      	b.n	80018b4 <main+0x30c>
							i--;
 80016e2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80016e6:	3b01      	subs	r3, #1
 80016e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
					break;
 80016ec:	e0e2      	b.n	80018b4 <main+0x30c>
				case Modo_activado:
					if (!flag_activacion) {
 80016ee:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 80e0 	bne.w	80018b8 <main+0x310>
						SPI_Transmit_1('A');
 80016f8:	2041      	movs	r0, #65	; 0x41
 80016fa:	f000 f97d 	bl	80019f8 <SPI_Transmit_1>
						SPI_Transmit_1('-');
 80016fe:	202d      	movs	r0, #45	; 0x2d
 8001700:	f000 f97a 	bl	80019f8 <SPI_Transmit_1>
						SPI_Transmit_1('P');
 8001704:	2050      	movs	r0, #80	; 0x50
 8001706:	f000 f977 	bl	80019f8 <SPI_Transmit_1>
						SPI_Transmit_1(':');
 800170a:	203a      	movs	r0, #58	; 0x3a
 800170c:	f000 f974 	bl	80019f8 <SPI_Transmit_1>
						Mi_Timer();
 8001710:	f000 f990 	bl	8001a34 <Mi_Timer>
						if (pRxData == 'A') {
 8001714:	4b80      	ldr	r3, [pc, #512]	; (8001918 <main+0x370>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b41      	cmp	r3, #65	; 0x41
 800171a:	d106      	bne.n	800172a <main+0x182>
							estado = Activado;
 800171c:	2300      	movs	r3, #0
 800171e:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
							flag_activacion = 1;
 8001722:	2301      	movs	r3, #1
 8001724:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
						} else {
							i--;
						}
					}
					break;
 8001728:	e0c6      	b.n	80018b8 <main+0x310>
							i--;
 800172a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800172e:	3b01      	subs	r3, #1
 8001730:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
					break;
 8001734:	e0c0      	b.n	80018b8 <main+0x310>
				case Modo_homing:
					if (flag_activacion) {
 8001736:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80be 	beq.w	80018bc <main+0x314>
						//Prender un LED
						//Mandar consigna de homing
						SPI_Transmit_1('H');
 8001740:	2048      	movs	r0, #72	; 0x48
 8001742:	f000 f959 	bl	80019f8 <SPI_Transmit_1>
						SPI_Transmit_1('-');
 8001746:	202d      	movs	r0, #45	; 0x2d
 8001748:	f000 f956 	bl	80019f8 <SPI_Transmit_1>
						//Verificar consigna
						SPI_Transmit_1('P');
 800174c:	2050      	movs	r0, #80	; 0x50
 800174e:	f000 f953 	bl	80019f8 <SPI_Transmit_1>
						SPI_Transmit_1(':');
 8001752:	203a      	movs	r0, #58	; 0x3a
 8001754:	f000 f950 	bl	80019f8 <SPI_Transmit_1>
						Mi_Timer();
 8001758:	f000 f96c 	bl	8001a34 <Mi_Timer>
						if (pRxData == 'H') {
 800175c:	4b6e      	ldr	r3, [pc, #440]	; (8001918 <main+0x370>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b48      	cmp	r3, #72	; 0x48
 8001762:	d106      	bne.n	8001772 <main+0x1ca>
							estado = Modo_Homing;
 8001764:	2302      	movs	r3, #2
 8001766:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
							flag_homing = 1;
 800176a:	2301      	movs	r3, #1
 800176c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
						} else {
							i--;
						}
					}
					break;
 8001770:	e0a4      	b.n	80018bc <main+0x314>
							i--;
 8001772:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001776:	3b01      	subs	r3, #1
 8001778:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
					break;
 800177c:	e09e      	b.n	80018bc <main+0x314>
				case Cin_dir:
					if (flag_activacion && flag_homing) {
 800177e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 808a 	beq.w	800189c <main+0x2f4>
 8001788:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 8085 	beq.w	800189c <main+0x2f4>
						int k = 0, l = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
						static char string[40];
						char s[7];
						string[0] = 'I';
 800179e:	4b5f      	ldr	r3, [pc, #380]	; (800191c <main+0x374>)
 80017a0:	2249      	movs	r2, #73	; 0x49
 80017a2:	701a      	strb	r2, [r3, #0]
						string[1] = '_';
 80017a4:	4b5d      	ldr	r3, [pc, #372]	; (800191c <main+0x374>)
 80017a6:	225f      	movs	r2, #95	; 0x5f
 80017a8:	705a      	strb	r2, [r3, #1]
						for (k = i; k < (5 + i); k++) {
 80017aa:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80017ae:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80017b2:	e03c      	b.n	800182e <main+0x286>
							snprintf(s, 7, "%lf", instrucciones[k]);
 80017b4:	f107 0208 	add.w	r2, r7, #8
 80017b8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017c4:	4638      	mov	r0, r7
 80017c6:	e9cd 3400 	strd	r3, r4, [sp]
 80017ca:	4a55      	ldr	r2, [pc, #340]	; (8001920 <main+0x378>)
 80017cc:	2107      	movs	r1, #7
 80017ce:	f007 f9b5 	bl	8008b3c <sniprintf>
							for (l = 0; l < 6; l++) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80017d8:	e014      	b.n	8001804 <main+0x25c>
								string[l + k * 7 + 2] = s[l];
 80017da:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017de:	4613      	mov	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	1a9a      	subs	r2, r3, r2
 80017e4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80017e8:	4413      	add	r3, r2
 80017ea:	3302      	adds	r3, #2
 80017ec:	4639      	mov	r1, r7
 80017ee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80017f2:	440a      	add	r2, r1
 80017f4:	7811      	ldrb	r1, [r2, #0]
 80017f6:	4a49      	ldr	r2, [pc, #292]	; (800191c <main+0x374>)
 80017f8:	54d1      	strb	r1, [r2, r3]
							for (l = 0; l < 6; l++) {
 80017fa:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80017fe:	3301      	adds	r3, #1
 8001800:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001804:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001808:	2b05      	cmp	r3, #5
 800180a:	dde6      	ble.n	80017da <main+0x232>
							}
							string[l + k * 7 + 2] = '_';
 800180c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	1a9a      	subs	r2, r3, r2
 8001816:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800181a:	4413      	add	r3, r2
 800181c:	3302      	adds	r3, #2
 800181e:	4a3f      	ldr	r2, [pc, #252]	; (800191c <main+0x374>)
 8001820:	215f      	movs	r1, #95	; 0x5f
 8001822:	54d1      	strb	r1, [r2, r3]
						for (k = i; k < (5 + i); k++) {
 8001824:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001828:	3301      	adds	r3, #1
 800182a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800182e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001832:	3305      	adds	r3, #5
 8001834:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001838:	429a      	cmp	r2, r3
 800183a:	dbbb      	blt.n	80017b4 <main+0x20c>
						}
						string[36] = '-';
 800183c:	4b37      	ldr	r3, [pc, #220]	; (800191c <main+0x374>)
 800183e:	222d      	movs	r2, #45	; 0x2d
 8001840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						string[37] = 'P';
 8001844:	4b35      	ldr	r3, [pc, #212]	; (800191c <main+0x374>)
 8001846:	2250      	movs	r2, #80	; 0x50
 8001848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
						string[38] = ':';
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <main+0x374>)
 800184e:	223a      	movs	r2, #58	; 0x3a
 8001850:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
						//Mandar consigna de cinemática directa
						for (k = 0; k < 39; k++) {
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800185a:	e00c      	b.n	8001876 <main+0x2ce>
							SPI_Transmit_1(string[k]);
 800185c:	4a2f      	ldr	r2, [pc, #188]	; (800191c <main+0x374>)
 800185e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f8c6 	bl	80019f8 <SPI_Transmit_1>
						for (k = 0; k < 39; k++) {
 800186c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001870:	3301      	adds	r3, #1
 8001872:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001876:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800187a:	2b26      	cmp	r3, #38	; 0x26
 800187c:	ddee      	ble.n	800185c <main+0x2b4>
						}
						Mi_Timer();
 800187e:	f000 f8d9 	bl	8001a34 <Mi_Timer>
						//Verificar que se logre
						if (pRxData == 'N') {
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <main+0x370>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b4e      	cmp	r3, #78	; 0x4e
 8001888:	d103      	bne.n	8001892 <main+0x2ea>
							estado = Modo_Normal;
 800188a:	2303      	movs	r3, #3
 800188c:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
 8001890:	e004      	b.n	800189c <main+0x2f4>
						} else {
							i--;
 8001892:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001896:	3b01      	subs	r3, #1
 8001898:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
						}
					}
					i += 5;
 800189c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80018a0:	3305      	adds	r3, #5
 80018a2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
					break;
 80018a6:	e00a      	b.n	80018be <main+0x316>
				case Cin_inv:
					i += 5;
 80018a8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80018ac:	3305      	adds	r3, #5
 80018ae:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
					break;
 80018b2:	e004      	b.n	80018be <main+0x316>
					break;
 80018b4:	bf00      	nop
 80018b6:	e002      	b.n	80018be <main+0x316>
					break;
 80018b8:	bf00      	nop
 80018ba:	e000      	b.n	80018be <main+0x316>
					break;
 80018bc:	bf00      	nop
				case Resumen:
					break;
				}
				pRxData = 'K';
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <main+0x370>)
 80018c0:	224b      	movs	r2, #75	; 0x4b
 80018c2:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < cant; i++) {
 80018c4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80018c8:	3301      	adds	r3, #1
 80018ca:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80018ce:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80018d2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80018d6:	429a      	cmp	r2, r3
 80018d8:	f6ff aebe 	blt.w	8001658 <main+0xb0>
			}
			flag_mensaje_completo = 2;
 80018dc:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <main+0x36c>)
 80018de:	2202      	movs	r2, #2
 80018e0:	601a      	str	r2, [r3, #0]

		}
		switch (estado) {
 80018e2:	f897 31e3 	ldrb.w	r3, [r7, #483]	; 0x1e3
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	f63f ae7a 	bhi.w	80015e0 <main+0x38>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <main+0x34c>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	080015e1 	.word	0x080015e1
 80018f8:	080015e1 	.word	0x080015e1
 80018fc:	080015e1 	.word	0x080015e1
 8001900:	080015e1 	.word	0x080015e1
 8001904:	080015e1 	.word	0x080015e1
 8001908:	200003a8 	.word	0x200003a8
 800190c:	200003a4 	.word	0x200003a4
 8001910:	200006ac 	.word	0x200006ac
 8001914:	20000370 	.word	0x20000370
 8001918:	20000004 	.word	0x20000004
 800191c:	20000374 	.word	0x20000374
 8001920:	0800b6c8 	.word	0x0800b6c8

08001924 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b094      	sub	sp, #80	; 0x50
 8001928:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800192a:	f107 0320 	add.w	r3, r7, #32
 800192e:	2230      	movs	r2, #48	; 0x30
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f006 fbe6 	bl	8008104 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <SystemClock_Config+0xcc>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <SystemClock_Config+0xcc>)
 8001952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001956:	6413      	str	r3, [r2, #64]	; 0x40
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <SystemClock_Config+0xcc>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <SystemClock_Config+0xd0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <SystemClock_Config+0xd0>)
 800196e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <SystemClock_Config+0xd0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001980:	2301      	movs	r3, #1
 8001982:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001984:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198a:	2302      	movs	r3, #2
 800198c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800198e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001992:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001994:	2304      	movs	r3, #4
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001998:	23a8      	movs	r3, #168	; 0xa8
 800199a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800199c:	2302      	movs	r3, #2
 800199e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80019a0:	2307      	movs	r3, #7
 80019a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019a4:	f107 0320 	add.w	r3, r7, #32
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 ff33 	bl	8003814 <HAL_RCC_OscConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SystemClock_Config+0x94>
		Error_Handler();
 80019b4:	f000 f880 	bl	8001ab8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80019b8:	230f      	movs	r3, #15
 80019ba:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019bc:	2302      	movs	r3, #2
 80019be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80019c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019c8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80019ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019ce:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	2105      	movs	r1, #5
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 f98c 	bl	8003cf4 <HAL_RCC_ClockConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <SystemClock_Config+0xc2>
		Error_Handler();
 80019e2:	f000 f869 	bl	8001ab8 <Error_Handler>
	}
}
 80019e6:	bf00      	nop
 80019e8:	3750      	adds	r7, #80	; 0x50
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40007000 	.word	0x40007000

080019f8 <SPI_Transmit_1>:

/* USER CODE BEGIN 4 */
void SPI_Transmit_1(uint8_t pTxData) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	//static HAL_StatusTypeDef SPI_estado;
	//while (flag_CB);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2140      	movs	r1, #64	; 0x40
 8001a06:	4809      	ldr	r0, [pc, #36]	; (8001a2c <SPI_Transmit_1+0x34>)
 8001a08:	f000 fd48 	bl	800249c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi2, &pTxData, 1);
 8001a0c:	1dfb      	adds	r3, r7, #7
 8001a0e:	2201      	movs	r2, #1
 8001a10:	4619      	mov	r1, r3
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <SPI_Transmit_1+0x38>)
 8001a14:	f002 fd3e 	bl	8004494 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2140      	movs	r1, #64	; 0x40
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <SPI_Transmit_1+0x34>)
 8001a1e:	f000 fd3d 	bl	800249c <HAL_GPIO_WritePin>
	//while (SPI_estado != HAL_OK);
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	200003b4 	.word	0x200003b4

08001a34 <Mi_Timer>:
void Mi_Timer() {
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	while (flag_INT)
 8001a38:	bf00      	nop
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <Mi_Timer+0x20>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1fb      	bne.n	8001a3a <Mi_Timer+0x6>
		;
	flag_INT = 1;
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <Mi_Timer+0x20>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000000 	.word	0x20000000

08001a58 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
	static uint8_t D_transmision = 'n';
	flag_INT = 0;
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
	switch (GPIO_Pin) {
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a6e:	d002      	beq.n	8001a76 <HAL_GPIO_EXTI_Callback+0x1e>
 8001a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
		HAL_SPI_TransmitReceive(&hspi2, &D_transmision, &pRxData, 1, 1);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		break;
	case GPIO_PIN_9: 	//INT2
		break;
 8001a74:	e012      	b.n	8001a9c <HAL_GPIO_EXTI_Callback+0x44>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2140      	movs	r1, #64	; 0x40
 8001a7a:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a7c:	f000 fd0e 	bl	800249c <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, &D_transmision, &pRxData, 1, 1);
 8001a80:	2301      	movs	r3, #1
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2301      	movs	r3, #1
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <HAL_GPIO_EXTI_Callback+0x54>)
 8001a88:	4909      	ldr	r1, [pc, #36]	; (8001ab0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a8a:	480a      	ldr	r0, [pc, #40]	; (8001ab4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a8c:	f002 fb60 	bl	8004150 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	2140      	movs	r1, #64	; 0x40
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a96:	f000 fd01 	bl	800249c <HAL_GPIO_WritePin>
		break;
 8001a9a:	bf00      	nop
	}

}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	20000004 	.word	0x20000004
 8001ab0:	20000005 	.word	0x20000005
 8001ab4:	200003b4 	.word	0x200003b4

08001ab8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001ace:	4a18      	ldr	r2, [pc, #96]	; (8001b30 <MX_SPI2_Init+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001af4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001af8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001b14:	220a      	movs	r2, #10
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b18:	4804      	ldr	r0, [pc, #16]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001b1a:	f002 fab5 	bl	8004088 <HAL_SPI_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b24:	f7ff ffc8 	bl	8001ab8 <Error_Handler>
  }

}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200003b4 	.word	0x200003b4
 8001b30:	40003800 	.word	0x40003800

08001b34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2c      	ldr	r2, [pc, #176]	; (8001c04 <HAL_SPI_MspInit+0xd0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d152      	bne.n	8001bfc <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_SPI_MspInit+0xd4>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a2a      	ldr	r2, [pc, #168]	; (8001c08 <HAL_SPI_MspInit+0xd4>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <HAL_SPI_MspInit+0xd4>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_SPI_MspInit+0xd4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <HAL_SPI_MspInit+0xd4>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <HAL_SPI_MspInit+0xd4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_SPI_MspInit+0xd4>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <HAL_SPI_MspInit+0xd4>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <HAL_SPI_MspInit+0xd4>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001baa:	230c      	movs	r3, #12
 8001bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bba:	2305      	movs	r3, #5
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4811      	ldr	r0, [pc, #68]	; (8001c0c <HAL_SPI_MspInit+0xd8>)
 8001bc6:	f000 facf 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001bca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bdc:	2305      	movs	r3, #5
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4619      	mov	r1, r3
 8001be6:	480a      	ldr	r0, [pc, #40]	; (8001c10 <HAL_SPI_MspInit+0xdc>)
 8001be8:	f000 fabe 	bl	8002168 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2024      	movs	r0, #36	; 0x24
 8001bf2:	f000 fa60 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001bf6:	2024      	movs	r0, #36	; 0x24
 8001bf8:	f000 fa79 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40003800 	.word	0x40003800
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020400 	.word	0x40020400

08001c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a0f      	ldr	r2, [pc, #60]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001c52:	2004      	movs	r0, #4
 8001c54:	f000 fa24 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800

08001c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <HardFault_Handler+0x4>

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <MemManage_Handler+0x4>

08001c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <BusFault_Handler+0x4>

08001c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <UsageFault_Handler+0x4>

08001c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb8:	f000 f8e0 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001cc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cc8:	f000 fc02 	bl	80024d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001ccc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cd0:	f000 fbfe 	bl	80024d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <SPI2_IRQHandler+0x10>)
 8001cde:	f002 fc5b 	bl	8004598 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200003b4 	.word	0x200003b4

08001cec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <OTG_FS_IRQHandler+0x10>)
 8001cf2:	f000 fd55 	bl	80027a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200018b8 	.word	0x200018b8

08001d00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_sbrk+0x50>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <_sbrk+0x16>
		heap_end = &end;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <_sbrk+0x50>)
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <_sbrk+0x54>)
 8001d14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <_sbrk+0x50>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <_sbrk+0x50>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	466a      	mov	r2, sp
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d907      	bls.n	8001d3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d2a:	f006 f9b1 	bl	8008090 <__errno>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	230c      	movs	r3, #12
 8001d32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	e006      	b.n	8001d48 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <_sbrk+0x50>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a03      	ldr	r2, [pc, #12]	; (8001d50 <_sbrk+0x50>)
 8001d44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d46:	68fb      	ldr	r3, [r7, #12]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2000039c 	.word	0x2000039c
 8001d54:	20001cc8 	.word	0x20001cc8

08001d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <SystemInit+0x28>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <SystemInit+0x28>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <SystemInit+0x28>)
 8001d6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d72:	609a      	str	r2, [r3, #8]
#endif
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d8a:	e003      	b.n	8001d94 <LoopCopyDataInit>

08001d8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d92:	3104      	adds	r1, #4

08001d94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d94:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d9c:	d3f6      	bcc.n	8001d8c <CopyDataInit>
  ldr  r2, =_sbss
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001da0:	e002      	b.n	8001da8 <LoopFillZerobss>

08001da2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001da2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001da4:	f842 3b04 	str.w	r3, [r2], #4

08001da8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001daa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dac:	d3f9      	bcc.n	8001da2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dae:	f7ff ffd3 	bl	8001d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001db2:	f006 f973 	bl	800809c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001db6:	f7ff fbf7 	bl	80015a8 <main>
  bx  lr    
 8001dba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dc0:	0800b9e0 	.word	0x0800b9e0
  ldr  r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dc8:	20000354 	.word	0x20000354
  ldr  r2, =_sbss
 8001dcc:	20000354 	.word	0x20000354
  ldr  r3, = _ebss
 8001dd0:	20001cc4 	.word	0x20001cc4

08001dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd4:	e7fe      	b.n	8001dd4 <ADC_IRQHandler>
	...

08001dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <HAL_Init+0x40>)
 8001de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <HAL_Init+0x40>)
 8001dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_Init+0x40>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f000 f94d 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f000 f808 	bl	8001e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e0c:	f7ff ff02 	bl	8001c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023c00 	.word	0x40023c00

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_InitTick+0x54>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_InitTick+0x58>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f965 	bl	800210a <HAL_SYSTICK_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00e      	b.n	8001e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	d80a      	bhi.n	8001e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e50:	2200      	movs	r2, #0
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f000 f92d 	bl	80020b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e5c:	4a06      	ldr	r2, [pc, #24]	; (8001e78 <HAL_InitTick+0x5c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000008 	.word	0x20000008
 8001e74:	20000010 	.word	0x20000010
 8001e78:	2000000c 	.word	0x2000000c

08001e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x20>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_IncTick+0x24>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <HAL_IncTick+0x24>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000010 	.word	0x20000010
 8001ea0:	2000040c 	.word	0x2000040c

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	2000040c 	.word	0x2000040c

08001ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff ffee 	bl	8001ea4 <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d005      	beq.n	8001ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_Delay+0x40>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ee2:	bf00      	nop
 8001ee4:	f7ff ffde 	bl	8001ea4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d8f7      	bhi.n	8001ee4 <HAL_Delay+0x28>
  {
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000010 	.word	0x20000010

08001f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <__NVIC_GetPriorityGrouping+0x18>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	f003 0307 	and.w	r3, r3, #7
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db0b      	blt.n	8001f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4907      	ldr	r1, [pc, #28]	; (8001f9c <__NVIC_EnableIRQ+0x38>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f1c3 0307 	rsb	r3, r3, #7
 800200e:	2b04      	cmp	r3, #4
 8002010:	bf28      	it	cs
 8002012:	2304      	movcs	r3, #4
 8002014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3304      	adds	r3, #4
 800201a:	2b06      	cmp	r3, #6
 800201c:	d902      	bls.n	8002024 <NVIC_EncodePriority+0x30>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3b03      	subs	r3, #3
 8002022:	e000      	b.n	8002026 <NVIC_EncodePriority+0x32>
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	f04f 32ff 	mov.w	r2, #4294967295
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	401a      	ands	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800203c:	f04f 31ff 	mov.w	r1, #4294967295
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43d9      	mvns	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	4313      	orrs	r3, r2
         );
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800206c:	d301      	bcc.n	8002072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <SysTick_Config+0x40>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207a:	210f      	movs	r1, #15
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	f7ff ff8e 	bl	8001fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <SysTick_Config+0x40>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <SysTick_Config+0x40>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff29 	bl	8001f00 <__NVIC_SetPriorityGrouping>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff3e 	bl	8001f48 <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff8e 	bl	8001ff4 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5d 	bl	8001fa0 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff31 	bl	8001f64 <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa2 	bl	800205c <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d004      	beq.n	8002140 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e00c      	b.n	800215a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2205      	movs	r2, #5
 8002144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	e16b      	b.n	800245c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002184:	2201      	movs	r2, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	429a      	cmp	r2, r3
 800219e:	f040 815a 	bne.w	8002456 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d00b      	beq.n	80021c2 <HAL_GPIO_Init+0x5a>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d007      	beq.n	80021c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b6:	2b11      	cmp	r3, #17
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b12      	cmp	r3, #18
 80021c0:	d130      	bne.n	8002224 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0201 	and.w	r2, r3, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0xfc>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b12      	cmp	r3, #18
 8002262:	d123      	bne.n	80022ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	08da      	lsrs	r2, r3, #3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3208      	adds	r2, #8
 800226c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	220f      	movs	r2, #15
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	08da      	lsrs	r2, r3, #3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3208      	adds	r2, #8
 80022a6:	69b9      	ldr	r1, [r7, #24]
 80022a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0203 	and.w	r2, r3, #3
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80b4 	beq.w	8002456 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	4b5f      	ldr	r3, [pc, #380]	; (8002470 <HAL_GPIO_Init+0x308>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	4a5e      	ldr	r2, [pc, #376]	; (8002470 <HAL_GPIO_Init+0x308>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fc:	6453      	str	r3, [r2, #68]	; 0x44
 80022fe:	4b5c      	ldr	r3, [pc, #368]	; (8002470 <HAL_GPIO_Init+0x308>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230a:	4a5a      	ldr	r2, [pc, #360]	; (8002474 <HAL_GPIO_Init+0x30c>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a51      	ldr	r2, [pc, #324]	; (8002478 <HAL_GPIO_Init+0x310>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d02b      	beq.n	800238e <HAL_GPIO_Init+0x226>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a50      	ldr	r2, [pc, #320]	; (800247c <HAL_GPIO_Init+0x314>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d025      	beq.n	800238a <HAL_GPIO_Init+0x222>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4f      	ldr	r2, [pc, #316]	; (8002480 <HAL_GPIO_Init+0x318>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01f      	beq.n	8002386 <HAL_GPIO_Init+0x21e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4e      	ldr	r2, [pc, #312]	; (8002484 <HAL_GPIO_Init+0x31c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d019      	beq.n	8002382 <HAL_GPIO_Init+0x21a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4d      	ldr	r2, [pc, #308]	; (8002488 <HAL_GPIO_Init+0x320>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_GPIO_Init+0x216>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4c      	ldr	r2, [pc, #304]	; (800248c <HAL_GPIO_Init+0x324>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00d      	beq.n	800237a <HAL_GPIO_Init+0x212>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4b      	ldr	r2, [pc, #300]	; (8002490 <HAL_GPIO_Init+0x328>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d007      	beq.n	8002376 <HAL_GPIO_Init+0x20e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4a      	ldr	r2, [pc, #296]	; (8002494 <HAL_GPIO_Init+0x32c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d101      	bne.n	8002372 <HAL_GPIO_Init+0x20a>
 800236e:	2307      	movs	r3, #7
 8002370:	e00e      	b.n	8002390 <HAL_GPIO_Init+0x228>
 8002372:	2308      	movs	r3, #8
 8002374:	e00c      	b.n	8002390 <HAL_GPIO_Init+0x228>
 8002376:	2306      	movs	r3, #6
 8002378:	e00a      	b.n	8002390 <HAL_GPIO_Init+0x228>
 800237a:	2305      	movs	r3, #5
 800237c:	e008      	b.n	8002390 <HAL_GPIO_Init+0x228>
 800237e:	2304      	movs	r3, #4
 8002380:	e006      	b.n	8002390 <HAL_GPIO_Init+0x228>
 8002382:	2303      	movs	r3, #3
 8002384:	e004      	b.n	8002390 <HAL_GPIO_Init+0x228>
 8002386:	2302      	movs	r3, #2
 8002388:	e002      	b.n	8002390 <HAL_GPIO_Init+0x228>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_GPIO_Init+0x228>
 800238e:	2300      	movs	r3, #0
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	f002 0203 	and.w	r2, r2, #3
 8002396:	0092      	lsls	r2, r2, #2
 8002398:	4093      	lsls	r3, r2
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a0:	4934      	ldr	r1, [pc, #208]	; (8002474 <HAL_GPIO_Init+0x30c>)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ae:	4b3a      	ldr	r3, [pc, #232]	; (8002498 <HAL_GPIO_Init+0x330>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d2:	4a31      	ldr	r2, [pc, #196]	; (8002498 <HAL_GPIO_Init+0x330>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023d8:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <HAL_GPIO_Init+0x330>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023fc:	4a26      	ldr	r2, [pc, #152]	; (8002498 <HAL_GPIO_Init+0x330>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002402:	4b25      	ldr	r3, [pc, #148]	; (8002498 <HAL_GPIO_Init+0x330>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002426:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_GPIO_Init+0x330>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800242c:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <HAL_GPIO_Init+0x330>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002450:	4a11      	ldr	r2, [pc, #68]	; (8002498 <HAL_GPIO_Init+0x330>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3301      	adds	r3, #1
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b0f      	cmp	r3, #15
 8002460:	f67f ae90 	bls.w	8002184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002464:	bf00      	nop
 8002466:	3724      	adds	r7, #36	; 0x24
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	40023800 	.word	0x40023800
 8002474:	40013800 	.word	0x40013800
 8002478:	40020000 	.word	0x40020000
 800247c:	40020400 	.word	0x40020400
 8002480:	40020800 	.word	0x40020800
 8002484:	40020c00 	.word	0x40020c00
 8002488:	40021000 	.word	0x40021000
 800248c:	40021400 	.word	0x40021400
 8002490:	40021800 	.word	0x40021800
 8002494:	40021c00 	.word	0x40021c00
 8002498:	40013c00 	.word	0x40013c00

0800249c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
 80024a8:	4613      	mov	r3, r2
 80024aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ac:	787b      	ldrb	r3, [r7, #1]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b8:	e003      	b.n	80024c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ba:	887b      	ldrh	r3, [r7, #2]
 80024bc:	041a      	lsls	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	619a      	str	r2, [r3, #24]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fab2 	bl	8001a58 <HAL_GPIO_EXTI_Callback>
  }
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40013c00 	.word	0x40013c00

08002500 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002502:	b08f      	sub	sp, #60	; 0x3c
 8002504:	af0a      	add	r7, sp, #40	; 0x28
 8002506:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e10f      	b.n	8002732 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f005 faaf 	bl	8007a90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2203      	movs	r2, #3
 8002536:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f002 fbb2 	bl	8004cba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	687e      	ldr	r6, [r7, #4]
 800255e:	466d      	mov	r5, sp
 8002560:	f106 0410 	add.w	r4, r6, #16
 8002564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800256a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800256c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002570:	e885 0003 	stmia.w	r5, {r0, r1}
 8002574:	1d33      	adds	r3, r6, #4
 8002576:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002578:	6838      	ldr	r0, [r7, #0]
 800257a:	f002 fa89 	bl	8004a90 <USB_CoreInit>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0d0      	b.n	8002732 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fba0 	bl	8004cdc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e04a      	b.n	8002638 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	333d      	adds	r3, #61	; 0x3d
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	333c      	adds	r3, #60	; 0x3c
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	b298      	uxth	r0, r3
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	3342      	adds	r3, #66	; 0x42
 80025de:	4602      	mov	r2, r0
 80025e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	333f      	adds	r3, #63	; 0x3f
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	3344      	adds	r3, #68	; 0x44
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	3348      	adds	r3, #72	; 0x48
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3350      	adds	r3, #80	; 0x50
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	3301      	adds	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	429a      	cmp	r2, r3
 8002640:	d3af      	bcc.n	80025a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e044      	b.n	80026d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	3301      	adds	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d3b5      	bcc.n	8002648 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	687e      	ldr	r6, [r7, #4]
 80026e4:	466d      	mov	r5, sp
 80026e6:	f106 0410 	add.w	r4, r6, #16
 80026ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026fa:	1d33      	adds	r3, r6, #4
 80026fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026fe:	6838      	ldr	r0, [r7, #0]
 8002700:	f002 fb16 	bl	8004d30 <USB_DevInit>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e00d      	b.n	8002732 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f003 fb0b 	bl	8005d46 <USB_DevDisconnect>

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800273a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_PCD_Start+0x1c>
 8002752:	2302      	movs	r3, #2
 8002754:	e020      	b.n	8002798 <HAL_PCD_Start+0x5e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	2b01      	cmp	r3, #1
 8002764:	d109      	bne.n	800277a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800276a:	2b01      	cmp	r3, #1
 800276c:	d005      	beq.n	800277a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f003 fac9 	bl	8005d16 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fa85 	bl	8004c98 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b08d      	sub	sp, #52	; 0x34
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f003 fb70 	bl	8005e9c <USB_GetMode>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 838e 	bne.w	8002ee0 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f003 fad4 	bl	8005d76 <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8384 	beq.w	8002ede <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 facb 	bl	8005d76 <USB_ReadInterrupts>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d107      	bne.n	80027fa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f002 0202 	and.w	r2, r2, #2
 80027f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 fab9 	bl	8005d76 <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800280a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800280e:	d17b      	bne.n	8002908 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f003 fabf 	bl	8005d9c <USB_ReadDevAllOutEpInterrupt>
 800281e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002820:	e06f      	b.n	8002902 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d064      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fae4 	bl	8005e04 <USB_ReadDevOutEPInterrupt>
 800283c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00c      	beq.n	8002862 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002854:	461a      	mov	r2, r3
 8002856:	2301      	movs	r3, #1
 8002858:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800285a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fe0d 	bl	800347c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00c      	beq.n	8002886 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800286c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 ff0c 	bl	800368c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	4413      	add	r3, r2
 800287c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002880:	461a      	mov	r2, r3
 8002882:	2308      	movs	r3, #8
 8002884:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4413      	add	r3, r2
 8002898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289c:	461a      	mov	r2, r3
 800289e:	2310      	movs	r3, #16
 80028a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d015      	beq.n	80028d8 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d108      	bne.n	80028c6 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028be:	461a      	mov	r2, r3
 80028c0:	2101      	movs	r1, #1
 80028c2:	f003 fb2f 	bl	8005f24 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d2:	461a      	mov	r2, r3
 80028d4:	2320      	movs	r3, #32
 80028d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ee:	461a      	mov	r2, r3
 80028f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	3301      	adds	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	2b00      	cmp	r3, #0
 8002906:	d18c      	bne.n	8002822 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f003 fa32 	bl	8005d76 <USB_ReadInterrupts>
 8002912:	4603      	mov	r3, r0
 8002914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002918:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800291c:	f040 80c4 	bne.w	8002aa8 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f003 fa53 	bl	8005dd0 <USB_ReadDevAllInEpInterrupt>
 800292a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002930:	e0b6      	b.n	8002aa0 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80ab 	beq.w	8002a94 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f003 fa79 	bl	8005e40 <USB_ReadDevInEPInterrupt>
 800294e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d05b      	beq.n	8002a12 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	2201      	movs	r2, #1
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	43db      	mvns	r3, r3
 8002974:	69f9      	ldr	r1, [r7, #28]
 8002976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800297a:	4013      	ands	r3, r2
 800297c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800298a:	461a      	mov	r2, r3
 800298c:	2301      	movs	r3, #1
 800298e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d11b      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3348      	adds	r3, #72	; 0x48
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4403      	add	r3, r0
 80029b8:	3344      	adds	r3, #68	; 0x44
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4419      	add	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4403      	add	r3, r0
 80029cc:	3348      	adds	r3, #72	; 0x48
 80029ce:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	4619      	mov	r1, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f005 f8db 	bl	8007b92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d116      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d113      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x272>
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3350      	adds	r3, #80	; 0x50
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d108      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	f003 fa89 	bl	8005f24 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a44:	461a      	mov	r2, r3
 8002a46:	2310      	movs	r3, #16
 8002a48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a60:	461a      	mov	r2, r3
 8002a62:	2340      	movs	r3, #64	; 0x40
 8002a64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2302      	movs	r3, #2
 8002a80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fc67 	bl	8003362 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	3301      	adds	r3, #1
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f47f af45 	bne.w	8002932 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 f962 	bl	8005d76 <USB_ReadInterrupts>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002abc:	d122      	bne.n	8002b04 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d108      	bne.n	8002aee <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fe88 	bl	80037fc <HAL_PCDEx_LPM_Callback>
 8002aec:	e002      	b.n	8002af4 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f005 f8c6 	bl	8007c80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f003 f934 	bl	8005d76 <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b18:	d112      	bne.n	8002b40 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d102      	bne.n	8002b30 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f005 f882 	bl	8007c34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b3e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 f916 	bl	8005d76 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b54:	f040 80a7 	bne.w	8002ca6 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2110      	movs	r1, #16
 8002b72:	4618      	mov	r0, r3
 8002b74:	f002 fa4e 	bl	8005014 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b7c:	e036      	b.n	8002bec <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b90:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba2:	0151      	lsls	r1, r2, #5
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	440a      	add	r2, r1
 8002ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002bac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bb0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bc4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd6:	0151      	lsls	r1, r2, #5
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	440a      	add	r2, r1
 8002bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002be0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002be4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	3301      	adds	r3, #1
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d3c3      	bcc.n	8002b7e <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c22:	f043 030b 	orr.w	r3, r3, #11
 8002c26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c38:	f043 030b 	orr.w	r3, r3, #11
 8002c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3e:	e015      	b.n	8002c6c <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c52:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c66:	f043 030b 	orr.w	r3, r3, #11
 8002c6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c90:	461a      	mov	r2, r3
 8002c92:	f003 f947 	bl	8005f24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ca4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 f863 	bl	8005d76 <USB_ReadInterrupts>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cba:	d124      	bne.n	8002d06 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f003 f8f9 	bl	8005eb8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 fa03 	bl	80050d6 <USB_GetDevSpeed>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681c      	ldr	r4, [r3, #0]
 8002cdc:	f001 f9c8 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4620      	mov	r0, r4
 8002cec:	f001 ff32 	bl	8004b54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f004 ff76 	bl	8007be2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 f833 	bl	8005d76 <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d161      	bne.n	8002dde <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0210 	bic.w	r2, r2, #16
 8002d28:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f003 020f 	and.w	r2, r3, #15
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	3304      	adds	r3, #4
 8002d48:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	0c5b      	lsrs	r3, r3, #17
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d124      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d035      	beq.n	8002dce <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	6a38      	ldr	r0, [r7, #32]
 8002d76:	f002 feab 	bl	8005ad0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d86:	441a      	add	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	699a      	ldr	r2, [r3, #24]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d98:	441a      	add	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	619a      	str	r2, [r3, #24]
 8002d9e:	e016      	b.n	8002dce <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	0c5b      	lsrs	r3, r3, #17
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	d110      	bne.n	8002dce <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002db2:	2208      	movs	r2, #8
 8002db4:	4619      	mov	r1, r3
 8002db6:	6a38      	ldr	r0, [r7, #32]
 8002db8:	f002 fe8a 	bl	8005ad0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dc8:	441a      	add	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699a      	ldr	r2, [r3, #24]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0210 	orr.w	r2, r2, #16
 8002ddc:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f002 ffc7 	bl	8005d76 <USB_ReadInterrupts>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d10a      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f004 fee7 	bl	8007bc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f002 0208 	and.w	r2, r2, #8
 8002e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f002 ffb2 	bl	8005d76 <USB_ReadInterrupts>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e1c:	d10f      	bne.n	8002e3e <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f004 ff49 	bl	8007cc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f002 ff97 	bl	8005d76 <USB_ReadInterrupts>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e52:	d10f      	bne.n	8002e74 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f004 ff1c 	bl	8007c9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f002 ff7c 	bl	8005d76 <USB_ReadInterrupts>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e88:	d10a      	bne.n	8002ea0 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f004 ff2a 	bl	8007ce4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f002 ff66 	bl	8005d76 <USB_ReadInterrupts>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d115      	bne.n	8002ee0 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f004 ff1a 	bl	8007d00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	e000      	b.n	8002ee0 <HAL_PCD_IRQHandler+0x740>
      return;
 8002ede:	bf00      	nop
    }
  }
}
 8002ee0:	3734      	adds	r7, #52	; 0x34
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd90      	pop	{r4, r7, pc}

08002ee6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_PCD_SetAddress+0x1a>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e013      	b.n	8002f28 <HAL_PCD_SetAddress+0x42>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 fed6 	bl	8005cca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	70fb      	strb	r3, [r7, #3]
 8002f42:	460b      	mov	r3, r1
 8002f44:	803b      	strh	r3, [r7, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	da0f      	bge.n	8002f76 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 020f 	and.w	r2, r3, #15
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	3338      	adds	r3, #56	; 0x38
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	705a      	strb	r2, [r3, #1]
 8002f74:	e00f      	b.n	8002f96 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	f003 020f 	and.w	r2, r3, #15
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fa2:	883a      	ldrh	r2, [r7, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	78ba      	ldrb	r2, [r7, #2]
 8002fac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	785b      	ldrb	r3, [r3, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fc0:	78bb      	ldrb	r3, [r7, #2]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d102      	bne.n	8002fcc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_PCD_EP_Open+0xaa>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e00e      	b.n	8002ff8 <HAL_PCD_EP_Open+0xc8>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68f9      	ldr	r1, [r7, #12]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f002 f899 	bl	8005120 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002ff6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800300c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003010:	2b00      	cmp	r3, #0
 8003012:	da0f      	bge.n	8003034 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	f003 020f 	and.w	r2, r3, #15
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	3338      	adds	r3, #56	; 0x38
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	3304      	adds	r3, #4
 800302a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	705a      	strb	r2, [r3, #1]
 8003032:	e00f      	b.n	8003054 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	f003 020f 	and.w	r2, r3, #15
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	3304      	adds	r3, #4
 800304c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	b2da      	uxtb	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_PCD_EP_Close+0x6e>
 800306a:	2302      	movs	r3, #2
 800306c:	e00e      	b.n	800308c <HAL_PCD_EP_Close+0x8c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68f9      	ldr	r1, [r7, #12]
 800307c:	4618      	mov	r0, r3
 800307e:	f002 f8d7 	bl	8005230 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	460b      	mov	r3, r1
 80030a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a4:	7afb      	ldrb	r3, [r7, #11]
 80030a6:	f003 020f 	and.w	r2, r3, #15
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4413      	add	r3, r2
 80030ba:	3304      	adds	r3, #4
 80030bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2200      	movs	r2, #0
 80030ce:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2200      	movs	r2, #0
 80030d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030d6:	7afb      	ldrb	r3, [r7, #11]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d102      	bne.n	80030f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030f0:	7afb      	ldrb	r3, [r7, #11]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	6979      	ldr	r1, [r7, #20]
 8003108:	f002 fb5a 	bl	80057c0 <USB_EP0StartXfer>
 800310c:	e008      	b.n	8003120 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	6979      	ldr	r1, [r7, #20]
 800311c:	f002 f90c 	bl	8005338 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	460b      	mov	r3, r1
 8003134:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	f003 020f 	and.w	r2, r3, #15
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800314c:	681b      	ldr	r3, [r3, #0]
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	460b      	mov	r3, r1
 8003168:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800316a:	7afb      	ldrb	r3, [r7, #11]
 800316c:	f003 020f 	and.w	r2, r3, #15
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	3338      	adds	r3, #56	; 0x38
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2201      	movs	r2, #1
 8003198:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800319a:	7afb      	ldrb	r3, [r7, #11]
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d102      	bne.n	80031b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031b4:	7afb      	ldrb	r3, [r7, #11]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	6979      	ldr	r1, [r7, #20]
 80031cc:	f002 faf8 	bl	80057c0 <USB_EP0StartXfer>
 80031d0:	e008      	b.n	80031e4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	6979      	ldr	r1, [r7, #20]
 80031e0:	f002 f8aa 	bl	8005338 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	f003 020f 	and.w	r2, r3, #15
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d901      	bls.n	800320c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e050      	b.n	80032ae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800320c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003210:	2b00      	cmp	r3, #0
 8003212:	da0f      	bge.n	8003234 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 020f 	and.w	r2, r3, #15
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	3338      	adds	r3, #56	; 0x38
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	4413      	add	r3, r2
 8003228:	3304      	adds	r3, #4
 800322a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	705a      	strb	r2, [r3, #1]
 8003232:	e00d      	b.n	8003250 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	3304      	adds	r3, #4
 8003248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_PCD_EP_SetStall+0x82>
 800326c:	2302      	movs	r3, #2
 800326e:	e01e      	b.n	80032ae <HAL_PCD_EP_SetStall+0xc0>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68f9      	ldr	r1, [r7, #12]
 800327e:	4618      	mov	r0, r3
 8003280:	f002 fc4f 	bl	8005b22 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	b2d9      	uxtb	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800329e:	461a      	mov	r2, r3
 80032a0:	f002 fe40 	bl	8005f24 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 020f 	and.w	r2, r3, #15
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d901      	bls.n	80032d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e042      	b.n	800335a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da0f      	bge.n	80032fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	f003 020f 	and.w	r2, r3, #15
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	3338      	adds	r3, #56	; 0x38
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	705a      	strb	r2, [r3, #1]
 80032fa:	e00f      	b.n	800331c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	f003 020f 	and.w	r2, r3, #15
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	3304      	adds	r3, #4
 8003314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_PCD_EP_ClrStall+0x86>
 8003338:	2302      	movs	r3, #2
 800333a:	e00e      	b.n	800335a <HAL_PCD_EP_ClrStall+0xa4>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68f9      	ldr	r1, [r7, #12]
 800334a:	4618      	mov	r0, r3
 800334c:	f002 fc57 	bl	8005bfe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b08a      	sub	sp, #40	; 0x28
 8003366:	af02      	add	r7, sp, #8
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	3338      	adds	r3, #56	; 0x38
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	3304      	adds	r3, #4
 8003388:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	429a      	cmp	r2, r3
 8003394:	d901      	bls.n	800339a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e06c      	b.n	8003474 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d902      	bls.n	80033b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3303      	adds	r3, #3
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033be:	e02b      	b.n	8003418 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d902      	bls.n	80033dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	3303      	adds	r3, #3
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68d9      	ldr	r1, [r3, #12]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	4603      	mov	r3, r0
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f002 fb33 	bl	8005a66 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	441a      	add	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	441a      	add	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	b29b      	uxth	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	429a      	cmp	r2, r3
 800342c:	d809      	bhi.n	8003442 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003436:	429a      	cmp	r2, r3
 8003438:	d203      	bcs.n	8003442 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1be      	bne.n	80033c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	429a      	cmp	r2, r3
 800344c:	d811      	bhi.n	8003472 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	2201      	movs	r2, #1
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	43db      	mvns	r3, r3
 8003468:	6939      	ldr	r1, [r7, #16]
 800346a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800346e:	4013      	ands	r3, r2
 8003470:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	333c      	adds	r3, #60	; 0x3c
 8003494:	3304      	adds	r3, #4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	f040 80b3 	bne.w	800361a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d028      	beq.n	8003510 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a70      	ldr	r2, [pc, #448]	; (8003684 <PCD_EP_OutXfrComplete_int+0x208>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d90e      	bls.n	80034e4 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034dc:	461a      	mov	r2, r3
 80034de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e2:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f004 fb27 	bl	8007b38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034f4:	461a      	mov	r2, r3
 80034f6:	2101      	movs	r1, #1
 80034f8:	f002 fd14 	bl	8005f24 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003508:	461a      	mov	r2, r3
 800350a:	2308      	movs	r3, #8
 800350c:	6093      	str	r3, [r2, #8]
 800350e:	e0b3      	b.n	8003678 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4413      	add	r3, r2
 8003522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003526:	461a      	mov	r2, r3
 8003528:	2320      	movs	r3, #32
 800352a:	6093      	str	r3, [r2, #8]
 800352c:	e0a4      	b.n	8003678 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	f040 809f 	bne.w	8003678 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4a51      	ldr	r2, [pc, #324]	; (8003684 <PCD_EP_OutXfrComplete_int+0x208>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d90f      	bls.n	8003562 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003558:	461a      	mov	r2, r3
 800355a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355e:	6093      	str	r3, [r2, #8]
 8003560:	e08a      	b.n	8003678 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003574:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	0159      	lsls	r1, r3, #5
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	440b      	add	r3, r1
 800357e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003588:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4403      	add	r3, r0
 8003598:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800359c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4403      	add	r3, r0
 80035c0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4419      	add	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4403      	add	r3, r0
 80035d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035da:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	4619      	mov	r1, r3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f004 faba 	bl	8007b5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d144      	bne.n	8003678 <PCD_EP_OutXfrComplete_int+0x1fc>
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d138      	bne.n	8003678 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003610:	461a      	mov	r2, r3
 8003612:	2101      	movs	r1, #1
 8003614:	f002 fc86 	bl	8005f24 <USB_EP0_OutStart>
 8003618:	e02e      	b.n	8003678 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a1a      	ldr	r2, [pc, #104]	; (8003688 <PCD_EP_OutXfrComplete_int+0x20c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d124      	bne.n	800366c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003638:	461a      	mov	r2, r3
 800363a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800363e:	6093      	str	r3, [r2, #8]
 8003640:	e01a      	b.n	8003678 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003658:	461a      	mov	r2, r3
 800365a:	2320      	movs	r3, #32
 800365c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	4619      	mov	r1, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f004 fa79 	bl	8007b5c <HAL_PCD_DataOutStageCallback>
 800366a:	e005      	b.n	8003678 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	4619      	mov	r1, r3
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f004 fa72 	bl	8007b5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	4f54300a 	.word	0x4f54300a
 8003688:	4f54310a 	.word	0x4f54310a

0800368c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	333c      	adds	r3, #60	; 0x3c
 80036a4:	3304      	adds	r3, #4
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d113      	bne.n	80036ea <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4a1f      	ldr	r2, [pc, #124]	; (8003744 <PCD_EP_OutSetupPacket_int+0xb8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d922      	bls.n	8003710 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01d      	beq.n	8003710 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e0:	461a      	mov	r2, r3
 80036e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036e6:	6093      	str	r3, [r2, #8]
 80036e8:	e012      	b.n	8003710 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4a16      	ldr	r2, [pc, #88]	; (8003748 <PCD_EP_OutSetupPacket_int+0xbc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d10e      	bne.n	8003710 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d009      	beq.n	8003710 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003708:	461a      	mov	r2, r3
 800370a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f004 fa11 	bl	8007b38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <PCD_EP_OutSetupPacket_int+0xb8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d90c      	bls.n	8003738 <PCD_EP_OutSetupPacket_int+0xac>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d108      	bne.n	8003738 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003730:	461a      	mov	r2, r3
 8003732:	2101      	movs	r1, #1
 8003734:	f002 fbf6 	bl	8005f24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	4f54300a 	.word	0x4f54300a
 8003748:	4f54310a 	.word	0x4f54310a

0800374c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	70fb      	strb	r3, [r7, #3]
 8003758:	4613      	mov	r3, r2
 800375a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d107      	bne.n	800377a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800376a:	883b      	ldrh	r3, [r7, #0]
 800376c:	0419      	lsls	r1, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	430a      	orrs	r2, r1
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
 8003778:	e028      	b.n	80037cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4413      	add	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	e00d      	b.n	80037aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	3340      	adds	r3, #64	; 0x40
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	4413      	add	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	3301      	adds	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d3ec      	bcc.n	800378e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037b4:	883b      	ldrh	r3, [r7, #0]
 80037b6:	0418      	lsls	r0, r3, #16
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6819      	ldr	r1, [r3, #0]
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	3b01      	subs	r3, #1
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	4302      	orrs	r2, r0
 80037c4:	3340      	adds	r3, #64	; 0x40
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	460b      	mov	r3, r1
 80037e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	887a      	ldrh	r2, [r7, #2]
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e25b      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d075      	beq.n	800391e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003832:	4ba3      	ldr	r3, [pc, #652]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b04      	cmp	r3, #4
 800383c:	d00c      	beq.n	8003858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383e:	4ba0      	ldr	r3, [pc, #640]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003846:	2b08      	cmp	r3, #8
 8003848:	d112      	bne.n	8003870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384a:	4b9d      	ldr	r3, [pc, #628]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003856:	d10b      	bne.n	8003870 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003858:	4b99      	ldr	r3, [pc, #612]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d05b      	beq.n	800391c <HAL_RCC_OscConfig+0x108>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d157      	bne.n	800391c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e236      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	d106      	bne.n	8003888 <HAL_RCC_OscConfig+0x74>
 800387a:	4b91      	ldr	r3, [pc, #580]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a90      	ldr	r2, [pc, #576]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e01d      	b.n	80038c4 <HAL_RCC_OscConfig+0xb0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x98>
 8003892:	4b8b      	ldr	r3, [pc, #556]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a8a      	ldr	r2, [pc, #552]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b88      	ldr	r3, [pc, #544]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a87      	ldr	r2, [pc, #540]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e00b      	b.n	80038c4 <HAL_RCC_OscConfig+0xb0>
 80038ac:	4b84      	ldr	r3, [pc, #528]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a83      	ldr	r2, [pc, #524]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4b81      	ldr	r3, [pc, #516]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a80      	ldr	r2, [pc, #512]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d013      	beq.n	80038f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7fe faea 	bl	8001ea4 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d4:	f7fe fae6 	bl	8001ea4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e1fb      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	4b76      	ldr	r3, [pc, #472]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0xc0>
 80038f2:	e014      	b.n	800391e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fe fad6 	bl	8001ea4 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fc:	f7fe fad2 	bl	8001ea4 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e1e7      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390e:	4b6c      	ldr	r3, [pc, #432]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0xe8>
 800391a:	e000      	b.n	800391e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d063      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800392a:	4b65      	ldr	r3, [pc, #404]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003936:	4b62      	ldr	r3, [pc, #392]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800393e:	2b08      	cmp	r3, #8
 8003940:	d11c      	bne.n	800397c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003942:	4b5f      	ldr	r3, [pc, #380]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d116      	bne.n	800397c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394e:	4b5c      	ldr	r3, [pc, #368]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_RCC_OscConfig+0x152>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d001      	beq.n	8003966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e1bb      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003966:	4b56      	ldr	r3, [pc, #344]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4952      	ldr	r1, [pc, #328]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	e03a      	b.n	80039f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d020      	beq.n	80039c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003984:	4b4f      	ldr	r3, [pc, #316]	; (8003ac4 <HAL_RCC_OscConfig+0x2b0>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe fa8b 	bl	8001ea4 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003992:	f7fe fa87 	bl	8001ea4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e19c      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a4:	4b46      	ldr	r3, [pc, #280]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b0:	4b43      	ldr	r3, [pc, #268]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4940      	ldr	r1, [pc, #256]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	600b      	str	r3, [r1, #0]
 80039c4:	e015      	b.n	80039f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c6:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <HAL_RCC_OscConfig+0x2b0>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fe fa6a 	bl	8001ea4 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d4:	f7fe fa66 	bl	8001ea4 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e17b      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e6:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d030      	beq.n	8003a60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d016      	beq.n	8003a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a06:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <HAL_RCC_OscConfig+0x2b4>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fe fa4a 	bl	8001ea4 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a14:	f7fe fa46 	bl	8001ea4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e15b      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a26:	4b26      	ldr	r3, [pc, #152]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0x200>
 8003a32:	e015      	b.n	8003a60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <HAL_RCC_OscConfig+0x2b4>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3a:	f7fe fa33 	bl	8001ea4 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a42:	f7fe fa2f 	bl	8001ea4 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e144      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a54:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80a0 	beq.w	8003bae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a72:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10f      	bne.n	8003a9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_OscConfig+0x2b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d121      	bne.n	8003aee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_RCC_OscConfig+0x2b8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a07      	ldr	r2, [pc, #28]	; (8003acc <HAL_RCC_OscConfig+0x2b8>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7fe f9f5 	bl	8001ea4 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	e011      	b.n	8003ae2 <HAL_RCC_OscConfig+0x2ce>
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	42470000 	.word	0x42470000
 8003ac8:	42470e80 	.word	0x42470e80
 8003acc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad0:	f7fe f9e8 	bl	8001ea4 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e0fd      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae2:	4b81      	ldr	r3, [pc, #516]	; (8003ce8 <HAL_RCC_OscConfig+0x4d4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d106      	bne.n	8003b04 <HAL_RCC_OscConfig+0x2f0>
 8003af6:	4b7d      	ldr	r3, [pc, #500]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	4a7c      	ldr	r2, [pc, #496]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6713      	str	r3, [r2, #112]	; 0x70
 8003b02:	e01c      	b.n	8003b3e <HAL_RCC_OscConfig+0x32a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b05      	cmp	r3, #5
 8003b0a:	d10c      	bne.n	8003b26 <HAL_RCC_OscConfig+0x312>
 8003b0c:	4b77      	ldr	r3, [pc, #476]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b10:	4a76      	ldr	r2, [pc, #472]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003b12:	f043 0304 	orr.w	r3, r3, #4
 8003b16:	6713      	str	r3, [r2, #112]	; 0x70
 8003b18:	4b74      	ldr	r3, [pc, #464]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	4a73      	ldr	r2, [pc, #460]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6713      	str	r3, [r2, #112]	; 0x70
 8003b24:	e00b      	b.n	8003b3e <HAL_RCC_OscConfig+0x32a>
 8003b26:	4b71      	ldr	r3, [pc, #452]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	4a70      	ldr	r2, [pc, #448]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	6713      	str	r3, [r2, #112]	; 0x70
 8003b32:	4b6e      	ldr	r3, [pc, #440]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	4a6d      	ldr	r2, [pc, #436]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003b38:	f023 0304 	bic.w	r3, r3, #4
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d015      	beq.n	8003b72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b46:	f7fe f9ad 	bl	8001ea4 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fe f9a9 	bl	8001ea4 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e0bc      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b64:	4b61      	ldr	r3, [pc, #388]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ee      	beq.n	8003b4e <HAL_RCC_OscConfig+0x33a>
 8003b70:	e014      	b.n	8003b9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b72:	f7fe f997 	bl	8001ea4 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b78:	e00a      	b.n	8003b90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fe f993 	bl	8001ea4 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e0a6      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b90:	4b56      	ldr	r3, [pc, #344]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ee      	bne.n	8003b7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d105      	bne.n	8003bae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba2:	4b52      	ldr	r3, [pc, #328]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	4a51      	ldr	r2, [pc, #324]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8092 	beq.w	8003cdc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bb8:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d05c      	beq.n	8003c7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d141      	bne.n	8003c50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bcc:	4b48      	ldr	r3, [pc, #288]	; (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd2:	f7fe f967 	bl	8001ea4 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bda:	f7fe f963 	bl	8001ea4 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e078      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bec:	4b3f      	ldr	r3, [pc, #252]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f0      	bne.n	8003bda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	019b      	lsls	r3, r3, #6
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	3b01      	subs	r3, #1
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	061b      	lsls	r3, r3, #24
 8003c1c:	4933      	ldr	r1, [pc, #204]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c22:	4b33      	ldr	r3, [pc, #204]	; (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fe f93c 	bl	8001ea4 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c30:	f7fe f938 	bl	8001ea4 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e04d      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c42:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x41c>
 8003c4e:	e045      	b.n	8003cdc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c50:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fe f925 	bl	8001ea4 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fe f921 	bl	8001ea4 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e036      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c70:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x44a>
 8003c7c:	e02e      	b.n	8003cdc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e029      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <HAL_RCC_OscConfig+0x4d8>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d11c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d115      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d10d      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d106      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40007000 	.word	0x40007000
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	42470060 	.word	0x42470060

08003cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0cc      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d08:	4b68      	ldr	r3, [pc, #416]	; (8003eac <HAL_RCC_ClockConfig+0x1b8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d90c      	bls.n	8003d30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d16:	4b65      	ldr	r3, [pc, #404]	; (8003eac <HAL_RCC_ClockConfig+0x1b8>)
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1e:	4b63      	ldr	r3, [pc, #396]	; (8003eac <HAL_RCC_ClockConfig+0x1b8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0b8      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d020      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d48:	4b59      	ldr	r3, [pc, #356]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	4a58      	ldr	r2, [pc, #352]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d60:	4b53      	ldr	r3, [pc, #332]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	4a52      	ldr	r2, [pc, #328]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d6c:	4b50      	ldr	r3, [pc, #320]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	494d      	ldr	r1, [pc, #308]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d044      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d107      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d92:	4b47      	ldr	r3, [pc, #284]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d119      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e07f      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d003      	beq.n	8003db2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db2:	4b3f      	ldr	r3, [pc, #252]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e06f      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc2:	4b3b      	ldr	r3, [pc, #236]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e067      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd2:	4b37      	ldr	r3, [pc, #220]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f023 0203 	bic.w	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4934      	ldr	r1, [pc, #208]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de4:	f7fe f85e 	bl	8001ea4 <HAL_GetTick>
 8003de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dec:	f7fe f85a 	bl	8001ea4 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e04f      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 020c 	and.w	r2, r3, #12
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d1eb      	bne.n	8003dec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e14:	4b25      	ldr	r3, [pc, #148]	; (8003eac <HAL_RCC_ClockConfig+0x1b8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d20c      	bcs.n	8003e3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e22:	4b22      	ldr	r3, [pc, #136]	; (8003eac <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_RCC_ClockConfig+0x1b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e032      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e48:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4916      	ldr	r1, [pc, #88]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e66:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	490e      	ldr	r1, [pc, #56]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e7a:	f000 f821 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8003e7e:	4601      	mov	r1, r0
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e8c:	5cd3      	ldrb	r3, [r2, r3]
 8003e8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e92:	4a09      	ldr	r2, [pc, #36]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fd ffbe 	bl	8001e1c <HAL_InitTick>

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40023c00 	.word	0x40023c00
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	0800b714 	.word	0x0800b714
 8003eb8:	20000008 	.word	0x20000008
 8003ebc:	2000000c 	.word	0x2000000c

08003ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed6:	4b63      	ldr	r3, [pc, #396]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d007      	beq.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x32>
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d008      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x38>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f040 80b4 	bne.w	8004054 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eec:	4b5e      	ldr	r3, [pc, #376]	; (8004068 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003eee:	60bb      	str	r3, [r7, #8]
       break;
 8003ef0:	e0b3      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ef2:	4b5e      	ldr	r3, [pc, #376]	; (800406c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003ef4:	60bb      	str	r3, [r7, #8]
      break;
 8003ef6:	e0b0      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef8:	4b5a      	ldr	r3, [pc, #360]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f02:	4b58      	ldr	r3, [pc, #352]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d04a      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0e:	4b55      	ldr	r3, [pc, #340]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	099b      	lsrs	r3, r3, #6
 8003f14:	f04f 0400 	mov.w	r4, #0
 8003f18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	ea03 0501 	and.w	r5, r3, r1
 8003f24:	ea04 0602 	and.w	r6, r4, r2
 8003f28:	4629      	mov	r1, r5
 8003f2a:	4632      	mov	r2, r6
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	f04f 0400 	mov.w	r4, #0
 8003f34:	0154      	lsls	r4, r2, #5
 8003f36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f3a:	014b      	lsls	r3, r1, #5
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4622      	mov	r2, r4
 8003f40:	1b49      	subs	r1, r1, r5
 8003f42:	eb62 0206 	sbc.w	r2, r2, r6
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	f04f 0400 	mov.w	r4, #0
 8003f4e:	0194      	lsls	r4, r2, #6
 8003f50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f54:	018b      	lsls	r3, r1, #6
 8003f56:	1a5b      	subs	r3, r3, r1
 8003f58:	eb64 0402 	sbc.w	r4, r4, r2
 8003f5c:	f04f 0100 	mov.w	r1, #0
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	00e2      	lsls	r2, r4, #3
 8003f66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f6a:	00d9      	lsls	r1, r3, #3
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4614      	mov	r4, r2
 8003f70:	195b      	adds	r3, r3, r5
 8003f72:	eb44 0406 	adc.w	r4, r4, r6
 8003f76:	f04f 0100 	mov.w	r1, #0
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	0262      	lsls	r2, r4, #9
 8003f80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f84:	0259      	lsls	r1, r3, #9
 8003f86:	460b      	mov	r3, r1
 8003f88:	4614      	mov	r4, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f04f 0400 	mov.w	r4, #0
 8003f94:	461a      	mov	r2, r3
 8003f96:	4623      	mov	r3, r4
 8003f98:	f7fc fe26 	bl	8000be8 <__aeabi_uldivmod>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	e049      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa4:	4b2f      	ldr	r3, [pc, #188]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	099b      	lsrs	r3, r3, #6
 8003faa:	f04f 0400 	mov.w	r4, #0
 8003fae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	ea03 0501 	and.w	r5, r3, r1
 8003fba:	ea04 0602 	and.w	r6, r4, r2
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	4632      	mov	r2, r6
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	f04f 0400 	mov.w	r4, #0
 8003fca:	0154      	lsls	r4, r2, #5
 8003fcc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fd0:	014b      	lsls	r3, r1, #5
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	1b49      	subs	r1, r1, r5
 8003fd8:	eb62 0206 	sbc.w	r2, r2, r6
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	f04f 0400 	mov.w	r4, #0
 8003fe4:	0194      	lsls	r4, r2, #6
 8003fe6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fea:	018b      	lsls	r3, r1, #6
 8003fec:	1a5b      	subs	r3, r3, r1
 8003fee:	eb64 0402 	sbc.w	r4, r4, r2
 8003ff2:	f04f 0100 	mov.w	r1, #0
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	00e2      	lsls	r2, r4, #3
 8003ffc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004000:	00d9      	lsls	r1, r3, #3
 8004002:	460b      	mov	r3, r1
 8004004:	4614      	mov	r4, r2
 8004006:	195b      	adds	r3, r3, r5
 8004008:	eb44 0406 	adc.w	r4, r4, r6
 800400c:	f04f 0100 	mov.w	r1, #0
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	02a2      	lsls	r2, r4, #10
 8004016:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800401a:	0299      	lsls	r1, r3, #10
 800401c:	460b      	mov	r3, r1
 800401e:	4614      	mov	r4, r2
 8004020:	4618      	mov	r0, r3
 8004022:	4621      	mov	r1, r4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f04f 0400 	mov.w	r4, #0
 800402a:	461a      	mov	r2, r3
 800402c:	4623      	mov	r3, r4
 800402e:	f7fc fddb 	bl	8000be8 <__aeabi_uldivmod>
 8004032:	4603      	mov	r3, r0
 8004034:	460c      	mov	r4, r1
 8004036:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	3301      	adds	r3, #1
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004050:	60bb      	str	r3, [r7, #8]
      break;
 8004052:	e002      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004056:	60bb      	str	r3, [r7, #8]
      break;
 8004058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800405a:	68bb      	ldr	r3, [r7, #8]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004064:	40023800 	.word	0x40023800
 8004068:	00f42400 	.word	0x00f42400
 800406c:	007a1200 	.word	0x007a1200

08004070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <HAL_RCC_GetHCLKFreq+0x14>)
 8004076:	681b      	ldr	r3, [r3, #0]
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000008 	.word	0x20000008

08004088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e056      	b.n	8004148 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d106      	bne.n	80040ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fd fd3d 	bl	8001b34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	ea42 0103 	orr.w	r1, r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	0c1b      	lsrs	r3, r3, #16
 8004118:	f003 0104 	and.w	r1, r3, #4
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004136:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08c      	sub	sp, #48	; 0x30
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800415e:	2301      	movs	r3, #1
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_SPI_TransmitReceive+0x26>
 8004172:	2302      	movs	r3, #2
 8004174:	e18a      	b.n	800448c <HAL_SPI_TransmitReceive+0x33c>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800417e:	f7fd fe91 	bl	8001ea4 <HAL_GetTick>
 8004182:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800419c:	2b01      	cmp	r3, #1
 800419e:	d00f      	beq.n	80041c0 <HAL_SPI_TransmitReceive+0x70>
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a6:	d107      	bne.n	80041b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d103      	bne.n	80041b8 <HAL_SPI_TransmitReceive+0x68>
 80041b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d003      	beq.n	80041c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041be:	e15b      	b.n	8004478 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_SPI_TransmitReceive+0x82>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_SPI_TransmitReceive+0x82>
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041d8:	e14e      	b.n	8004478 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d003      	beq.n	80041ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2205      	movs	r2, #5
 80041ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	887a      	ldrh	r2, [r7, #2]
 80041fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	887a      	ldrh	r2, [r7, #2]
 8004210:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	887a      	ldrh	r2, [r7, #2]
 8004216:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d007      	beq.n	8004242 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800424a:	d178      	bne.n	800433e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_SPI_TransmitReceive+0x10a>
 8004254:	8b7b      	ldrh	r3, [r7, #26]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d166      	bne.n	8004328 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	881a      	ldrh	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	1c9a      	adds	r2, r3, #2
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427e:	e053      	b.n	8004328 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b02      	cmp	r3, #2
 800428c:	d11b      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x176>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d016      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x176>
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d113      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	881a      	ldrh	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	1c9a      	adds	r2, r3, #2
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d119      	bne.n	8004308 <HAL_SPI_TransmitReceive+0x1b8>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d014      	beq.n	8004308 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	b292      	uxth	r2, r2
 80042ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	1c9a      	adds	r2, r3, #2
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004304:	2301      	movs	r3, #1
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004308:	f7fd fdcc 	bl	8001ea4 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004314:	429a      	cmp	r2, r3
 8004316:	d807      	bhi.n	8004328 <HAL_SPI_TransmitReceive+0x1d8>
 8004318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d003      	beq.n	8004328 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004326:	e0a7      	b.n	8004478 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1a6      	bne.n	8004280 <HAL_SPI_TransmitReceive+0x130>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1a1      	bne.n	8004280 <HAL_SPI_TransmitReceive+0x130>
 800433c:	e07c      	b.n	8004438 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_SPI_TransmitReceive+0x1fc>
 8004346:	8b7b      	ldrh	r3, [r7, #26]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d16b      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	7812      	ldrb	r2, [r2, #0]
 8004358:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004372:	e057      	b.n	8004424 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b02      	cmp	r3, #2
 8004380:	d11c      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x26c>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d017      	beq.n	80043bc <HAL_SPI_TransmitReceive+0x26c>
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	2b01      	cmp	r3, #1
 8004390:	d114      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d119      	bne.n	80043fe <HAL_SPI_TransmitReceive+0x2ae>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d014      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043fa:	2301      	movs	r3, #1
 80043fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043fe:	f7fd fd51 	bl	8001ea4 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800440a:	429a      	cmp	r2, r3
 800440c:	d803      	bhi.n	8004416 <HAL_SPI_TransmitReceive+0x2c6>
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d102      	bne.n	800441c <HAL_SPI_TransmitReceive+0x2cc>
 8004416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004422:	e029      	b.n	8004478 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1a2      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x224>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d19d      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fa83 	bl	8004948 <SPI_EndRxTxTransaction>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d006      	beq.n	8004456 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004454:	e010      	b.n	8004478 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10b      	bne.n	8004476 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	e000      	b.n	8004478 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004476:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004488:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800448c:	4618      	mov	r0, r3
 800448e:	3730      	adds	r7, #48	; 0x30
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_SPI_Transmit_IT+0x20>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e067      	b.n	8004584 <HAL_SPI_Transmit_IT+0xf0>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_SPI_Transmit_IT+0x34>
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d102      	bne.n	80044ce <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044cc:	e055      	b.n	800457a <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d002      	beq.n	80044e0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80044da:	2302      	movs	r3, #2
 80044dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044de:	e04c      	b.n	800457a <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2203      	movs	r2, #3
 80044e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	88fa      	ldrh	r2, [r7, #6]
 80044fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a1b      	ldr	r2, [pc, #108]	; (8004590 <HAL_SPI_Transmit_IT+0xfc>)
 8004524:	645a      	str	r2, [r3, #68]	; 0x44
 8004526:	e002      	b.n	800452e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4a1a      	ldr	r2, [pc, #104]	; (8004594 <HAL_SPI_Transmit_IT+0x100>)
 800452c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004536:	d107      	bne.n	8004548 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004546:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004556:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	2b40      	cmp	r3, #64	; 0x40
 8004564:	d008      	beq.n	8004578 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e000      	b.n	800457a <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8004578:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004582:	7dfb      	ldrb	r3, [r7, #23]
}
 8004584:	4618      	mov	r0, r3
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	0800482f 	.word	0x0800482f
 8004594:	080047e9 	.word	0x080047e9

08004598 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	099b      	lsrs	r3, r3, #6
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10f      	bne.n	80045dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	099b      	lsrs	r3, r3, #6
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
    return;
 80045da:	e0d8      	b.n	800478e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	085b      	lsrs	r3, r3, #1
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_SPI_IRQHandler+0x66>
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	09db      	lsrs	r3, r3, #7
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d004      	beq.n	80045fe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
    return;
 80045fc:	e0c7      	b.n	800478e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10c      	bne.n	8004624 <HAL_SPI_IRQHandler+0x8c>
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	099b      	lsrs	r3, r3, #6
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80b5 	beq.w	800478e <HAL_SPI_IRQHandler+0x1f6>
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80ae 	beq.w	800478e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	099b      	lsrs	r3, r3, #6
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d023      	beq.n	8004686 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b03      	cmp	r3, #3
 8004648:	d011      	beq.n	800466e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	f043 0204 	orr.w	r2, r3, #4
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	e00b      	b.n	8004686 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	693b      	ldr	r3, [r7, #16]
        return;
 8004684:	e083      	b.n	800478e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d014      	beq.n	80046bc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	f043 0201 	orr.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	0a1b      	lsrs	r3, r3, #8
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00c      	beq.n	80046e2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046cc:	f043 0208 	orr.w	r2, r3, #8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80046d4:	2300      	movs	r3, #0
 80046d6:	60bb      	str	r3, [r7, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d050      	beq.n	800478c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046f8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d104      	bne.n	8004716 <HAL_SPI_IRQHandler+0x17e>
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d034      	beq.n	8004780 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0203 	bic.w	r2, r2, #3
 8004724:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d011      	beq.n	8004752 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	4a18      	ldr	r2, [pc, #96]	; (8004794 <HAL_SPI_IRQHandler+0x1fc>)
 8004734:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd fcf1 	bl	8002122 <HAL_DMA_Abort_IT>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004756:	2b00      	cmp	r3, #0
 8004758:	d016      	beq.n	8004788 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800475e:	4a0d      	ldr	r2, [pc, #52]	; (8004794 <HAL_SPI_IRQHandler+0x1fc>)
 8004760:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fcdb 	bl	8002122 <HAL_DMA_Abort_IT>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800477e:	e003      	b.n	8004788 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f813 	bl	80047ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004786:	e000      	b.n	800478a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004788:	bf00      	nop
    return;
 800478a:	bf00      	nop
 800478c:	bf00      	nop
  }
}
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	080047c1 	.word	0x080047c1

08004798 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f7ff ffe6 	bl	80047ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047e0:	bf00      	nop
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	7812      	ldrb	r2, [r2, #0]
 80047fc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f8d3 	bl	80049cc <SPI_CloseTx_ISR>
  }
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	881a      	ldrh	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	1c9a      	adds	r2, r3, #2
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f8b1 	bl	80049cc <SPI_CloseTx_ISR>
  }
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4613      	mov	r3, r2
 8004880:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004882:	e04c      	b.n	800491e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d048      	beq.n	800491e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800488c:	f7fd fb0a 	bl	8001ea4 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d902      	bls.n	80048a2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d13d      	bne.n	800491e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ba:	d111      	bne.n	80048e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c4:	d004      	beq.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ce:	d107      	bne.n	80048e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e8:	d10f      	bne.n	800490a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004908:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e00f      	b.n	800493e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4013      	ands	r3, r2
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	429a      	cmp	r2, r3
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	429a      	cmp	r2, r3
 800493a:	d1a3      	bne.n	8004884 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004954:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <SPI_EndRxTxTransaction+0x7c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1b      	ldr	r2, [pc, #108]	; (80049c8 <SPI_EndRxTxTransaction+0x80>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	0d5b      	lsrs	r3, r3, #21
 8004960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004964:	fb02 f303 	mul.w	r3, r2, r3
 8004968:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004972:	d112      	bne.n	800499a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2200      	movs	r2, #0
 800497c:	2180      	movs	r1, #128	; 0x80
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7ff ff77 	bl	8004872 <SPI_WaitFlagStateUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d016      	beq.n	80049b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498e:	f043 0220 	orr.w	r2, r3, #32
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e00f      	b.n	80049ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b0:	2b80      	cmp	r3, #128	; 0x80
 80049b2:	d0f2      	beq.n	800499a <SPI_EndRxTxTransaction+0x52>
 80049b4:	e000      	b.n	80049b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80049b6:	bf00      	nop
  }

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000008 	.word	0x20000008
 80049c8:	165e9f81 	.word	0x165e9f81

080049cc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80049d4:	4b2c      	ldr	r3, [pc, #176]	; (8004a88 <SPI_CloseTx_ISR+0xbc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2c      	ldr	r2, [pc, #176]	; (8004a8c <SPI_CloseTx_ISR+0xc0>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	0a5b      	lsrs	r3, r3, #9
 80049e0:	2264      	movs	r2, #100	; 0x64
 80049e2:	fb02 f303 	mul.w	r3, r2, r3
 80049e6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049e8:	f7fd fa5c 	bl	8001ea4 <HAL_GetTick>
 80049ec:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	f043 0220 	orr.w	r2, r3, #32
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a00:	e009      	b.n	8004a16 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0eb      	beq.n	80049ee <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a24:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	2164      	movs	r1, #100	; 0x64
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff ff8c 	bl	8004948 <SPI_EndRxTxTransaction>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10a      	bne.n	8004a60 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fe9b 	bl	80047ac <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004a76:	e002      	b.n	8004a7e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff fe8d 	bl	8004798 <HAL_SPI_TxCpltCallback>
}
 8004a7e:	bf00      	nop
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000008 	.word	0x20000008
 8004a8c:	057619f1 	.word	0x057619f1

08004a90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a90:	b084      	sub	sp, #16
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	f107 001c 	add.w	r0, r7, #28
 8004a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d122      	bne.n	8004aee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d105      	bne.n	8004ae2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f001 fa7c 	bl	8005fe0 <USB_CoreReset>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	73fb      	strb	r3, [r7, #15]
 8004aec:	e01a      	b.n	8004b24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f001 fa70 	bl	8005fe0 <USB_CoreReset>
 8004b00:	4603      	mov	r3, r0
 8004b02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38
 8004b16:	e005      	b.n	8004b24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d10b      	bne.n	8004b42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f043 0206 	orr.w	r2, r3, #6
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f043 0220 	orr.w	r2, r3, #32
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b4e:	b004      	add	sp, #16
 8004b50:	4770      	bx	lr
	...

08004b54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d165      	bne.n	8004c34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4a41      	ldr	r2, [pc, #260]	; (8004c70 <USB_SetTurnaroundTime+0x11c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d906      	bls.n	8004b7e <USB_SetTurnaroundTime+0x2a>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4a40      	ldr	r2, [pc, #256]	; (8004c74 <USB_SetTurnaroundTime+0x120>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d802      	bhi.n	8004b7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b78:	230f      	movs	r3, #15
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e062      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4a3c      	ldr	r2, [pc, #240]	; (8004c74 <USB_SetTurnaroundTime+0x120>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d906      	bls.n	8004b94 <USB_SetTurnaroundTime+0x40>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4a3b      	ldr	r2, [pc, #236]	; (8004c78 <USB_SetTurnaroundTime+0x124>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d802      	bhi.n	8004b94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b8e:	230e      	movs	r3, #14
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	e057      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4a38      	ldr	r2, [pc, #224]	; (8004c78 <USB_SetTurnaroundTime+0x124>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d906      	bls.n	8004baa <USB_SetTurnaroundTime+0x56>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4a37      	ldr	r2, [pc, #220]	; (8004c7c <USB_SetTurnaroundTime+0x128>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d802      	bhi.n	8004baa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ba4:	230d      	movs	r3, #13
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	e04c      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4a33      	ldr	r2, [pc, #204]	; (8004c7c <USB_SetTurnaroundTime+0x128>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d906      	bls.n	8004bc0 <USB_SetTurnaroundTime+0x6c>
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	4a32      	ldr	r2, [pc, #200]	; (8004c80 <USB_SetTurnaroundTime+0x12c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d802      	bhi.n	8004bc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004bba:	230c      	movs	r3, #12
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	e041      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4a2f      	ldr	r2, [pc, #188]	; (8004c80 <USB_SetTurnaroundTime+0x12c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d906      	bls.n	8004bd6 <USB_SetTurnaroundTime+0x82>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4a2e      	ldr	r2, [pc, #184]	; (8004c84 <USB_SetTurnaroundTime+0x130>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d802      	bhi.n	8004bd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004bd0:	230b      	movs	r3, #11
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	e036      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4a2a      	ldr	r2, [pc, #168]	; (8004c84 <USB_SetTurnaroundTime+0x130>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d906      	bls.n	8004bec <USB_SetTurnaroundTime+0x98>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4a29      	ldr	r2, [pc, #164]	; (8004c88 <USB_SetTurnaroundTime+0x134>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d802      	bhi.n	8004bec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004be6:	230a      	movs	r3, #10
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	e02b      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4a26      	ldr	r2, [pc, #152]	; (8004c88 <USB_SetTurnaroundTime+0x134>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d906      	bls.n	8004c02 <USB_SetTurnaroundTime+0xae>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4a25      	ldr	r2, [pc, #148]	; (8004c8c <USB_SetTurnaroundTime+0x138>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d802      	bhi.n	8004c02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004bfc:	2309      	movs	r3, #9
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	e020      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4a21      	ldr	r2, [pc, #132]	; (8004c8c <USB_SetTurnaroundTime+0x138>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d906      	bls.n	8004c18 <USB_SetTurnaroundTime+0xc4>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4a20      	ldr	r2, [pc, #128]	; (8004c90 <USB_SetTurnaroundTime+0x13c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d802      	bhi.n	8004c18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c12:	2308      	movs	r3, #8
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	e015      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4a1d      	ldr	r2, [pc, #116]	; (8004c90 <USB_SetTurnaroundTime+0x13c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d906      	bls.n	8004c2e <USB_SetTurnaroundTime+0xda>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <USB_SetTurnaroundTime+0x140>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d802      	bhi.n	8004c2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c28:	2307      	movs	r3, #7
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e00a      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c2e:	2306      	movs	r3, #6
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	e007      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c3a:	2309      	movs	r3, #9
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	e001      	b.n	8004c44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c40:	2309      	movs	r3, #9
 8004c42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	029b      	lsls	r3, r3, #10
 8004c58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	00d8acbf 	.word	0x00d8acbf
 8004c74:	00e4e1bf 	.word	0x00e4e1bf
 8004c78:	00f423ff 	.word	0x00f423ff
 8004c7c:	0106737f 	.word	0x0106737f
 8004c80:	011a499f 	.word	0x011a499f
 8004c84:	01312cff 	.word	0x01312cff
 8004c88:	014ca43f 	.word	0x014ca43f
 8004c8c:	016e35ff 	.word	0x016e35ff
 8004c90:	01a6ab1f 	.word	0x01a6ab1f
 8004c94:	01e847ff 	.word	0x01e847ff

08004c98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f043 0201 	orr.w	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f023 0201 	bic.w	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d106      	bne.n	8004d08 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60da      	str	r2, [r3, #12]
 8004d06:	e00b      	b.n	8004d20 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	60da      	str	r2, [r3, #12]
 8004d1a:	e001      	b.n	8004d20 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e003      	b.n	8004d28 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004d20:	2032      	movs	r0, #50	; 0x32
 8004d22:	f7fd f8cb 	bl	8001ebc <HAL_Delay>

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d30:	b084      	sub	sp, #16
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	e009      	b.n	8004d64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	3340      	adds	r3, #64	; 0x40
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	3301      	adds	r3, #1
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b0e      	cmp	r3, #14
 8004d68:	d9f2      	bls.n	8004d50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d112      	bne.n	8004d96 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38
 8004d94:	e00b      	b.n	8004dae <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004db4:	461a      	mov	r2, r3
 8004db6:	2300      	movs	r3, #0
 8004db8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc8:	461a      	mov	r2, r3
 8004dca:	680b      	ldr	r3, [r1, #0]
 8004dcc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d10c      	bne.n	8004dee <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004dda:	2100      	movs	r1, #0
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f961 	bl	80050a4 <USB_SetDevSpeed>
 8004de2:	e008      	b.n	8004df6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004de4:	2101      	movs	r1, #1
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f95c 	bl	80050a4 <USB_SetDevSpeed>
 8004dec:	e003      	b.n	8004df6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004dee:	2103      	movs	r1, #3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f957 	bl	80050a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004df6:	2110      	movs	r1, #16
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f90b 	bl	8005014 <USB_FlushTxFifo>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f929 	bl	8005060 <USB_FlushRxFifo>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2300      	movs	r3, #0
 8004e22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e36:	461a      	mov	r2, r3
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	e043      	b.n	8004eca <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e58:	d118      	bne.n	8004e8c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	e013      	b.n	8004e9e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e82:	461a      	mov	r2, r3
 8004e84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	e008      	b.n	8004e9e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e98:	461a      	mov	r2, r3
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2300      	movs	r3, #0
 8004eae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ec2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d3b7      	bcc.n	8004e42 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	e043      	b.n	8004f60 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eee:	d118      	bne.n	8004f22 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f02:	461a      	mov	r2, r3
 8004f04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e013      	b.n	8004f34 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	e008      	b.n	8004f34 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2300      	movs	r3, #0
 8004f32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f40:	461a      	mov	r2, r3
 8004f42:	2300      	movs	r3, #0
 8004f44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f52:	461a      	mov	r2, r3
 8004f54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d3b7      	bcc.n	8004ed8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f7a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d111      	bne.n	8004fa6 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b20      	ldr	r3, [pc, #128]	; (800500c <USB_DevInit+0x2dc>)
 8004f8c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa0:	f043 0303 	orr.w	r3, r3, #3
 8004fa4:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004fb2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d105      	bne.n	8004fc6 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f043 0210 	orr.w	r2, r3, #16
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	4b11      	ldr	r3, [pc, #68]	; (8005010 <USB_DevInit+0x2e0>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f043 0208 	orr.w	r2, r3, #8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d107      	bne.n	8004ffa <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ff2:	f043 0304 	orr.w	r3, r3, #4
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005006:	b004      	add	sp, #16
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	00800100 	.word	0x00800100
 8005010:	803c3800 	.word	0x803c3800

08005014 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	019b      	lsls	r3, r3, #6
 8005026:	f043 0220 	orr.w	r2, r3, #32
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3301      	adds	r3, #1
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4a09      	ldr	r2, [pc, #36]	; (800505c <USB_FlushTxFifo+0x48>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d901      	bls.n	8005040 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e006      	b.n	800504e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b20      	cmp	r3, #32
 800504a:	d0f0      	beq.n	800502e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	00030d40 	.word	0x00030d40

08005060 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2210      	movs	r2, #16
 8005070:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3301      	adds	r3, #1
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <USB_FlushRxFifo+0x40>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d901      	bls.n	8005084 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e006      	b.n	8005092 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b10      	cmp	r3, #16
 800508e:	d0f0      	beq.n	8005072 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	00030d40 	.word	0x00030d40

080050a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050c4:	4313      	orrs	r3, r2
 80050c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b087      	sub	sp, #28
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0306 	and.w	r3, r3, #6
 80050ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]
 80050fa:	e00a      	b.n	8005112 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d002      	beq.n	8005108 <USB_GetDevSpeed+0x32>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b06      	cmp	r3, #6
 8005106:	d102      	bne.n	800510e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005108:	2302      	movs	r3, #2
 800510a:	75fb      	strb	r3, [r7, #23]
 800510c:	e001      	b.n	8005112 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800510e:	230f      	movs	r3, #15
 8005110:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005112:	7dfb      	ldrb	r3, [r7, #23]
}
 8005114:	4618      	mov	r0, r3
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d13a      	bne.n	80051b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	2101      	movs	r1, #1
 800514e:	fa01 f303 	lsl.w	r3, r1, r3
 8005152:	b29b      	uxth	r3, r3
 8005154:	68f9      	ldr	r1, [r7, #12]
 8005156:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800515a:	4313      	orrs	r3, r2
 800515c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d155      	bne.n	8005220 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	78db      	ldrb	r3, [r3, #3]
 800518e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005190:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	059b      	lsls	r3, r3, #22
 8005196:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005198:	4313      	orrs	r3, r2
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	e036      	b.n	8005220 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	2101      	movs	r1, #1
 80051c4:	fa01 f303 	lsl.w	r3, r1, r3
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d11a      	bne.n	8005220 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	78db      	ldrb	r3, [r3, #3]
 8005204:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005206:	430b      	orrs	r3, r1
 8005208:	4313      	orrs	r3, r2
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	785b      	ldrb	r3, [r3, #1]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d135      	bne.n	80052b8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	2101      	movs	r1, #1
 800525e:	fa01 f303 	lsl.w	r3, r1, r3
 8005262:	b29b      	uxth	r3, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800526c:	4013      	ands	r3, r2
 800526e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	2101      	movs	r1, #1
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	b29b      	uxth	r3, r3
 8005288:	43db      	mvns	r3, r3
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005290:	4013      	ands	r3, r2
 8005292:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	0159      	lsls	r1, r3, #5
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	440b      	add	r3, r1
 80052aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ae:	4619      	mov	r1, r3
 80052b0:	4b1f      	ldr	r3, [pc, #124]	; (8005330 <USB_DeactivateEndpoint+0x100>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]
 80052b6:	e034      	b.n	8005322 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	f003 030f 	and.w	r3, r3, #15
 80052c8:	2101      	movs	r1, #1
 80052ca:	fa01 f303 	lsl.w	r3, r1, r3
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	43db      	mvns	r3, r3
 80052d2:	68f9      	ldr	r1, [r7, #12]
 80052d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052d8:	4013      	ands	r3, r2
 80052da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	2101      	movs	r1, #1
 80052ee:	fa01 f303 	lsl.w	r3, r1, r3
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	43db      	mvns	r3, r3
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052fc:	4013      	ands	r3, r2
 80052fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	0159      	lsls	r1, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	440b      	add	r3, r1
 8005316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531a:	4619      	mov	r1, r3
 800531c:	4b05      	ldr	r3, [pc, #20]	; (8005334 <USB_DeactivateEndpoint+0x104>)
 800531e:	4013      	ands	r3, r2
 8005320:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	ec337800 	.word	0xec337800
 8005334:	eff37800 	.word	0xeff37800

08005338 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	; 0x28
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	4613      	mov	r3, r2
 8005344:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	785b      	ldrb	r3, [r3, #1]
 8005354:	2b01      	cmp	r3, #1
 8005356:	f040 815c 	bne.w	8005612 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d132      	bne.n	80053c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	440a      	add	r2, r1
 8005378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005380:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005384:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c0:	0cdb      	lsrs	r3, r3, #19
 80053c2:	04db      	lsls	r3, r3, #19
 80053c4:	6113      	str	r3, [r2, #16]
 80053c6:	e074      	b.n	80054b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e2:	0cdb      	lsrs	r3, r3, #19
 80053e4:	04db      	lsls	r3, r3, #19
 80053e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	0151      	lsls	r1, r2, #5
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	440a      	add	r2, r1
 80053fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005402:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005406:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800540a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6959      	ldr	r1, [r3, #20]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	440b      	add	r3, r1
 8005424:	1e59      	subs	r1, r3, #1
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	fbb1 f3f3 	udiv	r3, r1, r3
 800542e:	04d9      	lsls	r1, r3, #19
 8005430:	4b9d      	ldr	r3, [pc, #628]	; (80056a8 <USB_EPStartXfer+0x370>)
 8005432:	400b      	ands	r3, r1
 8005434:	69b9      	ldr	r1, [r7, #24]
 8005436:	0148      	lsls	r0, r1, #5
 8005438:	69f9      	ldr	r1, [r7, #28]
 800543a:	4401      	add	r1, r0
 800543c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005440:	4313      	orrs	r3, r2
 8005442:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800545a:	69b9      	ldr	r1, [r7, #24]
 800545c:	0148      	lsls	r0, r1, #5
 800545e:	69f9      	ldr	r1, [r7, #28]
 8005460:	4401      	add	r1, r0
 8005462:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005466:	4313      	orrs	r3, r2
 8005468:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	78db      	ldrb	r3, [r3, #3]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d11f      	bne.n	80054b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	0151      	lsls	r1, r2, #5
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	440a      	add	r2, r1
 8005488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005490:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d14b      	bne.n	8005550 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d009      	beq.n	80054d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	461a      	mov	r2, r3
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	78db      	ldrb	r3, [r3, #3]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d128      	bne.n	800552e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d110      	bne.n	800550e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	440a      	add	r2, r1
 8005502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005506:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	e00f      	b.n	800552e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	440a      	add	r2, r1
 8005524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	0151      	lsls	r1, r2, #5
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	440a      	add	r2, r1
 8005544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005548:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	e12f      	b.n	80057b0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	440a      	add	r2, r1
 8005566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800556e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	78db      	ldrb	r3, [r3, #3]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d015      	beq.n	80055a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8117 	beq.w	80057b0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	2101      	movs	r1, #1
 8005594:	fa01 f303 	lsl.w	r3, r1, r3
 8005598:	69f9      	ldr	r1, [r7, #28]
 800559a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800559e:	4313      	orrs	r3, r2
 80055a0:	634b      	str	r3, [r1, #52]	; 0x34
 80055a2:	e105      	b.n	80057b0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d110      	bne.n	80055d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	e00f      	b.n	80055f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	68d9      	ldr	r1, [r3, #12]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	781a      	ldrb	r2, [r3, #0]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	b298      	uxth	r0, r3
 8005604:	79fb      	ldrb	r3, [r7, #7]
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	4603      	mov	r3, r0
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 fa2b 	bl	8005a66 <USB_WritePacket>
 8005610:	e0ce      	b.n	80057b0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562c:	0cdb      	lsrs	r3, r3, #19
 800562e:	04db      	lsls	r3, r3, #19
 8005630:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800564c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005650:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005654:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d126      	bne.n	80056ac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005674:	69b9      	ldr	r1, [r7, #24]
 8005676:	0148      	lsls	r0, r1, #5
 8005678:	69f9      	ldr	r1, [r7, #28]
 800567a:	4401      	add	r1, r0
 800567c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005680:	4313      	orrs	r3, r2
 8005682:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	440a      	add	r2, r1
 800569a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056a2:	6113      	str	r3, [r2, #16]
 80056a4:	e036      	b.n	8005714 <USB_EPStartXfer+0x3dc>
 80056a6:	bf00      	nop
 80056a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	695a      	ldr	r2, [r3, #20]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4413      	add	r3, r2
 80056b6:	1e5a      	subs	r2, r3, #1
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	8afb      	ldrh	r3, [r7, #22]
 80056d2:	04d9      	lsls	r1, r3, #19
 80056d4:	4b39      	ldr	r3, [pc, #228]	; (80057bc <USB_EPStartXfer+0x484>)
 80056d6:	400b      	ands	r3, r1
 80056d8:	69b9      	ldr	r1, [r7, #24]
 80056da:	0148      	lsls	r0, r1, #5
 80056dc:	69f9      	ldr	r1, [r7, #28]
 80056de:	4401      	add	r1, r0
 80056e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056e4:	4313      	orrs	r3, r2
 80056e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	8af9      	ldrh	r1, [r7, #22]
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005704:	69b9      	ldr	r1, [r7, #24]
 8005706:	0148      	lsls	r0, r1, #5
 8005708:	69f9      	ldr	r1, [r7, #28]
 800570a:	4401      	add	r1, r0
 800570c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005710:	4313      	orrs	r3, r2
 8005712:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d10d      	bne.n	8005736 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d009      	beq.n	8005736 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	68d9      	ldr	r1, [r3, #12]
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	460a      	mov	r2, r1
 8005734:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	78db      	ldrb	r3, [r3, #3]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d128      	bne.n	8005790 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d110      	bne.n	8005770 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005768:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e00f      	b.n	8005790 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800578a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3720      	adds	r7, #32
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	1ff80000 	.word	0x1ff80000

080057c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	4613      	mov	r3, r2
 80057cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	785b      	ldrb	r3, [r3, #1]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	f040 80cd 	bne.w	800597c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d132      	bne.n	8005850 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005804:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005808:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800580c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	0151      	lsls	r1, r2, #5
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	440a      	add	r2, r1
 8005824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800582c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	440a      	add	r2, r1
 8005844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005848:	0cdb      	lsrs	r3, r3, #19
 800584a:	04db      	lsls	r3, r3, #19
 800584c:	6113      	str	r3, [r2, #16]
 800584e:	e04e      	b.n	80058ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586a:	0cdb      	lsrs	r3, r3, #19
 800586c:	04db      	lsls	r3, r3, #19
 800586e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800588e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005892:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	695a      	ldr	r2, [r3, #20]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	429a      	cmp	r2, r3
 800589e:	d903      	bls.n	80058a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058de:	6939      	ldr	r1, [r7, #16]
 80058e0:	0148      	lsls	r0, r1, #5
 80058e2:	6979      	ldr	r1, [r7, #20]
 80058e4:	4401      	add	r1, r0
 80058e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058ea:	4313      	orrs	r3, r2
 80058ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d11e      	bne.n	8005932 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d009      	beq.n	8005910 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005908:	461a      	mov	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	e092      	b.n	8005a58 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005950:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d07e      	beq.n	8005a58 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	2101      	movs	r1, #1
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	6979      	ldr	r1, [r7, #20]
 8005972:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005976:	4313      	orrs	r3, r2
 8005978:	634b      	str	r3, [r1, #52]	; 0x34
 800597a:	e06d      	b.n	8005a58 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005996:	0cdb      	lsrs	r3, r3, #19
 8005998:	04db      	lsls	r3, r3, #19
 800599a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059be:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	0151      	lsls	r1, r2, #5
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	440a      	add	r2, r1
 80059e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a06:	6939      	ldr	r1, [r7, #16]
 8005a08:	0148      	lsls	r0, r1, #5
 8005a0a:	6979      	ldr	r1, [r7, #20]
 8005a0c:	4401      	add	r1, r0
 8005a0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a12:	4313      	orrs	r3, r2
 8005a14:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d10d      	bne.n	8005a38 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d009      	beq.n	8005a38 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	68d9      	ldr	r1, [r3, #12]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a34:	460a      	mov	r2, r1
 8005a36:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b089      	sub	sp, #36	; 0x24
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	4611      	mov	r1, r2
 8005a72:	461a      	mov	r2, r3
 8005a74:	460b      	mov	r3, r1
 8005a76:	71fb      	strb	r3, [r7, #7]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005a84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d11a      	bne.n	8005ac2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a8c:	88bb      	ldrh	r3, [r7, #4]
 8005a8e:	3303      	adds	r3, #3
 8005a90:	089b      	lsrs	r3, r3, #2
 8005a92:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a94:	2300      	movs	r3, #0
 8005a96:	61bb      	str	r3, [r7, #24]
 8005a98:	e00f      	b.n	8005aba <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	031a      	lsls	r2, r3, #12
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d3eb      	bcc.n	8005a9a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3724      	adds	r7, #36	; 0x24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b089      	sub	sp, #36	; 0x24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	3303      	adds	r3, #3
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005aee:	2300      	movs	r3, #0
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	e00b      	b.n	8005b0c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3304      	adds	r3, #4
 8005b04:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d3ef      	bcc.n	8005af4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005b14:	69fb      	ldr	r3, [r7, #28]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3724      	adds	r7, #36	; 0x24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d12c      	bne.n	8005b98 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	db12      	blt.n	8005b76 <USB_EPSetStall+0x54>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00f      	beq.n	8005b76 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b74:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	e02b      	b.n	8005bf0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	db12      	blt.n	8005bd0 <USB_EPSetStall+0xae>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00f      	beq.n	8005bd0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bce:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d128      	bne.n	8005c6c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	78db      	ldrb	r3, [r3, #3]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d003      	beq.n	8005c4a <USB_EPClearStall+0x4c>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	78db      	ldrb	r3, [r3, #3]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d138      	bne.n	8005cbc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	e027      	b.n	8005cbc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	0151      	lsls	r1, r2, #5
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	440a      	add	r2, r1
 8005c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	78db      	ldrb	r3, [r3, #3]
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d003      	beq.n	8005c9c <USB_EPClearStall+0x9e>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	78db      	ldrb	r3, [r3, #3]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d10f      	bne.n	8005cbc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cba:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005cec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d04:	4313      	orrs	r3, r2
 8005d06:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d30:	f023 0302 	bic.w	r3, r3, #2
 8005d34:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005d36:	2003      	movs	r0, #3
 8005d38:	f7fc f8c0 	bl	8001ebc <HAL_Delay>

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d60:	f043 0302 	orr.w	r3, r3, #2
 8005d64:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005d66:	2003      	movs	r0, #3
 8005d68:	f7fc f8a8 	bl	8001ebc <HAL_Delay>

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b085      	sub	sp, #20
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	0c1b      	lsrs	r3, r3, #16
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	4013      	ands	r3, r2
 8005df2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	b29b      	uxth	r3, r3
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e32:	68bb      	ldr	r3, [r7, #8]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e62:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e70:	01db      	lsls	r3, r3, #7
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ed6:	f023 0307 	bic.w	r3, r3, #7
 8005eda:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0306 	and.w	r3, r3, #6
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d109      	bne.n	8005f00 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efa:	f043 0303 	orr.w	r3, r3, #3
 8005efe:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	333c      	adds	r3, #60	; 0x3c
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	4a26      	ldr	r2, [pc, #152]	; (8005fdc <USB_EP0_OutStart+0xb8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d90a      	bls.n	8005f5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f58:	d101      	bne.n	8005f5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e037      	b.n	8005fce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f64:	461a      	mov	r2, r3
 8005f66:	2300      	movs	r3, #0
 8005f68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8c:	f043 0318 	orr.w	r3, r3, #24
 8005f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005fa4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005fa6:	7afb      	ldrb	r3, [r7, #11]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d10f      	bne.n	8005fcc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005fca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	4f54300a 	.word	0x4f54300a

08005fe0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4a13      	ldr	r2, [pc, #76]	; (8006044 <USB_CoreReset+0x64>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e01b      	b.n	8006036 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	daf2      	bge.n	8005fec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f043 0201 	orr.w	r2, r3, #1
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3301      	adds	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4a09      	ldr	r2, [pc, #36]	; (8006044 <USB_CoreReset+0x64>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e006      	b.n	8006036 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b01      	cmp	r3, #1
 8006032:	d0f0      	beq.n	8006016 <USB_CoreReset+0x36>

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	00030d40 	.word	0x00030d40

08006048 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	7c1b      	ldrb	r3, [r3, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d115      	bne.n	800608c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006064:	2202      	movs	r2, #2
 8006066:	2181      	movs	r1, #129	; 0x81
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 febe 	bl	8007dea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006078:	2202      	movs	r2, #2
 800607a:	2101      	movs	r1, #1
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f001 feb4 	bl	8007dea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800608a:	e012      	b.n	80060b2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800608c:	2340      	movs	r3, #64	; 0x40
 800608e:	2202      	movs	r2, #2
 8006090:	2181      	movs	r1, #129	; 0x81
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 fea9 	bl	8007dea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800609e:	2340      	movs	r3, #64	; 0x40
 80060a0:	2202      	movs	r2, #2
 80060a2:	2101      	movs	r1, #1
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 fea0 	bl	8007dea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80060b2:	2308      	movs	r3, #8
 80060b4:	2203      	movs	r2, #3
 80060b6:	2182      	movs	r1, #130	; 0x82
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f001 fe96 	bl	8007dea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80060c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80060c8:	f002 f80c 	bl	80080e4 <malloc>
 80060cc:	4603      	mov	r3, r0
 80060ce:	461a      	mov	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d102      	bne.n	80060e6 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80060e0:	2301      	movs	r3, #1
 80060e2:	73fb      	strb	r3, [r7, #15]
 80060e4:	e026      	b.n	8006134 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80060ec:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	7c1b      	ldrb	r3, [r3, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d109      	bne.n	8006124 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800611a:	2101      	movs	r1, #1
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 ff55 	bl	8007fcc <USBD_LL_PrepareReceive>
 8006122:	e007      	b.n	8006134 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800612a:	2340      	movs	r3, #64	; 0x40
 800612c:	2101      	movs	r1, #1
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f001 ff4c 	bl	8007fcc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800614e:	2181      	movs	r1, #129	; 0x81
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 fe70 	bl	8007e36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800615c:	2101      	movs	r1, #1
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f001 fe69 	bl	8007e36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800616c:	2182      	movs	r1, #130	; 0x82
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 fe61 	bl	8007e36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00e      	beq.n	80061a2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006194:	4618      	mov	r0, r3
 8006196:	f001 ffad 	bl	80080f4 <free>
    pdev->pClassData = NULL;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80061bc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d039      	beq.n	800624a <USBD_CDC_Setup+0x9e>
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d17c      	bne.n	80062d4 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	88db      	ldrh	r3, [r3, #6]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d029      	beq.n	8006236 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	b25b      	sxtb	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	da11      	bge.n	8006210 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80061f8:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	88d2      	ldrh	r2, [r2, #6]
 80061fe:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006200:	6939      	ldr	r1, [r7, #16]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	88db      	ldrh	r3, [r3, #6]
 8006206:	461a      	mov	r2, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 f99b 	bl	8007544 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800620e:	e068      	b.n	80062e2 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	785a      	ldrb	r2, [r3, #1]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	88db      	ldrh	r3, [r3, #6]
 800621e:	b2da      	uxtb	r2, r3
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006226:	6939      	ldr	r1, [r7, #16]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	88db      	ldrh	r3, [r3, #6]
 800622c:	461a      	mov	r2, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f001 f9b6 	bl	80075a0 <USBD_CtlPrepareRx>
    break;
 8006234:	e055      	b.n	80062e2 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	7850      	ldrb	r0, [r2, #1]
 8006242:	2200      	movs	r2, #0
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	4798      	blx	r3
    break;
 8006248:	e04b      	b.n	80062e2 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	2b0a      	cmp	r3, #10
 8006250:	d017      	beq.n	8006282 <USBD_CDC_Setup+0xd6>
 8006252:	2b0b      	cmp	r3, #11
 8006254:	d029      	beq.n	80062aa <USBD_CDC_Setup+0xfe>
 8006256:	2b00      	cmp	r3, #0
 8006258:	d133      	bne.n	80062c2 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006260:	2b03      	cmp	r3, #3
 8006262:	d107      	bne.n	8006274 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006264:	f107 030c 	add.w	r3, r7, #12
 8006268:	2202      	movs	r2, #2
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f001 f969 	bl	8007544 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006272:	e02e      	b.n	80062d2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 f8f9 	bl	800746e <USBD_CtlError>
			  ret = USBD_FAIL;
 800627c:	2302      	movs	r3, #2
 800627e:	75fb      	strb	r3, [r7, #23]
      break;
 8006280:	e027      	b.n	80062d2 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006288:	2b03      	cmp	r3, #3
 800628a:	d107      	bne.n	800629c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800628c:	f107 030f 	add.w	r3, r7, #15
 8006290:	2201      	movs	r2, #1
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 f955 	bl	8007544 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800629a:	e01a      	b.n	80062d2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 f8e5 	bl	800746e <USBD_CtlError>
			  ret = USBD_FAIL;
 80062a4:	2302      	movs	r3, #2
 80062a6:	75fb      	strb	r3, [r7, #23]
      break;
 80062a8:	e013      	b.n	80062d2 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d00d      	beq.n	80062d0 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 f8d9 	bl	800746e <USBD_CtlError>
			  ret = USBD_FAIL;
 80062bc:	2302      	movs	r3, #2
 80062be:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80062c0:	e006      	b.n	80062d0 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f001 f8d2 	bl	800746e <USBD_CtlError>
      ret = USBD_FAIL;
 80062ca:	2302      	movs	r3, #2
 80062cc:	75fb      	strb	r3, [r7, #23]
      break;
 80062ce:	e000      	b.n	80062d2 <USBD_CDC_Setup+0x126>
      break;
 80062d0:	bf00      	nop
    }
    break;
 80062d2:	e006      	b.n	80062e2 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 f8c9 	bl	800746e <USBD_CtlError>
    ret = USBD_FAIL;
 80062dc:	2302      	movs	r3, #2
 80062de:	75fb      	strb	r3, [r7, #23]
    break;
 80062e0:	bf00      	nop
  }

  return ret;
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80062fe:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006306:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800630e:	2b00      	cmp	r3, #0
 8006310:	d03a      	beq.n	8006388 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006312:	78fa      	ldrb	r2, [r7, #3]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	331c      	adds	r3, #28
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d029      	beq.n	800637c <USBD_CDC_DataIn+0x90>
 8006328:	78fa      	ldrb	r2, [r7, #3]
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	4613      	mov	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	440b      	add	r3, r1
 8006336:	331c      	adds	r3, #28
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	78f9      	ldrb	r1, [r7, #3]
 800633c:	68b8      	ldr	r0, [r7, #8]
 800633e:	460b      	mov	r3, r1
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	1a5b      	subs	r3, r3, r1
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4403      	add	r3, r0
 8006348:	3344      	adds	r3, #68	; 0x44
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006350:	fb03 f301 	mul.w	r3, r3, r1
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d110      	bne.n	800637c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800635a:	78fa      	ldrb	r2, [r7, #3]
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	4613      	mov	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	440b      	add	r3, r1
 8006368:	331c      	adds	r3, #28
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800636e:	78f9      	ldrb	r1, [r7, #3]
 8006370:	2300      	movs	r3, #0
 8006372:	2200      	movs	r2, #0
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 fe06 	bl	8007f86 <USBD_LL_Transmit>
 800637a:	e003      	b.n	8006384 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	e000      	b.n	800638a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006388:	2302      	movs	r3, #2
  }
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 fe31 	bl	8008012 <USBD_LL_GetRxDataSize>
 80063b0:	4602      	mov	r2, r0
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00d      	beq.n	80063de <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80063d6:	4611      	mov	r1, r2
 80063d8:	4798      	blx	r3

    return USBD_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	e000      	b.n	80063e0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80063de:	2302      	movs	r3, #2
  }
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063f6:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d015      	beq.n	800642e <USBD_CDC_EP0_RxReady+0x46>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006408:	2bff      	cmp	r3, #255	; 0xff
 800640a:	d010      	beq.n	800642e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800641a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006422:	b292      	uxth	r2, r2
 8006424:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	22ff      	movs	r2, #255	; 0xff
 800642a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2243      	movs	r2, #67	; 0x43
 8006444:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006446:	4b03      	ldr	r3, [pc, #12]	; (8006454 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	2000009c 	.word	0x2000009c

08006458 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2243      	movs	r2, #67	; 0x43
 8006464:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006466:	4b03      	ldr	r3, [pc, #12]	; (8006474 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	20000058 	.word	0x20000058

08006478 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2243      	movs	r2, #67	; 0x43
 8006484:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006486:	4b03      	ldr	r3, [pc, #12]	; (8006494 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	200000e0 	.word	0x200000e0

08006498 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	220a      	movs	r2, #10
 80064a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80064a6:	4b03      	ldr	r3, [pc, #12]	; (80064b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	20000014 	.word	0x20000014

080064b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80064c2:	2302      	movs	r3, #2
 80064c4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b087      	sub	sp, #28
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	4613      	mov	r3, r2
 80064f2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064fa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006504:	88fa      	ldrh	r2, [r7, #6]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800651a:	b480      	push	{r7}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800652a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006550:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006558:	2b00      	cmp	r3, #0
 800655a:	d017      	beq.n	800658c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	7c1b      	ldrb	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d109      	bne.n	8006578 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800656a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800656e:	2101      	movs	r1, #1
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fd2b 	bl	8007fcc <USBD_LL_PrepareReceive>
 8006576:	e007      	b.n	8006588 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800657e:	2340      	movs	r3, #64	; 0x40
 8006580:	2101      	movs	r1, #1
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fd22 	bl	8007fcc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	e000      	b.n	800658e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800658c:	2302      	movs	r3, #2
  }
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	4613      	mov	r3, r2
 80065a2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80065aa:	2302      	movs	r3, #2
 80065ac:	e01a      	b.n	80065e4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	79fa      	ldrb	r2, [r7, #7]
 80065da:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f001 fb9d 	bl	8007d1c <USBD_LL_Init>

  return USBD_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d006      	beq.n	800660e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73fb      	strb	r3, [r7, #15]
 800660c:	e001      	b.n	8006612 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800660e:	2302      	movs	r3, #2
 8006610:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006612:	7bfb      	ldrb	r3, [r7, #15]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 fbc3 	bl	8007db4 <USBD_LL_Start>

  return USBD_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800665a:	2302      	movs	r3, #2
 800665c:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00c      	beq.n	8006682 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	78fa      	ldrb	r2, [r7, #3]
 8006672:	4611      	mov	r1, r2
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4798      	blx	r3
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	78fa      	ldrb	r2, [r7, #3]
 80066a2:	4611      	mov	r1, r2
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	4798      	blx	r3
  return USBD_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fe95 	bl	80073f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80066d8:	461a      	mov	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d00c      	beq.n	8006708 <USBD_LL_SetupStage+0x56>
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d302      	bcc.n	80066f8 <USBD_LL_SetupStage+0x46>
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d010      	beq.n	8006718 <USBD_LL_SetupStage+0x66>
 80066f6:	e017      	b.n	8006728 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fa05 	bl	8006b10 <USBD_StdDevReq>
    break;
 8006706:	e01a      	b.n	800673e <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fa67 	bl	8006be4 <USBD_StdItfReq>
    break;
 8006716:	e012      	b.n	800673e <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 faa5 	bl	8006c70 <USBD_StdEPReq>
    break;
 8006726:	e00a      	b.n	800673e <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800672e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006732:	b2db      	uxtb	r3, r3
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 fb9c 	bl	8007e74 <USBD_LL_StallEP>
    break;
 800673c:	bf00      	nop
  }

  return USBD_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	460b      	mov	r3, r1
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006756:	7afb      	ldrb	r3, [r7, #11]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d14b      	bne.n	80067f4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006762:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800676a:	2b03      	cmp	r3, #3
 800676c:	d134      	bne.n	80067d8 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	429a      	cmp	r2, r3
 8006778:	d919      	bls.n	80067ae <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	1ad2      	subs	r2, r2, r3
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006790:	429a      	cmp	r2, r3
 8006792:	d203      	bcs.n	800679c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006798:	b29b      	uxth	r3, r3
 800679a:	e002      	b.n	80067a2 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 ff18 	bl	80075dc <USBD_CtlContinueRx>
 80067ac:	e038      	b.n	8006820 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d105      	bne.n	80067d0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 ff15 	bl	8007600 <USBD_CtlSendStatus>
 80067d6:	e023      	b.n	8006820 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80067de:	2b05      	cmp	r3, #5
 80067e0:	d11e      	bne.n	8006820 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80067ea:	2100      	movs	r1, #0
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f001 fb41 	bl	8007e74 <USBD_LL_StallEP>
 80067f2:	e015      	b.n	8006820 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00d      	beq.n	800681c <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006806:	2b03      	cmp	r3, #3
 8006808:	d108      	bne.n	800681c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	7afa      	ldrb	r2, [r7, #11]
 8006814:	4611      	mov	r1, r2
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	4798      	blx	r3
 800681a:	e001      	b.n	8006820 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800681c:	2302      	movs	r3, #2
 800681e:	e000      	b.n	8006822 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b086      	sub	sp, #24
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	460b      	mov	r3, r1
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006838:	7afb      	ldrb	r3, [r7, #11]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d17f      	bne.n	800693e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3314      	adds	r3, #20
 8006842:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800684a:	2b02      	cmp	r3, #2
 800684c:	d15c      	bne.n	8006908 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	429a      	cmp	r2, r3
 8006858:	d915      	bls.n	8006886 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	1ad2      	subs	r2, r2, r3
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	b29b      	uxth	r3, r3
 800686e:	461a      	mov	r2, r3
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 fe82 	bl	800757c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006878:	2300      	movs	r3, #0
 800687a:	2200      	movs	r2, #0
 800687c:	2100      	movs	r1, #0
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f001 fba4 	bl	8007fcc <USBD_LL_PrepareReceive>
 8006884:	e04e      	b.n	8006924 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	6912      	ldr	r2, [r2, #16]
 800688e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006892:	fb02 f201 	mul.w	r2, r2, r1
 8006896:	1a9b      	subs	r3, r3, r2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d11c      	bne.n	80068d6 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d316      	bcc.n	80068d6 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d20f      	bcs.n	80068d6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068b6:	2200      	movs	r2, #0
 80068b8:	2100      	movs	r1, #0
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 fe5e 	bl	800757c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80068c8:	2300      	movs	r3, #0
 80068ca:	2200      	movs	r2, #0
 80068cc:	2100      	movs	r1, #0
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f001 fb7c 	bl	8007fcc <USBD_LL_PrepareReceive>
 80068d4:	e026      	b.n	8006924 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d105      	bne.n	80068f8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80068f8:	2180      	movs	r1, #128	; 0x80
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f001 faba 	bl	8007e74 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 fe90 	bl	8007626 <USBD_CtlReceiveStatus>
 8006906:	e00d      	b.n	8006924 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800690e:	2b04      	cmp	r3, #4
 8006910:	d004      	beq.n	800691c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006918:	2b00      	cmp	r3, #0
 800691a:	d103      	bne.n	8006924 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800691c:	2180      	movs	r1, #128	; 0x80
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f001 faa8 	bl	8007e74 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800692a:	2b01      	cmp	r3, #1
 800692c:	d11d      	bne.n	800696a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7ff fe82 	bl	8006638 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800693c:	e015      	b.n	800696a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00d      	beq.n	8006966 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006950:	2b03      	cmp	r3, #3
 8006952:	d108      	bne.n	8006966 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	7afa      	ldrb	r2, [r7, #11]
 800695e:	4611      	mov	r1, r2
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	4798      	blx	r3
 8006964:	e001      	b.n	800696a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006966:	2302      	movs	r3, #2
 8006968:	e000      	b.n	800696c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800697c:	2340      	movs	r3, #64	; 0x40
 800697e:	2200      	movs	r2, #0
 8006980:	2100      	movs	r1, #0
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f001 fa31 	bl	8007dea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2240      	movs	r2, #64	; 0x40
 8006994:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006998:	2340      	movs	r3, #64	; 0x40
 800699a:	2200      	movs	r2, #0
 800699c:	2180      	movs	r1, #128	; 0x80
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 fa23 	bl	8007dea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2240      	movs	r2, #64	; 0x40
 80069ae:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d009      	beq.n	80069ec <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6852      	ldr	r2, [r2, #4]
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	4611      	mov	r1, r2
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
  }

  return USBD_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	78fa      	ldrb	r2, [r7, #3]
 8006a06:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2204      	movs	r2, #4
 8006a2e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d10b      	bne.n	8006a8c <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6852      	ldr	r2, [r2, #4]
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	4611      	mov	r1, r2
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3

  return USBD_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d004      	beq.n	8006b34 <USBD_StdDevReq+0x24>
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	d002      	beq.n	8006b34 <USBD_StdDevReq+0x24>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d008      	beq.n	8006b44 <USBD_StdDevReq+0x34>
 8006b32:	e04c      	b.n	8006bce <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	4798      	blx	r3
    break;
 8006b42:	e049      	b.n	8006bd8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	785b      	ldrb	r3, [r3, #1]
 8006b48:	2b09      	cmp	r3, #9
 8006b4a:	d83a      	bhi.n	8006bc2 <USBD_StdDevReq+0xb2>
 8006b4c:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <USBD_StdDevReq+0x44>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006ba5 	.word	0x08006ba5
 8006b58:	08006bb9 	.word	0x08006bb9
 8006b5c:	08006bc3 	.word	0x08006bc3
 8006b60:	08006baf 	.word	0x08006baf
 8006b64:	08006bc3 	.word	0x08006bc3
 8006b68:	08006b87 	.word	0x08006b87
 8006b6c:	08006b7d 	.word	0x08006b7d
 8006b70:	08006bc3 	.word	0x08006bc3
 8006b74:	08006b9b 	.word	0x08006b9b
 8006b78:	08006b91 	.word	0x08006b91
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f9d2 	bl	8006f28 <USBD_GetDescriptor>
      break;
 8006b84:	e022      	b.n	8006bcc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fac7 	bl	800711c <USBD_SetAddress>
      break;
 8006b8e:	e01d      	b.n	8006bcc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fb04 	bl	80071a0 <USBD_SetConfig>
      break;
 8006b98:	e018      	b.n	8006bcc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fb8d 	bl	80072bc <USBD_GetConfig>
      break;
 8006ba2:	e013      	b.n	8006bcc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fbbc 	bl	8007324 <USBD_GetStatus>
      break;
 8006bac:	e00e      	b.n	8006bcc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fbea 	bl	800738a <USBD_SetFeature>
      break;
 8006bb6:	e009      	b.n	8006bcc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fbf9 	bl	80073b2 <USBD_ClrFeature>
      break;
 8006bc0:	e004      	b.n	8006bcc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc52 	bl	800746e <USBD_CtlError>
      break;
 8006bca:	bf00      	nop
    }
    break;
 8006bcc:	e004      	b.n	8006bd8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fc4c 	bl	800746e <USBD_CtlError>
    break;
 8006bd6:	bf00      	nop
  }

  return ret;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop

08006be4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d003      	beq.n	8006c06 <USBD_StdItfReq+0x22>
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d001      	beq.n	8006c06 <USBD_StdItfReq+0x22>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d12a      	bne.n	8006c5c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d81d      	bhi.n	8006c4e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	889b      	ldrh	r3, [r3, #4]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d813      	bhi.n	8006c44 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	88db      	ldrh	r3, [r3, #6]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d110      	bne.n	8006c58 <USBD_StdItfReq+0x74>
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10d      	bne.n	8006c58 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fcdf 	bl	8007600 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006c42:	e009      	b.n	8006c58 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fc11 	bl	800746e <USBD_CtlError>
      break;
 8006c4c:	e004      	b.n	8006c58 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fc0c 	bl	800746e <USBD_CtlError>
      break;
 8006c56:	e000      	b.n	8006c5a <USBD_StdItfReq+0x76>
      break;
 8006c58:	bf00      	nop
    }
    break;
 8006c5a:	e004      	b.n	8006c66 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fc05 	bl	800746e <USBD_CtlError>
    break;
 8006c64:	bf00      	nop
  }

  return USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	889b      	ldrh	r3, [r3, #4]
 8006c82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d004      	beq.n	8006c9a <USBD_StdEPReq+0x2a>
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	d002      	beq.n	8006c9a <USBD_StdEPReq+0x2a>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d008      	beq.n	8006caa <USBD_StdEPReq+0x3a>
 8006c98:	e13b      	b.n	8006f12 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	4798      	blx	r3
    break;
 8006ca8:	e138      	b.n	8006f1c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cb2:	2b20      	cmp	r3, #32
 8006cb4:	d10a      	bne.n	8006ccc <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	4798      	blx	r3
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	e128      	b.n	8006f1e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d03e      	beq.n	8006d52 <USBD_StdEPReq+0xe2>
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d002      	beq.n	8006cde <USBD_StdEPReq+0x6e>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d070      	beq.n	8006dbe <USBD_StdEPReq+0x14e>
 8006cdc:	e113      	b.n	8006f06 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d002      	beq.n	8006cee <USBD_StdEPReq+0x7e>
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d015      	beq.n	8006d18 <USBD_StdEPReq+0xa8>
 8006cec:	e02b      	b.n	8006d46 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00c      	beq.n	8006d0e <USBD_StdEPReq+0x9e>
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	2b80      	cmp	r3, #128	; 0x80
 8006cf8:	d009      	beq.n	8006d0e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006cfa:	7bbb      	ldrb	r3, [r7, #14]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 f8b8 	bl	8007e74 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006d04:	2180      	movs	r1, #128	; 0x80
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 f8b4 	bl	8007e74 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006d0c:	e020      	b.n	8006d50 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fbac 	bl	800746e <USBD_CtlError>
        break;
 8006d16:	e01b      	b.n	8006d50 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	885b      	ldrh	r3, [r3, #2]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10e      	bne.n	8006d3e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00b      	beq.n	8006d3e <USBD_StdEPReq+0xce>
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	2b80      	cmp	r3, #128	; 0x80
 8006d2a:	d008      	beq.n	8006d3e <USBD_StdEPReq+0xce>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	88db      	ldrh	r3, [r3, #6]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 f89b 	bl	8007e74 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fc5e 	bl	8007600 <USBD_CtlSendStatus>

        break;
 8006d44:	e004      	b.n	8006d50 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fb90 	bl	800746e <USBD_CtlError>
        break;
 8006d4e:	bf00      	nop
      }
      break;
 8006d50:	e0de      	b.n	8006f10 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d002      	beq.n	8006d62 <USBD_StdEPReq+0xf2>
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d015      	beq.n	8006d8c <USBD_StdEPReq+0x11c>
 8006d60:	e026      	b.n	8006db0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00c      	beq.n	8006d82 <USBD_StdEPReq+0x112>
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	2b80      	cmp	r3, #128	; 0x80
 8006d6c:	d009      	beq.n	8006d82 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 f87e 	bl	8007e74 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006d78:	2180      	movs	r1, #128	; 0x80
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 f87a 	bl	8007e74 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006d80:	e01c      	b.n	8006dbc <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fb72 	bl	800746e <USBD_CtlError>
        break;
 8006d8a:	e017      	b.n	8006dbc <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	885b      	ldrh	r3, [r3, #2]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d112      	bne.n	8006dba <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d004      	beq.n	8006da8 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 f885 	bl	8007eb2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fc29 	bl	8007600 <USBD_CtlSendStatus>
        }
        break;
 8006dae:	e004      	b.n	8006dba <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fb5b 	bl	800746e <USBD_CtlError>
        break;
 8006db8:	e000      	b.n	8006dbc <USBD_StdEPReq+0x14c>
        break;
 8006dba:	bf00      	nop
      }
      break;
 8006dbc:	e0a8      	b.n	8006f10 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d002      	beq.n	8006dce <USBD_StdEPReq+0x15e>
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d031      	beq.n	8006e30 <USBD_StdEPReq+0x1c0>
 8006dcc:	e095      	b.n	8006efa <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d007      	beq.n	8006de4 <USBD_StdEPReq+0x174>
 8006dd4:	7bbb      	ldrb	r3, [r7, #14]
 8006dd6:	2b80      	cmp	r3, #128	; 0x80
 8006dd8:	d004      	beq.n	8006de4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fb46 	bl	800746e <USBD_CtlError>
          break;
 8006de2:	e08f      	b.n	8006f04 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006de4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	da0b      	bge.n	8006e04 <USBD_StdEPReq+0x194>
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
 8006dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	3310      	adds	r3, #16
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	4413      	add	r3, r2
 8006e00:	3304      	adds	r3, #4
 8006e02:	e00a      	b.n	8006e1a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	4413      	add	r3, r2
 8006e1a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2202      	movs	r2, #2
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fb8b 	bl	8007544 <USBD_CtlSendData>
          break;
 8006e2e:	e069      	b.n	8006f04 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	da11      	bge.n	8006e5c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	f003 020f 	and.w	r2, r3, #15
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	3318      	adds	r3, #24
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d117      	bne.n	8006e82 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fb0a 	bl	800746e <USBD_CtlError>
            break;
 8006e5a:	e053      	b.n	8006f04 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	f003 020f 	and.w	r2, r3, #15
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	4613      	mov	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d104      	bne.n	8006e82 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 faf7 	bl	800746e <USBD_CtlError>
            break;
 8006e80:	e040      	b.n	8006f04 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006e82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	da0b      	bge.n	8006ea2 <USBD_StdEPReq+0x232>
 8006e8a:	7bbb      	ldrb	r3, [r7, #14]
 8006e8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e90:	4613      	mov	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	3310      	adds	r3, #16
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	e00a      	b.n	8006eb8 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006ea2:	7bbb      	ldrb	r3, [r7, #14]
 8006ea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <USBD_StdEPReq+0x256>
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	2b80      	cmp	r3, #128	; 0x80
 8006ec4:	d103      	bne.n	8006ece <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	e00e      	b.n	8006eec <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006ece:	7bbb      	ldrb	r3, [r7, #14]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f80c 	bl	8007ef0 <USBD_LL_IsStallEP>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	e002      	b.n	8006eec <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fb26 	bl	8007544 <USBD_CtlSendData>
          break;
 8006ef8:	e004      	b.n	8006f04 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fab6 	bl	800746e <USBD_CtlError>
        break;
 8006f02:	bf00      	nop
      }
      break;
 8006f04:	e004      	b.n	8006f10 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fab0 	bl	800746e <USBD_CtlError>
      break;
 8006f0e:	bf00      	nop
    }
    break;
 8006f10:	e004      	b.n	8006f1c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 faaa 	bl	800746e <USBD_CtlError>
    break;
 8006f1a:	bf00      	nop
  }

  return ret;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
	...

08006f28 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	885b      	ldrh	r3, [r3, #2]
 8006f36:	0a1b      	lsrs	r3, r3, #8
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	2b06      	cmp	r3, #6
 8006f3e:	f200 80c9 	bhi.w	80070d4 <USBD_GetDescriptor+0x1ac>
 8006f42:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <USBD_GetDescriptor+0x20>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006f65 	.word	0x08006f65
 8006f4c:	08006f7d 	.word	0x08006f7d
 8006f50:	08006fbd 	.word	0x08006fbd
 8006f54:	080070d5 	.word	0x080070d5
 8006f58:	080070d5 	.word	0x080070d5
 8006f5c:	08007081 	.word	0x08007081
 8006f60:	080070a7 	.word	0x080070a7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	7c12      	ldrb	r2, [r2, #16]
 8006f70:	f107 010a 	add.w	r1, r7, #10
 8006f74:	4610      	mov	r0, r2
 8006f76:	4798      	blx	r3
 8006f78:	60f8      	str	r0, [r7, #12]
    break;
 8006f7a:	e0b0      	b.n	80070de <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	7c1b      	ldrb	r3, [r3, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10d      	bne.n	8006fa0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8c:	f107 020a 	add.w	r2, r7, #10
 8006f90:	4610      	mov	r0, r2
 8006f92:	4798      	blx	r3
 8006f94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006f9e:	e09e      	b.n	80070de <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	f107 020a 	add.w	r2, r7, #10
 8006fac:	4610      	mov	r0, r2
 8006fae:	4798      	blx	r3
 8006fb0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	701a      	strb	r2, [r3, #0]
    break;
 8006fba:	e090      	b.n	80070de <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	885b      	ldrh	r3, [r3, #2]
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b05      	cmp	r3, #5
 8006fc4:	d856      	bhi.n	8007074 <USBD_GetDescriptor+0x14c>
 8006fc6:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <USBD_GetDescriptor+0xa4>)
 8006fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fcc:	08006fe5 	.word	0x08006fe5
 8006fd0:	08006ffd 	.word	0x08006ffd
 8006fd4:	08007015 	.word	0x08007015
 8006fd8:	0800702d 	.word	0x0800702d
 8006fdc:	08007045 	.word	0x08007045
 8006fe0:	0800705d 	.word	0x0800705d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	7c12      	ldrb	r2, [r2, #16]
 8006ff0:	f107 010a 	add.w	r1, r7, #10
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4798      	blx	r3
 8006ff8:	60f8      	str	r0, [r7, #12]
      break;
 8006ffa:	e040      	b.n	800707e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	7c12      	ldrb	r2, [r2, #16]
 8007008:	f107 010a 	add.w	r1, r7, #10
 800700c:	4610      	mov	r0, r2
 800700e:	4798      	blx	r3
 8007010:	60f8      	str	r0, [r7, #12]
      break;
 8007012:	e034      	b.n	800707e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	7c12      	ldrb	r2, [r2, #16]
 8007020:	f107 010a 	add.w	r1, r7, #10
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
 8007028:	60f8      	str	r0, [r7, #12]
      break;
 800702a:	e028      	b.n	800707e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	7c12      	ldrb	r2, [r2, #16]
 8007038:	f107 010a 	add.w	r1, r7, #10
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
 8007040:	60f8      	str	r0, [r7, #12]
      break;
 8007042:	e01c      	b.n	800707e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	7c12      	ldrb	r2, [r2, #16]
 8007050:	f107 010a 	add.w	r1, r7, #10
 8007054:	4610      	mov	r0, r2
 8007056:	4798      	blx	r3
 8007058:	60f8      	str	r0, [r7, #12]
      break;
 800705a:	e010      	b.n	800707e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	7c12      	ldrb	r2, [r2, #16]
 8007068:	f107 010a 	add.w	r1, r7, #10
 800706c:	4610      	mov	r0, r2
 800706e:	4798      	blx	r3
 8007070:	60f8      	str	r0, [r7, #12]
      break;
 8007072:	e004      	b.n	800707e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f9f9 	bl	800746e <USBD_CtlError>
      return;
 800707c:	e04b      	b.n	8007116 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800707e:	e02e      	b.n	80070de <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	7c1b      	ldrb	r3, [r3, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d109      	bne.n	800709c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800708e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007090:	f107 020a 	add.w	r2, r7, #10
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
 8007098:	60f8      	str	r0, [r7, #12]
      break;
 800709a:	e020      	b.n	80070de <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f9e5 	bl	800746e <USBD_CtlError>
      return;
 80070a4:	e037      	b.n	8007116 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	7c1b      	ldrb	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10d      	bne.n	80070ca <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	f107 020a 	add.w	r2, r7, #10
 80070ba:	4610      	mov	r0, r2
 80070bc:	4798      	blx	r3
 80070be:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3301      	adds	r3, #1
 80070c4:	2207      	movs	r2, #7
 80070c6:	701a      	strb	r2, [r3, #0]
      break;
 80070c8:	e009      	b.n	80070de <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f9ce 	bl	800746e <USBD_CtlError>
      return;
 80070d2:	e020      	b.n	8007116 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f9c9 	bl	800746e <USBD_CtlError>
    return;
 80070dc:	e01b      	b.n	8007116 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80070de:	897b      	ldrh	r3, [r7, #10]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d011      	beq.n	8007108 <USBD_GetDescriptor+0x1e0>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	88db      	ldrh	r3, [r3, #6]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00d      	beq.n	8007108 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	88da      	ldrh	r2, [r3, #6]
 80070f0:	897b      	ldrh	r3, [r7, #10]
 80070f2:	4293      	cmp	r3, r2
 80070f4:	bf28      	it	cs
 80070f6:	4613      	movcs	r3, r2
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80070fc:	897b      	ldrh	r3, [r7, #10]
 80070fe:	461a      	mov	r2, r3
 8007100:	68f9      	ldr	r1, [r7, #12]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa1e 	bl	8007544 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	88db      	ldrh	r3, [r3, #6]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d102      	bne.n	8007116 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fa75 	bl	8007600 <USBD_CtlSendStatus>
  }
}
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	889b      	ldrh	r3, [r3, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d130      	bne.n	8007190 <USBD_SetAddress+0x74>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	88db      	ldrh	r3, [r3, #6]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d12c      	bne.n	8007190 <USBD_SetAddress+0x74>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	885b      	ldrh	r3, [r3, #2]
 800713a:	2b7f      	cmp	r3, #127	; 0x7f
 800713c:	d828      	bhi.n	8007190 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	885b      	ldrh	r3, [r3, #2]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007148:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007150:	2b03      	cmp	r3, #3
 8007152:	d104      	bne.n	800715e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f989 	bl	800746e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715c:	e01c      	b.n	8007198 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	7bfa      	ldrb	r2, [r7, #15]
 8007162:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 feec 	bl	8007f48 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fa45 	bl	8007600 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d004      	beq.n	8007186 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007184:	e008      	b.n	8007198 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800718e:	e003      	b.n	8007198 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f96b 	bl	800746e <USBD_CtlError>
  }
}
 8007198:	bf00      	nop
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	885b      	ldrh	r3, [r3, #2]
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	4b41      	ldr	r3, [pc, #260]	; (80072b8 <USBD_SetConfig+0x118>)
 80071b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071b4:	4b40      	ldr	r3, [pc, #256]	; (80072b8 <USBD_SetConfig+0x118>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d904      	bls.n	80071c6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f955 	bl	800746e <USBD_CtlError>
 80071c4:	e075      	b.n	80072b2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d002      	beq.n	80071d6 <USBD_SetConfig+0x36>
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d023      	beq.n	800721c <USBD_SetConfig+0x7c>
 80071d4:	e062      	b.n	800729c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80071d6:	4b38      	ldr	r3, [pc, #224]	; (80072b8 <USBD_SetConfig+0x118>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01a      	beq.n	8007214 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80071de:	4b36      	ldr	r3, [pc, #216]	; (80072b8 <USBD_SetConfig+0x118>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2203      	movs	r2, #3
 80071ec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80071f0:	4b31      	ldr	r3, [pc, #196]	; (80072b8 <USBD_SetConfig+0x118>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff fa29 	bl	800664e <USBD_SetClassConfig>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d104      	bne.n	800720c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f932 	bl	800746e <USBD_CtlError>
          return;
 800720a:	e052      	b.n	80072b2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f9f7 	bl	8007600 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007212:	e04e      	b.n	80072b2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f9f3 	bl	8007600 <USBD_CtlSendStatus>
      break;
 800721a:	e04a      	b.n	80072b2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800721c:	4b26      	ldr	r3, [pc, #152]	; (80072b8 <USBD_SetConfig+0x118>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d112      	bne.n	800724a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800722c:	4b22      	ldr	r3, [pc, #136]	; (80072b8 <USBD_SetConfig+0x118>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007236:	4b20      	ldr	r3, [pc, #128]	; (80072b8 <USBD_SetConfig+0x118>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff fa25 	bl	800668c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f9dc 	bl	8007600 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007248:	e033      	b.n	80072b2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800724a:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <USBD_SetConfig+0x118>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	429a      	cmp	r2, r3
 8007256:	d01d      	beq.n	8007294 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff fa13 	bl	800668c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007266:	4b14      	ldr	r3, [pc, #80]	; (80072b8 <USBD_SetConfig+0x118>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007270:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <USBD_SetConfig+0x118>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff f9e9 	bl	800664e <USBD_SetClassConfig>
 800727c:	4603      	mov	r3, r0
 800727e:	2b02      	cmp	r3, #2
 8007280:	d104      	bne.n	800728c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f8f2 	bl	800746e <USBD_CtlError>
          return;
 800728a:	e012      	b.n	80072b2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f9b7 	bl	8007600 <USBD_CtlSendStatus>
      break;
 8007292:	e00e      	b.n	80072b2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f9b3 	bl	8007600 <USBD_CtlSendStatus>
      break;
 800729a:	e00a      	b.n	80072b2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f8e5 	bl	800746e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80072a4:	4b04      	ldr	r3, [pc, #16]	; (80072b8 <USBD_SetConfig+0x118>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff f9ee 	bl	800668c <USBD_ClrClassConfig>
      break;
 80072b0:	bf00      	nop
    }
  }
}
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	200003a0 	.word	0x200003a0

080072bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	88db      	ldrh	r3, [r3, #6]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d004      	beq.n	80072d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f8cc 	bl	800746e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80072d6:	e021      	b.n	800731c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80072de:	2b01      	cmp	r3, #1
 80072e0:	db17      	blt.n	8007312 <USBD_GetConfig+0x56>
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	dd02      	ble.n	80072ec <USBD_GetConfig+0x30>
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d00b      	beq.n	8007302 <USBD_GetConfig+0x46>
 80072ea:	e012      	b.n	8007312 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3308      	adds	r3, #8
 80072f6:	2201      	movs	r2, #1
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f922 	bl	8007544 <USBD_CtlSendData>
      break;
 8007300:	e00c      	b.n	800731c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	3304      	adds	r3, #4
 8007306:	2201      	movs	r2, #1
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f91a 	bl	8007544 <USBD_CtlSendData>
      break;
 8007310:	e004      	b.n	800731c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f8aa 	bl	800746e <USBD_CtlError>
      break;
 800731a:	bf00      	nop
}
 800731c:	bf00      	nop
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007334:	3b01      	subs	r3, #1
 8007336:	2b02      	cmp	r3, #2
 8007338:	d81e      	bhi.n	8007378 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	88db      	ldrh	r3, [r3, #6]
 800733e:	2b02      	cmp	r3, #2
 8007340:	d004      	beq.n	800734c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f892 	bl	800746e <USBD_CtlError>
      break;
 800734a:	e01a      	b.n	8007382 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007358:	2b00      	cmp	r3, #0
 800735a:	d005      	beq.n	8007368 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f043 0202 	orr.w	r2, r3, #2
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	330c      	adds	r3, #12
 800736c:	2202      	movs	r2, #2
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f8e7 	bl	8007544 <USBD_CtlSendData>
    break;
 8007376:	e004      	b.n	8007382 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f877 	bl	800746e <USBD_CtlError>
    break;
 8007380:	bf00      	nop
  }
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	885b      	ldrh	r3, [r3, #2]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d106      	bne.n	80073aa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f92b 	bl	8007600 <USBD_CtlSendStatus>
  }

}
 80073aa:	bf00      	nop
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80073c2:	3b01      	subs	r3, #1
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d80b      	bhi.n	80073e0 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	885b      	ldrh	r3, [r3, #2]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d10c      	bne.n	80073ea <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f911 	bl	8007600 <USBD_CtlSendStatus>
    }
    break;
 80073de:	e004      	b.n	80073ea <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f843 	bl	800746e <USBD_CtlError>
    break;
 80073e8:	e000      	b.n	80073ec <USBD_ClrFeature+0x3a>
    break;
 80073ea:	bf00      	nop
  }
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781a      	ldrb	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	785a      	ldrb	r2, [r3, #1]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	3302      	adds	r3, #2
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	b29a      	uxth	r2, r3
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	3303      	adds	r3, #3
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	b29b      	uxth	r3, r3
 8007422:	4413      	add	r3, r2
 8007424:	b29a      	uxth	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	3304      	adds	r3, #4
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	b29a      	uxth	r2, r3
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	3305      	adds	r3, #5
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	b29b      	uxth	r3, r3
 800743e:	4413      	add	r3, r2
 8007440:	b29a      	uxth	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	3306      	adds	r3, #6
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	b29a      	uxth	r2, r3
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	3307      	adds	r3, #7
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	b29b      	uxth	r3, r3
 8007456:	021b      	lsls	r3, r3, #8
 8007458:	b29b      	uxth	r3, r3
 800745a:	4413      	add	r3, r2
 800745c:	b29a      	uxth	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	80da      	strh	r2, [r3, #6]

}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007478:	2180      	movs	r1, #128	; 0x80
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fcfa 	bl	8007e74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007480:	2100      	movs	r1, #0
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fcf6 	bl	8007e74 <USBD_LL_StallEP>
}
 8007488:	bf00      	nop
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d032      	beq.n	800750c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 f834 	bl	8007514 <USBD_GetLen>
 80074ac:	4603      	mov	r3, r0
 80074ae:	3301      	adds	r3, #1
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	75fa      	strb	r2, [r7, #23]
 80074c0:	461a      	mov	r2, r3
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	4413      	add	r3, r2
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	7812      	ldrb	r2, [r2, #0]
 80074ca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	75fa      	strb	r2, [r7, #23]
 80074d2:	461a      	mov	r2, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4413      	add	r3, r2
 80074d8:	2203      	movs	r2, #3
 80074da:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80074dc:	e012      	b.n	8007504 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	60fa      	str	r2, [r7, #12]
 80074e4:	7dfa      	ldrb	r2, [r7, #23]
 80074e6:	1c51      	adds	r1, r2, #1
 80074e8:	75f9      	strb	r1, [r7, #23]
 80074ea:	4611      	mov	r1, r2
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	440a      	add	r2, r1
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	75fa      	strb	r2, [r7, #23]
 80074fa:	461a      	mov	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	4413      	add	r3, r2
 8007500:	2200      	movs	r2, #0
 8007502:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e8      	bne.n	80074de <USBD_GetString+0x4e>
    }
  }
}
 800750c:	bf00      	nop
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007520:	e005      	b.n	800752e <USBD_GetLen+0x1a>
    {
        len++;
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	3301      	adds	r3, #1
 8007526:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3301      	adds	r3, #1
 800752c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f5      	bne.n	8007522 <USBD_GetLen+0xe>
    }

    return len;
 8007536:	7bfb      	ldrb	r3, [r7, #15]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	4613      	mov	r3, r2
 8007550:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2202      	movs	r2, #2
 8007556:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800755a:	88fa      	ldrh	r2, [r7, #6]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007560:	88fa      	ldrh	r2, [r7, #6]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007566:	88fb      	ldrh	r3, [r7, #6]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	2100      	movs	r1, #0
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 fd0a 	bl	8007f86 <USBD_LL_Transmit>

  return USBD_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	4613      	mov	r3, r2
 8007588:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800758a:	88fb      	ldrh	r3, [r7, #6]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	2100      	movs	r1, #0
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 fcf8 	bl	8007f86 <USBD_LL_Transmit>

  return USBD_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	4613      	mov	r3, r2
 80075ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2203      	movs	r2, #3
 80075b2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80075b6:	88fa      	ldrh	r2, [r7, #6]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80075be:	88fa      	ldrh	r2, [r7, #6]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80075c6:	88fb      	ldrh	r3, [r7, #6]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	2100      	movs	r1, #0
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fcfd 	bl	8007fcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	4613      	mov	r3, r2
 80075e8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	2100      	movs	r1, #0
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 fceb 	bl	8007fcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2204      	movs	r2, #4
 800760c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007610:	2300      	movs	r3, #0
 8007612:	2200      	movs	r2, #0
 8007614:	2100      	movs	r1, #0
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fcb5 	bl	8007f86 <USBD_LL_Transmit>

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2205      	movs	r2, #5
 8007632:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007636:	2300      	movs	r3, #0
 8007638:	2200      	movs	r2, #0
 800763a:	2100      	movs	r1, #0
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fcc5 	bl	8007fcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007650:	2200      	movs	r2, #0
 8007652:	4912      	ldr	r1, [pc, #72]	; (800769c <MX_USB_DEVICE_Init+0x50>)
 8007654:	4812      	ldr	r0, [pc, #72]	; (80076a0 <MX_USB_DEVICE_Init+0x54>)
 8007656:	f7fe ff9e 	bl	8006596 <USBD_Init>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007660:	f7fa fa2a 	bl	8001ab8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007664:	490f      	ldr	r1, [pc, #60]	; (80076a4 <MX_USB_DEVICE_Init+0x58>)
 8007666:	480e      	ldr	r0, [pc, #56]	; (80076a0 <MX_USB_DEVICE_Init+0x54>)
 8007668:	f7fe ffc0 	bl	80065ec <USBD_RegisterClass>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007672:	f7fa fa21 	bl	8001ab8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007676:	490c      	ldr	r1, [pc, #48]	; (80076a8 <MX_USB_DEVICE_Init+0x5c>)
 8007678:	4809      	ldr	r0, [pc, #36]	; (80076a0 <MX_USB_DEVICE_Init+0x54>)
 800767a:	f7fe ff1d 	bl	80064b8 <USBD_CDC_RegisterInterface>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007684:	f7fa fa18 	bl	8001ab8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007688:	4805      	ldr	r0, [pc, #20]	; (80076a0 <MX_USB_DEVICE_Init+0x54>)
 800768a:	f7fe ffc9 	bl	8006620 <USBD_Start>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007694:	f7fa fa10 	bl	8001ab8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007698:	bf00      	nop
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20000134 	.word	0x20000134
 80076a0:	20000410 	.word	0x20000410
 80076a4:	20000020 	.word	0x20000020
 80076a8:	20000124 	.word	0x20000124

080076ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076b0:	2200      	movs	r2, #0
 80076b2:	4905      	ldr	r1, [pc, #20]	; (80076c8 <CDC_Init_FS+0x1c>)
 80076b4:	4805      	ldr	r0, [pc, #20]	; (80076cc <CDC_Init_FS+0x20>)
 80076b6:	f7fe ff16 	bl	80064e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076ba:	4905      	ldr	r1, [pc, #20]	; (80076d0 <CDC_Init_FS+0x24>)
 80076bc:	4803      	ldr	r0, [pc, #12]	; (80076cc <CDC_Init_FS+0x20>)
 80076be:	f7fe ff2c 	bl	800651a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000eb0 	.word	0x20000eb0
 80076cc:	20000410 	.word	0x20000410
 80076d0:	200006b0 	.word	0x200006b0

080076d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076da:	4618      	mov	r0, r3
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	6039      	str	r1, [r7, #0]
 80076ee:	71fb      	strb	r3, [r7, #7]
 80076f0:	4613      	mov	r3, r2
 80076f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	2b23      	cmp	r3, #35	; 0x23
 80076f8:	f200 808c 	bhi.w	8007814 <CDC_Control_FS+0x130>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <CDC_Control_FS+0x20>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	08007815 	.word	0x08007815
 8007708:	08007815 	.word	0x08007815
 800770c:	08007815 	.word	0x08007815
 8007710:	08007815 	.word	0x08007815
 8007714:	08007815 	.word	0x08007815
 8007718:	08007815 	.word	0x08007815
 800771c:	08007815 	.word	0x08007815
 8007720:	08007815 	.word	0x08007815
 8007724:	08007815 	.word	0x08007815
 8007728:	08007815 	.word	0x08007815
 800772c:	08007815 	.word	0x08007815
 8007730:	08007815 	.word	0x08007815
 8007734:	08007815 	.word	0x08007815
 8007738:	08007815 	.word	0x08007815
 800773c:	08007815 	.word	0x08007815
 8007740:	08007815 	.word	0x08007815
 8007744:	08007815 	.word	0x08007815
 8007748:	08007815 	.word	0x08007815
 800774c:	08007815 	.word	0x08007815
 8007750:	08007815 	.word	0x08007815
 8007754:	08007815 	.word	0x08007815
 8007758:	08007815 	.word	0x08007815
 800775c:	08007815 	.word	0x08007815
 8007760:	08007815 	.word	0x08007815
 8007764:	08007815 	.word	0x08007815
 8007768:	08007815 	.word	0x08007815
 800776c:	08007815 	.word	0x08007815
 8007770:	08007815 	.word	0x08007815
 8007774:	08007815 	.word	0x08007815
 8007778:	08007815 	.word	0x08007815
 800777c:	08007815 	.word	0x08007815
 8007780:	08007815 	.word	0x08007815
 8007784:	08007795 	.word	0x08007795
 8007788:	080077cf 	.word	0x080077cf
 800778c:	08007815 	.word	0x08007815
 8007790:	08007815 	.word	0x08007815
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0]=pbuf[0];
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	4b22      	ldr	r3, [pc, #136]	; (8007824 <CDC_Control_FS+0x140>)
 800779a:	701a      	strb	r2, [r3, #0]
    	buffer[1]=pbuf[1];
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	785a      	ldrb	r2, [r3, #1]
 80077a0:	4b20      	ldr	r3, [pc, #128]	; (8007824 <CDC_Control_FS+0x140>)
 80077a2:	705a      	strb	r2, [r3, #1]
    	buffer[2]=pbuf[2];
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	789a      	ldrb	r2, [r3, #2]
 80077a8:	4b1e      	ldr	r3, [pc, #120]	; (8007824 <CDC_Control_FS+0x140>)
 80077aa:	709a      	strb	r2, [r3, #2]
    	buffer[3]=pbuf[3];
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	78da      	ldrb	r2, [r3, #3]
 80077b0:	4b1c      	ldr	r3, [pc, #112]	; (8007824 <CDC_Control_FS+0x140>)
 80077b2:	70da      	strb	r2, [r3, #3]
    	buffer[4]=pbuf[4];
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	791a      	ldrb	r2, [r3, #4]
 80077b8:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <CDC_Control_FS+0x140>)
 80077ba:	711a      	strb	r2, [r3, #4]
    	buffer[5]=pbuf[5];
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	795a      	ldrb	r2, [r3, #5]
 80077c0:	4b18      	ldr	r3, [pc, #96]	; (8007824 <CDC_Control_FS+0x140>)
 80077c2:	715a      	strb	r2, [r3, #5]
    	buffer[6]=pbuf[6];
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	799a      	ldrb	r2, [r3, #6]
 80077c8:	4b16      	ldr	r3, [pc, #88]	; (8007824 <CDC_Control_FS+0x140>)
 80077ca:	719a      	strb	r2, [r3, #6]
    break;
 80077cc:	e023      	b.n	8007816 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:

    	pbuf[0]=buffer[0];
 80077ce:	4b15      	ldr	r3, [pc, #84]	; (8007824 <CDC_Control_FS+0x140>)
 80077d0:	781a      	ldrb	r2, [r3, #0]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	701a      	strb	r2, [r3, #0]
    	pbuf[1]=buffer[1];
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	3301      	adds	r3, #1
 80077da:	4a12      	ldr	r2, [pc, #72]	; (8007824 <CDC_Control_FS+0x140>)
 80077dc:	7852      	ldrb	r2, [r2, #1]
 80077de:	701a      	strb	r2, [r3, #0]
    	pbuf[2]=buffer[2];
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	3302      	adds	r3, #2
 80077e4:	4a0f      	ldr	r2, [pc, #60]	; (8007824 <CDC_Control_FS+0x140>)
 80077e6:	7892      	ldrb	r2, [r2, #2]
 80077e8:	701a      	strb	r2, [r3, #0]
    	pbuf[3]=buffer[3];
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	3303      	adds	r3, #3
 80077ee:	4a0d      	ldr	r2, [pc, #52]	; (8007824 <CDC_Control_FS+0x140>)
 80077f0:	78d2      	ldrb	r2, [r2, #3]
 80077f2:	701a      	strb	r2, [r3, #0]
    	pbuf[4]=buffer[4];
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4a0a      	ldr	r2, [pc, #40]	; (8007824 <CDC_Control_FS+0x140>)
 80077fa:	7912      	ldrb	r2, [r2, #4]
 80077fc:	701a      	strb	r2, [r3, #0]
    	pbuf[5]=buffer[5];
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	3305      	adds	r3, #5
 8007802:	4a08      	ldr	r2, [pc, #32]	; (8007824 <CDC_Control_FS+0x140>)
 8007804:	7952      	ldrb	r2, [r2, #5]
 8007806:	701a      	strb	r2, [r3, #0]
    	pbuf[6]=buffer[6];
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	3306      	adds	r3, #6
 800780c:	4a05      	ldr	r2, [pc, #20]	; (8007824 <CDC_Control_FS+0x140>)
 800780e:	7992      	ldrb	r2, [r2, #6]
 8007810:	701a      	strb	r2, [r3, #0]
    break;
 8007812:	e000      	b.n	8007816 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007814:	bf00      	nop
  }

  return (USBD_OK);
 8007816:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007818:	4618      	mov	r0, r3
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	200016b0 	.word	0x200016b0

08007828 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	480b      	ldr	r0, [pc, #44]	; (8007864 <CDC_Receive_FS+0x3c>)
 8007836:	f7fe fe70 	bl	800651a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800783a:	480a      	ldr	r0, [pc, #40]	; (8007864 <CDC_Receive_FS+0x3c>)
 800783c:	f7fe fe81 	bl	8006542 <USBD_CDC_ReceivePacket>
  dato_recepcion_USB=*Buf;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	781a      	ldrb	r2, [r3, #0]
 8007844:	4b08      	ldr	r3, [pc, #32]	; (8007868 <CDC_Receive_FS+0x40>)
 8007846:	701a      	strb	r2, [r3, #0]
  cont_datos_USB++;
 8007848:	4b08      	ldr	r3, [pc, #32]	; (800786c <CDC_Receive_FS+0x44>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	4a07      	ldr	r2, [pc, #28]	; (800786c <CDC_Receive_FS+0x44>)
 8007850:	6013      	str	r3, [r2, #0]
  flag_recepcion_USB=1;
 8007852:	4b07      	ldr	r3, [pc, #28]	; (8007870 <CDC_Receive_FS+0x48>)
 8007854:	2201      	movs	r2, #1
 8007856:	601a      	str	r2, [r3, #0]
  return (USBD_OK);
 8007858:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000410 	.word	0x20000410
 8007868:	200006ac 	.word	0x200006ac
 800786c:	200003a4 	.word	0x200003a4
 8007870:	200003a8 	.word	0x200003a8

08007874 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2212      	movs	r2, #18
 8007884:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007886:	4b03      	ldr	r3, [pc, #12]	; (8007894 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007888:	4618      	mov	r0, r3
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	20000150 	.word	0x20000150

08007898 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	6039      	str	r1, [r7, #0]
 80078a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2204      	movs	r2, #4
 80078a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078aa:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	20000164 	.word	0x20000164

080078bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	6039      	str	r1, [r7, #0]
 80078c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078c8:	79fb      	ldrb	r3, [r7, #7]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d105      	bne.n	80078da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	4907      	ldr	r1, [pc, #28]	; (80078f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80078d2:	4808      	ldr	r0, [pc, #32]	; (80078f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80078d4:	f7ff fddc 	bl	8007490 <USBD_GetString>
 80078d8:	e004      	b.n	80078e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	4904      	ldr	r1, [pc, #16]	; (80078f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80078de:	4805      	ldr	r0, [pc, #20]	; (80078f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80078e0:	f7ff fdd6 	bl	8007490 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078e4:	4b02      	ldr	r3, [pc, #8]	; (80078f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	200016b8 	.word	0x200016b8
 80078f4:	0800b6cc 	.word	0x0800b6cc

080078f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	4603      	mov	r3, r0
 8007900:	6039      	str	r1, [r7, #0]
 8007902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	4904      	ldr	r1, [pc, #16]	; (8007918 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007908:	4804      	ldr	r0, [pc, #16]	; (800791c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800790a:	f7ff fdc1 	bl	8007490 <USBD_GetString>
  return USBD_StrDesc;
 800790e:	4b02      	ldr	r3, [pc, #8]	; (8007918 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	200016b8 	.word	0x200016b8
 800791c:	0800b6e4 	.word	0x0800b6e4

08007920 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	6039      	str	r1, [r7, #0]
 800792a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	221a      	movs	r2, #26
 8007930:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007932:	f000 f843 	bl	80079bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007936:	4b02      	ldr	r3, [pc, #8]	; (8007940 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	20000168 	.word	0x20000168

08007944 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d105      	bne.n	8007962 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	4907      	ldr	r1, [pc, #28]	; (8007978 <USBD_FS_ConfigStrDescriptor+0x34>)
 800795a:	4808      	ldr	r0, [pc, #32]	; (800797c <USBD_FS_ConfigStrDescriptor+0x38>)
 800795c:	f7ff fd98 	bl	8007490 <USBD_GetString>
 8007960:	e004      	b.n	800796c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	4904      	ldr	r1, [pc, #16]	; (8007978 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007966:	4805      	ldr	r0, [pc, #20]	; (800797c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007968:	f7ff fd92 	bl	8007490 <USBD_GetString>
  }
  return USBD_StrDesc;
 800796c:	4b02      	ldr	r3, [pc, #8]	; (8007978 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	200016b8 	.word	0x200016b8
 800797c:	0800b6f8 	.word	0x0800b6f8

08007980 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	6039      	str	r1, [r7, #0]
 800798a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800798c:	79fb      	ldrb	r3, [r7, #7]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d105      	bne.n	800799e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	4907      	ldr	r1, [pc, #28]	; (80079b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007996:	4808      	ldr	r0, [pc, #32]	; (80079b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007998:	f7ff fd7a 	bl	8007490 <USBD_GetString>
 800799c:	e004      	b.n	80079a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	4904      	ldr	r1, [pc, #16]	; (80079b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079a2:	4805      	ldr	r0, [pc, #20]	; (80079b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079a4:	f7ff fd74 	bl	8007490 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079a8:	4b02      	ldr	r3, [pc, #8]	; (80079b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	200016b8 	.word	0x200016b8
 80079b8:	0800b704 	.word	0x0800b704

080079bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079c2:	4b0f      	ldr	r3, [pc, #60]	; (8007a00 <Get_SerialNum+0x44>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079c8:	4b0e      	ldr	r3, [pc, #56]	; (8007a04 <Get_SerialNum+0x48>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079ce:	4b0e      	ldr	r3, [pc, #56]	; (8007a08 <Get_SerialNum+0x4c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4413      	add	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079e2:	2208      	movs	r2, #8
 80079e4:	4909      	ldr	r1, [pc, #36]	; (8007a0c <Get_SerialNum+0x50>)
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 f814 	bl	8007a14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079ec:	2204      	movs	r2, #4
 80079ee:	4908      	ldr	r1, [pc, #32]	; (8007a10 <Get_SerialNum+0x54>)
 80079f0:	68b8      	ldr	r0, [r7, #8]
 80079f2:	f000 f80f 	bl	8007a14 <IntToUnicode>
  }
}
 80079f6:	bf00      	nop
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	1fff7a10 	.word	0x1fff7a10
 8007a04:	1fff7a14 	.word	0x1fff7a14
 8007a08:	1fff7a18 	.word	0x1fff7a18
 8007a0c:	2000016a 	.word	0x2000016a
 8007a10:	2000017a 	.word	0x2000017a

08007a14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a26:	2300      	movs	r3, #0
 8007a28:	75fb      	strb	r3, [r7, #23]
 8007a2a:	e027      	b.n	8007a7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	0f1b      	lsrs	r3, r3, #28
 8007a30:	2b09      	cmp	r3, #9
 8007a32:	d80b      	bhi.n	8007a4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	0f1b      	lsrs	r3, r3, #28
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	4619      	mov	r1, r3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	440b      	add	r3, r1
 8007a44:	3230      	adds	r2, #48	; 0x30
 8007a46:	b2d2      	uxtb	r2, r2
 8007a48:	701a      	strb	r2, [r3, #0]
 8007a4a:	e00a      	b.n	8007a62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	0f1b      	lsrs	r3, r3, #28
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	4619      	mov	r1, r3
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	440b      	add	r3, r1
 8007a5c:	3237      	adds	r2, #55	; 0x37
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	4413      	add	r3, r2
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	75fb      	strb	r3, [r7, #23]
 8007a7c:	7dfa      	ldrb	r2, [r7, #23]
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d3d3      	bcc.n	8007a2c <IntToUnicode+0x18>
  }
}
 8007a84:	bf00      	nop
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08a      	sub	sp, #40	; 0x28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a98:	f107 0314 	add.w	r3, r7, #20
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	605a      	str	r2, [r3, #4]
 8007aa2:	609a      	str	r2, [r3, #8]
 8007aa4:	60da      	str	r2, [r3, #12]
 8007aa6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ab0:	d13a      	bne.n	8007b28 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	4b1e      	ldr	r3, [pc, #120]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aba:	4a1d      	ldr	r2, [pc, #116]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007abc:	f043 0301 	orr.w	r3, r3, #1
 8007ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ac2:	4b1b      	ldr	r3, [pc, #108]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ace:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007adc:	2303      	movs	r3, #3
 8007ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ae0:	230a      	movs	r3, #10
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ae4:	f107 0314 	add.w	r3, r7, #20
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4812      	ldr	r0, [pc, #72]	; (8007b34 <HAL_PCD_MspInit+0xa4>)
 8007aec:	f7fa fb3c 	bl	8002168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007af0:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af4:	4a0e      	ldr	r2, [pc, #56]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007afa:	6353      	str	r3, [r2, #52]	; 0x34
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b04:	4a0a      	ldr	r2, [pc, #40]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b0a:	6453      	str	r3, [r2, #68]	; 0x44
 8007b0c:	4b08      	ldr	r3, [pc, #32]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	2043      	movs	r0, #67	; 0x43
 8007b1e:	f7fa faca 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b22:	2043      	movs	r0, #67	; 0x43
 8007b24:	f7fa fae3 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b28:	bf00      	nop
 8007b2a:	3728      	adds	r7, #40	; 0x28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40023800 	.word	0x40023800
 8007b34:	40020000 	.word	0x40020000

08007b38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4610      	mov	r0, r2
 8007b50:	f7fe fdaf 	bl	80066b2 <USBD_LL_SetupStage>
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b6e:	78fa      	ldrb	r2, [r7, #3]
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	4613      	mov	r3, r2
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	1a9b      	subs	r3, r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	440b      	add	r3, r1
 8007b7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	78fb      	ldrb	r3, [r7, #3]
 8007b84:	4619      	mov	r1, r3
 8007b86:	f7fe fddf 	bl	8006748 <USBD_LL_DataOutStage>
}
 8007b8a:	bf00      	nop
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ba4:	78fa      	ldrb	r2, [r7, #3]
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	3348      	adds	r3, #72	; 0x48
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	78fb      	ldrb	r3, [r7, #3]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	f7fe fe36 	bl	800682a <USBD_LL_DataInStage>
}
 8007bbe:	bf00      	nop
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe ff44 	bl	8006a62 <USBD_LL_SOF>
}
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007bea:	2301      	movs	r3, #1
 8007bec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d102      	bne.n	8007bfc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]
 8007bfa:	e008      	b.n	8007c0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d102      	bne.n	8007c0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007c04:	2301      	movs	r3, #1
 8007c06:	73fb      	strb	r3, [r7, #15]
 8007c08:	e001      	b.n	8007c0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007c0a:	f7f9 ff55 	bl	8001ab8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c14:	7bfa      	ldrb	r2, [r7, #15]
 8007c16:	4611      	mov	r1, r2
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe feec 	bl	80069f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fea5 	bl	8006974 <USBD_LL_Reset>
}
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe fee7 	bl	8006a16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	6812      	ldr	r2, [r2, #0]
 8007c56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c5a:	f043 0301 	orr.w	r3, r3, #1
 8007c5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d005      	beq.n	8007c74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c68:	4b04      	ldr	r3, [pc, #16]	; (8007c7c <HAL_PCD_SuspendCallback+0x48>)
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	4a03      	ldr	r2, [pc, #12]	; (8007c7c <HAL_PCD_SuspendCallback+0x48>)
 8007c6e:	f043 0306 	orr.w	r3, r3, #6
 8007c72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	e000ed00 	.word	0xe000ed00

08007c80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe fed6 	bl	8006a40 <USBD_LL_Resume>
}
 8007c94:	bf00      	nop
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe fefc 	bl	8006ab0 <USBD_LL_IsoOUTIncomplete>
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fedd 	bl	8006a96 <USBD_LL_IsoINIncomplete>
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fee9 	bl	8006aca <USBD_LL_DevConnected>
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe fee6 	bl	8006ae0 <USBD_LL_DevDisconnected>
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d13c      	bne.n	8007da6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d2c:	4a20      	ldr	r2, [pc, #128]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a1e      	ldr	r2, [pc, #120]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d3c:	4b1c      	ldr	r3, [pc, #112]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d44:	4b1a      	ldr	r3, [pc, #104]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d46:	2204      	movs	r2, #4
 8007d48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d4a:	4b19      	ldr	r3, [pc, #100]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d50:	4b17      	ldr	r3, [pc, #92]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d56:	4b16      	ldr	r3, [pc, #88]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d58:	2202      	movs	r2, #2
 8007d5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d5c:	4b14      	ldr	r3, [pc, #80]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d62:	4b13      	ldr	r3, [pc, #76]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d68:	4b11      	ldr	r3, [pc, #68]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d6e:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d74:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d7a:	480d      	ldr	r0, [pc, #52]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d7c:	f7fa fbc0 	bl	8002500 <HAL_PCD_Init>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d86:	f7f9 fe97 	bl	8001ab8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d8a:	2180      	movs	r1, #128	; 0x80
 8007d8c:	4808      	ldr	r0, [pc, #32]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d8e:	f7fb fd24 	bl	80037da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d92:	2240      	movs	r2, #64	; 0x40
 8007d94:	2100      	movs	r1, #0
 8007d96:	4806      	ldr	r0, [pc, #24]	; (8007db0 <USBD_LL_Init+0x94>)
 8007d98:	f7fb fcd8 	bl	800374c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d9c:	2280      	movs	r2, #128	; 0x80
 8007d9e:	2101      	movs	r1, #1
 8007da0:	4803      	ldr	r0, [pc, #12]	; (8007db0 <USBD_LL_Init+0x94>)
 8007da2:	f7fb fcd3 	bl	800374c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	200018b8 	.word	0x200018b8

08007db4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fa fcb5 	bl	800273a <HAL_PCD_Start>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 f92e 	bl	8008038 <USBD_Get_USB_Status>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	4608      	mov	r0, r1
 8007df4:	4611      	mov	r1, r2
 8007df6:	461a      	mov	r2, r3
 8007df8:	4603      	mov	r3, r0
 8007dfa:	70fb      	strb	r3, [r7, #3]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70bb      	strb	r3, [r7, #2]
 8007e00:	4613      	mov	r3, r2
 8007e02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007e12:	78bb      	ldrb	r3, [r7, #2]
 8007e14:	883a      	ldrh	r2, [r7, #0]
 8007e16:	78f9      	ldrb	r1, [r7, #3]
 8007e18:	f7fb f88a 	bl	8002f30 <HAL_PCD_EP_Open>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 f908 	bl	8008038 <USBD_Get_USB_Status>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007e50:	78fa      	ldrb	r2, [r7, #3]
 8007e52:	4611      	mov	r1, r2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fb f8d3 	bl	8003000 <HAL_PCD_EP_Close>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 f8e9 	bl	8008038 <USBD_Get_USB_Status>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007e8e:	78fa      	ldrb	r2, [r7, #3]
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fb f9ab 	bl	80031ee <HAL_PCD_EP_SetStall>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 f8ca 	bl	8008038 <USBD_Get_USB_Status>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007ecc:	78fa      	ldrb	r2, [r7, #3]
 8007ece:	4611      	mov	r1, r2
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fb f9f0 	bl	80032b6 <HAL_PCD_EP_ClrStall>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 f8ab 	bl	8008038 <USBD_Get_USB_Status>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007f02:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007f04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	da0b      	bge.n	8007f24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f12:	68f9      	ldr	r1, [r7, #12]
 8007f14:	4613      	mov	r3, r2
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	1a9b      	subs	r3, r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	333e      	adds	r3, #62	; 0x3e
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	e00b      	b.n	8007f3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007f24:	78fb      	ldrb	r3, [r7, #3]
 8007f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	1a9b      	subs	r3, r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	440b      	add	r3, r1
 8007f36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	4611      	mov	r1, r2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fa ffbd 	bl	8002ee6 <HAL_PCD_SetAddress>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 f860 	bl	8008038 <USBD_Get_USB_Status>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b086      	sub	sp, #24
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	461a      	mov	r2, r3
 8007f92:	460b      	mov	r3, r1
 8007f94:	72fb      	strb	r3, [r7, #11]
 8007f96:	4613      	mov	r3, r2
 8007f98:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007fa8:	893b      	ldrh	r3, [r7, #8]
 8007faa:	7af9      	ldrb	r1, [r7, #11]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	f7fb f8d4 	bl	800315a <HAL_PCD_EP_Transmit>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 f83d 	bl	8008038 <USBD_Get_USB_Status>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007fc2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	607a      	str	r2, [r7, #4]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	460b      	mov	r3, r1
 8007fda:	72fb      	strb	r3, [r7, #11]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007fee:	893b      	ldrh	r3, [r7, #8]
 8007ff0:	7af9      	ldrb	r1, [r7, #11]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	f7fb f84e 	bl	8003094 <HAL_PCD_EP_Receive>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 f81a 	bl	8008038 <USBD_Get_USB_Status>
 8008004:	4603      	mov	r3, r0
 8008006:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008008:	7dbb      	ldrb	r3, [r7, #22]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	460b      	mov	r3, r1
 800801c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008024:	78fa      	ldrb	r2, [r7, #3]
 8008026:	4611      	mov	r1, r2
 8008028:	4618      	mov	r0, r3
 800802a:	f7fb f87e 	bl	800312a <HAL_PCD_EP_GetRxCount>
 800802e:	4603      	mov	r3, r0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	4603      	mov	r3, r0
 8008040:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008046:	79fb      	ldrb	r3, [r7, #7]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d817      	bhi.n	800807c <USBD_Get_USB_Status+0x44>
 800804c:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <USBD_Get_USB_Status+0x1c>)
 800804e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008052:	bf00      	nop
 8008054:	08008065 	.word	0x08008065
 8008058:	0800806b 	.word	0x0800806b
 800805c:	08008071 	.word	0x08008071
 8008060:	08008077 	.word	0x08008077
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]
    break;
 8008068:	e00b      	b.n	8008082 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800806a:	2302      	movs	r3, #2
 800806c:	73fb      	strb	r3, [r7, #15]
    break;
 800806e:	e008      	b.n	8008082 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008070:	2301      	movs	r3, #1
 8008072:	73fb      	strb	r3, [r7, #15]
    break;
 8008074:	e005      	b.n	8008082 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008076:	2302      	movs	r3, #2
 8008078:	73fb      	strb	r3, [r7, #15]
    break;
 800807a:	e002      	b.n	8008082 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800807c:	2302      	movs	r3, #2
 800807e:	73fb      	strb	r3, [r7, #15]
    break;
 8008080:	bf00      	nop
  }
  return usb_status;
 8008082:	7bfb      	ldrb	r3, [r7, #15]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <__errno>:
 8008090:	4b01      	ldr	r3, [pc, #4]	; (8008098 <__errno+0x8>)
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	20000184 	.word	0x20000184

0800809c <__libc_init_array>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	4e0d      	ldr	r6, [pc, #52]	; (80080d4 <__libc_init_array+0x38>)
 80080a0:	4c0d      	ldr	r4, [pc, #52]	; (80080d8 <__libc_init_array+0x3c>)
 80080a2:	1ba4      	subs	r4, r4, r6
 80080a4:	10a4      	asrs	r4, r4, #2
 80080a6:	2500      	movs	r5, #0
 80080a8:	42a5      	cmp	r5, r4
 80080aa:	d109      	bne.n	80080c0 <__libc_init_array+0x24>
 80080ac:	4e0b      	ldr	r6, [pc, #44]	; (80080dc <__libc_init_array+0x40>)
 80080ae:	4c0c      	ldr	r4, [pc, #48]	; (80080e0 <__libc_init_array+0x44>)
 80080b0:	f003 fafc 	bl	800b6ac <_init>
 80080b4:	1ba4      	subs	r4, r4, r6
 80080b6:	10a4      	asrs	r4, r4, #2
 80080b8:	2500      	movs	r5, #0
 80080ba:	42a5      	cmp	r5, r4
 80080bc:	d105      	bne.n	80080ca <__libc_init_array+0x2e>
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080c4:	4798      	blx	r3
 80080c6:	3501      	adds	r5, #1
 80080c8:	e7ee      	b.n	80080a8 <__libc_init_array+0xc>
 80080ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080ce:	4798      	blx	r3
 80080d0:	3501      	adds	r5, #1
 80080d2:	e7f2      	b.n	80080ba <__libc_init_array+0x1e>
 80080d4:	0800b9d8 	.word	0x0800b9d8
 80080d8:	0800b9d8 	.word	0x0800b9d8
 80080dc:	0800b9d8 	.word	0x0800b9d8
 80080e0:	0800b9dc 	.word	0x0800b9dc

080080e4 <malloc>:
 80080e4:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <malloc+0xc>)
 80080e6:	4601      	mov	r1, r0
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	f000 b861 	b.w	80081b0 <_malloc_r>
 80080ee:	bf00      	nop
 80080f0:	20000184 	.word	0x20000184

080080f4 <free>:
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <free+0xc>)
 80080f6:	4601      	mov	r1, r0
 80080f8:	6818      	ldr	r0, [r3, #0]
 80080fa:	f000 b80b 	b.w	8008114 <_free_r>
 80080fe:	bf00      	nop
 8008100:	20000184 	.word	0x20000184

08008104 <memset>:
 8008104:	4402      	add	r2, r0
 8008106:	4603      	mov	r3, r0
 8008108:	4293      	cmp	r3, r2
 800810a:	d100      	bne.n	800810e <memset+0xa>
 800810c:	4770      	bx	lr
 800810e:	f803 1b01 	strb.w	r1, [r3], #1
 8008112:	e7f9      	b.n	8008108 <memset+0x4>

08008114 <_free_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4605      	mov	r5, r0
 8008118:	2900      	cmp	r1, #0
 800811a:	d045      	beq.n	80081a8 <_free_r+0x94>
 800811c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008120:	1f0c      	subs	r4, r1, #4
 8008122:	2b00      	cmp	r3, #0
 8008124:	bfb8      	it	lt
 8008126:	18e4      	addlt	r4, r4, r3
 8008128:	f002 fcf9 	bl	800ab1e <__malloc_lock>
 800812c:	4a1f      	ldr	r2, [pc, #124]	; (80081ac <_free_r+0x98>)
 800812e:	6813      	ldr	r3, [r2, #0]
 8008130:	4610      	mov	r0, r2
 8008132:	b933      	cbnz	r3, 8008142 <_free_r+0x2e>
 8008134:	6063      	str	r3, [r4, #4]
 8008136:	6014      	str	r4, [r2, #0]
 8008138:	4628      	mov	r0, r5
 800813a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800813e:	f002 bcef 	b.w	800ab20 <__malloc_unlock>
 8008142:	42a3      	cmp	r3, r4
 8008144:	d90c      	bls.n	8008160 <_free_r+0x4c>
 8008146:	6821      	ldr	r1, [r4, #0]
 8008148:	1862      	adds	r2, r4, r1
 800814a:	4293      	cmp	r3, r2
 800814c:	bf04      	itt	eq
 800814e:	681a      	ldreq	r2, [r3, #0]
 8008150:	685b      	ldreq	r3, [r3, #4]
 8008152:	6063      	str	r3, [r4, #4]
 8008154:	bf04      	itt	eq
 8008156:	1852      	addeq	r2, r2, r1
 8008158:	6022      	streq	r2, [r4, #0]
 800815a:	6004      	str	r4, [r0, #0]
 800815c:	e7ec      	b.n	8008138 <_free_r+0x24>
 800815e:	4613      	mov	r3, r2
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	b10a      	cbz	r2, 8008168 <_free_r+0x54>
 8008164:	42a2      	cmp	r2, r4
 8008166:	d9fa      	bls.n	800815e <_free_r+0x4a>
 8008168:	6819      	ldr	r1, [r3, #0]
 800816a:	1858      	adds	r0, r3, r1
 800816c:	42a0      	cmp	r0, r4
 800816e:	d10b      	bne.n	8008188 <_free_r+0x74>
 8008170:	6820      	ldr	r0, [r4, #0]
 8008172:	4401      	add	r1, r0
 8008174:	1858      	adds	r0, r3, r1
 8008176:	4282      	cmp	r2, r0
 8008178:	6019      	str	r1, [r3, #0]
 800817a:	d1dd      	bne.n	8008138 <_free_r+0x24>
 800817c:	6810      	ldr	r0, [r2, #0]
 800817e:	6852      	ldr	r2, [r2, #4]
 8008180:	605a      	str	r2, [r3, #4]
 8008182:	4401      	add	r1, r0
 8008184:	6019      	str	r1, [r3, #0]
 8008186:	e7d7      	b.n	8008138 <_free_r+0x24>
 8008188:	d902      	bls.n	8008190 <_free_r+0x7c>
 800818a:	230c      	movs	r3, #12
 800818c:	602b      	str	r3, [r5, #0]
 800818e:	e7d3      	b.n	8008138 <_free_r+0x24>
 8008190:	6820      	ldr	r0, [r4, #0]
 8008192:	1821      	adds	r1, r4, r0
 8008194:	428a      	cmp	r2, r1
 8008196:	bf04      	itt	eq
 8008198:	6811      	ldreq	r1, [r2, #0]
 800819a:	6852      	ldreq	r2, [r2, #4]
 800819c:	6062      	str	r2, [r4, #4]
 800819e:	bf04      	itt	eq
 80081a0:	1809      	addeq	r1, r1, r0
 80081a2:	6021      	streq	r1, [r4, #0]
 80081a4:	605c      	str	r4, [r3, #4]
 80081a6:	e7c7      	b.n	8008138 <_free_r+0x24>
 80081a8:	bd38      	pop	{r3, r4, r5, pc}
 80081aa:	bf00      	nop
 80081ac:	200003ac 	.word	0x200003ac

080081b0 <_malloc_r>:
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	1ccd      	adds	r5, r1, #3
 80081b4:	f025 0503 	bic.w	r5, r5, #3
 80081b8:	3508      	adds	r5, #8
 80081ba:	2d0c      	cmp	r5, #12
 80081bc:	bf38      	it	cc
 80081be:	250c      	movcc	r5, #12
 80081c0:	2d00      	cmp	r5, #0
 80081c2:	4606      	mov	r6, r0
 80081c4:	db01      	blt.n	80081ca <_malloc_r+0x1a>
 80081c6:	42a9      	cmp	r1, r5
 80081c8:	d903      	bls.n	80081d2 <_malloc_r+0x22>
 80081ca:	230c      	movs	r3, #12
 80081cc:	6033      	str	r3, [r6, #0]
 80081ce:	2000      	movs	r0, #0
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	f002 fca4 	bl	800ab1e <__malloc_lock>
 80081d6:	4a21      	ldr	r2, [pc, #132]	; (800825c <_malloc_r+0xac>)
 80081d8:	6814      	ldr	r4, [r2, #0]
 80081da:	4621      	mov	r1, r4
 80081dc:	b991      	cbnz	r1, 8008204 <_malloc_r+0x54>
 80081de:	4c20      	ldr	r4, [pc, #128]	; (8008260 <_malloc_r+0xb0>)
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	b91b      	cbnz	r3, 80081ec <_malloc_r+0x3c>
 80081e4:	4630      	mov	r0, r6
 80081e6:	f000 fc99 	bl	8008b1c <_sbrk_r>
 80081ea:	6020      	str	r0, [r4, #0]
 80081ec:	4629      	mov	r1, r5
 80081ee:	4630      	mov	r0, r6
 80081f0:	f000 fc94 	bl	8008b1c <_sbrk_r>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d124      	bne.n	8008242 <_malloc_r+0x92>
 80081f8:	230c      	movs	r3, #12
 80081fa:	6033      	str	r3, [r6, #0]
 80081fc:	4630      	mov	r0, r6
 80081fe:	f002 fc8f 	bl	800ab20 <__malloc_unlock>
 8008202:	e7e4      	b.n	80081ce <_malloc_r+0x1e>
 8008204:	680b      	ldr	r3, [r1, #0]
 8008206:	1b5b      	subs	r3, r3, r5
 8008208:	d418      	bmi.n	800823c <_malloc_r+0x8c>
 800820a:	2b0b      	cmp	r3, #11
 800820c:	d90f      	bls.n	800822e <_malloc_r+0x7e>
 800820e:	600b      	str	r3, [r1, #0]
 8008210:	50cd      	str	r5, [r1, r3]
 8008212:	18cc      	adds	r4, r1, r3
 8008214:	4630      	mov	r0, r6
 8008216:	f002 fc83 	bl	800ab20 <__malloc_unlock>
 800821a:	f104 000b 	add.w	r0, r4, #11
 800821e:	1d23      	adds	r3, r4, #4
 8008220:	f020 0007 	bic.w	r0, r0, #7
 8008224:	1ac3      	subs	r3, r0, r3
 8008226:	d0d3      	beq.n	80081d0 <_malloc_r+0x20>
 8008228:	425a      	negs	r2, r3
 800822a:	50e2      	str	r2, [r4, r3]
 800822c:	e7d0      	b.n	80081d0 <_malloc_r+0x20>
 800822e:	428c      	cmp	r4, r1
 8008230:	684b      	ldr	r3, [r1, #4]
 8008232:	bf16      	itet	ne
 8008234:	6063      	strne	r3, [r4, #4]
 8008236:	6013      	streq	r3, [r2, #0]
 8008238:	460c      	movne	r4, r1
 800823a:	e7eb      	b.n	8008214 <_malloc_r+0x64>
 800823c:	460c      	mov	r4, r1
 800823e:	6849      	ldr	r1, [r1, #4]
 8008240:	e7cc      	b.n	80081dc <_malloc_r+0x2c>
 8008242:	1cc4      	adds	r4, r0, #3
 8008244:	f024 0403 	bic.w	r4, r4, #3
 8008248:	42a0      	cmp	r0, r4
 800824a:	d005      	beq.n	8008258 <_malloc_r+0xa8>
 800824c:	1a21      	subs	r1, r4, r0
 800824e:	4630      	mov	r0, r6
 8008250:	f000 fc64 	bl	8008b1c <_sbrk_r>
 8008254:	3001      	adds	r0, #1
 8008256:	d0cf      	beq.n	80081f8 <_malloc_r+0x48>
 8008258:	6025      	str	r5, [r4, #0]
 800825a:	e7db      	b.n	8008214 <_malloc_r+0x64>
 800825c:	200003ac 	.word	0x200003ac
 8008260:	200003b0 	.word	0x200003b0

08008264 <__cvt>:
 8008264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008268:	ec55 4b10 	vmov	r4, r5, d0
 800826c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800826e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008272:	2d00      	cmp	r5, #0
 8008274:	460e      	mov	r6, r1
 8008276:	4691      	mov	r9, r2
 8008278:	4619      	mov	r1, r3
 800827a:	bfb8      	it	lt
 800827c:	4622      	movlt	r2, r4
 800827e:	462b      	mov	r3, r5
 8008280:	f027 0720 	bic.w	r7, r7, #32
 8008284:	bfbb      	ittet	lt
 8008286:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800828a:	461d      	movlt	r5, r3
 800828c:	2300      	movge	r3, #0
 800828e:	232d      	movlt	r3, #45	; 0x2d
 8008290:	bfb8      	it	lt
 8008292:	4614      	movlt	r4, r2
 8008294:	2f46      	cmp	r7, #70	; 0x46
 8008296:	700b      	strb	r3, [r1, #0]
 8008298:	d004      	beq.n	80082a4 <__cvt+0x40>
 800829a:	2f45      	cmp	r7, #69	; 0x45
 800829c:	d100      	bne.n	80082a0 <__cvt+0x3c>
 800829e:	3601      	adds	r6, #1
 80082a0:	2102      	movs	r1, #2
 80082a2:	e000      	b.n	80082a6 <__cvt+0x42>
 80082a4:	2103      	movs	r1, #3
 80082a6:	ab03      	add	r3, sp, #12
 80082a8:	9301      	str	r3, [sp, #4]
 80082aa:	ab02      	add	r3, sp, #8
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	4632      	mov	r2, r6
 80082b0:	4653      	mov	r3, sl
 80082b2:	ec45 4b10 	vmov	d0, r4, r5
 80082b6:	f001 fb27 	bl	8009908 <_dtoa_r>
 80082ba:	2f47      	cmp	r7, #71	; 0x47
 80082bc:	4680      	mov	r8, r0
 80082be:	d102      	bne.n	80082c6 <__cvt+0x62>
 80082c0:	f019 0f01 	tst.w	r9, #1
 80082c4:	d026      	beq.n	8008314 <__cvt+0xb0>
 80082c6:	2f46      	cmp	r7, #70	; 0x46
 80082c8:	eb08 0906 	add.w	r9, r8, r6
 80082cc:	d111      	bne.n	80082f2 <__cvt+0x8e>
 80082ce:	f898 3000 	ldrb.w	r3, [r8]
 80082d2:	2b30      	cmp	r3, #48	; 0x30
 80082d4:	d10a      	bne.n	80082ec <__cvt+0x88>
 80082d6:	2200      	movs	r2, #0
 80082d8:	2300      	movs	r3, #0
 80082da:	4620      	mov	r0, r4
 80082dc:	4629      	mov	r1, r5
 80082de:	f7f8 fbf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80082e2:	b918      	cbnz	r0, 80082ec <__cvt+0x88>
 80082e4:	f1c6 0601 	rsb	r6, r6, #1
 80082e8:	f8ca 6000 	str.w	r6, [sl]
 80082ec:	f8da 3000 	ldr.w	r3, [sl]
 80082f0:	4499      	add	r9, r3
 80082f2:	2200      	movs	r2, #0
 80082f4:	2300      	movs	r3, #0
 80082f6:	4620      	mov	r0, r4
 80082f8:	4629      	mov	r1, r5
 80082fa:	f7f8 fbe5 	bl	8000ac8 <__aeabi_dcmpeq>
 80082fe:	b938      	cbnz	r0, 8008310 <__cvt+0xac>
 8008300:	2230      	movs	r2, #48	; 0x30
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	454b      	cmp	r3, r9
 8008306:	d205      	bcs.n	8008314 <__cvt+0xb0>
 8008308:	1c59      	adds	r1, r3, #1
 800830a:	9103      	str	r1, [sp, #12]
 800830c:	701a      	strb	r2, [r3, #0]
 800830e:	e7f8      	b.n	8008302 <__cvt+0x9e>
 8008310:	f8cd 900c 	str.w	r9, [sp, #12]
 8008314:	9b03      	ldr	r3, [sp, #12]
 8008316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008318:	eba3 0308 	sub.w	r3, r3, r8
 800831c:	4640      	mov	r0, r8
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	b004      	add	sp, #16
 8008322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008326 <__exponent>:
 8008326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008328:	2900      	cmp	r1, #0
 800832a:	4604      	mov	r4, r0
 800832c:	bfba      	itte	lt
 800832e:	4249      	neglt	r1, r1
 8008330:	232d      	movlt	r3, #45	; 0x2d
 8008332:	232b      	movge	r3, #43	; 0x2b
 8008334:	2909      	cmp	r1, #9
 8008336:	f804 2b02 	strb.w	r2, [r4], #2
 800833a:	7043      	strb	r3, [r0, #1]
 800833c:	dd20      	ble.n	8008380 <__exponent+0x5a>
 800833e:	f10d 0307 	add.w	r3, sp, #7
 8008342:	461f      	mov	r7, r3
 8008344:	260a      	movs	r6, #10
 8008346:	fb91 f5f6 	sdiv	r5, r1, r6
 800834a:	fb06 1115 	mls	r1, r6, r5, r1
 800834e:	3130      	adds	r1, #48	; 0x30
 8008350:	2d09      	cmp	r5, #9
 8008352:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008356:	f103 32ff 	add.w	r2, r3, #4294967295
 800835a:	4629      	mov	r1, r5
 800835c:	dc09      	bgt.n	8008372 <__exponent+0x4c>
 800835e:	3130      	adds	r1, #48	; 0x30
 8008360:	3b02      	subs	r3, #2
 8008362:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008366:	42bb      	cmp	r3, r7
 8008368:	4622      	mov	r2, r4
 800836a:	d304      	bcc.n	8008376 <__exponent+0x50>
 800836c:	1a10      	subs	r0, r2, r0
 800836e:	b003      	add	sp, #12
 8008370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008372:	4613      	mov	r3, r2
 8008374:	e7e7      	b.n	8008346 <__exponent+0x20>
 8008376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800837a:	f804 2b01 	strb.w	r2, [r4], #1
 800837e:	e7f2      	b.n	8008366 <__exponent+0x40>
 8008380:	2330      	movs	r3, #48	; 0x30
 8008382:	4419      	add	r1, r3
 8008384:	7083      	strb	r3, [r0, #2]
 8008386:	1d02      	adds	r2, r0, #4
 8008388:	70c1      	strb	r1, [r0, #3]
 800838a:	e7ef      	b.n	800836c <__exponent+0x46>

0800838c <_printf_float>:
 800838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008390:	b08d      	sub	sp, #52	; 0x34
 8008392:	460c      	mov	r4, r1
 8008394:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008398:	4616      	mov	r6, r2
 800839a:	461f      	mov	r7, r3
 800839c:	4605      	mov	r5, r0
 800839e:	f002 fb93 	bl	800aac8 <_localeconv_r>
 80083a2:	6803      	ldr	r3, [r0, #0]
 80083a4:	9304      	str	r3, [sp, #16]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7f7 ff12 	bl	80001d0 <strlen>
 80083ac:	2300      	movs	r3, #0
 80083ae:	930a      	str	r3, [sp, #40]	; 0x28
 80083b0:	f8d8 3000 	ldr.w	r3, [r8]
 80083b4:	9005      	str	r0, [sp, #20]
 80083b6:	3307      	adds	r3, #7
 80083b8:	f023 0307 	bic.w	r3, r3, #7
 80083bc:	f103 0208 	add.w	r2, r3, #8
 80083c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80083c4:	f8d4 b000 	ldr.w	fp, [r4]
 80083c8:	f8c8 2000 	str.w	r2, [r8]
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80083d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083dc:	9307      	str	r3, [sp, #28]
 80083de:	f8cd 8018 	str.w	r8, [sp, #24]
 80083e2:	f04f 32ff 	mov.w	r2, #4294967295
 80083e6:	4ba7      	ldr	r3, [pc, #668]	; (8008684 <_printf_float+0x2f8>)
 80083e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083ec:	f7f8 fb9e 	bl	8000b2c <__aeabi_dcmpun>
 80083f0:	bb70      	cbnz	r0, 8008450 <_printf_float+0xc4>
 80083f2:	f04f 32ff 	mov.w	r2, #4294967295
 80083f6:	4ba3      	ldr	r3, [pc, #652]	; (8008684 <_printf_float+0x2f8>)
 80083f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083fc:	f7f8 fb78 	bl	8000af0 <__aeabi_dcmple>
 8008400:	bb30      	cbnz	r0, 8008450 <_printf_float+0xc4>
 8008402:	2200      	movs	r2, #0
 8008404:	2300      	movs	r3, #0
 8008406:	4640      	mov	r0, r8
 8008408:	4649      	mov	r1, r9
 800840a:	f7f8 fb67 	bl	8000adc <__aeabi_dcmplt>
 800840e:	b110      	cbz	r0, 8008416 <_printf_float+0x8a>
 8008410:	232d      	movs	r3, #45	; 0x2d
 8008412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008416:	4a9c      	ldr	r2, [pc, #624]	; (8008688 <_printf_float+0x2fc>)
 8008418:	4b9c      	ldr	r3, [pc, #624]	; (800868c <_printf_float+0x300>)
 800841a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800841e:	bf8c      	ite	hi
 8008420:	4690      	movhi	r8, r2
 8008422:	4698      	movls	r8, r3
 8008424:	2303      	movs	r3, #3
 8008426:	f02b 0204 	bic.w	r2, fp, #4
 800842a:	6123      	str	r3, [r4, #16]
 800842c:	6022      	str	r2, [r4, #0]
 800842e:	f04f 0900 	mov.w	r9, #0
 8008432:	9700      	str	r7, [sp, #0]
 8008434:	4633      	mov	r3, r6
 8008436:	aa0b      	add	r2, sp, #44	; 0x2c
 8008438:	4621      	mov	r1, r4
 800843a:	4628      	mov	r0, r5
 800843c:	f000 f9e6 	bl	800880c <_printf_common>
 8008440:	3001      	adds	r0, #1
 8008442:	f040 808d 	bne.w	8008560 <_printf_float+0x1d4>
 8008446:	f04f 30ff 	mov.w	r0, #4294967295
 800844a:	b00d      	add	sp, #52	; 0x34
 800844c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008450:	4642      	mov	r2, r8
 8008452:	464b      	mov	r3, r9
 8008454:	4640      	mov	r0, r8
 8008456:	4649      	mov	r1, r9
 8008458:	f7f8 fb68 	bl	8000b2c <__aeabi_dcmpun>
 800845c:	b110      	cbz	r0, 8008464 <_printf_float+0xd8>
 800845e:	4a8c      	ldr	r2, [pc, #560]	; (8008690 <_printf_float+0x304>)
 8008460:	4b8c      	ldr	r3, [pc, #560]	; (8008694 <_printf_float+0x308>)
 8008462:	e7da      	b.n	800841a <_printf_float+0x8e>
 8008464:	6861      	ldr	r1, [r4, #4]
 8008466:	1c4b      	adds	r3, r1, #1
 8008468:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800846c:	a80a      	add	r0, sp, #40	; 0x28
 800846e:	d13e      	bne.n	80084ee <_printf_float+0x162>
 8008470:	2306      	movs	r3, #6
 8008472:	6063      	str	r3, [r4, #4]
 8008474:	2300      	movs	r3, #0
 8008476:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800847a:	ab09      	add	r3, sp, #36	; 0x24
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	ec49 8b10 	vmov	d0, r8, r9
 8008482:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008486:	6022      	str	r2, [r4, #0]
 8008488:	f8cd a004 	str.w	sl, [sp, #4]
 800848c:	6861      	ldr	r1, [r4, #4]
 800848e:	4628      	mov	r0, r5
 8008490:	f7ff fee8 	bl	8008264 <__cvt>
 8008494:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008498:	2b47      	cmp	r3, #71	; 0x47
 800849a:	4680      	mov	r8, r0
 800849c:	d109      	bne.n	80084b2 <_printf_float+0x126>
 800849e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a0:	1cd8      	adds	r0, r3, #3
 80084a2:	db02      	blt.n	80084aa <_printf_float+0x11e>
 80084a4:	6862      	ldr	r2, [r4, #4]
 80084a6:	4293      	cmp	r3, r2
 80084a8:	dd47      	ble.n	800853a <_printf_float+0x1ae>
 80084aa:	f1aa 0a02 	sub.w	sl, sl, #2
 80084ae:	fa5f fa8a 	uxtb.w	sl, sl
 80084b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80084b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084b8:	d824      	bhi.n	8008504 <_printf_float+0x178>
 80084ba:	3901      	subs	r1, #1
 80084bc:	4652      	mov	r2, sl
 80084be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084c2:	9109      	str	r1, [sp, #36]	; 0x24
 80084c4:	f7ff ff2f 	bl	8008326 <__exponent>
 80084c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ca:	1813      	adds	r3, r2, r0
 80084cc:	2a01      	cmp	r2, #1
 80084ce:	4681      	mov	r9, r0
 80084d0:	6123      	str	r3, [r4, #16]
 80084d2:	dc02      	bgt.n	80084da <_printf_float+0x14e>
 80084d4:	6822      	ldr	r2, [r4, #0]
 80084d6:	07d1      	lsls	r1, r2, #31
 80084d8:	d501      	bpl.n	80084de <_printf_float+0x152>
 80084da:	3301      	adds	r3, #1
 80084dc:	6123      	str	r3, [r4, #16]
 80084de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0a5      	beq.n	8008432 <_printf_float+0xa6>
 80084e6:	232d      	movs	r3, #45	; 0x2d
 80084e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ec:	e7a1      	b.n	8008432 <_printf_float+0xa6>
 80084ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80084f2:	f000 8177 	beq.w	80087e4 <_printf_float+0x458>
 80084f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80084fa:	d1bb      	bne.n	8008474 <_printf_float+0xe8>
 80084fc:	2900      	cmp	r1, #0
 80084fe:	d1b9      	bne.n	8008474 <_printf_float+0xe8>
 8008500:	2301      	movs	r3, #1
 8008502:	e7b6      	b.n	8008472 <_printf_float+0xe6>
 8008504:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008508:	d119      	bne.n	800853e <_printf_float+0x1b2>
 800850a:	2900      	cmp	r1, #0
 800850c:	6863      	ldr	r3, [r4, #4]
 800850e:	dd0c      	ble.n	800852a <_printf_float+0x19e>
 8008510:	6121      	str	r1, [r4, #16]
 8008512:	b913      	cbnz	r3, 800851a <_printf_float+0x18e>
 8008514:	6822      	ldr	r2, [r4, #0]
 8008516:	07d2      	lsls	r2, r2, #31
 8008518:	d502      	bpl.n	8008520 <_printf_float+0x194>
 800851a:	3301      	adds	r3, #1
 800851c:	440b      	add	r3, r1
 800851e:	6123      	str	r3, [r4, #16]
 8008520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008522:	65a3      	str	r3, [r4, #88]	; 0x58
 8008524:	f04f 0900 	mov.w	r9, #0
 8008528:	e7d9      	b.n	80084de <_printf_float+0x152>
 800852a:	b913      	cbnz	r3, 8008532 <_printf_float+0x1a6>
 800852c:	6822      	ldr	r2, [r4, #0]
 800852e:	07d0      	lsls	r0, r2, #31
 8008530:	d501      	bpl.n	8008536 <_printf_float+0x1aa>
 8008532:	3302      	adds	r3, #2
 8008534:	e7f3      	b.n	800851e <_printf_float+0x192>
 8008536:	2301      	movs	r3, #1
 8008538:	e7f1      	b.n	800851e <_printf_float+0x192>
 800853a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800853e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008542:	4293      	cmp	r3, r2
 8008544:	db05      	blt.n	8008552 <_printf_float+0x1c6>
 8008546:	6822      	ldr	r2, [r4, #0]
 8008548:	6123      	str	r3, [r4, #16]
 800854a:	07d1      	lsls	r1, r2, #31
 800854c:	d5e8      	bpl.n	8008520 <_printf_float+0x194>
 800854e:	3301      	adds	r3, #1
 8008550:	e7e5      	b.n	800851e <_printf_float+0x192>
 8008552:	2b00      	cmp	r3, #0
 8008554:	bfd4      	ite	le
 8008556:	f1c3 0302 	rsble	r3, r3, #2
 800855a:	2301      	movgt	r3, #1
 800855c:	4413      	add	r3, r2
 800855e:	e7de      	b.n	800851e <_printf_float+0x192>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	055a      	lsls	r2, r3, #21
 8008564:	d407      	bmi.n	8008576 <_printf_float+0x1ea>
 8008566:	6923      	ldr	r3, [r4, #16]
 8008568:	4642      	mov	r2, r8
 800856a:	4631      	mov	r1, r6
 800856c:	4628      	mov	r0, r5
 800856e:	47b8      	blx	r7
 8008570:	3001      	adds	r0, #1
 8008572:	d12b      	bne.n	80085cc <_printf_float+0x240>
 8008574:	e767      	b.n	8008446 <_printf_float+0xba>
 8008576:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800857a:	f240 80dc 	bls.w	8008736 <_printf_float+0x3aa>
 800857e:	2200      	movs	r2, #0
 8008580:	2300      	movs	r3, #0
 8008582:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008586:	f7f8 fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800858a:	2800      	cmp	r0, #0
 800858c:	d033      	beq.n	80085f6 <_printf_float+0x26a>
 800858e:	2301      	movs	r3, #1
 8008590:	4a41      	ldr	r2, [pc, #260]	; (8008698 <_printf_float+0x30c>)
 8008592:	4631      	mov	r1, r6
 8008594:	4628      	mov	r0, r5
 8008596:	47b8      	blx	r7
 8008598:	3001      	adds	r0, #1
 800859a:	f43f af54 	beq.w	8008446 <_printf_float+0xba>
 800859e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085a2:	429a      	cmp	r2, r3
 80085a4:	db02      	blt.n	80085ac <_printf_float+0x220>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	07d8      	lsls	r0, r3, #31
 80085aa:	d50f      	bpl.n	80085cc <_printf_float+0x240>
 80085ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b8      	blx	r7
 80085b6:	3001      	adds	r0, #1
 80085b8:	f43f af45 	beq.w	8008446 <_printf_float+0xba>
 80085bc:	f04f 0800 	mov.w	r8, #0
 80085c0:	f104 091a 	add.w	r9, r4, #26
 80085c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c6:	3b01      	subs	r3, #1
 80085c8:	4543      	cmp	r3, r8
 80085ca:	dc09      	bgt.n	80085e0 <_printf_float+0x254>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	079b      	lsls	r3, r3, #30
 80085d0:	f100 8103 	bmi.w	80087da <_printf_float+0x44e>
 80085d4:	68e0      	ldr	r0, [r4, #12]
 80085d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085d8:	4298      	cmp	r0, r3
 80085da:	bfb8      	it	lt
 80085dc:	4618      	movlt	r0, r3
 80085de:	e734      	b.n	800844a <_printf_float+0xbe>
 80085e0:	2301      	movs	r3, #1
 80085e2:	464a      	mov	r2, r9
 80085e4:	4631      	mov	r1, r6
 80085e6:	4628      	mov	r0, r5
 80085e8:	47b8      	blx	r7
 80085ea:	3001      	adds	r0, #1
 80085ec:	f43f af2b 	beq.w	8008446 <_printf_float+0xba>
 80085f0:	f108 0801 	add.w	r8, r8, #1
 80085f4:	e7e6      	b.n	80085c4 <_printf_float+0x238>
 80085f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	dc2b      	bgt.n	8008654 <_printf_float+0x2c8>
 80085fc:	2301      	movs	r3, #1
 80085fe:	4a26      	ldr	r2, [pc, #152]	; (8008698 <_printf_float+0x30c>)
 8008600:	4631      	mov	r1, r6
 8008602:	4628      	mov	r0, r5
 8008604:	47b8      	blx	r7
 8008606:	3001      	adds	r0, #1
 8008608:	f43f af1d 	beq.w	8008446 <_printf_float+0xba>
 800860c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860e:	b923      	cbnz	r3, 800861a <_printf_float+0x28e>
 8008610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008612:	b913      	cbnz	r3, 800861a <_printf_float+0x28e>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	07d9      	lsls	r1, r3, #31
 8008618:	d5d8      	bpl.n	80085cc <_printf_float+0x240>
 800861a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800861e:	4631      	mov	r1, r6
 8008620:	4628      	mov	r0, r5
 8008622:	47b8      	blx	r7
 8008624:	3001      	adds	r0, #1
 8008626:	f43f af0e 	beq.w	8008446 <_printf_float+0xba>
 800862a:	f04f 0900 	mov.w	r9, #0
 800862e:	f104 0a1a 	add.w	sl, r4, #26
 8008632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008634:	425b      	negs	r3, r3
 8008636:	454b      	cmp	r3, r9
 8008638:	dc01      	bgt.n	800863e <_printf_float+0x2b2>
 800863a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800863c:	e794      	b.n	8008568 <_printf_float+0x1dc>
 800863e:	2301      	movs	r3, #1
 8008640:	4652      	mov	r2, sl
 8008642:	4631      	mov	r1, r6
 8008644:	4628      	mov	r0, r5
 8008646:	47b8      	blx	r7
 8008648:	3001      	adds	r0, #1
 800864a:	f43f aefc 	beq.w	8008446 <_printf_float+0xba>
 800864e:	f109 0901 	add.w	r9, r9, #1
 8008652:	e7ee      	b.n	8008632 <_printf_float+0x2a6>
 8008654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008658:	429a      	cmp	r2, r3
 800865a:	bfa8      	it	ge
 800865c:	461a      	movge	r2, r3
 800865e:	2a00      	cmp	r2, #0
 8008660:	4691      	mov	r9, r2
 8008662:	dd07      	ble.n	8008674 <_printf_float+0x2e8>
 8008664:	4613      	mov	r3, r2
 8008666:	4631      	mov	r1, r6
 8008668:	4642      	mov	r2, r8
 800866a:	4628      	mov	r0, r5
 800866c:	47b8      	blx	r7
 800866e:	3001      	adds	r0, #1
 8008670:	f43f aee9 	beq.w	8008446 <_printf_float+0xba>
 8008674:	f104 031a 	add.w	r3, r4, #26
 8008678:	f04f 0b00 	mov.w	fp, #0
 800867c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008680:	9306      	str	r3, [sp, #24]
 8008682:	e015      	b.n	80086b0 <_printf_float+0x324>
 8008684:	7fefffff 	.word	0x7fefffff
 8008688:	0800b728 	.word	0x0800b728
 800868c:	0800b724 	.word	0x0800b724
 8008690:	0800b730 	.word	0x0800b730
 8008694:	0800b72c 	.word	0x0800b72c
 8008698:	0800b734 	.word	0x0800b734
 800869c:	2301      	movs	r3, #1
 800869e:	9a06      	ldr	r2, [sp, #24]
 80086a0:	4631      	mov	r1, r6
 80086a2:	4628      	mov	r0, r5
 80086a4:	47b8      	blx	r7
 80086a6:	3001      	adds	r0, #1
 80086a8:	f43f aecd 	beq.w	8008446 <_printf_float+0xba>
 80086ac:	f10b 0b01 	add.w	fp, fp, #1
 80086b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80086b4:	ebaa 0309 	sub.w	r3, sl, r9
 80086b8:	455b      	cmp	r3, fp
 80086ba:	dcef      	bgt.n	800869c <_printf_float+0x310>
 80086bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086c0:	429a      	cmp	r2, r3
 80086c2:	44d0      	add	r8, sl
 80086c4:	db15      	blt.n	80086f2 <_printf_float+0x366>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	07da      	lsls	r2, r3, #31
 80086ca:	d412      	bmi.n	80086f2 <_printf_float+0x366>
 80086cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086d0:	eba3 020a 	sub.w	r2, r3, sl
 80086d4:	eba3 0a01 	sub.w	sl, r3, r1
 80086d8:	4592      	cmp	sl, r2
 80086da:	bfa8      	it	ge
 80086dc:	4692      	movge	sl, r2
 80086de:	f1ba 0f00 	cmp.w	sl, #0
 80086e2:	dc0e      	bgt.n	8008702 <_printf_float+0x376>
 80086e4:	f04f 0800 	mov.w	r8, #0
 80086e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086ec:	f104 091a 	add.w	r9, r4, #26
 80086f0:	e019      	b.n	8008726 <_printf_float+0x39a>
 80086f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086f6:	4631      	mov	r1, r6
 80086f8:	4628      	mov	r0, r5
 80086fa:	47b8      	blx	r7
 80086fc:	3001      	adds	r0, #1
 80086fe:	d1e5      	bne.n	80086cc <_printf_float+0x340>
 8008700:	e6a1      	b.n	8008446 <_printf_float+0xba>
 8008702:	4653      	mov	r3, sl
 8008704:	4642      	mov	r2, r8
 8008706:	4631      	mov	r1, r6
 8008708:	4628      	mov	r0, r5
 800870a:	47b8      	blx	r7
 800870c:	3001      	adds	r0, #1
 800870e:	d1e9      	bne.n	80086e4 <_printf_float+0x358>
 8008710:	e699      	b.n	8008446 <_printf_float+0xba>
 8008712:	2301      	movs	r3, #1
 8008714:	464a      	mov	r2, r9
 8008716:	4631      	mov	r1, r6
 8008718:	4628      	mov	r0, r5
 800871a:	47b8      	blx	r7
 800871c:	3001      	adds	r0, #1
 800871e:	f43f ae92 	beq.w	8008446 <_printf_float+0xba>
 8008722:	f108 0801 	add.w	r8, r8, #1
 8008726:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800872a:	1a9b      	subs	r3, r3, r2
 800872c:	eba3 030a 	sub.w	r3, r3, sl
 8008730:	4543      	cmp	r3, r8
 8008732:	dcee      	bgt.n	8008712 <_printf_float+0x386>
 8008734:	e74a      	b.n	80085cc <_printf_float+0x240>
 8008736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008738:	2a01      	cmp	r2, #1
 800873a:	dc01      	bgt.n	8008740 <_printf_float+0x3b4>
 800873c:	07db      	lsls	r3, r3, #31
 800873e:	d53a      	bpl.n	80087b6 <_printf_float+0x42a>
 8008740:	2301      	movs	r3, #1
 8008742:	4642      	mov	r2, r8
 8008744:	4631      	mov	r1, r6
 8008746:	4628      	mov	r0, r5
 8008748:	47b8      	blx	r7
 800874a:	3001      	adds	r0, #1
 800874c:	f43f ae7b 	beq.w	8008446 <_printf_float+0xba>
 8008750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008754:	4631      	mov	r1, r6
 8008756:	4628      	mov	r0, r5
 8008758:	47b8      	blx	r7
 800875a:	3001      	adds	r0, #1
 800875c:	f108 0801 	add.w	r8, r8, #1
 8008760:	f43f ae71 	beq.w	8008446 <_printf_float+0xba>
 8008764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008766:	2200      	movs	r2, #0
 8008768:	f103 3aff 	add.w	sl, r3, #4294967295
 800876c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008770:	2300      	movs	r3, #0
 8008772:	f7f8 f9a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008776:	b9c8      	cbnz	r0, 80087ac <_printf_float+0x420>
 8008778:	4653      	mov	r3, sl
 800877a:	4642      	mov	r2, r8
 800877c:	4631      	mov	r1, r6
 800877e:	4628      	mov	r0, r5
 8008780:	47b8      	blx	r7
 8008782:	3001      	adds	r0, #1
 8008784:	d10e      	bne.n	80087a4 <_printf_float+0x418>
 8008786:	e65e      	b.n	8008446 <_printf_float+0xba>
 8008788:	2301      	movs	r3, #1
 800878a:	4652      	mov	r2, sl
 800878c:	4631      	mov	r1, r6
 800878e:	4628      	mov	r0, r5
 8008790:	47b8      	blx	r7
 8008792:	3001      	adds	r0, #1
 8008794:	f43f ae57 	beq.w	8008446 <_printf_float+0xba>
 8008798:	f108 0801 	add.w	r8, r8, #1
 800879c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800879e:	3b01      	subs	r3, #1
 80087a0:	4543      	cmp	r3, r8
 80087a2:	dcf1      	bgt.n	8008788 <_printf_float+0x3fc>
 80087a4:	464b      	mov	r3, r9
 80087a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087aa:	e6de      	b.n	800856a <_printf_float+0x1de>
 80087ac:	f04f 0800 	mov.w	r8, #0
 80087b0:	f104 0a1a 	add.w	sl, r4, #26
 80087b4:	e7f2      	b.n	800879c <_printf_float+0x410>
 80087b6:	2301      	movs	r3, #1
 80087b8:	e7df      	b.n	800877a <_printf_float+0x3ee>
 80087ba:	2301      	movs	r3, #1
 80087bc:	464a      	mov	r2, r9
 80087be:	4631      	mov	r1, r6
 80087c0:	4628      	mov	r0, r5
 80087c2:	47b8      	blx	r7
 80087c4:	3001      	adds	r0, #1
 80087c6:	f43f ae3e 	beq.w	8008446 <_printf_float+0xba>
 80087ca:	f108 0801 	add.w	r8, r8, #1
 80087ce:	68e3      	ldr	r3, [r4, #12]
 80087d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087d2:	1a9b      	subs	r3, r3, r2
 80087d4:	4543      	cmp	r3, r8
 80087d6:	dcf0      	bgt.n	80087ba <_printf_float+0x42e>
 80087d8:	e6fc      	b.n	80085d4 <_printf_float+0x248>
 80087da:	f04f 0800 	mov.w	r8, #0
 80087de:	f104 0919 	add.w	r9, r4, #25
 80087e2:	e7f4      	b.n	80087ce <_printf_float+0x442>
 80087e4:	2900      	cmp	r1, #0
 80087e6:	f43f ae8b 	beq.w	8008500 <_printf_float+0x174>
 80087ea:	2300      	movs	r3, #0
 80087ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80087f0:	ab09      	add	r3, sp, #36	; 0x24
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	ec49 8b10 	vmov	d0, r8, r9
 80087f8:	6022      	str	r2, [r4, #0]
 80087fa:	f8cd a004 	str.w	sl, [sp, #4]
 80087fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008802:	4628      	mov	r0, r5
 8008804:	f7ff fd2e 	bl	8008264 <__cvt>
 8008808:	4680      	mov	r8, r0
 800880a:	e648      	b.n	800849e <_printf_float+0x112>

0800880c <_printf_common>:
 800880c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008810:	4691      	mov	r9, r2
 8008812:	461f      	mov	r7, r3
 8008814:	688a      	ldr	r2, [r1, #8]
 8008816:	690b      	ldr	r3, [r1, #16]
 8008818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800881c:	4293      	cmp	r3, r2
 800881e:	bfb8      	it	lt
 8008820:	4613      	movlt	r3, r2
 8008822:	f8c9 3000 	str.w	r3, [r9]
 8008826:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800882a:	4606      	mov	r6, r0
 800882c:	460c      	mov	r4, r1
 800882e:	b112      	cbz	r2, 8008836 <_printf_common+0x2a>
 8008830:	3301      	adds	r3, #1
 8008832:	f8c9 3000 	str.w	r3, [r9]
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	0699      	lsls	r1, r3, #26
 800883a:	bf42      	ittt	mi
 800883c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008840:	3302      	addmi	r3, #2
 8008842:	f8c9 3000 	strmi.w	r3, [r9]
 8008846:	6825      	ldr	r5, [r4, #0]
 8008848:	f015 0506 	ands.w	r5, r5, #6
 800884c:	d107      	bne.n	800885e <_printf_common+0x52>
 800884e:	f104 0a19 	add.w	sl, r4, #25
 8008852:	68e3      	ldr	r3, [r4, #12]
 8008854:	f8d9 2000 	ldr.w	r2, [r9]
 8008858:	1a9b      	subs	r3, r3, r2
 800885a:	42ab      	cmp	r3, r5
 800885c:	dc28      	bgt.n	80088b0 <_printf_common+0xa4>
 800885e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008862:	6822      	ldr	r2, [r4, #0]
 8008864:	3300      	adds	r3, #0
 8008866:	bf18      	it	ne
 8008868:	2301      	movne	r3, #1
 800886a:	0692      	lsls	r2, r2, #26
 800886c:	d42d      	bmi.n	80088ca <_printf_common+0xbe>
 800886e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008872:	4639      	mov	r1, r7
 8008874:	4630      	mov	r0, r6
 8008876:	47c0      	blx	r8
 8008878:	3001      	adds	r0, #1
 800887a:	d020      	beq.n	80088be <_printf_common+0xb2>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	68e5      	ldr	r5, [r4, #12]
 8008880:	f8d9 2000 	ldr.w	r2, [r9]
 8008884:	f003 0306 	and.w	r3, r3, #6
 8008888:	2b04      	cmp	r3, #4
 800888a:	bf08      	it	eq
 800888c:	1aad      	subeq	r5, r5, r2
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	6922      	ldr	r2, [r4, #16]
 8008892:	bf0c      	ite	eq
 8008894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008898:	2500      	movne	r5, #0
 800889a:	4293      	cmp	r3, r2
 800889c:	bfc4      	itt	gt
 800889e:	1a9b      	subgt	r3, r3, r2
 80088a0:	18ed      	addgt	r5, r5, r3
 80088a2:	f04f 0900 	mov.w	r9, #0
 80088a6:	341a      	adds	r4, #26
 80088a8:	454d      	cmp	r5, r9
 80088aa:	d11a      	bne.n	80088e2 <_printf_common+0xd6>
 80088ac:	2000      	movs	r0, #0
 80088ae:	e008      	b.n	80088c2 <_printf_common+0xb6>
 80088b0:	2301      	movs	r3, #1
 80088b2:	4652      	mov	r2, sl
 80088b4:	4639      	mov	r1, r7
 80088b6:	4630      	mov	r0, r6
 80088b8:	47c0      	blx	r8
 80088ba:	3001      	adds	r0, #1
 80088bc:	d103      	bne.n	80088c6 <_printf_common+0xba>
 80088be:	f04f 30ff 	mov.w	r0, #4294967295
 80088c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c6:	3501      	adds	r5, #1
 80088c8:	e7c3      	b.n	8008852 <_printf_common+0x46>
 80088ca:	18e1      	adds	r1, r4, r3
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	2030      	movs	r0, #48	; 0x30
 80088d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088d4:	4422      	add	r2, r4
 80088d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088de:	3302      	adds	r3, #2
 80088e0:	e7c5      	b.n	800886e <_printf_common+0x62>
 80088e2:	2301      	movs	r3, #1
 80088e4:	4622      	mov	r2, r4
 80088e6:	4639      	mov	r1, r7
 80088e8:	4630      	mov	r0, r6
 80088ea:	47c0      	blx	r8
 80088ec:	3001      	adds	r0, #1
 80088ee:	d0e6      	beq.n	80088be <_printf_common+0xb2>
 80088f0:	f109 0901 	add.w	r9, r9, #1
 80088f4:	e7d8      	b.n	80088a8 <_printf_common+0x9c>
	...

080088f8 <_printf_i>:
 80088f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008900:	460c      	mov	r4, r1
 8008902:	7e09      	ldrb	r1, [r1, #24]
 8008904:	b085      	sub	sp, #20
 8008906:	296e      	cmp	r1, #110	; 0x6e
 8008908:	4617      	mov	r7, r2
 800890a:	4606      	mov	r6, r0
 800890c:	4698      	mov	r8, r3
 800890e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008910:	f000 80b3 	beq.w	8008a7a <_printf_i+0x182>
 8008914:	d822      	bhi.n	800895c <_printf_i+0x64>
 8008916:	2963      	cmp	r1, #99	; 0x63
 8008918:	d036      	beq.n	8008988 <_printf_i+0x90>
 800891a:	d80a      	bhi.n	8008932 <_printf_i+0x3a>
 800891c:	2900      	cmp	r1, #0
 800891e:	f000 80b9 	beq.w	8008a94 <_printf_i+0x19c>
 8008922:	2958      	cmp	r1, #88	; 0x58
 8008924:	f000 8083 	beq.w	8008a2e <_printf_i+0x136>
 8008928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800892c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008930:	e032      	b.n	8008998 <_printf_i+0xa0>
 8008932:	2964      	cmp	r1, #100	; 0x64
 8008934:	d001      	beq.n	800893a <_printf_i+0x42>
 8008936:	2969      	cmp	r1, #105	; 0x69
 8008938:	d1f6      	bne.n	8008928 <_printf_i+0x30>
 800893a:	6820      	ldr	r0, [r4, #0]
 800893c:	6813      	ldr	r3, [r2, #0]
 800893e:	0605      	lsls	r5, r0, #24
 8008940:	f103 0104 	add.w	r1, r3, #4
 8008944:	d52a      	bpl.n	800899c <_printf_i+0xa4>
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6011      	str	r1, [r2, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	da03      	bge.n	8008956 <_printf_i+0x5e>
 800894e:	222d      	movs	r2, #45	; 0x2d
 8008950:	425b      	negs	r3, r3
 8008952:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008956:	486f      	ldr	r0, [pc, #444]	; (8008b14 <_printf_i+0x21c>)
 8008958:	220a      	movs	r2, #10
 800895a:	e039      	b.n	80089d0 <_printf_i+0xd8>
 800895c:	2973      	cmp	r1, #115	; 0x73
 800895e:	f000 809d 	beq.w	8008a9c <_printf_i+0x1a4>
 8008962:	d808      	bhi.n	8008976 <_printf_i+0x7e>
 8008964:	296f      	cmp	r1, #111	; 0x6f
 8008966:	d020      	beq.n	80089aa <_printf_i+0xb2>
 8008968:	2970      	cmp	r1, #112	; 0x70
 800896a:	d1dd      	bne.n	8008928 <_printf_i+0x30>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	f043 0320 	orr.w	r3, r3, #32
 8008972:	6023      	str	r3, [r4, #0]
 8008974:	e003      	b.n	800897e <_printf_i+0x86>
 8008976:	2975      	cmp	r1, #117	; 0x75
 8008978:	d017      	beq.n	80089aa <_printf_i+0xb2>
 800897a:	2978      	cmp	r1, #120	; 0x78
 800897c:	d1d4      	bne.n	8008928 <_printf_i+0x30>
 800897e:	2378      	movs	r3, #120	; 0x78
 8008980:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008984:	4864      	ldr	r0, [pc, #400]	; (8008b18 <_printf_i+0x220>)
 8008986:	e055      	b.n	8008a34 <_printf_i+0x13c>
 8008988:	6813      	ldr	r3, [r2, #0]
 800898a:	1d19      	adds	r1, r3, #4
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6011      	str	r1, [r2, #0]
 8008990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008998:	2301      	movs	r3, #1
 800899a:	e08c      	b.n	8008ab6 <_printf_i+0x1be>
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6011      	str	r1, [r2, #0]
 80089a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089a4:	bf18      	it	ne
 80089a6:	b21b      	sxthne	r3, r3
 80089a8:	e7cf      	b.n	800894a <_printf_i+0x52>
 80089aa:	6813      	ldr	r3, [r2, #0]
 80089ac:	6825      	ldr	r5, [r4, #0]
 80089ae:	1d18      	adds	r0, r3, #4
 80089b0:	6010      	str	r0, [r2, #0]
 80089b2:	0628      	lsls	r0, r5, #24
 80089b4:	d501      	bpl.n	80089ba <_printf_i+0xc2>
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	e002      	b.n	80089c0 <_printf_i+0xc8>
 80089ba:	0668      	lsls	r0, r5, #25
 80089bc:	d5fb      	bpl.n	80089b6 <_printf_i+0xbe>
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	4854      	ldr	r0, [pc, #336]	; (8008b14 <_printf_i+0x21c>)
 80089c2:	296f      	cmp	r1, #111	; 0x6f
 80089c4:	bf14      	ite	ne
 80089c6:	220a      	movne	r2, #10
 80089c8:	2208      	moveq	r2, #8
 80089ca:	2100      	movs	r1, #0
 80089cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089d0:	6865      	ldr	r5, [r4, #4]
 80089d2:	60a5      	str	r5, [r4, #8]
 80089d4:	2d00      	cmp	r5, #0
 80089d6:	f2c0 8095 	blt.w	8008b04 <_printf_i+0x20c>
 80089da:	6821      	ldr	r1, [r4, #0]
 80089dc:	f021 0104 	bic.w	r1, r1, #4
 80089e0:	6021      	str	r1, [r4, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d13d      	bne.n	8008a62 <_printf_i+0x16a>
 80089e6:	2d00      	cmp	r5, #0
 80089e8:	f040 808e 	bne.w	8008b08 <_printf_i+0x210>
 80089ec:	4665      	mov	r5, ip
 80089ee:	2a08      	cmp	r2, #8
 80089f0:	d10b      	bne.n	8008a0a <_printf_i+0x112>
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	07db      	lsls	r3, r3, #31
 80089f6:	d508      	bpl.n	8008a0a <_printf_i+0x112>
 80089f8:	6923      	ldr	r3, [r4, #16]
 80089fa:	6862      	ldr	r2, [r4, #4]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	bfde      	ittt	le
 8008a00:	2330      	movle	r3, #48	; 0x30
 8008a02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a0a:	ebac 0305 	sub.w	r3, ip, r5
 8008a0e:	6123      	str	r3, [r4, #16]
 8008a10:	f8cd 8000 	str.w	r8, [sp]
 8008a14:	463b      	mov	r3, r7
 8008a16:	aa03      	add	r2, sp, #12
 8008a18:	4621      	mov	r1, r4
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7ff fef6 	bl	800880c <_printf_common>
 8008a20:	3001      	adds	r0, #1
 8008a22:	d14d      	bne.n	8008ac0 <_printf_i+0x1c8>
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295
 8008a28:	b005      	add	sp, #20
 8008a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a2e:	4839      	ldr	r0, [pc, #228]	; (8008b14 <_printf_i+0x21c>)
 8008a30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008a34:	6813      	ldr	r3, [r2, #0]
 8008a36:	6821      	ldr	r1, [r4, #0]
 8008a38:	1d1d      	adds	r5, r3, #4
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6015      	str	r5, [r2, #0]
 8008a3e:	060a      	lsls	r2, r1, #24
 8008a40:	d50b      	bpl.n	8008a5a <_printf_i+0x162>
 8008a42:	07ca      	lsls	r2, r1, #31
 8008a44:	bf44      	itt	mi
 8008a46:	f041 0120 	orrmi.w	r1, r1, #32
 8008a4a:	6021      	strmi	r1, [r4, #0]
 8008a4c:	b91b      	cbnz	r3, 8008a56 <_printf_i+0x15e>
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	f022 0220 	bic.w	r2, r2, #32
 8008a54:	6022      	str	r2, [r4, #0]
 8008a56:	2210      	movs	r2, #16
 8008a58:	e7b7      	b.n	80089ca <_printf_i+0xd2>
 8008a5a:	064d      	lsls	r5, r1, #25
 8008a5c:	bf48      	it	mi
 8008a5e:	b29b      	uxthmi	r3, r3
 8008a60:	e7ef      	b.n	8008a42 <_printf_i+0x14a>
 8008a62:	4665      	mov	r5, ip
 8008a64:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a68:	fb02 3311 	mls	r3, r2, r1, r3
 8008a6c:	5cc3      	ldrb	r3, [r0, r3]
 8008a6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008a72:	460b      	mov	r3, r1
 8008a74:	2900      	cmp	r1, #0
 8008a76:	d1f5      	bne.n	8008a64 <_printf_i+0x16c>
 8008a78:	e7b9      	b.n	80089ee <_printf_i+0xf6>
 8008a7a:	6813      	ldr	r3, [r2, #0]
 8008a7c:	6825      	ldr	r5, [r4, #0]
 8008a7e:	6961      	ldr	r1, [r4, #20]
 8008a80:	1d18      	adds	r0, r3, #4
 8008a82:	6010      	str	r0, [r2, #0]
 8008a84:	0628      	lsls	r0, r5, #24
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	d501      	bpl.n	8008a8e <_printf_i+0x196>
 8008a8a:	6019      	str	r1, [r3, #0]
 8008a8c:	e002      	b.n	8008a94 <_printf_i+0x19c>
 8008a8e:	066a      	lsls	r2, r5, #25
 8008a90:	d5fb      	bpl.n	8008a8a <_printf_i+0x192>
 8008a92:	8019      	strh	r1, [r3, #0]
 8008a94:	2300      	movs	r3, #0
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	4665      	mov	r5, ip
 8008a9a:	e7b9      	b.n	8008a10 <_printf_i+0x118>
 8008a9c:	6813      	ldr	r3, [r2, #0]
 8008a9e:	1d19      	adds	r1, r3, #4
 8008aa0:	6011      	str	r1, [r2, #0]
 8008aa2:	681d      	ldr	r5, [r3, #0]
 8008aa4:	6862      	ldr	r2, [r4, #4]
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f7f7 fb99 	bl	80001e0 <memchr>
 8008aae:	b108      	cbz	r0, 8008ab4 <_printf_i+0x1bc>
 8008ab0:	1b40      	subs	r0, r0, r5
 8008ab2:	6060      	str	r0, [r4, #4]
 8008ab4:	6863      	ldr	r3, [r4, #4]
 8008ab6:	6123      	str	r3, [r4, #16]
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008abe:	e7a7      	b.n	8008a10 <_printf_i+0x118>
 8008ac0:	6923      	ldr	r3, [r4, #16]
 8008ac2:	462a      	mov	r2, r5
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	47c0      	blx	r8
 8008aca:	3001      	adds	r0, #1
 8008acc:	d0aa      	beq.n	8008a24 <_printf_i+0x12c>
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	079b      	lsls	r3, r3, #30
 8008ad2:	d413      	bmi.n	8008afc <_printf_i+0x204>
 8008ad4:	68e0      	ldr	r0, [r4, #12]
 8008ad6:	9b03      	ldr	r3, [sp, #12]
 8008ad8:	4298      	cmp	r0, r3
 8008ada:	bfb8      	it	lt
 8008adc:	4618      	movlt	r0, r3
 8008ade:	e7a3      	b.n	8008a28 <_printf_i+0x130>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	464a      	mov	r2, r9
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	47c0      	blx	r8
 8008aea:	3001      	adds	r0, #1
 8008aec:	d09a      	beq.n	8008a24 <_printf_i+0x12c>
 8008aee:	3501      	adds	r5, #1
 8008af0:	68e3      	ldr	r3, [r4, #12]
 8008af2:	9a03      	ldr	r2, [sp, #12]
 8008af4:	1a9b      	subs	r3, r3, r2
 8008af6:	42ab      	cmp	r3, r5
 8008af8:	dcf2      	bgt.n	8008ae0 <_printf_i+0x1e8>
 8008afa:	e7eb      	b.n	8008ad4 <_printf_i+0x1dc>
 8008afc:	2500      	movs	r5, #0
 8008afe:	f104 0919 	add.w	r9, r4, #25
 8008b02:	e7f5      	b.n	8008af0 <_printf_i+0x1f8>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1ac      	bne.n	8008a62 <_printf_i+0x16a>
 8008b08:	7803      	ldrb	r3, [r0, #0]
 8008b0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b12:	e76c      	b.n	80089ee <_printf_i+0xf6>
 8008b14:	0800b736 	.word	0x0800b736
 8008b18:	0800b747 	.word	0x0800b747

08008b1c <_sbrk_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4c06      	ldr	r4, [pc, #24]	; (8008b38 <_sbrk_r+0x1c>)
 8008b20:	2300      	movs	r3, #0
 8008b22:	4605      	mov	r5, r0
 8008b24:	4608      	mov	r0, r1
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	f7f9 f8ea 	bl	8001d00 <_sbrk>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <_sbrk_r+0x1a>
 8008b30:	6823      	ldr	r3, [r4, #0]
 8008b32:	b103      	cbz	r3, 8008b36 <_sbrk_r+0x1a>
 8008b34:	602b      	str	r3, [r5, #0]
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	20001cc0 	.word	0x20001cc0

08008b3c <sniprintf>:
 8008b3c:	b40c      	push	{r2, r3}
 8008b3e:	b530      	push	{r4, r5, lr}
 8008b40:	4b17      	ldr	r3, [pc, #92]	; (8008ba0 <sniprintf+0x64>)
 8008b42:	1e0c      	subs	r4, r1, #0
 8008b44:	b09d      	sub	sp, #116	; 0x74
 8008b46:	681d      	ldr	r5, [r3, #0]
 8008b48:	da08      	bge.n	8008b5c <sniprintf+0x20>
 8008b4a:	238b      	movs	r3, #139	; 0x8b
 8008b4c:	602b      	str	r3, [r5, #0]
 8008b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b52:	b01d      	add	sp, #116	; 0x74
 8008b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b58:	b002      	add	sp, #8
 8008b5a:	4770      	bx	lr
 8008b5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b64:	bf14      	ite	ne
 8008b66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b6a:	4623      	moveq	r3, r4
 8008b6c:	9304      	str	r3, [sp, #16]
 8008b6e:	9307      	str	r3, [sp, #28]
 8008b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b74:	9002      	str	r0, [sp, #8]
 8008b76:	9006      	str	r0, [sp, #24]
 8008b78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b7e:	ab21      	add	r3, sp, #132	; 0x84
 8008b80:	a902      	add	r1, sp, #8
 8008b82:	4628      	mov	r0, r5
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	f002 fc33 	bl	800b3f0 <_svfiprintf_r>
 8008b8a:	1c43      	adds	r3, r0, #1
 8008b8c:	bfbc      	itt	lt
 8008b8e:	238b      	movlt	r3, #139	; 0x8b
 8008b90:	602b      	strlt	r3, [r5, #0]
 8008b92:	2c00      	cmp	r4, #0
 8008b94:	d0dd      	beq.n	8008b52 <sniprintf+0x16>
 8008b96:	9b02      	ldr	r3, [sp, #8]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	701a      	strb	r2, [r3, #0]
 8008b9c:	e7d9      	b.n	8008b52 <sniprintf+0x16>
 8008b9e:	bf00      	nop
 8008ba0:	20000184 	.word	0x20000184

08008ba4 <sulp>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	460d      	mov	r5, r1
 8008baa:	ec45 4b10 	vmov	d0, r4, r5
 8008bae:	4616      	mov	r6, r2
 8008bb0:	f002 fa82 	bl	800b0b8 <__ulp>
 8008bb4:	ec51 0b10 	vmov	r0, r1, d0
 8008bb8:	b17e      	cbz	r6, 8008bda <sulp+0x36>
 8008bba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bbe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	dd09      	ble.n	8008bda <sulp+0x36>
 8008bc6:	051b      	lsls	r3, r3, #20
 8008bc8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008bcc:	2400      	movs	r4, #0
 8008bce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008bd2:	4622      	mov	r2, r4
 8008bd4:	462b      	mov	r3, r5
 8008bd6:	f7f7 fd0f 	bl	80005f8 <__aeabi_dmul>
 8008bda:	bd70      	pop	{r4, r5, r6, pc}
 8008bdc:	0000      	movs	r0, r0
	...

08008be0 <_strtod_l>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	461f      	mov	r7, r3
 8008be6:	b0a1      	sub	sp, #132	; 0x84
 8008be8:	2300      	movs	r3, #0
 8008bea:	4681      	mov	r9, r0
 8008bec:	4638      	mov	r0, r7
 8008bee:	460e      	mov	r6, r1
 8008bf0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bf2:	931c      	str	r3, [sp, #112]	; 0x70
 8008bf4:	f001 ff66 	bl	800aac4 <__localeconv_l>
 8008bf8:	4680      	mov	r8, r0
 8008bfa:	6800      	ldr	r0, [r0, #0]
 8008bfc:	f7f7 fae8 	bl	80001d0 <strlen>
 8008c00:	f04f 0a00 	mov.w	sl, #0
 8008c04:	4604      	mov	r4, r0
 8008c06:	f04f 0b00 	mov.w	fp, #0
 8008c0a:	961b      	str	r6, [sp, #108]	; 0x6c
 8008c0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c0e:	781a      	ldrb	r2, [r3, #0]
 8008c10:	2a0d      	cmp	r2, #13
 8008c12:	d832      	bhi.n	8008c7a <_strtod_l+0x9a>
 8008c14:	2a09      	cmp	r2, #9
 8008c16:	d236      	bcs.n	8008c86 <_strtod_l+0xa6>
 8008c18:	2a00      	cmp	r2, #0
 8008c1a:	d03e      	beq.n	8008c9a <_strtod_l+0xba>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	930d      	str	r3, [sp, #52]	; 0x34
 8008c20:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008c22:	782b      	ldrb	r3, [r5, #0]
 8008c24:	2b30      	cmp	r3, #48	; 0x30
 8008c26:	f040 80ac 	bne.w	8008d82 <_strtod_l+0x1a2>
 8008c2a:	786b      	ldrb	r3, [r5, #1]
 8008c2c:	2b58      	cmp	r3, #88	; 0x58
 8008c2e:	d001      	beq.n	8008c34 <_strtod_l+0x54>
 8008c30:	2b78      	cmp	r3, #120	; 0x78
 8008c32:	d167      	bne.n	8008d04 <_strtod_l+0x124>
 8008c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	ab1c      	add	r3, sp, #112	; 0x70
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	9702      	str	r7, [sp, #8]
 8008c3e:	ab1d      	add	r3, sp, #116	; 0x74
 8008c40:	4a88      	ldr	r2, [pc, #544]	; (8008e64 <_strtod_l+0x284>)
 8008c42:	a91b      	add	r1, sp, #108	; 0x6c
 8008c44:	4648      	mov	r0, r9
 8008c46:	f001 fc66 	bl	800a516 <__gethex>
 8008c4a:	f010 0407 	ands.w	r4, r0, #7
 8008c4e:	4606      	mov	r6, r0
 8008c50:	d005      	beq.n	8008c5e <_strtod_l+0x7e>
 8008c52:	2c06      	cmp	r4, #6
 8008c54:	d12b      	bne.n	8008cae <_strtod_l+0xce>
 8008c56:	3501      	adds	r5, #1
 8008c58:	2300      	movs	r3, #0
 8008c5a:	951b      	str	r5, [sp, #108]	; 0x6c
 8008c5c:	930d      	str	r3, [sp, #52]	; 0x34
 8008c5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f040 859a 	bne.w	800979a <_strtod_l+0xbba>
 8008c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c68:	b1e3      	cbz	r3, 8008ca4 <_strtod_l+0xc4>
 8008c6a:	4652      	mov	r2, sl
 8008c6c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008c70:	ec43 2b10 	vmov	d0, r2, r3
 8008c74:	b021      	add	sp, #132	; 0x84
 8008c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7a:	2a2b      	cmp	r2, #43	; 0x2b
 8008c7c:	d015      	beq.n	8008caa <_strtod_l+0xca>
 8008c7e:	2a2d      	cmp	r2, #45	; 0x2d
 8008c80:	d004      	beq.n	8008c8c <_strtod_l+0xac>
 8008c82:	2a20      	cmp	r2, #32
 8008c84:	d1ca      	bne.n	8008c1c <_strtod_l+0x3c>
 8008c86:	3301      	adds	r3, #1
 8008c88:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c8a:	e7bf      	b.n	8008c0c <_strtod_l+0x2c>
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	920d      	str	r2, [sp, #52]	; 0x34
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c94:	785b      	ldrb	r3, [r3, #1]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1c2      	bne.n	8008c20 <_strtod_l+0x40>
 8008c9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c9c:	961b      	str	r6, [sp, #108]	; 0x6c
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f040 8579 	bne.w	8009796 <_strtod_l+0xbb6>
 8008ca4:	4652      	mov	r2, sl
 8008ca6:	465b      	mov	r3, fp
 8008ca8:	e7e2      	b.n	8008c70 <_strtod_l+0x90>
 8008caa:	2200      	movs	r2, #0
 8008cac:	e7ef      	b.n	8008c8e <_strtod_l+0xae>
 8008cae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008cb0:	b13a      	cbz	r2, 8008cc2 <_strtod_l+0xe2>
 8008cb2:	2135      	movs	r1, #53	; 0x35
 8008cb4:	a81e      	add	r0, sp, #120	; 0x78
 8008cb6:	f002 faf7 	bl	800b2a8 <__copybits>
 8008cba:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008cbc:	4648      	mov	r0, r9
 8008cbe:	f001 ff64 	bl	800ab8a <_Bfree>
 8008cc2:	3c01      	subs	r4, #1
 8008cc4:	2c04      	cmp	r4, #4
 8008cc6:	d806      	bhi.n	8008cd6 <_strtod_l+0xf6>
 8008cc8:	e8df f004 	tbb	[pc, r4]
 8008ccc:	1714030a 	.word	0x1714030a
 8008cd0:	0a          	.byte	0x0a
 8008cd1:	00          	.byte	0x00
 8008cd2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008cd6:	0730      	lsls	r0, r6, #28
 8008cd8:	d5c1      	bpl.n	8008c5e <_strtod_l+0x7e>
 8008cda:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008cde:	e7be      	b.n	8008c5e <_strtod_l+0x7e>
 8008ce0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008ce4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008ce6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008cea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008cee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008cf2:	e7f0      	b.n	8008cd6 <_strtod_l+0xf6>
 8008cf4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008e68 <_strtod_l+0x288>
 8008cf8:	e7ed      	b.n	8008cd6 <_strtod_l+0xf6>
 8008cfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008cfe:	f04f 3aff 	mov.w	sl, #4294967295
 8008d02:	e7e8      	b.n	8008cd6 <_strtod_l+0xf6>
 8008d04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	921b      	str	r2, [sp, #108]	; 0x6c
 8008d0a:	785b      	ldrb	r3, [r3, #1]
 8008d0c:	2b30      	cmp	r3, #48	; 0x30
 8008d0e:	d0f9      	beq.n	8008d04 <_strtod_l+0x124>
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0a4      	beq.n	8008c5e <_strtod_l+0x7e>
 8008d14:	2301      	movs	r3, #1
 8008d16:	2500      	movs	r5, #0
 8008d18:	9306      	str	r3, [sp, #24]
 8008d1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d1c:	9308      	str	r3, [sp, #32]
 8008d1e:	9507      	str	r5, [sp, #28]
 8008d20:	9505      	str	r5, [sp, #20]
 8008d22:	220a      	movs	r2, #10
 8008d24:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008d26:	7807      	ldrb	r7, [r0, #0]
 8008d28:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008d2c:	b2d9      	uxtb	r1, r3
 8008d2e:	2909      	cmp	r1, #9
 8008d30:	d929      	bls.n	8008d86 <_strtod_l+0x1a6>
 8008d32:	4622      	mov	r2, r4
 8008d34:	f8d8 1000 	ldr.w	r1, [r8]
 8008d38:	f002 fc52 	bl	800b5e0 <strncmp>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d031      	beq.n	8008da4 <_strtod_l+0x1c4>
 8008d40:	2000      	movs	r0, #0
 8008d42:	9c05      	ldr	r4, [sp, #20]
 8008d44:	9004      	str	r0, [sp, #16]
 8008d46:	463b      	mov	r3, r7
 8008d48:	4602      	mov	r2, r0
 8008d4a:	2b65      	cmp	r3, #101	; 0x65
 8008d4c:	d001      	beq.n	8008d52 <_strtod_l+0x172>
 8008d4e:	2b45      	cmp	r3, #69	; 0x45
 8008d50:	d114      	bne.n	8008d7c <_strtod_l+0x19c>
 8008d52:	b924      	cbnz	r4, 8008d5e <_strtod_l+0x17e>
 8008d54:	b910      	cbnz	r0, 8008d5c <_strtod_l+0x17c>
 8008d56:	9b06      	ldr	r3, [sp, #24]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d09e      	beq.n	8008c9a <_strtod_l+0xba>
 8008d5c:	2400      	movs	r4, #0
 8008d5e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008d60:	1c73      	adds	r3, r6, #1
 8008d62:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d64:	7873      	ldrb	r3, [r6, #1]
 8008d66:	2b2b      	cmp	r3, #43	; 0x2b
 8008d68:	d078      	beq.n	8008e5c <_strtod_l+0x27c>
 8008d6a:	2b2d      	cmp	r3, #45	; 0x2d
 8008d6c:	d070      	beq.n	8008e50 <_strtod_l+0x270>
 8008d6e:	f04f 0c00 	mov.w	ip, #0
 8008d72:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008d76:	2f09      	cmp	r7, #9
 8008d78:	d97c      	bls.n	8008e74 <_strtod_l+0x294>
 8008d7a:	961b      	str	r6, [sp, #108]	; 0x6c
 8008d7c:	f04f 0e00 	mov.w	lr, #0
 8008d80:	e09a      	b.n	8008eb8 <_strtod_l+0x2d8>
 8008d82:	2300      	movs	r3, #0
 8008d84:	e7c7      	b.n	8008d16 <_strtod_l+0x136>
 8008d86:	9905      	ldr	r1, [sp, #20]
 8008d88:	2908      	cmp	r1, #8
 8008d8a:	bfdd      	ittte	le
 8008d8c:	9907      	ldrle	r1, [sp, #28]
 8008d8e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d92:	9307      	strle	r3, [sp, #28]
 8008d94:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008d98:	9b05      	ldr	r3, [sp, #20]
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	9305      	str	r3, [sp, #20]
 8008da0:	901b      	str	r0, [sp, #108]	; 0x6c
 8008da2:	e7bf      	b.n	8008d24 <_strtod_l+0x144>
 8008da4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008da6:	191a      	adds	r2, r3, r4
 8008da8:	921b      	str	r2, [sp, #108]	; 0x6c
 8008daa:	9a05      	ldr	r2, [sp, #20]
 8008dac:	5d1b      	ldrb	r3, [r3, r4]
 8008dae:	2a00      	cmp	r2, #0
 8008db0:	d037      	beq.n	8008e22 <_strtod_l+0x242>
 8008db2:	9c05      	ldr	r4, [sp, #20]
 8008db4:	4602      	mov	r2, r0
 8008db6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008dba:	2909      	cmp	r1, #9
 8008dbc:	d913      	bls.n	8008de6 <_strtod_l+0x206>
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	9104      	str	r1, [sp, #16]
 8008dc2:	e7c2      	b.n	8008d4a <_strtod_l+0x16a>
 8008dc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	921b      	str	r2, [sp, #108]	; 0x6c
 8008dca:	785b      	ldrb	r3, [r3, #1]
 8008dcc:	3001      	adds	r0, #1
 8008dce:	2b30      	cmp	r3, #48	; 0x30
 8008dd0:	d0f8      	beq.n	8008dc4 <_strtod_l+0x1e4>
 8008dd2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008dd6:	2a08      	cmp	r2, #8
 8008dd8:	f200 84e4 	bhi.w	80097a4 <_strtod_l+0xbc4>
 8008ddc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008dde:	9208      	str	r2, [sp, #32]
 8008de0:	4602      	mov	r2, r0
 8008de2:	2000      	movs	r0, #0
 8008de4:	4604      	mov	r4, r0
 8008de6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008dea:	f100 0101 	add.w	r1, r0, #1
 8008dee:	d012      	beq.n	8008e16 <_strtod_l+0x236>
 8008df0:	440a      	add	r2, r1
 8008df2:	eb00 0c04 	add.w	ip, r0, r4
 8008df6:	4621      	mov	r1, r4
 8008df8:	270a      	movs	r7, #10
 8008dfa:	458c      	cmp	ip, r1
 8008dfc:	d113      	bne.n	8008e26 <_strtod_l+0x246>
 8008dfe:	1821      	adds	r1, r4, r0
 8008e00:	2908      	cmp	r1, #8
 8008e02:	f104 0401 	add.w	r4, r4, #1
 8008e06:	4404      	add	r4, r0
 8008e08:	dc19      	bgt.n	8008e3e <_strtod_l+0x25e>
 8008e0a:	9b07      	ldr	r3, [sp, #28]
 8008e0c:	210a      	movs	r1, #10
 8008e0e:	fb01 e303 	mla	r3, r1, r3, lr
 8008e12:	9307      	str	r3, [sp, #28]
 8008e14:	2100      	movs	r1, #0
 8008e16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e18:	1c58      	adds	r0, r3, #1
 8008e1a:	901b      	str	r0, [sp, #108]	; 0x6c
 8008e1c:	785b      	ldrb	r3, [r3, #1]
 8008e1e:	4608      	mov	r0, r1
 8008e20:	e7c9      	b.n	8008db6 <_strtod_l+0x1d6>
 8008e22:	9805      	ldr	r0, [sp, #20]
 8008e24:	e7d3      	b.n	8008dce <_strtod_l+0x1ee>
 8008e26:	2908      	cmp	r1, #8
 8008e28:	f101 0101 	add.w	r1, r1, #1
 8008e2c:	dc03      	bgt.n	8008e36 <_strtod_l+0x256>
 8008e2e:	9b07      	ldr	r3, [sp, #28]
 8008e30:	437b      	muls	r3, r7
 8008e32:	9307      	str	r3, [sp, #28]
 8008e34:	e7e1      	b.n	8008dfa <_strtod_l+0x21a>
 8008e36:	2910      	cmp	r1, #16
 8008e38:	bfd8      	it	le
 8008e3a:	437d      	mulle	r5, r7
 8008e3c:	e7dd      	b.n	8008dfa <_strtod_l+0x21a>
 8008e3e:	2c10      	cmp	r4, #16
 8008e40:	bfdc      	itt	le
 8008e42:	210a      	movle	r1, #10
 8008e44:	fb01 e505 	mlale	r5, r1, r5, lr
 8008e48:	e7e4      	b.n	8008e14 <_strtod_l+0x234>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	9304      	str	r3, [sp, #16]
 8008e4e:	e781      	b.n	8008d54 <_strtod_l+0x174>
 8008e50:	f04f 0c01 	mov.w	ip, #1
 8008e54:	1cb3      	adds	r3, r6, #2
 8008e56:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e58:	78b3      	ldrb	r3, [r6, #2]
 8008e5a:	e78a      	b.n	8008d72 <_strtod_l+0x192>
 8008e5c:	f04f 0c00 	mov.w	ip, #0
 8008e60:	e7f8      	b.n	8008e54 <_strtod_l+0x274>
 8008e62:	bf00      	nop
 8008e64:	0800b758 	.word	0x0800b758
 8008e68:	7ff00000 	.word	0x7ff00000
 8008e6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e6e:	1c5f      	adds	r7, r3, #1
 8008e70:	971b      	str	r7, [sp, #108]	; 0x6c
 8008e72:	785b      	ldrb	r3, [r3, #1]
 8008e74:	2b30      	cmp	r3, #48	; 0x30
 8008e76:	d0f9      	beq.n	8008e6c <_strtod_l+0x28c>
 8008e78:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008e7c:	2f08      	cmp	r7, #8
 8008e7e:	f63f af7d 	bhi.w	8008d7c <_strtod_l+0x19c>
 8008e82:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008e86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e88:	930a      	str	r3, [sp, #40]	; 0x28
 8008e8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e8c:	1c5f      	adds	r7, r3, #1
 8008e8e:	971b      	str	r7, [sp, #108]	; 0x6c
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008e96:	f1b8 0f09 	cmp.w	r8, #9
 8008e9a:	d937      	bls.n	8008f0c <_strtod_l+0x32c>
 8008e9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e9e:	1a7f      	subs	r7, r7, r1
 8008ea0:	2f08      	cmp	r7, #8
 8008ea2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008ea6:	dc37      	bgt.n	8008f18 <_strtod_l+0x338>
 8008ea8:	45be      	cmp	lr, r7
 8008eaa:	bfa8      	it	ge
 8008eac:	46be      	movge	lr, r7
 8008eae:	f1bc 0f00 	cmp.w	ip, #0
 8008eb2:	d001      	beq.n	8008eb8 <_strtod_l+0x2d8>
 8008eb4:	f1ce 0e00 	rsb	lr, lr, #0
 8008eb8:	2c00      	cmp	r4, #0
 8008eba:	d151      	bne.n	8008f60 <_strtod_l+0x380>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	f47f aece 	bne.w	8008c5e <_strtod_l+0x7e>
 8008ec2:	9a06      	ldr	r2, [sp, #24]
 8008ec4:	2a00      	cmp	r2, #0
 8008ec6:	f47f aeca 	bne.w	8008c5e <_strtod_l+0x7e>
 8008eca:	9a04      	ldr	r2, [sp, #16]
 8008ecc:	2a00      	cmp	r2, #0
 8008ece:	f47f aee4 	bne.w	8008c9a <_strtod_l+0xba>
 8008ed2:	2b4e      	cmp	r3, #78	; 0x4e
 8008ed4:	d027      	beq.n	8008f26 <_strtod_l+0x346>
 8008ed6:	dc21      	bgt.n	8008f1c <_strtod_l+0x33c>
 8008ed8:	2b49      	cmp	r3, #73	; 0x49
 8008eda:	f47f aede 	bne.w	8008c9a <_strtod_l+0xba>
 8008ede:	49a0      	ldr	r1, [pc, #640]	; (8009160 <_strtod_l+0x580>)
 8008ee0:	a81b      	add	r0, sp, #108	; 0x6c
 8008ee2:	f001 fd4b 	bl	800a97c <__match>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f43f aed7 	beq.w	8008c9a <_strtod_l+0xba>
 8008eec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008eee:	499d      	ldr	r1, [pc, #628]	; (8009164 <_strtod_l+0x584>)
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	a81b      	add	r0, sp, #108	; 0x6c
 8008ef4:	931b      	str	r3, [sp, #108]	; 0x6c
 8008ef6:	f001 fd41 	bl	800a97c <__match>
 8008efa:	b910      	cbnz	r0, 8008f02 <_strtod_l+0x322>
 8008efc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008efe:	3301      	adds	r3, #1
 8008f00:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f02:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009178 <_strtod_l+0x598>
 8008f06:	f04f 0a00 	mov.w	sl, #0
 8008f0a:	e6a8      	b.n	8008c5e <_strtod_l+0x7e>
 8008f0c:	210a      	movs	r1, #10
 8008f0e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008f12:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008f16:	e7b8      	b.n	8008e8a <_strtod_l+0x2aa>
 8008f18:	46be      	mov	lr, r7
 8008f1a:	e7c8      	b.n	8008eae <_strtod_l+0x2ce>
 8008f1c:	2b69      	cmp	r3, #105	; 0x69
 8008f1e:	d0de      	beq.n	8008ede <_strtod_l+0x2fe>
 8008f20:	2b6e      	cmp	r3, #110	; 0x6e
 8008f22:	f47f aeba 	bne.w	8008c9a <_strtod_l+0xba>
 8008f26:	4990      	ldr	r1, [pc, #576]	; (8009168 <_strtod_l+0x588>)
 8008f28:	a81b      	add	r0, sp, #108	; 0x6c
 8008f2a:	f001 fd27 	bl	800a97c <__match>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f43f aeb3 	beq.w	8008c9a <_strtod_l+0xba>
 8008f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2b28      	cmp	r3, #40	; 0x28
 8008f3a:	d10e      	bne.n	8008f5a <_strtod_l+0x37a>
 8008f3c:	aa1e      	add	r2, sp, #120	; 0x78
 8008f3e:	498b      	ldr	r1, [pc, #556]	; (800916c <_strtod_l+0x58c>)
 8008f40:	a81b      	add	r0, sp, #108	; 0x6c
 8008f42:	f001 fd2f 	bl	800a9a4 <__hexnan>
 8008f46:	2805      	cmp	r0, #5
 8008f48:	d107      	bne.n	8008f5a <_strtod_l+0x37a>
 8008f4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f4c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008f50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008f54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008f58:	e681      	b.n	8008c5e <_strtod_l+0x7e>
 8008f5a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009180 <_strtod_l+0x5a0>
 8008f5e:	e7d2      	b.n	8008f06 <_strtod_l+0x326>
 8008f60:	ebae 0302 	sub.w	r3, lr, r2
 8008f64:	9306      	str	r3, [sp, #24]
 8008f66:	9b05      	ldr	r3, [sp, #20]
 8008f68:	9807      	ldr	r0, [sp, #28]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	bf08      	it	eq
 8008f6e:	4623      	moveq	r3, r4
 8008f70:	2c10      	cmp	r4, #16
 8008f72:	9305      	str	r3, [sp, #20]
 8008f74:	46a0      	mov	r8, r4
 8008f76:	bfa8      	it	ge
 8008f78:	f04f 0810 	movge.w	r8, #16
 8008f7c:	f7f7 fac2 	bl	8000504 <__aeabi_ui2d>
 8008f80:	2c09      	cmp	r4, #9
 8008f82:	4682      	mov	sl, r0
 8008f84:	468b      	mov	fp, r1
 8008f86:	dc13      	bgt.n	8008fb0 <_strtod_l+0x3d0>
 8008f88:	9b06      	ldr	r3, [sp, #24]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f43f ae67 	beq.w	8008c5e <_strtod_l+0x7e>
 8008f90:	9b06      	ldr	r3, [sp, #24]
 8008f92:	dd7a      	ble.n	800908a <_strtod_l+0x4aa>
 8008f94:	2b16      	cmp	r3, #22
 8008f96:	dc61      	bgt.n	800905c <_strtod_l+0x47c>
 8008f98:	4a75      	ldr	r2, [pc, #468]	; (8009170 <_strtod_l+0x590>)
 8008f9a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008f9e:	e9de 0100 	ldrd	r0, r1, [lr]
 8008fa2:	4652      	mov	r2, sl
 8008fa4:	465b      	mov	r3, fp
 8008fa6:	f7f7 fb27 	bl	80005f8 <__aeabi_dmul>
 8008faa:	4682      	mov	sl, r0
 8008fac:	468b      	mov	fp, r1
 8008fae:	e656      	b.n	8008c5e <_strtod_l+0x7e>
 8008fb0:	4b6f      	ldr	r3, [pc, #444]	; (8009170 <_strtod_l+0x590>)
 8008fb2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008fb6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008fba:	f7f7 fb1d 	bl	80005f8 <__aeabi_dmul>
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	460f      	mov	r7, r1
 8008fc4:	f7f7 fa9e 	bl	8000504 <__aeabi_ui2d>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4630      	mov	r0, r6
 8008fce:	4639      	mov	r1, r7
 8008fd0:	f7f7 f95c 	bl	800028c <__adddf3>
 8008fd4:	2c0f      	cmp	r4, #15
 8008fd6:	4682      	mov	sl, r0
 8008fd8:	468b      	mov	fp, r1
 8008fda:	ddd5      	ble.n	8008f88 <_strtod_l+0x3a8>
 8008fdc:	9b06      	ldr	r3, [sp, #24]
 8008fde:	eba4 0808 	sub.w	r8, r4, r8
 8008fe2:	4498      	add	r8, r3
 8008fe4:	f1b8 0f00 	cmp.w	r8, #0
 8008fe8:	f340 8096 	ble.w	8009118 <_strtod_l+0x538>
 8008fec:	f018 030f 	ands.w	r3, r8, #15
 8008ff0:	d00a      	beq.n	8009008 <_strtod_l+0x428>
 8008ff2:	495f      	ldr	r1, [pc, #380]	; (8009170 <_strtod_l+0x590>)
 8008ff4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ff8:	4652      	mov	r2, sl
 8008ffa:	465b      	mov	r3, fp
 8008ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009000:	f7f7 fafa 	bl	80005f8 <__aeabi_dmul>
 8009004:	4682      	mov	sl, r0
 8009006:	468b      	mov	fp, r1
 8009008:	f038 080f 	bics.w	r8, r8, #15
 800900c:	d073      	beq.n	80090f6 <_strtod_l+0x516>
 800900e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009012:	dd47      	ble.n	80090a4 <_strtod_l+0x4c4>
 8009014:	2400      	movs	r4, #0
 8009016:	46a0      	mov	r8, r4
 8009018:	9407      	str	r4, [sp, #28]
 800901a:	9405      	str	r4, [sp, #20]
 800901c:	2322      	movs	r3, #34	; 0x22
 800901e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009178 <_strtod_l+0x598>
 8009022:	f8c9 3000 	str.w	r3, [r9]
 8009026:	f04f 0a00 	mov.w	sl, #0
 800902a:	9b07      	ldr	r3, [sp, #28]
 800902c:	2b00      	cmp	r3, #0
 800902e:	f43f ae16 	beq.w	8008c5e <_strtod_l+0x7e>
 8009032:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009034:	4648      	mov	r0, r9
 8009036:	f001 fda8 	bl	800ab8a <_Bfree>
 800903a:	9905      	ldr	r1, [sp, #20]
 800903c:	4648      	mov	r0, r9
 800903e:	f001 fda4 	bl	800ab8a <_Bfree>
 8009042:	4641      	mov	r1, r8
 8009044:	4648      	mov	r0, r9
 8009046:	f001 fda0 	bl	800ab8a <_Bfree>
 800904a:	9907      	ldr	r1, [sp, #28]
 800904c:	4648      	mov	r0, r9
 800904e:	f001 fd9c 	bl	800ab8a <_Bfree>
 8009052:	4621      	mov	r1, r4
 8009054:	4648      	mov	r0, r9
 8009056:	f001 fd98 	bl	800ab8a <_Bfree>
 800905a:	e600      	b.n	8008c5e <_strtod_l+0x7e>
 800905c:	9a06      	ldr	r2, [sp, #24]
 800905e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009062:	4293      	cmp	r3, r2
 8009064:	dbba      	blt.n	8008fdc <_strtod_l+0x3fc>
 8009066:	4d42      	ldr	r5, [pc, #264]	; (8009170 <_strtod_l+0x590>)
 8009068:	f1c4 040f 	rsb	r4, r4, #15
 800906c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009070:	4652      	mov	r2, sl
 8009072:	465b      	mov	r3, fp
 8009074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009078:	f7f7 fabe 	bl	80005f8 <__aeabi_dmul>
 800907c:	9b06      	ldr	r3, [sp, #24]
 800907e:	1b1c      	subs	r4, r3, r4
 8009080:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009084:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009088:	e78d      	b.n	8008fa6 <_strtod_l+0x3c6>
 800908a:	f113 0f16 	cmn.w	r3, #22
 800908e:	dba5      	blt.n	8008fdc <_strtod_l+0x3fc>
 8009090:	4a37      	ldr	r2, [pc, #220]	; (8009170 <_strtod_l+0x590>)
 8009092:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009096:	e9d2 2300 	ldrd	r2, r3, [r2]
 800909a:	4650      	mov	r0, sl
 800909c:	4659      	mov	r1, fp
 800909e:	f7f7 fbd5 	bl	800084c <__aeabi_ddiv>
 80090a2:	e782      	b.n	8008faa <_strtod_l+0x3ca>
 80090a4:	2300      	movs	r3, #0
 80090a6:	4e33      	ldr	r6, [pc, #204]	; (8009174 <_strtod_l+0x594>)
 80090a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80090ac:	4650      	mov	r0, sl
 80090ae:	4659      	mov	r1, fp
 80090b0:	461d      	mov	r5, r3
 80090b2:	f1b8 0f01 	cmp.w	r8, #1
 80090b6:	dc21      	bgt.n	80090fc <_strtod_l+0x51c>
 80090b8:	b10b      	cbz	r3, 80090be <_strtod_l+0x4de>
 80090ba:	4682      	mov	sl, r0
 80090bc:	468b      	mov	fp, r1
 80090be:	4b2d      	ldr	r3, [pc, #180]	; (8009174 <_strtod_l+0x594>)
 80090c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80090c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80090c8:	4652      	mov	r2, sl
 80090ca:	465b      	mov	r3, fp
 80090cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80090d0:	f7f7 fa92 	bl	80005f8 <__aeabi_dmul>
 80090d4:	4b28      	ldr	r3, [pc, #160]	; (8009178 <_strtod_l+0x598>)
 80090d6:	460a      	mov	r2, r1
 80090d8:	400b      	ands	r3, r1
 80090da:	4928      	ldr	r1, [pc, #160]	; (800917c <_strtod_l+0x59c>)
 80090dc:	428b      	cmp	r3, r1
 80090de:	4682      	mov	sl, r0
 80090e0:	d898      	bhi.n	8009014 <_strtod_l+0x434>
 80090e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80090e6:	428b      	cmp	r3, r1
 80090e8:	bf86      	itte	hi
 80090ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009184 <_strtod_l+0x5a4>
 80090ee:	f04f 3aff 	movhi.w	sl, #4294967295
 80090f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80090f6:	2300      	movs	r3, #0
 80090f8:	9304      	str	r3, [sp, #16]
 80090fa:	e077      	b.n	80091ec <_strtod_l+0x60c>
 80090fc:	f018 0f01 	tst.w	r8, #1
 8009100:	d006      	beq.n	8009110 <_strtod_l+0x530>
 8009102:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f7f7 fa75 	bl	80005f8 <__aeabi_dmul>
 800910e:	2301      	movs	r3, #1
 8009110:	3501      	adds	r5, #1
 8009112:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009116:	e7cc      	b.n	80090b2 <_strtod_l+0x4d2>
 8009118:	d0ed      	beq.n	80090f6 <_strtod_l+0x516>
 800911a:	f1c8 0800 	rsb	r8, r8, #0
 800911e:	f018 020f 	ands.w	r2, r8, #15
 8009122:	d00a      	beq.n	800913a <_strtod_l+0x55a>
 8009124:	4b12      	ldr	r3, [pc, #72]	; (8009170 <_strtod_l+0x590>)
 8009126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800912a:	4650      	mov	r0, sl
 800912c:	4659      	mov	r1, fp
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	f7f7 fb8b 	bl	800084c <__aeabi_ddiv>
 8009136:	4682      	mov	sl, r0
 8009138:	468b      	mov	fp, r1
 800913a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800913e:	d0da      	beq.n	80090f6 <_strtod_l+0x516>
 8009140:	f1b8 0f1f 	cmp.w	r8, #31
 8009144:	dd20      	ble.n	8009188 <_strtod_l+0x5a8>
 8009146:	2400      	movs	r4, #0
 8009148:	46a0      	mov	r8, r4
 800914a:	9407      	str	r4, [sp, #28]
 800914c:	9405      	str	r4, [sp, #20]
 800914e:	2322      	movs	r3, #34	; 0x22
 8009150:	f04f 0a00 	mov.w	sl, #0
 8009154:	f04f 0b00 	mov.w	fp, #0
 8009158:	f8c9 3000 	str.w	r3, [r9]
 800915c:	e765      	b.n	800902a <_strtod_l+0x44a>
 800915e:	bf00      	nop
 8009160:	0800b729 	.word	0x0800b729
 8009164:	0800b7ab 	.word	0x0800b7ab
 8009168:	0800b731 	.word	0x0800b731
 800916c:	0800b76c 	.word	0x0800b76c
 8009170:	0800b7e8 	.word	0x0800b7e8
 8009174:	0800b7c0 	.word	0x0800b7c0
 8009178:	7ff00000 	.word	0x7ff00000
 800917c:	7ca00000 	.word	0x7ca00000
 8009180:	fff80000 	.word	0xfff80000
 8009184:	7fefffff 	.word	0x7fefffff
 8009188:	f018 0310 	ands.w	r3, r8, #16
 800918c:	bf18      	it	ne
 800918e:	236a      	movne	r3, #106	; 0x6a
 8009190:	4da0      	ldr	r5, [pc, #640]	; (8009414 <_strtod_l+0x834>)
 8009192:	9304      	str	r3, [sp, #16]
 8009194:	4650      	mov	r0, sl
 8009196:	4659      	mov	r1, fp
 8009198:	2300      	movs	r3, #0
 800919a:	f1b8 0f00 	cmp.w	r8, #0
 800919e:	f300 810a 	bgt.w	80093b6 <_strtod_l+0x7d6>
 80091a2:	b10b      	cbz	r3, 80091a8 <_strtod_l+0x5c8>
 80091a4:	4682      	mov	sl, r0
 80091a6:	468b      	mov	fp, r1
 80091a8:	9b04      	ldr	r3, [sp, #16]
 80091aa:	b1bb      	cbz	r3, 80091dc <_strtod_l+0x5fc>
 80091ac:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80091b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	4659      	mov	r1, fp
 80091b8:	dd10      	ble.n	80091dc <_strtod_l+0x5fc>
 80091ba:	2b1f      	cmp	r3, #31
 80091bc:	f340 8107 	ble.w	80093ce <_strtod_l+0x7ee>
 80091c0:	2b34      	cmp	r3, #52	; 0x34
 80091c2:	bfde      	ittt	le
 80091c4:	3b20      	suble	r3, #32
 80091c6:	f04f 32ff 	movle.w	r2, #4294967295
 80091ca:	fa02 f303 	lslle.w	r3, r2, r3
 80091ce:	f04f 0a00 	mov.w	sl, #0
 80091d2:	bfcc      	ite	gt
 80091d4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80091d8:	ea03 0b01 	andle.w	fp, r3, r1
 80091dc:	2200      	movs	r2, #0
 80091de:	2300      	movs	r3, #0
 80091e0:	4650      	mov	r0, sl
 80091e2:	4659      	mov	r1, fp
 80091e4:	f7f7 fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d1ac      	bne.n	8009146 <_strtod_l+0x566>
 80091ec:	9b07      	ldr	r3, [sp, #28]
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	9a05      	ldr	r2, [sp, #20]
 80091f2:	9908      	ldr	r1, [sp, #32]
 80091f4:	4623      	mov	r3, r4
 80091f6:	4648      	mov	r0, r9
 80091f8:	f001 fd19 	bl	800ac2e <__s2b>
 80091fc:	9007      	str	r0, [sp, #28]
 80091fe:	2800      	cmp	r0, #0
 8009200:	f43f af08 	beq.w	8009014 <_strtod_l+0x434>
 8009204:	9a06      	ldr	r2, [sp, #24]
 8009206:	9b06      	ldr	r3, [sp, #24]
 8009208:	2a00      	cmp	r2, #0
 800920a:	f1c3 0300 	rsb	r3, r3, #0
 800920e:	bfa8      	it	ge
 8009210:	2300      	movge	r3, #0
 8009212:	930e      	str	r3, [sp, #56]	; 0x38
 8009214:	2400      	movs	r4, #0
 8009216:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800921a:	9316      	str	r3, [sp, #88]	; 0x58
 800921c:	46a0      	mov	r8, r4
 800921e:	9b07      	ldr	r3, [sp, #28]
 8009220:	4648      	mov	r0, r9
 8009222:	6859      	ldr	r1, [r3, #4]
 8009224:	f001 fc7d 	bl	800ab22 <_Balloc>
 8009228:	9005      	str	r0, [sp, #20]
 800922a:	2800      	cmp	r0, #0
 800922c:	f43f aef6 	beq.w	800901c <_strtod_l+0x43c>
 8009230:	9b07      	ldr	r3, [sp, #28]
 8009232:	691a      	ldr	r2, [r3, #16]
 8009234:	3202      	adds	r2, #2
 8009236:	f103 010c 	add.w	r1, r3, #12
 800923a:	0092      	lsls	r2, r2, #2
 800923c:	300c      	adds	r0, #12
 800923e:	f001 fc63 	bl	800ab08 <memcpy>
 8009242:	aa1e      	add	r2, sp, #120	; 0x78
 8009244:	a91d      	add	r1, sp, #116	; 0x74
 8009246:	ec4b ab10 	vmov	d0, sl, fp
 800924a:	4648      	mov	r0, r9
 800924c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009250:	f001 ffa8 	bl	800b1a4 <__d2b>
 8009254:	901c      	str	r0, [sp, #112]	; 0x70
 8009256:	2800      	cmp	r0, #0
 8009258:	f43f aee0 	beq.w	800901c <_strtod_l+0x43c>
 800925c:	2101      	movs	r1, #1
 800925e:	4648      	mov	r0, r9
 8009260:	f001 fd71 	bl	800ad46 <__i2b>
 8009264:	4680      	mov	r8, r0
 8009266:	2800      	cmp	r0, #0
 8009268:	f43f aed8 	beq.w	800901c <_strtod_l+0x43c>
 800926c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800926e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009270:	2e00      	cmp	r6, #0
 8009272:	bfab      	itete	ge
 8009274:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009276:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009278:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800927a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800927c:	bfac      	ite	ge
 800927e:	18f7      	addge	r7, r6, r3
 8009280:	1b9d      	sublt	r5, r3, r6
 8009282:	9b04      	ldr	r3, [sp, #16]
 8009284:	1af6      	subs	r6, r6, r3
 8009286:	4416      	add	r6, r2
 8009288:	4b63      	ldr	r3, [pc, #396]	; (8009418 <_strtod_l+0x838>)
 800928a:	3e01      	subs	r6, #1
 800928c:	429e      	cmp	r6, r3
 800928e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009292:	f280 80af 	bge.w	80093f4 <_strtod_l+0x814>
 8009296:	1b9b      	subs	r3, r3, r6
 8009298:	2b1f      	cmp	r3, #31
 800929a:	eba2 0203 	sub.w	r2, r2, r3
 800929e:	f04f 0101 	mov.w	r1, #1
 80092a2:	f300 809b 	bgt.w	80093dc <_strtod_l+0x7fc>
 80092a6:	fa01 f303 	lsl.w	r3, r1, r3
 80092aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80092ac:	2300      	movs	r3, #0
 80092ae:	930a      	str	r3, [sp, #40]	; 0x28
 80092b0:	18be      	adds	r6, r7, r2
 80092b2:	9b04      	ldr	r3, [sp, #16]
 80092b4:	42b7      	cmp	r7, r6
 80092b6:	4415      	add	r5, r2
 80092b8:	441d      	add	r5, r3
 80092ba:	463b      	mov	r3, r7
 80092bc:	bfa8      	it	ge
 80092be:	4633      	movge	r3, r6
 80092c0:	42ab      	cmp	r3, r5
 80092c2:	bfa8      	it	ge
 80092c4:	462b      	movge	r3, r5
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bfc2      	ittt	gt
 80092ca:	1af6      	subgt	r6, r6, r3
 80092cc:	1aed      	subgt	r5, r5, r3
 80092ce:	1aff      	subgt	r7, r7, r3
 80092d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092d2:	b1bb      	cbz	r3, 8009304 <_strtod_l+0x724>
 80092d4:	4641      	mov	r1, r8
 80092d6:	461a      	mov	r2, r3
 80092d8:	4648      	mov	r0, r9
 80092da:	f001 fdd3 	bl	800ae84 <__pow5mult>
 80092de:	4680      	mov	r8, r0
 80092e0:	2800      	cmp	r0, #0
 80092e2:	f43f ae9b 	beq.w	800901c <_strtod_l+0x43c>
 80092e6:	4601      	mov	r1, r0
 80092e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80092ea:	4648      	mov	r0, r9
 80092ec:	f001 fd34 	bl	800ad58 <__multiply>
 80092f0:	900c      	str	r0, [sp, #48]	; 0x30
 80092f2:	2800      	cmp	r0, #0
 80092f4:	f43f ae92 	beq.w	800901c <_strtod_l+0x43c>
 80092f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80092fa:	4648      	mov	r0, r9
 80092fc:	f001 fc45 	bl	800ab8a <_Bfree>
 8009300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009302:	931c      	str	r3, [sp, #112]	; 0x70
 8009304:	2e00      	cmp	r6, #0
 8009306:	dc7a      	bgt.n	80093fe <_strtod_l+0x81e>
 8009308:	9b06      	ldr	r3, [sp, #24]
 800930a:	2b00      	cmp	r3, #0
 800930c:	dd08      	ble.n	8009320 <_strtod_l+0x740>
 800930e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009310:	9905      	ldr	r1, [sp, #20]
 8009312:	4648      	mov	r0, r9
 8009314:	f001 fdb6 	bl	800ae84 <__pow5mult>
 8009318:	9005      	str	r0, [sp, #20]
 800931a:	2800      	cmp	r0, #0
 800931c:	f43f ae7e 	beq.w	800901c <_strtod_l+0x43c>
 8009320:	2d00      	cmp	r5, #0
 8009322:	dd08      	ble.n	8009336 <_strtod_l+0x756>
 8009324:	462a      	mov	r2, r5
 8009326:	9905      	ldr	r1, [sp, #20]
 8009328:	4648      	mov	r0, r9
 800932a:	f001 fdf9 	bl	800af20 <__lshift>
 800932e:	9005      	str	r0, [sp, #20]
 8009330:	2800      	cmp	r0, #0
 8009332:	f43f ae73 	beq.w	800901c <_strtod_l+0x43c>
 8009336:	2f00      	cmp	r7, #0
 8009338:	dd08      	ble.n	800934c <_strtod_l+0x76c>
 800933a:	4641      	mov	r1, r8
 800933c:	463a      	mov	r2, r7
 800933e:	4648      	mov	r0, r9
 8009340:	f001 fdee 	bl	800af20 <__lshift>
 8009344:	4680      	mov	r8, r0
 8009346:	2800      	cmp	r0, #0
 8009348:	f43f ae68 	beq.w	800901c <_strtod_l+0x43c>
 800934c:	9a05      	ldr	r2, [sp, #20]
 800934e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009350:	4648      	mov	r0, r9
 8009352:	f001 fe53 	bl	800affc <__mdiff>
 8009356:	4604      	mov	r4, r0
 8009358:	2800      	cmp	r0, #0
 800935a:	f43f ae5f 	beq.w	800901c <_strtod_l+0x43c>
 800935e:	68c3      	ldr	r3, [r0, #12]
 8009360:	930c      	str	r3, [sp, #48]	; 0x30
 8009362:	2300      	movs	r3, #0
 8009364:	60c3      	str	r3, [r0, #12]
 8009366:	4641      	mov	r1, r8
 8009368:	f001 fe2e 	bl	800afc8 <__mcmp>
 800936c:	2800      	cmp	r0, #0
 800936e:	da55      	bge.n	800941c <_strtod_l+0x83c>
 8009370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009372:	b9e3      	cbnz	r3, 80093ae <_strtod_l+0x7ce>
 8009374:	f1ba 0f00 	cmp.w	sl, #0
 8009378:	d119      	bne.n	80093ae <_strtod_l+0x7ce>
 800937a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800937e:	b9b3      	cbnz	r3, 80093ae <_strtod_l+0x7ce>
 8009380:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009384:	0d1b      	lsrs	r3, r3, #20
 8009386:	051b      	lsls	r3, r3, #20
 8009388:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800938c:	d90f      	bls.n	80093ae <_strtod_l+0x7ce>
 800938e:	6963      	ldr	r3, [r4, #20]
 8009390:	b913      	cbnz	r3, 8009398 <_strtod_l+0x7b8>
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	2b01      	cmp	r3, #1
 8009396:	dd0a      	ble.n	80093ae <_strtod_l+0x7ce>
 8009398:	4621      	mov	r1, r4
 800939a:	2201      	movs	r2, #1
 800939c:	4648      	mov	r0, r9
 800939e:	f001 fdbf 	bl	800af20 <__lshift>
 80093a2:	4641      	mov	r1, r8
 80093a4:	4604      	mov	r4, r0
 80093a6:	f001 fe0f 	bl	800afc8 <__mcmp>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	dc67      	bgt.n	800947e <_strtod_l+0x89e>
 80093ae:	9b04      	ldr	r3, [sp, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d171      	bne.n	8009498 <_strtod_l+0x8b8>
 80093b4:	e63d      	b.n	8009032 <_strtod_l+0x452>
 80093b6:	f018 0f01 	tst.w	r8, #1
 80093ba:	d004      	beq.n	80093c6 <_strtod_l+0x7e6>
 80093bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093c0:	f7f7 f91a 	bl	80005f8 <__aeabi_dmul>
 80093c4:	2301      	movs	r3, #1
 80093c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80093ca:	3508      	adds	r5, #8
 80093cc:	e6e5      	b.n	800919a <_strtod_l+0x5ba>
 80093ce:	f04f 32ff 	mov.w	r2, #4294967295
 80093d2:	fa02 f303 	lsl.w	r3, r2, r3
 80093d6:	ea03 0a0a 	and.w	sl, r3, sl
 80093da:	e6ff      	b.n	80091dc <_strtod_l+0x5fc>
 80093dc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80093e0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80093e4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80093e8:	36e2      	adds	r6, #226	; 0xe2
 80093ea:	fa01 f306 	lsl.w	r3, r1, r6
 80093ee:	930a      	str	r3, [sp, #40]	; 0x28
 80093f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80093f2:	e75d      	b.n	80092b0 <_strtod_l+0x6d0>
 80093f4:	2300      	movs	r3, #0
 80093f6:	930a      	str	r3, [sp, #40]	; 0x28
 80093f8:	2301      	movs	r3, #1
 80093fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80093fc:	e758      	b.n	80092b0 <_strtod_l+0x6d0>
 80093fe:	4632      	mov	r2, r6
 8009400:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009402:	4648      	mov	r0, r9
 8009404:	f001 fd8c 	bl	800af20 <__lshift>
 8009408:	901c      	str	r0, [sp, #112]	; 0x70
 800940a:	2800      	cmp	r0, #0
 800940c:	f47f af7c 	bne.w	8009308 <_strtod_l+0x728>
 8009410:	e604      	b.n	800901c <_strtod_l+0x43c>
 8009412:	bf00      	nop
 8009414:	0800b780 	.word	0x0800b780
 8009418:	fffffc02 	.word	0xfffffc02
 800941c:	465d      	mov	r5, fp
 800941e:	f040 8086 	bne.w	800952e <_strtod_l+0x94e>
 8009422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009424:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009428:	b32a      	cbz	r2, 8009476 <_strtod_l+0x896>
 800942a:	4aaf      	ldr	r2, [pc, #700]	; (80096e8 <_strtod_l+0xb08>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d153      	bne.n	80094d8 <_strtod_l+0x8f8>
 8009430:	9b04      	ldr	r3, [sp, #16]
 8009432:	4650      	mov	r0, sl
 8009434:	b1d3      	cbz	r3, 800946c <_strtod_l+0x88c>
 8009436:	4aad      	ldr	r2, [pc, #692]	; (80096ec <_strtod_l+0xb0c>)
 8009438:	402a      	ands	r2, r5
 800943a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800943e:	f04f 31ff 	mov.w	r1, #4294967295
 8009442:	d816      	bhi.n	8009472 <_strtod_l+0x892>
 8009444:	0d12      	lsrs	r2, r2, #20
 8009446:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800944a:	fa01 f303 	lsl.w	r3, r1, r3
 800944e:	4298      	cmp	r0, r3
 8009450:	d142      	bne.n	80094d8 <_strtod_l+0x8f8>
 8009452:	4ba7      	ldr	r3, [pc, #668]	; (80096f0 <_strtod_l+0xb10>)
 8009454:	429d      	cmp	r5, r3
 8009456:	d102      	bne.n	800945e <_strtod_l+0x87e>
 8009458:	3001      	adds	r0, #1
 800945a:	f43f addf 	beq.w	800901c <_strtod_l+0x43c>
 800945e:	4ba3      	ldr	r3, [pc, #652]	; (80096ec <_strtod_l+0xb0c>)
 8009460:	402b      	ands	r3, r5
 8009462:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009466:	f04f 0a00 	mov.w	sl, #0
 800946a:	e7a0      	b.n	80093ae <_strtod_l+0x7ce>
 800946c:	f04f 33ff 	mov.w	r3, #4294967295
 8009470:	e7ed      	b.n	800944e <_strtod_l+0x86e>
 8009472:	460b      	mov	r3, r1
 8009474:	e7eb      	b.n	800944e <_strtod_l+0x86e>
 8009476:	bb7b      	cbnz	r3, 80094d8 <_strtod_l+0x8f8>
 8009478:	f1ba 0f00 	cmp.w	sl, #0
 800947c:	d12c      	bne.n	80094d8 <_strtod_l+0x8f8>
 800947e:	9904      	ldr	r1, [sp, #16]
 8009480:	4a9a      	ldr	r2, [pc, #616]	; (80096ec <_strtod_l+0xb0c>)
 8009482:	465b      	mov	r3, fp
 8009484:	b1f1      	cbz	r1, 80094c4 <_strtod_l+0x8e4>
 8009486:	ea02 010b 	and.w	r1, r2, fp
 800948a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800948e:	dc19      	bgt.n	80094c4 <_strtod_l+0x8e4>
 8009490:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009494:	f77f ae5b 	ble.w	800914e <_strtod_l+0x56e>
 8009498:	4a96      	ldr	r2, [pc, #600]	; (80096f4 <_strtod_l+0xb14>)
 800949a:	2300      	movs	r3, #0
 800949c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80094a0:	4650      	mov	r0, sl
 80094a2:	4659      	mov	r1, fp
 80094a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80094a8:	f7f7 f8a6 	bl	80005f8 <__aeabi_dmul>
 80094ac:	4682      	mov	sl, r0
 80094ae:	468b      	mov	fp, r1
 80094b0:	2900      	cmp	r1, #0
 80094b2:	f47f adbe 	bne.w	8009032 <_strtod_l+0x452>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	f47f adbb 	bne.w	8009032 <_strtod_l+0x452>
 80094bc:	2322      	movs	r3, #34	; 0x22
 80094be:	f8c9 3000 	str.w	r3, [r9]
 80094c2:	e5b6      	b.n	8009032 <_strtod_l+0x452>
 80094c4:	4013      	ands	r3, r2
 80094c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80094ca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80094ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80094d2:	f04f 3aff 	mov.w	sl, #4294967295
 80094d6:	e76a      	b.n	80093ae <_strtod_l+0x7ce>
 80094d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094da:	b193      	cbz	r3, 8009502 <_strtod_l+0x922>
 80094dc:	422b      	tst	r3, r5
 80094de:	f43f af66 	beq.w	80093ae <_strtod_l+0x7ce>
 80094e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094e4:	9a04      	ldr	r2, [sp, #16]
 80094e6:	4650      	mov	r0, sl
 80094e8:	4659      	mov	r1, fp
 80094ea:	b173      	cbz	r3, 800950a <_strtod_l+0x92a>
 80094ec:	f7ff fb5a 	bl	8008ba4 <sulp>
 80094f0:	4602      	mov	r2, r0
 80094f2:	460b      	mov	r3, r1
 80094f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094f8:	f7f6 fec8 	bl	800028c <__adddf3>
 80094fc:	4682      	mov	sl, r0
 80094fe:	468b      	mov	fp, r1
 8009500:	e755      	b.n	80093ae <_strtod_l+0x7ce>
 8009502:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009504:	ea13 0f0a 	tst.w	r3, sl
 8009508:	e7e9      	b.n	80094de <_strtod_l+0x8fe>
 800950a:	f7ff fb4b 	bl	8008ba4 <sulp>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009516:	f7f6 feb7 	bl	8000288 <__aeabi_dsub>
 800951a:	2200      	movs	r2, #0
 800951c:	2300      	movs	r3, #0
 800951e:	4682      	mov	sl, r0
 8009520:	468b      	mov	fp, r1
 8009522:	f7f7 fad1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009526:	2800      	cmp	r0, #0
 8009528:	f47f ae11 	bne.w	800914e <_strtod_l+0x56e>
 800952c:	e73f      	b.n	80093ae <_strtod_l+0x7ce>
 800952e:	4641      	mov	r1, r8
 8009530:	4620      	mov	r0, r4
 8009532:	f001 fe86 	bl	800b242 <__ratio>
 8009536:	ec57 6b10 	vmov	r6, r7, d0
 800953a:	2200      	movs	r2, #0
 800953c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009540:	ee10 0a10 	vmov	r0, s0
 8009544:	4639      	mov	r1, r7
 8009546:	f7f7 fad3 	bl	8000af0 <__aeabi_dcmple>
 800954a:	2800      	cmp	r0, #0
 800954c:	d077      	beq.n	800963e <_strtod_l+0xa5e>
 800954e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009550:	2b00      	cmp	r3, #0
 8009552:	d04a      	beq.n	80095ea <_strtod_l+0xa0a>
 8009554:	4b68      	ldr	r3, [pc, #416]	; (80096f8 <_strtod_l+0xb18>)
 8009556:	2200      	movs	r2, #0
 8009558:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800955c:	4f66      	ldr	r7, [pc, #408]	; (80096f8 <_strtod_l+0xb18>)
 800955e:	2600      	movs	r6, #0
 8009560:	4b62      	ldr	r3, [pc, #392]	; (80096ec <_strtod_l+0xb0c>)
 8009562:	402b      	ands	r3, r5
 8009564:	930f      	str	r3, [sp, #60]	; 0x3c
 8009566:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009568:	4b64      	ldr	r3, [pc, #400]	; (80096fc <_strtod_l+0xb1c>)
 800956a:	429a      	cmp	r2, r3
 800956c:	f040 80ce 	bne.w	800970c <_strtod_l+0xb2c>
 8009570:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009574:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009578:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800957c:	ec4b ab10 	vmov	d0, sl, fp
 8009580:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009584:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009588:	f001 fd96 	bl	800b0b8 <__ulp>
 800958c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009590:	ec53 2b10 	vmov	r2, r3, d0
 8009594:	f7f7 f830 	bl	80005f8 <__aeabi_dmul>
 8009598:	4652      	mov	r2, sl
 800959a:	465b      	mov	r3, fp
 800959c:	f7f6 fe76 	bl	800028c <__adddf3>
 80095a0:	460b      	mov	r3, r1
 80095a2:	4952      	ldr	r1, [pc, #328]	; (80096ec <_strtod_l+0xb0c>)
 80095a4:	4a56      	ldr	r2, [pc, #344]	; (8009700 <_strtod_l+0xb20>)
 80095a6:	4019      	ands	r1, r3
 80095a8:	4291      	cmp	r1, r2
 80095aa:	4682      	mov	sl, r0
 80095ac:	d95b      	bls.n	8009666 <_strtod_l+0xa86>
 80095ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d103      	bne.n	80095c0 <_strtod_l+0x9e0>
 80095b8:	9b08      	ldr	r3, [sp, #32]
 80095ba:	3301      	adds	r3, #1
 80095bc:	f43f ad2e 	beq.w	800901c <_strtod_l+0x43c>
 80095c0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80096f0 <_strtod_l+0xb10>
 80095c4:	f04f 3aff 	mov.w	sl, #4294967295
 80095c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80095ca:	4648      	mov	r0, r9
 80095cc:	f001 fadd 	bl	800ab8a <_Bfree>
 80095d0:	9905      	ldr	r1, [sp, #20]
 80095d2:	4648      	mov	r0, r9
 80095d4:	f001 fad9 	bl	800ab8a <_Bfree>
 80095d8:	4641      	mov	r1, r8
 80095da:	4648      	mov	r0, r9
 80095dc:	f001 fad5 	bl	800ab8a <_Bfree>
 80095e0:	4621      	mov	r1, r4
 80095e2:	4648      	mov	r0, r9
 80095e4:	f001 fad1 	bl	800ab8a <_Bfree>
 80095e8:	e619      	b.n	800921e <_strtod_l+0x63e>
 80095ea:	f1ba 0f00 	cmp.w	sl, #0
 80095ee:	d11a      	bne.n	8009626 <_strtod_l+0xa46>
 80095f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095f4:	b9eb      	cbnz	r3, 8009632 <_strtod_l+0xa52>
 80095f6:	2200      	movs	r2, #0
 80095f8:	4b3f      	ldr	r3, [pc, #252]	; (80096f8 <_strtod_l+0xb18>)
 80095fa:	4630      	mov	r0, r6
 80095fc:	4639      	mov	r1, r7
 80095fe:	f7f7 fa6d 	bl	8000adc <__aeabi_dcmplt>
 8009602:	b9c8      	cbnz	r0, 8009638 <_strtod_l+0xa58>
 8009604:	4630      	mov	r0, r6
 8009606:	4639      	mov	r1, r7
 8009608:	2200      	movs	r2, #0
 800960a:	4b3e      	ldr	r3, [pc, #248]	; (8009704 <_strtod_l+0xb24>)
 800960c:	f7f6 fff4 	bl	80005f8 <__aeabi_dmul>
 8009610:	4606      	mov	r6, r0
 8009612:	460f      	mov	r7, r1
 8009614:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009618:	9618      	str	r6, [sp, #96]	; 0x60
 800961a:	9319      	str	r3, [sp, #100]	; 0x64
 800961c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009620:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009624:	e79c      	b.n	8009560 <_strtod_l+0x980>
 8009626:	f1ba 0f01 	cmp.w	sl, #1
 800962a:	d102      	bne.n	8009632 <_strtod_l+0xa52>
 800962c:	2d00      	cmp	r5, #0
 800962e:	f43f ad8e 	beq.w	800914e <_strtod_l+0x56e>
 8009632:	2200      	movs	r2, #0
 8009634:	4b34      	ldr	r3, [pc, #208]	; (8009708 <_strtod_l+0xb28>)
 8009636:	e78f      	b.n	8009558 <_strtod_l+0x978>
 8009638:	2600      	movs	r6, #0
 800963a:	4f32      	ldr	r7, [pc, #200]	; (8009704 <_strtod_l+0xb24>)
 800963c:	e7ea      	b.n	8009614 <_strtod_l+0xa34>
 800963e:	4b31      	ldr	r3, [pc, #196]	; (8009704 <_strtod_l+0xb24>)
 8009640:	4630      	mov	r0, r6
 8009642:	4639      	mov	r1, r7
 8009644:	2200      	movs	r2, #0
 8009646:	f7f6 ffd7 	bl	80005f8 <__aeabi_dmul>
 800964a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800964c:	4606      	mov	r6, r0
 800964e:	460f      	mov	r7, r1
 8009650:	b933      	cbnz	r3, 8009660 <_strtod_l+0xa80>
 8009652:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009656:	9010      	str	r0, [sp, #64]	; 0x40
 8009658:	9311      	str	r3, [sp, #68]	; 0x44
 800965a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800965e:	e7df      	b.n	8009620 <_strtod_l+0xa40>
 8009660:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009664:	e7f9      	b.n	800965a <_strtod_l+0xa7a>
 8009666:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800966a:	9b04      	ldr	r3, [sp, #16]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1ab      	bne.n	80095c8 <_strtod_l+0x9e8>
 8009670:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009674:	0d1b      	lsrs	r3, r3, #20
 8009676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009678:	051b      	lsls	r3, r3, #20
 800967a:	429a      	cmp	r2, r3
 800967c:	465d      	mov	r5, fp
 800967e:	d1a3      	bne.n	80095c8 <_strtod_l+0x9e8>
 8009680:	4639      	mov	r1, r7
 8009682:	4630      	mov	r0, r6
 8009684:	f7f7 fa68 	bl	8000b58 <__aeabi_d2iz>
 8009688:	f7f6 ff4c 	bl	8000524 <__aeabi_i2d>
 800968c:	460b      	mov	r3, r1
 800968e:	4602      	mov	r2, r0
 8009690:	4639      	mov	r1, r7
 8009692:	4630      	mov	r0, r6
 8009694:	f7f6 fdf8 	bl	8000288 <__aeabi_dsub>
 8009698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800969a:	4606      	mov	r6, r0
 800969c:	460f      	mov	r7, r1
 800969e:	b933      	cbnz	r3, 80096ae <_strtod_l+0xace>
 80096a0:	f1ba 0f00 	cmp.w	sl, #0
 80096a4:	d103      	bne.n	80096ae <_strtod_l+0xace>
 80096a6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80096aa:	2d00      	cmp	r5, #0
 80096ac:	d06d      	beq.n	800978a <_strtod_l+0xbaa>
 80096ae:	a30a      	add	r3, pc, #40	; (adr r3, 80096d8 <_strtod_l+0xaf8>)
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	4630      	mov	r0, r6
 80096b6:	4639      	mov	r1, r7
 80096b8:	f7f7 fa10 	bl	8000adc <__aeabi_dcmplt>
 80096bc:	2800      	cmp	r0, #0
 80096be:	f47f acb8 	bne.w	8009032 <_strtod_l+0x452>
 80096c2:	a307      	add	r3, pc, #28	; (adr r3, 80096e0 <_strtod_l+0xb00>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	4630      	mov	r0, r6
 80096ca:	4639      	mov	r1, r7
 80096cc:	f7f7 fa24 	bl	8000b18 <__aeabi_dcmpgt>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	f43f af79 	beq.w	80095c8 <_strtod_l+0x9e8>
 80096d6:	e4ac      	b.n	8009032 <_strtod_l+0x452>
 80096d8:	94a03595 	.word	0x94a03595
 80096dc:	3fdfffff 	.word	0x3fdfffff
 80096e0:	35afe535 	.word	0x35afe535
 80096e4:	3fe00000 	.word	0x3fe00000
 80096e8:	000fffff 	.word	0x000fffff
 80096ec:	7ff00000 	.word	0x7ff00000
 80096f0:	7fefffff 	.word	0x7fefffff
 80096f4:	39500000 	.word	0x39500000
 80096f8:	3ff00000 	.word	0x3ff00000
 80096fc:	7fe00000 	.word	0x7fe00000
 8009700:	7c9fffff 	.word	0x7c9fffff
 8009704:	3fe00000 	.word	0x3fe00000
 8009708:	bff00000 	.word	0xbff00000
 800970c:	9b04      	ldr	r3, [sp, #16]
 800970e:	b333      	cbz	r3, 800975e <_strtod_l+0xb7e>
 8009710:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009712:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009716:	d822      	bhi.n	800975e <_strtod_l+0xb7e>
 8009718:	a327      	add	r3, pc, #156	; (adr r3, 80097b8 <_strtod_l+0xbd8>)
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	4630      	mov	r0, r6
 8009720:	4639      	mov	r1, r7
 8009722:	f7f7 f9e5 	bl	8000af0 <__aeabi_dcmple>
 8009726:	b1a0      	cbz	r0, 8009752 <_strtod_l+0xb72>
 8009728:	4639      	mov	r1, r7
 800972a:	4630      	mov	r0, r6
 800972c:	f7f7 fa3c 	bl	8000ba8 <__aeabi_d2uiz>
 8009730:	2800      	cmp	r0, #0
 8009732:	bf08      	it	eq
 8009734:	2001      	moveq	r0, #1
 8009736:	f7f6 fee5 	bl	8000504 <__aeabi_ui2d>
 800973a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800973c:	4606      	mov	r6, r0
 800973e:	460f      	mov	r7, r1
 8009740:	bb03      	cbnz	r3, 8009784 <_strtod_l+0xba4>
 8009742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009746:	9012      	str	r0, [sp, #72]	; 0x48
 8009748:	9313      	str	r3, [sp, #76]	; 0x4c
 800974a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800974e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009754:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009756:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800975a:	1a9b      	subs	r3, r3, r2
 800975c:	930b      	str	r3, [sp, #44]	; 0x2c
 800975e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009762:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009766:	f001 fca7 	bl	800b0b8 <__ulp>
 800976a:	4650      	mov	r0, sl
 800976c:	ec53 2b10 	vmov	r2, r3, d0
 8009770:	4659      	mov	r1, fp
 8009772:	f7f6 ff41 	bl	80005f8 <__aeabi_dmul>
 8009776:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800977a:	f7f6 fd87 	bl	800028c <__adddf3>
 800977e:	4682      	mov	sl, r0
 8009780:	468b      	mov	fp, r1
 8009782:	e772      	b.n	800966a <_strtod_l+0xa8a>
 8009784:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009788:	e7df      	b.n	800974a <_strtod_l+0xb6a>
 800978a:	a30d      	add	r3, pc, #52	; (adr r3, 80097c0 <_strtod_l+0xbe0>)
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	f7f7 f9a4 	bl	8000adc <__aeabi_dcmplt>
 8009794:	e79c      	b.n	80096d0 <_strtod_l+0xaf0>
 8009796:	2300      	movs	r3, #0
 8009798:	930d      	str	r3, [sp, #52]	; 0x34
 800979a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800979c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	f7ff ba61 	b.w	8008c66 <_strtod_l+0x86>
 80097a4:	2b65      	cmp	r3, #101	; 0x65
 80097a6:	f04f 0200 	mov.w	r2, #0
 80097aa:	f43f ab4e 	beq.w	8008e4a <_strtod_l+0x26a>
 80097ae:	2101      	movs	r1, #1
 80097b0:	4614      	mov	r4, r2
 80097b2:	9104      	str	r1, [sp, #16]
 80097b4:	f7ff bacb 	b.w	8008d4e <_strtod_l+0x16e>
 80097b8:	ffc00000 	.word	0xffc00000
 80097bc:	41dfffff 	.word	0x41dfffff
 80097c0:	94a03595 	.word	0x94a03595
 80097c4:	3fcfffff 	.word	0x3fcfffff

080097c8 <strtod>:
 80097c8:	4b07      	ldr	r3, [pc, #28]	; (80097e8 <strtod+0x20>)
 80097ca:	4a08      	ldr	r2, [pc, #32]	; (80097ec <strtod+0x24>)
 80097cc:	b410      	push	{r4}
 80097ce:	681c      	ldr	r4, [r3, #0]
 80097d0:	6a23      	ldr	r3, [r4, #32]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	bf08      	it	eq
 80097d6:	4613      	moveq	r3, r2
 80097d8:	460a      	mov	r2, r1
 80097da:	4601      	mov	r1, r0
 80097dc:	4620      	mov	r0, r4
 80097de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097e2:	f7ff b9fd 	b.w	8008be0 <_strtod_l>
 80097e6:	bf00      	nop
 80097e8:	20000184 	.word	0x20000184
 80097ec:	200001e8 	.word	0x200001e8

080097f0 <quorem>:
 80097f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	6903      	ldr	r3, [r0, #16]
 80097f6:	690c      	ldr	r4, [r1, #16]
 80097f8:	42a3      	cmp	r3, r4
 80097fa:	4680      	mov	r8, r0
 80097fc:	f2c0 8082 	blt.w	8009904 <quorem+0x114>
 8009800:	3c01      	subs	r4, #1
 8009802:	f101 0714 	add.w	r7, r1, #20
 8009806:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800980a:	f100 0614 	add.w	r6, r0, #20
 800980e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009812:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009816:	eb06 030c 	add.w	r3, r6, ip
 800981a:	3501      	adds	r5, #1
 800981c:	eb07 090c 	add.w	r9, r7, ip
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	fbb0 f5f5 	udiv	r5, r0, r5
 8009826:	b395      	cbz	r5, 800988e <quorem+0x9e>
 8009828:	f04f 0a00 	mov.w	sl, #0
 800982c:	4638      	mov	r0, r7
 800982e:	46b6      	mov	lr, r6
 8009830:	46d3      	mov	fp, sl
 8009832:	f850 2b04 	ldr.w	r2, [r0], #4
 8009836:	b293      	uxth	r3, r2
 8009838:	fb05 a303 	mla	r3, r5, r3, sl
 800983c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009840:	b29b      	uxth	r3, r3
 8009842:	ebab 0303 	sub.w	r3, fp, r3
 8009846:	0c12      	lsrs	r2, r2, #16
 8009848:	f8de b000 	ldr.w	fp, [lr]
 800984c:	fb05 a202 	mla	r2, r5, r2, sl
 8009850:	fa13 f38b 	uxtah	r3, r3, fp
 8009854:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009858:	fa1f fb82 	uxth.w	fp, r2
 800985c:	f8de 2000 	ldr.w	r2, [lr]
 8009860:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009864:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009868:	b29b      	uxth	r3, r3
 800986a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800986e:	4581      	cmp	r9, r0
 8009870:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009874:	f84e 3b04 	str.w	r3, [lr], #4
 8009878:	d2db      	bcs.n	8009832 <quorem+0x42>
 800987a:	f856 300c 	ldr.w	r3, [r6, ip]
 800987e:	b933      	cbnz	r3, 800988e <quorem+0x9e>
 8009880:	9b01      	ldr	r3, [sp, #4]
 8009882:	3b04      	subs	r3, #4
 8009884:	429e      	cmp	r6, r3
 8009886:	461a      	mov	r2, r3
 8009888:	d330      	bcc.n	80098ec <quorem+0xfc>
 800988a:	f8c8 4010 	str.w	r4, [r8, #16]
 800988e:	4640      	mov	r0, r8
 8009890:	f001 fb9a 	bl	800afc8 <__mcmp>
 8009894:	2800      	cmp	r0, #0
 8009896:	db25      	blt.n	80098e4 <quorem+0xf4>
 8009898:	3501      	adds	r5, #1
 800989a:	4630      	mov	r0, r6
 800989c:	f04f 0c00 	mov.w	ip, #0
 80098a0:	f857 2b04 	ldr.w	r2, [r7], #4
 80098a4:	f8d0 e000 	ldr.w	lr, [r0]
 80098a8:	b293      	uxth	r3, r2
 80098aa:	ebac 0303 	sub.w	r3, ip, r3
 80098ae:	0c12      	lsrs	r2, r2, #16
 80098b0:	fa13 f38e 	uxtah	r3, r3, lr
 80098b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098bc:	b29b      	uxth	r3, r3
 80098be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098c2:	45b9      	cmp	r9, r7
 80098c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098c8:	f840 3b04 	str.w	r3, [r0], #4
 80098cc:	d2e8      	bcs.n	80098a0 <quorem+0xb0>
 80098ce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80098d2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80098d6:	b92a      	cbnz	r2, 80098e4 <quorem+0xf4>
 80098d8:	3b04      	subs	r3, #4
 80098da:	429e      	cmp	r6, r3
 80098dc:	461a      	mov	r2, r3
 80098de:	d30b      	bcc.n	80098f8 <quorem+0x108>
 80098e0:	f8c8 4010 	str.w	r4, [r8, #16]
 80098e4:	4628      	mov	r0, r5
 80098e6:	b003      	add	sp, #12
 80098e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ec:	6812      	ldr	r2, [r2, #0]
 80098ee:	3b04      	subs	r3, #4
 80098f0:	2a00      	cmp	r2, #0
 80098f2:	d1ca      	bne.n	800988a <quorem+0x9a>
 80098f4:	3c01      	subs	r4, #1
 80098f6:	e7c5      	b.n	8009884 <quorem+0x94>
 80098f8:	6812      	ldr	r2, [r2, #0]
 80098fa:	3b04      	subs	r3, #4
 80098fc:	2a00      	cmp	r2, #0
 80098fe:	d1ef      	bne.n	80098e0 <quorem+0xf0>
 8009900:	3c01      	subs	r4, #1
 8009902:	e7ea      	b.n	80098da <quorem+0xea>
 8009904:	2000      	movs	r0, #0
 8009906:	e7ee      	b.n	80098e6 <quorem+0xf6>

08009908 <_dtoa_r>:
 8009908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990c:	ec57 6b10 	vmov	r6, r7, d0
 8009910:	b097      	sub	sp, #92	; 0x5c
 8009912:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009914:	9106      	str	r1, [sp, #24]
 8009916:	4604      	mov	r4, r0
 8009918:	920b      	str	r2, [sp, #44]	; 0x2c
 800991a:	9312      	str	r3, [sp, #72]	; 0x48
 800991c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009920:	e9cd 6700 	strd	r6, r7, [sp]
 8009924:	b93d      	cbnz	r5, 8009936 <_dtoa_r+0x2e>
 8009926:	2010      	movs	r0, #16
 8009928:	f7fe fbdc 	bl	80080e4 <malloc>
 800992c:	6260      	str	r0, [r4, #36]	; 0x24
 800992e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009932:	6005      	str	r5, [r0, #0]
 8009934:	60c5      	str	r5, [r0, #12]
 8009936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009938:	6819      	ldr	r1, [r3, #0]
 800993a:	b151      	cbz	r1, 8009952 <_dtoa_r+0x4a>
 800993c:	685a      	ldr	r2, [r3, #4]
 800993e:	604a      	str	r2, [r1, #4]
 8009940:	2301      	movs	r3, #1
 8009942:	4093      	lsls	r3, r2
 8009944:	608b      	str	r3, [r1, #8]
 8009946:	4620      	mov	r0, r4
 8009948:	f001 f91f 	bl	800ab8a <_Bfree>
 800994c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800994e:	2200      	movs	r2, #0
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	1e3b      	subs	r3, r7, #0
 8009954:	bfbb      	ittet	lt
 8009956:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800995a:	9301      	strlt	r3, [sp, #4]
 800995c:	2300      	movge	r3, #0
 800995e:	2201      	movlt	r2, #1
 8009960:	bfac      	ite	ge
 8009962:	f8c8 3000 	strge.w	r3, [r8]
 8009966:	f8c8 2000 	strlt.w	r2, [r8]
 800996a:	4baf      	ldr	r3, [pc, #700]	; (8009c28 <_dtoa_r+0x320>)
 800996c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009970:	ea33 0308 	bics.w	r3, r3, r8
 8009974:	d114      	bne.n	80099a0 <_dtoa_r+0x98>
 8009976:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009978:	f242 730f 	movw	r3, #9999	; 0x270f
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	9b00      	ldr	r3, [sp, #0]
 8009980:	b923      	cbnz	r3, 800998c <_dtoa_r+0x84>
 8009982:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009986:	2800      	cmp	r0, #0
 8009988:	f000 8542 	beq.w	800a410 <_dtoa_r+0xb08>
 800998c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800998e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009c3c <_dtoa_r+0x334>
 8009992:	2b00      	cmp	r3, #0
 8009994:	f000 8544 	beq.w	800a420 <_dtoa_r+0xb18>
 8009998:	f10b 0303 	add.w	r3, fp, #3
 800999c:	f000 bd3e 	b.w	800a41c <_dtoa_r+0xb14>
 80099a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80099a4:	2200      	movs	r2, #0
 80099a6:	2300      	movs	r3, #0
 80099a8:	4630      	mov	r0, r6
 80099aa:	4639      	mov	r1, r7
 80099ac:	f7f7 f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 80099b0:	4681      	mov	r9, r0
 80099b2:	b168      	cbz	r0, 80099d0 <_dtoa_r+0xc8>
 80099b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099b6:	2301      	movs	r3, #1
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f000 8524 	beq.w	800a40a <_dtoa_r+0xb02>
 80099c2:	4b9a      	ldr	r3, [pc, #616]	; (8009c2c <_dtoa_r+0x324>)
 80099c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	f000 bd28 	b.w	800a420 <_dtoa_r+0xb18>
 80099d0:	aa14      	add	r2, sp, #80	; 0x50
 80099d2:	a915      	add	r1, sp, #84	; 0x54
 80099d4:	ec47 6b10 	vmov	d0, r6, r7
 80099d8:	4620      	mov	r0, r4
 80099da:	f001 fbe3 	bl	800b1a4 <__d2b>
 80099de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80099e2:	9004      	str	r0, [sp, #16]
 80099e4:	2d00      	cmp	r5, #0
 80099e6:	d07c      	beq.n	8009ae2 <_dtoa_r+0x1da>
 80099e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80099f0:	46b2      	mov	sl, r6
 80099f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80099f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80099fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80099fe:	2200      	movs	r2, #0
 8009a00:	4b8b      	ldr	r3, [pc, #556]	; (8009c30 <_dtoa_r+0x328>)
 8009a02:	4650      	mov	r0, sl
 8009a04:	4659      	mov	r1, fp
 8009a06:	f7f6 fc3f 	bl	8000288 <__aeabi_dsub>
 8009a0a:	a381      	add	r3, pc, #516	; (adr r3, 8009c10 <_dtoa_r+0x308>)
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	f7f6 fdf2 	bl	80005f8 <__aeabi_dmul>
 8009a14:	a380      	add	r3, pc, #512	; (adr r3, 8009c18 <_dtoa_r+0x310>)
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	f7f6 fc37 	bl	800028c <__adddf3>
 8009a1e:	4606      	mov	r6, r0
 8009a20:	4628      	mov	r0, r5
 8009a22:	460f      	mov	r7, r1
 8009a24:	f7f6 fd7e 	bl	8000524 <__aeabi_i2d>
 8009a28:	a37d      	add	r3, pc, #500	; (adr r3, 8009c20 <_dtoa_r+0x318>)
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	f7f6 fde3 	bl	80005f8 <__aeabi_dmul>
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	4630      	mov	r0, r6
 8009a38:	4639      	mov	r1, r7
 8009a3a:	f7f6 fc27 	bl	800028c <__adddf3>
 8009a3e:	4606      	mov	r6, r0
 8009a40:	460f      	mov	r7, r1
 8009a42:	f7f7 f889 	bl	8000b58 <__aeabi_d2iz>
 8009a46:	2200      	movs	r2, #0
 8009a48:	4682      	mov	sl, r0
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	4639      	mov	r1, r7
 8009a50:	f7f7 f844 	bl	8000adc <__aeabi_dcmplt>
 8009a54:	b148      	cbz	r0, 8009a6a <_dtoa_r+0x162>
 8009a56:	4650      	mov	r0, sl
 8009a58:	f7f6 fd64 	bl	8000524 <__aeabi_i2d>
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	463b      	mov	r3, r7
 8009a60:	f7f7 f832 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a64:	b908      	cbnz	r0, 8009a6a <_dtoa_r+0x162>
 8009a66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a6a:	f1ba 0f16 	cmp.w	sl, #22
 8009a6e:	d859      	bhi.n	8009b24 <_dtoa_r+0x21c>
 8009a70:	4970      	ldr	r1, [pc, #448]	; (8009c34 <_dtoa_r+0x32c>)
 8009a72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009a76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a7e:	f7f7 f84b 	bl	8000b18 <__aeabi_dcmpgt>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d050      	beq.n	8009b28 <_dtoa_r+0x220>
 8009a86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a90:	1b5d      	subs	r5, r3, r5
 8009a92:	f1b5 0801 	subs.w	r8, r5, #1
 8009a96:	bf49      	itett	mi
 8009a98:	f1c5 0301 	rsbmi	r3, r5, #1
 8009a9c:	2300      	movpl	r3, #0
 8009a9e:	9305      	strmi	r3, [sp, #20]
 8009aa0:	f04f 0800 	movmi.w	r8, #0
 8009aa4:	bf58      	it	pl
 8009aa6:	9305      	strpl	r3, [sp, #20]
 8009aa8:	f1ba 0f00 	cmp.w	sl, #0
 8009aac:	db3e      	blt.n	8009b2c <_dtoa_r+0x224>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	44d0      	add	r8, sl
 8009ab2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009ab6:	9307      	str	r3, [sp, #28]
 8009ab8:	9b06      	ldr	r3, [sp, #24]
 8009aba:	2b09      	cmp	r3, #9
 8009abc:	f200 8090 	bhi.w	8009be0 <_dtoa_r+0x2d8>
 8009ac0:	2b05      	cmp	r3, #5
 8009ac2:	bfc4      	itt	gt
 8009ac4:	3b04      	subgt	r3, #4
 8009ac6:	9306      	strgt	r3, [sp, #24]
 8009ac8:	9b06      	ldr	r3, [sp, #24]
 8009aca:	f1a3 0302 	sub.w	r3, r3, #2
 8009ace:	bfcc      	ite	gt
 8009ad0:	2500      	movgt	r5, #0
 8009ad2:	2501      	movle	r5, #1
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	f200 808f 	bhi.w	8009bf8 <_dtoa_r+0x2f0>
 8009ada:	e8df f003 	tbb	[pc, r3]
 8009ade:	7f7d      	.short	0x7f7d
 8009ae0:	7131      	.short	0x7131
 8009ae2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009ae6:	441d      	add	r5, r3
 8009ae8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009aec:	2820      	cmp	r0, #32
 8009aee:	dd13      	ble.n	8009b18 <_dtoa_r+0x210>
 8009af0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009af4:	9b00      	ldr	r3, [sp, #0]
 8009af6:	fa08 f800 	lsl.w	r8, r8, r0
 8009afa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009afe:	fa23 f000 	lsr.w	r0, r3, r0
 8009b02:	ea48 0000 	orr.w	r0, r8, r0
 8009b06:	f7f6 fcfd 	bl	8000504 <__aeabi_ui2d>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	4682      	mov	sl, r0
 8009b0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009b12:	3d01      	subs	r5, #1
 8009b14:	9313      	str	r3, [sp, #76]	; 0x4c
 8009b16:	e772      	b.n	80099fe <_dtoa_r+0xf6>
 8009b18:	9b00      	ldr	r3, [sp, #0]
 8009b1a:	f1c0 0020 	rsb	r0, r0, #32
 8009b1e:	fa03 f000 	lsl.w	r0, r3, r0
 8009b22:	e7f0      	b.n	8009b06 <_dtoa_r+0x1fe>
 8009b24:	2301      	movs	r3, #1
 8009b26:	e7b1      	b.n	8009a8c <_dtoa_r+0x184>
 8009b28:	900f      	str	r0, [sp, #60]	; 0x3c
 8009b2a:	e7b0      	b.n	8009a8e <_dtoa_r+0x186>
 8009b2c:	9b05      	ldr	r3, [sp, #20]
 8009b2e:	eba3 030a 	sub.w	r3, r3, sl
 8009b32:	9305      	str	r3, [sp, #20]
 8009b34:	f1ca 0300 	rsb	r3, sl, #0
 8009b38:	9307      	str	r3, [sp, #28]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	930e      	str	r3, [sp, #56]	; 0x38
 8009b3e:	e7bb      	b.n	8009ab8 <_dtoa_r+0x1b0>
 8009b40:	2301      	movs	r3, #1
 8009b42:	930a      	str	r3, [sp, #40]	; 0x28
 8009b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	dd59      	ble.n	8009bfe <_dtoa_r+0x2f6>
 8009b4a:	9302      	str	r3, [sp, #8]
 8009b4c:	4699      	mov	r9, r3
 8009b4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b50:	2200      	movs	r2, #0
 8009b52:	6072      	str	r2, [r6, #4]
 8009b54:	2204      	movs	r2, #4
 8009b56:	f102 0014 	add.w	r0, r2, #20
 8009b5a:	4298      	cmp	r0, r3
 8009b5c:	6871      	ldr	r1, [r6, #4]
 8009b5e:	d953      	bls.n	8009c08 <_dtoa_r+0x300>
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 ffde 	bl	800ab22 <_Balloc>
 8009b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b68:	6030      	str	r0, [r6, #0]
 8009b6a:	f1b9 0f0e 	cmp.w	r9, #14
 8009b6e:	f8d3 b000 	ldr.w	fp, [r3]
 8009b72:	f200 80e6 	bhi.w	8009d42 <_dtoa_r+0x43a>
 8009b76:	2d00      	cmp	r5, #0
 8009b78:	f000 80e3 	beq.w	8009d42 <_dtoa_r+0x43a>
 8009b7c:	ed9d 7b00 	vldr	d7, [sp]
 8009b80:	f1ba 0f00 	cmp.w	sl, #0
 8009b84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009b88:	dd74      	ble.n	8009c74 <_dtoa_r+0x36c>
 8009b8a:	4a2a      	ldr	r2, [pc, #168]	; (8009c34 <_dtoa_r+0x32c>)
 8009b8c:	f00a 030f 	and.w	r3, sl, #15
 8009b90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b94:	ed93 7b00 	vldr	d7, [r3]
 8009b98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009b9c:	06f0      	lsls	r0, r6, #27
 8009b9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009ba2:	d565      	bpl.n	8009c70 <_dtoa_r+0x368>
 8009ba4:	4b24      	ldr	r3, [pc, #144]	; (8009c38 <_dtoa_r+0x330>)
 8009ba6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009baa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009bae:	f7f6 fe4d 	bl	800084c <__aeabi_ddiv>
 8009bb2:	e9cd 0100 	strd	r0, r1, [sp]
 8009bb6:	f006 060f 	and.w	r6, r6, #15
 8009bba:	2503      	movs	r5, #3
 8009bbc:	4f1e      	ldr	r7, [pc, #120]	; (8009c38 <_dtoa_r+0x330>)
 8009bbe:	e04c      	b.n	8009c5a <_dtoa_r+0x352>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	930a      	str	r3, [sp, #40]	; 0x28
 8009bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bc6:	4453      	add	r3, sl
 8009bc8:	f103 0901 	add.w	r9, r3, #1
 8009bcc:	9302      	str	r3, [sp, #8]
 8009bce:	464b      	mov	r3, r9
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	bfb8      	it	lt
 8009bd4:	2301      	movlt	r3, #1
 8009bd6:	e7ba      	b.n	8009b4e <_dtoa_r+0x246>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	e7b2      	b.n	8009b42 <_dtoa_r+0x23a>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e7f0      	b.n	8009bc2 <_dtoa_r+0x2ba>
 8009be0:	2501      	movs	r5, #1
 8009be2:	2300      	movs	r3, #0
 8009be4:	9306      	str	r3, [sp, #24]
 8009be6:	950a      	str	r5, [sp, #40]	; 0x28
 8009be8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bec:	9302      	str	r3, [sp, #8]
 8009bee:	4699      	mov	r9, r3
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	2312      	movs	r3, #18
 8009bf4:	920b      	str	r2, [sp, #44]	; 0x2c
 8009bf6:	e7aa      	b.n	8009b4e <_dtoa_r+0x246>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8009bfc:	e7f4      	b.n	8009be8 <_dtoa_r+0x2e0>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	9302      	str	r3, [sp, #8]
 8009c02:	4699      	mov	r9, r3
 8009c04:	461a      	mov	r2, r3
 8009c06:	e7f5      	b.n	8009bf4 <_dtoa_r+0x2ec>
 8009c08:	3101      	adds	r1, #1
 8009c0a:	6071      	str	r1, [r6, #4]
 8009c0c:	0052      	lsls	r2, r2, #1
 8009c0e:	e7a2      	b.n	8009b56 <_dtoa_r+0x24e>
 8009c10:	636f4361 	.word	0x636f4361
 8009c14:	3fd287a7 	.word	0x3fd287a7
 8009c18:	8b60c8b3 	.word	0x8b60c8b3
 8009c1c:	3fc68a28 	.word	0x3fc68a28
 8009c20:	509f79fb 	.word	0x509f79fb
 8009c24:	3fd34413 	.word	0x3fd34413
 8009c28:	7ff00000 	.word	0x7ff00000
 8009c2c:	0800b735 	.word	0x0800b735
 8009c30:	3ff80000 	.word	0x3ff80000
 8009c34:	0800b7e8 	.word	0x0800b7e8
 8009c38:	0800b7c0 	.word	0x0800b7c0
 8009c3c:	0800b7b1 	.word	0x0800b7b1
 8009c40:	07f1      	lsls	r1, r6, #31
 8009c42:	d508      	bpl.n	8009c56 <_dtoa_r+0x34e>
 8009c44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c4c:	f7f6 fcd4 	bl	80005f8 <__aeabi_dmul>
 8009c50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c54:	3501      	adds	r5, #1
 8009c56:	1076      	asrs	r6, r6, #1
 8009c58:	3708      	adds	r7, #8
 8009c5a:	2e00      	cmp	r6, #0
 8009c5c:	d1f0      	bne.n	8009c40 <_dtoa_r+0x338>
 8009c5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c66:	f7f6 fdf1 	bl	800084c <__aeabi_ddiv>
 8009c6a:	e9cd 0100 	strd	r0, r1, [sp]
 8009c6e:	e01a      	b.n	8009ca6 <_dtoa_r+0x39e>
 8009c70:	2502      	movs	r5, #2
 8009c72:	e7a3      	b.n	8009bbc <_dtoa_r+0x2b4>
 8009c74:	f000 80a0 	beq.w	8009db8 <_dtoa_r+0x4b0>
 8009c78:	f1ca 0600 	rsb	r6, sl, #0
 8009c7c:	4b9f      	ldr	r3, [pc, #636]	; (8009efc <_dtoa_r+0x5f4>)
 8009c7e:	4fa0      	ldr	r7, [pc, #640]	; (8009f00 <_dtoa_r+0x5f8>)
 8009c80:	f006 020f 	and.w	r2, r6, #15
 8009c84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c90:	f7f6 fcb2 	bl	80005f8 <__aeabi_dmul>
 8009c94:	e9cd 0100 	strd	r0, r1, [sp]
 8009c98:	1136      	asrs	r6, r6, #4
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	2502      	movs	r5, #2
 8009c9e:	2e00      	cmp	r6, #0
 8009ca0:	d17f      	bne.n	8009da2 <_dtoa_r+0x49a>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1e1      	bne.n	8009c6a <_dtoa_r+0x362>
 8009ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 8087 	beq.w	8009dbc <_dtoa_r+0x4b4>
 8009cae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	4b93      	ldr	r3, [pc, #588]	; (8009f04 <_dtoa_r+0x5fc>)
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	4639      	mov	r1, r7
 8009cba:	f7f6 ff0f 	bl	8000adc <__aeabi_dcmplt>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d07c      	beq.n	8009dbc <_dtoa_r+0x4b4>
 8009cc2:	f1b9 0f00 	cmp.w	r9, #0
 8009cc6:	d079      	beq.n	8009dbc <_dtoa_r+0x4b4>
 8009cc8:	9b02      	ldr	r3, [sp, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	dd35      	ble.n	8009d3a <_dtoa_r+0x432>
 8009cce:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009cd2:	9308      	str	r3, [sp, #32]
 8009cd4:	4639      	mov	r1, r7
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	4b8b      	ldr	r3, [pc, #556]	; (8009f08 <_dtoa_r+0x600>)
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f7f6 fc8c 	bl	80005f8 <__aeabi_dmul>
 8009ce0:	e9cd 0100 	strd	r0, r1, [sp]
 8009ce4:	9f02      	ldr	r7, [sp, #8]
 8009ce6:	3501      	adds	r5, #1
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f7f6 fc1b 	bl	8000524 <__aeabi_i2d>
 8009cee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cf2:	f7f6 fc81 	bl	80005f8 <__aeabi_dmul>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	4b84      	ldr	r3, [pc, #528]	; (8009f0c <_dtoa_r+0x604>)
 8009cfa:	f7f6 fac7 	bl	800028c <__adddf3>
 8009cfe:	4605      	mov	r5, r0
 8009d00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009d04:	2f00      	cmp	r7, #0
 8009d06:	d15d      	bne.n	8009dc4 <_dtoa_r+0x4bc>
 8009d08:	2200      	movs	r2, #0
 8009d0a:	4b81      	ldr	r3, [pc, #516]	; (8009f10 <_dtoa_r+0x608>)
 8009d0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d10:	f7f6 faba 	bl	8000288 <__aeabi_dsub>
 8009d14:	462a      	mov	r2, r5
 8009d16:	4633      	mov	r3, r6
 8009d18:	e9cd 0100 	strd	r0, r1, [sp]
 8009d1c:	f7f6 fefc 	bl	8000b18 <__aeabi_dcmpgt>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	f040 8288 	bne.w	800a236 <_dtoa_r+0x92e>
 8009d26:	462a      	mov	r2, r5
 8009d28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d30:	f7f6 fed4 	bl	8000adc <__aeabi_dcmplt>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f040 827c 	bne.w	800a232 <_dtoa_r+0x92a>
 8009d3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d3e:	e9cd 2300 	strd	r2, r3, [sp]
 8009d42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f2c0 8150 	blt.w	8009fea <_dtoa_r+0x6e2>
 8009d4a:	f1ba 0f0e 	cmp.w	sl, #14
 8009d4e:	f300 814c 	bgt.w	8009fea <_dtoa_r+0x6e2>
 8009d52:	4b6a      	ldr	r3, [pc, #424]	; (8009efc <_dtoa_r+0x5f4>)
 8009d54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d58:	ed93 7b00 	vldr	d7, [r3]
 8009d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d64:	f280 80d8 	bge.w	8009f18 <_dtoa_r+0x610>
 8009d68:	f1b9 0f00 	cmp.w	r9, #0
 8009d6c:	f300 80d4 	bgt.w	8009f18 <_dtoa_r+0x610>
 8009d70:	f040 825e 	bne.w	800a230 <_dtoa_r+0x928>
 8009d74:	2200      	movs	r2, #0
 8009d76:	4b66      	ldr	r3, [pc, #408]	; (8009f10 <_dtoa_r+0x608>)
 8009d78:	ec51 0b17 	vmov	r0, r1, d7
 8009d7c:	f7f6 fc3c 	bl	80005f8 <__aeabi_dmul>
 8009d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d84:	f7f6 febe 	bl	8000b04 <__aeabi_dcmpge>
 8009d88:	464f      	mov	r7, r9
 8009d8a:	464e      	mov	r6, r9
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	f040 8234 	bne.w	800a1fa <_dtoa_r+0x8f2>
 8009d92:	2331      	movs	r3, #49	; 0x31
 8009d94:	f10b 0501 	add.w	r5, fp, #1
 8009d98:	f88b 3000 	strb.w	r3, [fp]
 8009d9c:	f10a 0a01 	add.w	sl, sl, #1
 8009da0:	e22f      	b.n	800a202 <_dtoa_r+0x8fa>
 8009da2:	07f2      	lsls	r2, r6, #31
 8009da4:	d505      	bpl.n	8009db2 <_dtoa_r+0x4aa>
 8009da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009daa:	f7f6 fc25 	bl	80005f8 <__aeabi_dmul>
 8009dae:	3501      	adds	r5, #1
 8009db0:	2301      	movs	r3, #1
 8009db2:	1076      	asrs	r6, r6, #1
 8009db4:	3708      	adds	r7, #8
 8009db6:	e772      	b.n	8009c9e <_dtoa_r+0x396>
 8009db8:	2502      	movs	r5, #2
 8009dba:	e774      	b.n	8009ca6 <_dtoa_r+0x39e>
 8009dbc:	f8cd a020 	str.w	sl, [sp, #32]
 8009dc0:	464f      	mov	r7, r9
 8009dc2:	e791      	b.n	8009ce8 <_dtoa_r+0x3e0>
 8009dc4:	4b4d      	ldr	r3, [pc, #308]	; (8009efc <_dtoa_r+0x5f4>)
 8009dc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009dca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d047      	beq.n	8009e64 <_dtoa_r+0x55c>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	2000      	movs	r0, #0
 8009dda:	494e      	ldr	r1, [pc, #312]	; (8009f14 <_dtoa_r+0x60c>)
 8009ddc:	f7f6 fd36 	bl	800084c <__aeabi_ddiv>
 8009de0:	462a      	mov	r2, r5
 8009de2:	4633      	mov	r3, r6
 8009de4:	f7f6 fa50 	bl	8000288 <__aeabi_dsub>
 8009de8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009dec:	465d      	mov	r5, fp
 8009dee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009df2:	f7f6 feb1 	bl	8000b58 <__aeabi_d2iz>
 8009df6:	4606      	mov	r6, r0
 8009df8:	f7f6 fb94 	bl	8000524 <__aeabi_i2d>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e04:	f7f6 fa40 	bl	8000288 <__aeabi_dsub>
 8009e08:	3630      	adds	r6, #48	; 0x30
 8009e0a:	f805 6b01 	strb.w	r6, [r5], #1
 8009e0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e12:	e9cd 0100 	strd	r0, r1, [sp]
 8009e16:	f7f6 fe61 	bl	8000adc <__aeabi_dcmplt>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d163      	bne.n	8009ee6 <_dtoa_r+0x5de>
 8009e1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e22:	2000      	movs	r0, #0
 8009e24:	4937      	ldr	r1, [pc, #220]	; (8009f04 <_dtoa_r+0x5fc>)
 8009e26:	f7f6 fa2f 	bl	8000288 <__aeabi_dsub>
 8009e2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e2e:	f7f6 fe55 	bl	8000adc <__aeabi_dcmplt>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	f040 80b7 	bne.w	8009fa6 <_dtoa_r+0x69e>
 8009e38:	eba5 030b 	sub.w	r3, r5, fp
 8009e3c:	429f      	cmp	r7, r3
 8009e3e:	f77f af7c 	ble.w	8009d3a <_dtoa_r+0x432>
 8009e42:	2200      	movs	r2, #0
 8009e44:	4b30      	ldr	r3, [pc, #192]	; (8009f08 <_dtoa_r+0x600>)
 8009e46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e4a:	f7f6 fbd5 	bl	80005f8 <__aeabi_dmul>
 8009e4e:	2200      	movs	r2, #0
 8009e50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e54:	4b2c      	ldr	r3, [pc, #176]	; (8009f08 <_dtoa_r+0x600>)
 8009e56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e5a:	f7f6 fbcd 	bl	80005f8 <__aeabi_dmul>
 8009e5e:	e9cd 0100 	strd	r0, r1, [sp]
 8009e62:	e7c4      	b.n	8009dee <_dtoa_r+0x4e6>
 8009e64:	462a      	mov	r2, r5
 8009e66:	4633      	mov	r3, r6
 8009e68:	f7f6 fbc6 	bl	80005f8 <__aeabi_dmul>
 8009e6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e70:	eb0b 0507 	add.w	r5, fp, r7
 8009e74:	465e      	mov	r6, fp
 8009e76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e7a:	f7f6 fe6d 	bl	8000b58 <__aeabi_d2iz>
 8009e7e:	4607      	mov	r7, r0
 8009e80:	f7f6 fb50 	bl	8000524 <__aeabi_i2d>
 8009e84:	3730      	adds	r7, #48	; 0x30
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e8e:	f7f6 f9fb 	bl	8000288 <__aeabi_dsub>
 8009e92:	f806 7b01 	strb.w	r7, [r6], #1
 8009e96:	42ae      	cmp	r6, r5
 8009e98:	e9cd 0100 	strd	r0, r1, [sp]
 8009e9c:	f04f 0200 	mov.w	r2, #0
 8009ea0:	d126      	bne.n	8009ef0 <_dtoa_r+0x5e8>
 8009ea2:	4b1c      	ldr	r3, [pc, #112]	; (8009f14 <_dtoa_r+0x60c>)
 8009ea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ea8:	f7f6 f9f0 	bl	800028c <__adddf3>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009eb4:	f7f6 fe30 	bl	8000b18 <__aeabi_dcmpgt>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d174      	bne.n	8009fa6 <_dtoa_r+0x69e>
 8009ebc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	4914      	ldr	r1, [pc, #80]	; (8009f14 <_dtoa_r+0x60c>)
 8009ec4:	f7f6 f9e0 	bl	8000288 <__aeabi_dsub>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ed0:	f7f6 fe04 	bl	8000adc <__aeabi_dcmplt>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	f43f af30 	beq.w	8009d3a <_dtoa_r+0x432>
 8009eda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ede:	2b30      	cmp	r3, #48	; 0x30
 8009ee0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009ee4:	d002      	beq.n	8009eec <_dtoa_r+0x5e4>
 8009ee6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009eea:	e04a      	b.n	8009f82 <_dtoa_r+0x67a>
 8009eec:	4615      	mov	r5, r2
 8009eee:	e7f4      	b.n	8009eda <_dtoa_r+0x5d2>
 8009ef0:	4b05      	ldr	r3, [pc, #20]	; (8009f08 <_dtoa_r+0x600>)
 8009ef2:	f7f6 fb81 	bl	80005f8 <__aeabi_dmul>
 8009ef6:	e9cd 0100 	strd	r0, r1, [sp]
 8009efa:	e7bc      	b.n	8009e76 <_dtoa_r+0x56e>
 8009efc:	0800b7e8 	.word	0x0800b7e8
 8009f00:	0800b7c0 	.word	0x0800b7c0
 8009f04:	3ff00000 	.word	0x3ff00000
 8009f08:	40240000 	.word	0x40240000
 8009f0c:	401c0000 	.word	0x401c0000
 8009f10:	40140000 	.word	0x40140000
 8009f14:	3fe00000 	.word	0x3fe00000
 8009f18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009f1c:	465d      	mov	r5, fp
 8009f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f22:	4630      	mov	r0, r6
 8009f24:	4639      	mov	r1, r7
 8009f26:	f7f6 fc91 	bl	800084c <__aeabi_ddiv>
 8009f2a:	f7f6 fe15 	bl	8000b58 <__aeabi_d2iz>
 8009f2e:	4680      	mov	r8, r0
 8009f30:	f7f6 faf8 	bl	8000524 <__aeabi_i2d>
 8009f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f38:	f7f6 fb5e 	bl	80005f8 <__aeabi_dmul>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4630      	mov	r0, r6
 8009f42:	4639      	mov	r1, r7
 8009f44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009f48:	f7f6 f99e 	bl	8000288 <__aeabi_dsub>
 8009f4c:	f805 6b01 	strb.w	r6, [r5], #1
 8009f50:	eba5 060b 	sub.w	r6, r5, fp
 8009f54:	45b1      	cmp	r9, r6
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	d139      	bne.n	8009fd0 <_dtoa_r+0x6c8>
 8009f5c:	f7f6 f996 	bl	800028c <__adddf3>
 8009f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f64:	4606      	mov	r6, r0
 8009f66:	460f      	mov	r7, r1
 8009f68:	f7f6 fdd6 	bl	8000b18 <__aeabi_dcmpgt>
 8009f6c:	b9c8      	cbnz	r0, 8009fa2 <_dtoa_r+0x69a>
 8009f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f72:	4630      	mov	r0, r6
 8009f74:	4639      	mov	r1, r7
 8009f76:	f7f6 fda7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f7a:	b110      	cbz	r0, 8009f82 <_dtoa_r+0x67a>
 8009f7c:	f018 0f01 	tst.w	r8, #1
 8009f80:	d10f      	bne.n	8009fa2 <_dtoa_r+0x69a>
 8009f82:	9904      	ldr	r1, [sp, #16]
 8009f84:	4620      	mov	r0, r4
 8009f86:	f000 fe00 	bl	800ab8a <_Bfree>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f8e:	702b      	strb	r3, [r5, #0]
 8009f90:	f10a 0301 	add.w	r3, sl, #1
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 8241 	beq.w	800a420 <_dtoa_r+0xb18>
 8009f9e:	601d      	str	r5, [r3, #0]
 8009fa0:	e23e      	b.n	800a420 <_dtoa_r+0xb18>
 8009fa2:	f8cd a020 	str.w	sl, [sp, #32]
 8009fa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009faa:	2a39      	cmp	r2, #57	; 0x39
 8009fac:	f105 33ff 	add.w	r3, r5, #4294967295
 8009fb0:	d108      	bne.n	8009fc4 <_dtoa_r+0x6bc>
 8009fb2:	459b      	cmp	fp, r3
 8009fb4:	d10a      	bne.n	8009fcc <_dtoa_r+0x6c4>
 8009fb6:	9b08      	ldr	r3, [sp, #32]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	9308      	str	r3, [sp, #32]
 8009fbc:	2330      	movs	r3, #48	; 0x30
 8009fbe:	f88b 3000 	strb.w	r3, [fp]
 8009fc2:	465b      	mov	r3, fp
 8009fc4:	781a      	ldrb	r2, [r3, #0]
 8009fc6:	3201      	adds	r2, #1
 8009fc8:	701a      	strb	r2, [r3, #0]
 8009fca:	e78c      	b.n	8009ee6 <_dtoa_r+0x5de>
 8009fcc:	461d      	mov	r5, r3
 8009fce:	e7ea      	b.n	8009fa6 <_dtoa_r+0x69e>
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	4b9b      	ldr	r3, [pc, #620]	; (800a240 <_dtoa_r+0x938>)
 8009fd4:	f7f6 fb10 	bl	80005f8 <__aeabi_dmul>
 8009fd8:	2200      	movs	r2, #0
 8009fda:	2300      	movs	r3, #0
 8009fdc:	4606      	mov	r6, r0
 8009fde:	460f      	mov	r7, r1
 8009fe0:	f7f6 fd72 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d09a      	beq.n	8009f1e <_dtoa_r+0x616>
 8009fe8:	e7cb      	b.n	8009f82 <_dtoa_r+0x67a>
 8009fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fec:	2a00      	cmp	r2, #0
 8009fee:	f000 808b 	beq.w	800a108 <_dtoa_r+0x800>
 8009ff2:	9a06      	ldr	r2, [sp, #24]
 8009ff4:	2a01      	cmp	r2, #1
 8009ff6:	dc6e      	bgt.n	800a0d6 <_dtoa_r+0x7ce>
 8009ff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ffa:	2a00      	cmp	r2, #0
 8009ffc:	d067      	beq.n	800a0ce <_dtoa_r+0x7c6>
 8009ffe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a002:	9f07      	ldr	r7, [sp, #28]
 800a004:	9d05      	ldr	r5, [sp, #20]
 800a006:	9a05      	ldr	r2, [sp, #20]
 800a008:	2101      	movs	r1, #1
 800a00a:	441a      	add	r2, r3
 800a00c:	4620      	mov	r0, r4
 800a00e:	9205      	str	r2, [sp, #20]
 800a010:	4498      	add	r8, r3
 800a012:	f000 fe98 	bl	800ad46 <__i2b>
 800a016:	4606      	mov	r6, r0
 800a018:	2d00      	cmp	r5, #0
 800a01a:	dd0c      	ble.n	800a036 <_dtoa_r+0x72e>
 800a01c:	f1b8 0f00 	cmp.w	r8, #0
 800a020:	dd09      	ble.n	800a036 <_dtoa_r+0x72e>
 800a022:	4545      	cmp	r5, r8
 800a024:	9a05      	ldr	r2, [sp, #20]
 800a026:	462b      	mov	r3, r5
 800a028:	bfa8      	it	ge
 800a02a:	4643      	movge	r3, r8
 800a02c:	1ad2      	subs	r2, r2, r3
 800a02e:	9205      	str	r2, [sp, #20]
 800a030:	1aed      	subs	r5, r5, r3
 800a032:	eba8 0803 	sub.w	r8, r8, r3
 800a036:	9b07      	ldr	r3, [sp, #28]
 800a038:	b1eb      	cbz	r3, 800a076 <_dtoa_r+0x76e>
 800a03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d067      	beq.n	800a110 <_dtoa_r+0x808>
 800a040:	b18f      	cbz	r7, 800a066 <_dtoa_r+0x75e>
 800a042:	4631      	mov	r1, r6
 800a044:	463a      	mov	r2, r7
 800a046:	4620      	mov	r0, r4
 800a048:	f000 ff1c 	bl	800ae84 <__pow5mult>
 800a04c:	9a04      	ldr	r2, [sp, #16]
 800a04e:	4601      	mov	r1, r0
 800a050:	4606      	mov	r6, r0
 800a052:	4620      	mov	r0, r4
 800a054:	f000 fe80 	bl	800ad58 <__multiply>
 800a058:	9904      	ldr	r1, [sp, #16]
 800a05a:	9008      	str	r0, [sp, #32]
 800a05c:	4620      	mov	r0, r4
 800a05e:	f000 fd94 	bl	800ab8a <_Bfree>
 800a062:	9b08      	ldr	r3, [sp, #32]
 800a064:	9304      	str	r3, [sp, #16]
 800a066:	9b07      	ldr	r3, [sp, #28]
 800a068:	1bda      	subs	r2, r3, r7
 800a06a:	d004      	beq.n	800a076 <_dtoa_r+0x76e>
 800a06c:	9904      	ldr	r1, [sp, #16]
 800a06e:	4620      	mov	r0, r4
 800a070:	f000 ff08 	bl	800ae84 <__pow5mult>
 800a074:	9004      	str	r0, [sp, #16]
 800a076:	2101      	movs	r1, #1
 800a078:	4620      	mov	r0, r4
 800a07a:	f000 fe64 	bl	800ad46 <__i2b>
 800a07e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a080:	4607      	mov	r7, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	f000 81d0 	beq.w	800a428 <_dtoa_r+0xb20>
 800a088:	461a      	mov	r2, r3
 800a08a:	4601      	mov	r1, r0
 800a08c:	4620      	mov	r0, r4
 800a08e:	f000 fef9 	bl	800ae84 <__pow5mult>
 800a092:	9b06      	ldr	r3, [sp, #24]
 800a094:	2b01      	cmp	r3, #1
 800a096:	4607      	mov	r7, r0
 800a098:	dc40      	bgt.n	800a11c <_dtoa_r+0x814>
 800a09a:	9b00      	ldr	r3, [sp, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d139      	bne.n	800a114 <_dtoa_r+0x80c>
 800a0a0:	9b01      	ldr	r3, [sp, #4]
 800a0a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d136      	bne.n	800a118 <_dtoa_r+0x810>
 800a0aa:	9b01      	ldr	r3, [sp, #4]
 800a0ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0b0:	0d1b      	lsrs	r3, r3, #20
 800a0b2:	051b      	lsls	r3, r3, #20
 800a0b4:	b12b      	cbz	r3, 800a0c2 <_dtoa_r+0x7ba>
 800a0b6:	9b05      	ldr	r3, [sp, #20]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	9305      	str	r3, [sp, #20]
 800a0bc:	f108 0801 	add.w	r8, r8, #1
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	9307      	str	r3, [sp, #28]
 800a0c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d12a      	bne.n	800a120 <_dtoa_r+0x818>
 800a0ca:	2001      	movs	r0, #1
 800a0cc:	e030      	b.n	800a130 <_dtoa_r+0x828>
 800a0ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0d4:	e795      	b.n	800a002 <_dtoa_r+0x6fa>
 800a0d6:	9b07      	ldr	r3, [sp, #28]
 800a0d8:	f109 37ff 	add.w	r7, r9, #4294967295
 800a0dc:	42bb      	cmp	r3, r7
 800a0de:	bfbf      	itttt	lt
 800a0e0:	9b07      	ldrlt	r3, [sp, #28]
 800a0e2:	9707      	strlt	r7, [sp, #28]
 800a0e4:	1afa      	sublt	r2, r7, r3
 800a0e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a0e8:	bfbb      	ittet	lt
 800a0ea:	189b      	addlt	r3, r3, r2
 800a0ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a0ee:	1bdf      	subge	r7, r3, r7
 800a0f0:	2700      	movlt	r7, #0
 800a0f2:	f1b9 0f00 	cmp.w	r9, #0
 800a0f6:	bfb5      	itete	lt
 800a0f8:	9b05      	ldrlt	r3, [sp, #20]
 800a0fa:	9d05      	ldrge	r5, [sp, #20]
 800a0fc:	eba3 0509 	sublt.w	r5, r3, r9
 800a100:	464b      	movge	r3, r9
 800a102:	bfb8      	it	lt
 800a104:	2300      	movlt	r3, #0
 800a106:	e77e      	b.n	800a006 <_dtoa_r+0x6fe>
 800a108:	9f07      	ldr	r7, [sp, #28]
 800a10a:	9d05      	ldr	r5, [sp, #20]
 800a10c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a10e:	e783      	b.n	800a018 <_dtoa_r+0x710>
 800a110:	9a07      	ldr	r2, [sp, #28]
 800a112:	e7ab      	b.n	800a06c <_dtoa_r+0x764>
 800a114:	2300      	movs	r3, #0
 800a116:	e7d4      	b.n	800a0c2 <_dtoa_r+0x7ba>
 800a118:	9b00      	ldr	r3, [sp, #0]
 800a11a:	e7d2      	b.n	800a0c2 <_dtoa_r+0x7ba>
 800a11c:	2300      	movs	r3, #0
 800a11e:	9307      	str	r3, [sp, #28]
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a126:	6918      	ldr	r0, [r3, #16]
 800a128:	f000 fdbf 	bl	800acaa <__hi0bits>
 800a12c:	f1c0 0020 	rsb	r0, r0, #32
 800a130:	4440      	add	r0, r8
 800a132:	f010 001f 	ands.w	r0, r0, #31
 800a136:	d047      	beq.n	800a1c8 <_dtoa_r+0x8c0>
 800a138:	f1c0 0320 	rsb	r3, r0, #32
 800a13c:	2b04      	cmp	r3, #4
 800a13e:	dd3b      	ble.n	800a1b8 <_dtoa_r+0x8b0>
 800a140:	9b05      	ldr	r3, [sp, #20]
 800a142:	f1c0 001c 	rsb	r0, r0, #28
 800a146:	4403      	add	r3, r0
 800a148:	9305      	str	r3, [sp, #20]
 800a14a:	4405      	add	r5, r0
 800a14c:	4480      	add	r8, r0
 800a14e:	9b05      	ldr	r3, [sp, #20]
 800a150:	2b00      	cmp	r3, #0
 800a152:	dd05      	ble.n	800a160 <_dtoa_r+0x858>
 800a154:	461a      	mov	r2, r3
 800a156:	9904      	ldr	r1, [sp, #16]
 800a158:	4620      	mov	r0, r4
 800a15a:	f000 fee1 	bl	800af20 <__lshift>
 800a15e:	9004      	str	r0, [sp, #16]
 800a160:	f1b8 0f00 	cmp.w	r8, #0
 800a164:	dd05      	ble.n	800a172 <_dtoa_r+0x86a>
 800a166:	4639      	mov	r1, r7
 800a168:	4642      	mov	r2, r8
 800a16a:	4620      	mov	r0, r4
 800a16c:	f000 fed8 	bl	800af20 <__lshift>
 800a170:	4607      	mov	r7, r0
 800a172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a174:	b353      	cbz	r3, 800a1cc <_dtoa_r+0x8c4>
 800a176:	4639      	mov	r1, r7
 800a178:	9804      	ldr	r0, [sp, #16]
 800a17a:	f000 ff25 	bl	800afc8 <__mcmp>
 800a17e:	2800      	cmp	r0, #0
 800a180:	da24      	bge.n	800a1cc <_dtoa_r+0x8c4>
 800a182:	2300      	movs	r3, #0
 800a184:	220a      	movs	r2, #10
 800a186:	9904      	ldr	r1, [sp, #16]
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 fd15 	bl	800abb8 <__multadd>
 800a18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a190:	9004      	str	r0, [sp, #16]
 800a192:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a196:	2b00      	cmp	r3, #0
 800a198:	f000 814d 	beq.w	800a436 <_dtoa_r+0xb2e>
 800a19c:	2300      	movs	r3, #0
 800a19e:	4631      	mov	r1, r6
 800a1a0:	220a      	movs	r2, #10
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f000 fd08 	bl	800abb8 <__multadd>
 800a1a8:	9b02      	ldr	r3, [sp, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	dc4f      	bgt.n	800a250 <_dtoa_r+0x948>
 800a1b0:	9b06      	ldr	r3, [sp, #24]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	dd4c      	ble.n	800a250 <_dtoa_r+0x948>
 800a1b6:	e011      	b.n	800a1dc <_dtoa_r+0x8d4>
 800a1b8:	d0c9      	beq.n	800a14e <_dtoa_r+0x846>
 800a1ba:	9a05      	ldr	r2, [sp, #20]
 800a1bc:	331c      	adds	r3, #28
 800a1be:	441a      	add	r2, r3
 800a1c0:	9205      	str	r2, [sp, #20]
 800a1c2:	441d      	add	r5, r3
 800a1c4:	4498      	add	r8, r3
 800a1c6:	e7c2      	b.n	800a14e <_dtoa_r+0x846>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	e7f6      	b.n	800a1ba <_dtoa_r+0x8b2>
 800a1cc:	f1b9 0f00 	cmp.w	r9, #0
 800a1d0:	dc38      	bgt.n	800a244 <_dtoa_r+0x93c>
 800a1d2:	9b06      	ldr	r3, [sp, #24]
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	dd35      	ble.n	800a244 <_dtoa_r+0x93c>
 800a1d8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a1dc:	9b02      	ldr	r3, [sp, #8]
 800a1de:	b963      	cbnz	r3, 800a1fa <_dtoa_r+0x8f2>
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	2205      	movs	r2, #5
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f000 fce7 	bl	800abb8 <__multadd>
 800a1ea:	4601      	mov	r1, r0
 800a1ec:	4607      	mov	r7, r0
 800a1ee:	9804      	ldr	r0, [sp, #16]
 800a1f0:	f000 feea 	bl	800afc8 <__mcmp>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	f73f adcc 	bgt.w	8009d92 <_dtoa_r+0x48a>
 800a1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1fc:	465d      	mov	r5, fp
 800a1fe:	ea6f 0a03 	mvn.w	sl, r3
 800a202:	f04f 0900 	mov.w	r9, #0
 800a206:	4639      	mov	r1, r7
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 fcbe 	bl	800ab8a <_Bfree>
 800a20e:	2e00      	cmp	r6, #0
 800a210:	f43f aeb7 	beq.w	8009f82 <_dtoa_r+0x67a>
 800a214:	f1b9 0f00 	cmp.w	r9, #0
 800a218:	d005      	beq.n	800a226 <_dtoa_r+0x91e>
 800a21a:	45b1      	cmp	r9, r6
 800a21c:	d003      	beq.n	800a226 <_dtoa_r+0x91e>
 800a21e:	4649      	mov	r1, r9
 800a220:	4620      	mov	r0, r4
 800a222:	f000 fcb2 	bl	800ab8a <_Bfree>
 800a226:	4631      	mov	r1, r6
 800a228:	4620      	mov	r0, r4
 800a22a:	f000 fcae 	bl	800ab8a <_Bfree>
 800a22e:	e6a8      	b.n	8009f82 <_dtoa_r+0x67a>
 800a230:	2700      	movs	r7, #0
 800a232:	463e      	mov	r6, r7
 800a234:	e7e1      	b.n	800a1fa <_dtoa_r+0x8f2>
 800a236:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a23a:	463e      	mov	r6, r7
 800a23c:	e5a9      	b.n	8009d92 <_dtoa_r+0x48a>
 800a23e:	bf00      	nop
 800a240:	40240000 	.word	0x40240000
 800a244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a246:	f8cd 9008 	str.w	r9, [sp, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f000 80fa 	beq.w	800a444 <_dtoa_r+0xb3c>
 800a250:	2d00      	cmp	r5, #0
 800a252:	dd05      	ble.n	800a260 <_dtoa_r+0x958>
 800a254:	4631      	mov	r1, r6
 800a256:	462a      	mov	r2, r5
 800a258:	4620      	mov	r0, r4
 800a25a:	f000 fe61 	bl	800af20 <__lshift>
 800a25e:	4606      	mov	r6, r0
 800a260:	9b07      	ldr	r3, [sp, #28]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d04c      	beq.n	800a300 <_dtoa_r+0x9f8>
 800a266:	6871      	ldr	r1, [r6, #4]
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 fc5a 	bl	800ab22 <_Balloc>
 800a26e:	6932      	ldr	r2, [r6, #16]
 800a270:	3202      	adds	r2, #2
 800a272:	4605      	mov	r5, r0
 800a274:	0092      	lsls	r2, r2, #2
 800a276:	f106 010c 	add.w	r1, r6, #12
 800a27a:	300c      	adds	r0, #12
 800a27c:	f000 fc44 	bl	800ab08 <memcpy>
 800a280:	2201      	movs	r2, #1
 800a282:	4629      	mov	r1, r5
 800a284:	4620      	mov	r0, r4
 800a286:	f000 fe4b 	bl	800af20 <__lshift>
 800a28a:	9b00      	ldr	r3, [sp, #0]
 800a28c:	f8cd b014 	str.w	fp, [sp, #20]
 800a290:	f003 0301 	and.w	r3, r3, #1
 800a294:	46b1      	mov	r9, r6
 800a296:	9307      	str	r3, [sp, #28]
 800a298:	4606      	mov	r6, r0
 800a29a:	4639      	mov	r1, r7
 800a29c:	9804      	ldr	r0, [sp, #16]
 800a29e:	f7ff faa7 	bl	80097f0 <quorem>
 800a2a2:	4649      	mov	r1, r9
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a2aa:	9804      	ldr	r0, [sp, #16]
 800a2ac:	f000 fe8c 	bl	800afc8 <__mcmp>
 800a2b0:	4632      	mov	r2, r6
 800a2b2:	9000      	str	r0, [sp, #0]
 800a2b4:	4639      	mov	r1, r7
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f000 fea0 	bl	800affc <__mdiff>
 800a2bc:	68c3      	ldr	r3, [r0, #12]
 800a2be:	4602      	mov	r2, r0
 800a2c0:	bb03      	cbnz	r3, 800a304 <_dtoa_r+0x9fc>
 800a2c2:	4601      	mov	r1, r0
 800a2c4:	9008      	str	r0, [sp, #32]
 800a2c6:	9804      	ldr	r0, [sp, #16]
 800a2c8:	f000 fe7e 	bl	800afc8 <__mcmp>
 800a2cc:	9a08      	ldr	r2, [sp, #32]
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	9308      	str	r3, [sp, #32]
 800a2d6:	f000 fc58 	bl	800ab8a <_Bfree>
 800a2da:	9b08      	ldr	r3, [sp, #32]
 800a2dc:	b9a3      	cbnz	r3, 800a308 <_dtoa_r+0xa00>
 800a2de:	9a06      	ldr	r2, [sp, #24]
 800a2e0:	b992      	cbnz	r2, 800a308 <_dtoa_r+0xa00>
 800a2e2:	9a07      	ldr	r2, [sp, #28]
 800a2e4:	b982      	cbnz	r2, 800a308 <_dtoa_r+0xa00>
 800a2e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a2ea:	d029      	beq.n	800a340 <_dtoa_r+0xa38>
 800a2ec:	9b00      	ldr	r3, [sp, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	dd01      	ble.n	800a2f6 <_dtoa_r+0x9ee>
 800a2f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a2f6:	9b05      	ldr	r3, [sp, #20]
 800a2f8:	1c5d      	adds	r5, r3, #1
 800a2fa:	f883 8000 	strb.w	r8, [r3]
 800a2fe:	e782      	b.n	800a206 <_dtoa_r+0x8fe>
 800a300:	4630      	mov	r0, r6
 800a302:	e7c2      	b.n	800a28a <_dtoa_r+0x982>
 800a304:	2301      	movs	r3, #1
 800a306:	e7e3      	b.n	800a2d0 <_dtoa_r+0x9c8>
 800a308:	9a00      	ldr	r2, [sp, #0]
 800a30a:	2a00      	cmp	r2, #0
 800a30c:	db04      	blt.n	800a318 <_dtoa_r+0xa10>
 800a30e:	d125      	bne.n	800a35c <_dtoa_r+0xa54>
 800a310:	9a06      	ldr	r2, [sp, #24]
 800a312:	bb1a      	cbnz	r2, 800a35c <_dtoa_r+0xa54>
 800a314:	9a07      	ldr	r2, [sp, #28]
 800a316:	bb0a      	cbnz	r2, 800a35c <_dtoa_r+0xa54>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	ddec      	ble.n	800a2f6 <_dtoa_r+0x9ee>
 800a31c:	2201      	movs	r2, #1
 800a31e:	9904      	ldr	r1, [sp, #16]
 800a320:	4620      	mov	r0, r4
 800a322:	f000 fdfd 	bl	800af20 <__lshift>
 800a326:	4639      	mov	r1, r7
 800a328:	9004      	str	r0, [sp, #16]
 800a32a:	f000 fe4d 	bl	800afc8 <__mcmp>
 800a32e:	2800      	cmp	r0, #0
 800a330:	dc03      	bgt.n	800a33a <_dtoa_r+0xa32>
 800a332:	d1e0      	bne.n	800a2f6 <_dtoa_r+0x9ee>
 800a334:	f018 0f01 	tst.w	r8, #1
 800a338:	d0dd      	beq.n	800a2f6 <_dtoa_r+0x9ee>
 800a33a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a33e:	d1d8      	bne.n	800a2f2 <_dtoa_r+0x9ea>
 800a340:	9b05      	ldr	r3, [sp, #20]
 800a342:	9a05      	ldr	r2, [sp, #20]
 800a344:	1c5d      	adds	r5, r3, #1
 800a346:	2339      	movs	r3, #57	; 0x39
 800a348:	7013      	strb	r3, [r2, #0]
 800a34a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a34e:	2b39      	cmp	r3, #57	; 0x39
 800a350:	f105 32ff 	add.w	r2, r5, #4294967295
 800a354:	d04f      	beq.n	800a3f6 <_dtoa_r+0xaee>
 800a356:	3301      	adds	r3, #1
 800a358:	7013      	strb	r3, [r2, #0]
 800a35a:	e754      	b.n	800a206 <_dtoa_r+0x8fe>
 800a35c:	9a05      	ldr	r2, [sp, #20]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f102 0501 	add.w	r5, r2, #1
 800a364:	dd06      	ble.n	800a374 <_dtoa_r+0xa6c>
 800a366:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a36a:	d0e9      	beq.n	800a340 <_dtoa_r+0xa38>
 800a36c:	f108 0801 	add.w	r8, r8, #1
 800a370:	9b05      	ldr	r3, [sp, #20]
 800a372:	e7c2      	b.n	800a2fa <_dtoa_r+0x9f2>
 800a374:	9a02      	ldr	r2, [sp, #8]
 800a376:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a37a:	eba5 030b 	sub.w	r3, r5, fp
 800a37e:	4293      	cmp	r3, r2
 800a380:	d021      	beq.n	800a3c6 <_dtoa_r+0xabe>
 800a382:	2300      	movs	r3, #0
 800a384:	220a      	movs	r2, #10
 800a386:	9904      	ldr	r1, [sp, #16]
 800a388:	4620      	mov	r0, r4
 800a38a:	f000 fc15 	bl	800abb8 <__multadd>
 800a38e:	45b1      	cmp	r9, r6
 800a390:	9004      	str	r0, [sp, #16]
 800a392:	f04f 0300 	mov.w	r3, #0
 800a396:	f04f 020a 	mov.w	r2, #10
 800a39a:	4649      	mov	r1, r9
 800a39c:	4620      	mov	r0, r4
 800a39e:	d105      	bne.n	800a3ac <_dtoa_r+0xaa4>
 800a3a0:	f000 fc0a 	bl	800abb8 <__multadd>
 800a3a4:	4681      	mov	r9, r0
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	9505      	str	r5, [sp, #20]
 800a3aa:	e776      	b.n	800a29a <_dtoa_r+0x992>
 800a3ac:	f000 fc04 	bl	800abb8 <__multadd>
 800a3b0:	4631      	mov	r1, r6
 800a3b2:	4681      	mov	r9, r0
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	220a      	movs	r2, #10
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 fbfd 	bl	800abb8 <__multadd>
 800a3be:	4606      	mov	r6, r0
 800a3c0:	e7f2      	b.n	800a3a8 <_dtoa_r+0xaa0>
 800a3c2:	f04f 0900 	mov.w	r9, #0
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	9904      	ldr	r1, [sp, #16]
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 fda8 	bl	800af20 <__lshift>
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	9004      	str	r0, [sp, #16]
 800a3d4:	f000 fdf8 	bl	800afc8 <__mcmp>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	dcb6      	bgt.n	800a34a <_dtoa_r+0xa42>
 800a3dc:	d102      	bne.n	800a3e4 <_dtoa_r+0xadc>
 800a3de:	f018 0f01 	tst.w	r8, #1
 800a3e2:	d1b2      	bne.n	800a34a <_dtoa_r+0xa42>
 800a3e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3e8:	2b30      	cmp	r3, #48	; 0x30
 800a3ea:	f105 32ff 	add.w	r2, r5, #4294967295
 800a3ee:	f47f af0a 	bne.w	800a206 <_dtoa_r+0x8fe>
 800a3f2:	4615      	mov	r5, r2
 800a3f4:	e7f6      	b.n	800a3e4 <_dtoa_r+0xadc>
 800a3f6:	4593      	cmp	fp, r2
 800a3f8:	d105      	bne.n	800a406 <_dtoa_r+0xafe>
 800a3fa:	2331      	movs	r3, #49	; 0x31
 800a3fc:	f10a 0a01 	add.w	sl, sl, #1
 800a400:	f88b 3000 	strb.w	r3, [fp]
 800a404:	e6ff      	b.n	800a206 <_dtoa_r+0x8fe>
 800a406:	4615      	mov	r5, r2
 800a408:	e79f      	b.n	800a34a <_dtoa_r+0xa42>
 800a40a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a470 <_dtoa_r+0xb68>
 800a40e:	e007      	b.n	800a420 <_dtoa_r+0xb18>
 800a410:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a412:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a474 <_dtoa_r+0xb6c>
 800a416:	b11b      	cbz	r3, 800a420 <_dtoa_r+0xb18>
 800a418:	f10b 0308 	add.w	r3, fp, #8
 800a41c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a41e:	6013      	str	r3, [r2, #0]
 800a420:	4658      	mov	r0, fp
 800a422:	b017      	add	sp, #92	; 0x5c
 800a424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a428:	9b06      	ldr	r3, [sp, #24]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	f77f ae35 	ble.w	800a09a <_dtoa_r+0x792>
 800a430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a432:	9307      	str	r3, [sp, #28]
 800a434:	e649      	b.n	800a0ca <_dtoa_r+0x7c2>
 800a436:	9b02      	ldr	r3, [sp, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	dc03      	bgt.n	800a444 <_dtoa_r+0xb3c>
 800a43c:	9b06      	ldr	r3, [sp, #24]
 800a43e:	2b02      	cmp	r3, #2
 800a440:	f73f aecc 	bgt.w	800a1dc <_dtoa_r+0x8d4>
 800a444:	465d      	mov	r5, fp
 800a446:	4639      	mov	r1, r7
 800a448:	9804      	ldr	r0, [sp, #16]
 800a44a:	f7ff f9d1 	bl	80097f0 <quorem>
 800a44e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a452:	f805 8b01 	strb.w	r8, [r5], #1
 800a456:	9a02      	ldr	r2, [sp, #8]
 800a458:	eba5 030b 	sub.w	r3, r5, fp
 800a45c:	429a      	cmp	r2, r3
 800a45e:	ddb0      	ble.n	800a3c2 <_dtoa_r+0xaba>
 800a460:	2300      	movs	r3, #0
 800a462:	220a      	movs	r2, #10
 800a464:	9904      	ldr	r1, [sp, #16]
 800a466:	4620      	mov	r0, r4
 800a468:	f000 fba6 	bl	800abb8 <__multadd>
 800a46c:	9004      	str	r0, [sp, #16]
 800a46e:	e7ea      	b.n	800a446 <_dtoa_r+0xb3e>
 800a470:	0800b734 	.word	0x0800b734
 800a474:	0800b7a8 	.word	0x0800b7a8

0800a478 <rshift>:
 800a478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a47a:	6906      	ldr	r6, [r0, #16]
 800a47c:	114b      	asrs	r3, r1, #5
 800a47e:	429e      	cmp	r6, r3
 800a480:	f100 0414 	add.w	r4, r0, #20
 800a484:	dd30      	ble.n	800a4e8 <rshift+0x70>
 800a486:	f011 011f 	ands.w	r1, r1, #31
 800a48a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a48e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a492:	d108      	bne.n	800a4a6 <rshift+0x2e>
 800a494:	4621      	mov	r1, r4
 800a496:	42b2      	cmp	r2, r6
 800a498:	460b      	mov	r3, r1
 800a49a:	d211      	bcs.n	800a4c0 <rshift+0x48>
 800a49c:	f852 3b04 	ldr.w	r3, [r2], #4
 800a4a0:	f841 3b04 	str.w	r3, [r1], #4
 800a4a4:	e7f7      	b.n	800a496 <rshift+0x1e>
 800a4a6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a4aa:	f1c1 0c20 	rsb	ip, r1, #32
 800a4ae:	40cd      	lsrs	r5, r1
 800a4b0:	3204      	adds	r2, #4
 800a4b2:	4623      	mov	r3, r4
 800a4b4:	42b2      	cmp	r2, r6
 800a4b6:	4617      	mov	r7, r2
 800a4b8:	d30c      	bcc.n	800a4d4 <rshift+0x5c>
 800a4ba:	601d      	str	r5, [r3, #0]
 800a4bc:	b105      	cbz	r5, 800a4c0 <rshift+0x48>
 800a4be:	3304      	adds	r3, #4
 800a4c0:	1b1a      	subs	r2, r3, r4
 800a4c2:	42a3      	cmp	r3, r4
 800a4c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a4c8:	bf08      	it	eq
 800a4ca:	2300      	moveq	r3, #0
 800a4cc:	6102      	str	r2, [r0, #16]
 800a4ce:	bf08      	it	eq
 800a4d0:	6143      	streq	r3, [r0, #20]
 800a4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4d4:	683f      	ldr	r7, [r7, #0]
 800a4d6:	fa07 f70c 	lsl.w	r7, r7, ip
 800a4da:	433d      	orrs	r5, r7
 800a4dc:	f843 5b04 	str.w	r5, [r3], #4
 800a4e0:	f852 5b04 	ldr.w	r5, [r2], #4
 800a4e4:	40cd      	lsrs	r5, r1
 800a4e6:	e7e5      	b.n	800a4b4 <rshift+0x3c>
 800a4e8:	4623      	mov	r3, r4
 800a4ea:	e7e9      	b.n	800a4c0 <rshift+0x48>

0800a4ec <__hexdig_fun>:
 800a4ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a4f0:	2b09      	cmp	r3, #9
 800a4f2:	d802      	bhi.n	800a4fa <__hexdig_fun+0xe>
 800a4f4:	3820      	subs	r0, #32
 800a4f6:	b2c0      	uxtb	r0, r0
 800a4f8:	4770      	bx	lr
 800a4fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a4fe:	2b05      	cmp	r3, #5
 800a500:	d801      	bhi.n	800a506 <__hexdig_fun+0x1a>
 800a502:	3847      	subs	r0, #71	; 0x47
 800a504:	e7f7      	b.n	800a4f6 <__hexdig_fun+0xa>
 800a506:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a50a:	2b05      	cmp	r3, #5
 800a50c:	d801      	bhi.n	800a512 <__hexdig_fun+0x26>
 800a50e:	3827      	subs	r0, #39	; 0x27
 800a510:	e7f1      	b.n	800a4f6 <__hexdig_fun+0xa>
 800a512:	2000      	movs	r0, #0
 800a514:	4770      	bx	lr

0800a516 <__gethex>:
 800a516:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51a:	b08b      	sub	sp, #44	; 0x2c
 800a51c:	468a      	mov	sl, r1
 800a51e:	9002      	str	r0, [sp, #8]
 800a520:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a522:	9306      	str	r3, [sp, #24]
 800a524:	4690      	mov	r8, r2
 800a526:	f000 facd 	bl	800aac4 <__localeconv_l>
 800a52a:	6803      	ldr	r3, [r0, #0]
 800a52c:	9303      	str	r3, [sp, #12]
 800a52e:	4618      	mov	r0, r3
 800a530:	f7f5 fe4e 	bl	80001d0 <strlen>
 800a534:	9b03      	ldr	r3, [sp, #12]
 800a536:	9001      	str	r0, [sp, #4]
 800a538:	4403      	add	r3, r0
 800a53a:	f04f 0b00 	mov.w	fp, #0
 800a53e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a542:	9307      	str	r3, [sp, #28]
 800a544:	f8da 3000 	ldr.w	r3, [sl]
 800a548:	3302      	adds	r3, #2
 800a54a:	461f      	mov	r7, r3
 800a54c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a550:	2830      	cmp	r0, #48	; 0x30
 800a552:	d06c      	beq.n	800a62e <__gethex+0x118>
 800a554:	f7ff ffca 	bl	800a4ec <__hexdig_fun>
 800a558:	4604      	mov	r4, r0
 800a55a:	2800      	cmp	r0, #0
 800a55c:	d16a      	bne.n	800a634 <__gethex+0x11e>
 800a55e:	9a01      	ldr	r2, [sp, #4]
 800a560:	9903      	ldr	r1, [sp, #12]
 800a562:	4638      	mov	r0, r7
 800a564:	f001 f83c 	bl	800b5e0 <strncmp>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d166      	bne.n	800a63a <__gethex+0x124>
 800a56c:	9b01      	ldr	r3, [sp, #4]
 800a56e:	5cf8      	ldrb	r0, [r7, r3]
 800a570:	18fe      	adds	r6, r7, r3
 800a572:	f7ff ffbb 	bl	800a4ec <__hexdig_fun>
 800a576:	2800      	cmp	r0, #0
 800a578:	d062      	beq.n	800a640 <__gethex+0x12a>
 800a57a:	4633      	mov	r3, r6
 800a57c:	7818      	ldrb	r0, [r3, #0]
 800a57e:	2830      	cmp	r0, #48	; 0x30
 800a580:	461f      	mov	r7, r3
 800a582:	f103 0301 	add.w	r3, r3, #1
 800a586:	d0f9      	beq.n	800a57c <__gethex+0x66>
 800a588:	f7ff ffb0 	bl	800a4ec <__hexdig_fun>
 800a58c:	fab0 f580 	clz	r5, r0
 800a590:	096d      	lsrs	r5, r5, #5
 800a592:	4634      	mov	r4, r6
 800a594:	f04f 0b01 	mov.w	fp, #1
 800a598:	463a      	mov	r2, r7
 800a59a:	4616      	mov	r6, r2
 800a59c:	3201      	adds	r2, #1
 800a59e:	7830      	ldrb	r0, [r6, #0]
 800a5a0:	f7ff ffa4 	bl	800a4ec <__hexdig_fun>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d1f8      	bne.n	800a59a <__gethex+0x84>
 800a5a8:	9a01      	ldr	r2, [sp, #4]
 800a5aa:	9903      	ldr	r1, [sp, #12]
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f001 f817 	bl	800b5e0 <strncmp>
 800a5b2:	b950      	cbnz	r0, 800a5ca <__gethex+0xb4>
 800a5b4:	b954      	cbnz	r4, 800a5cc <__gethex+0xb6>
 800a5b6:	9b01      	ldr	r3, [sp, #4]
 800a5b8:	18f4      	adds	r4, r6, r3
 800a5ba:	4622      	mov	r2, r4
 800a5bc:	4616      	mov	r6, r2
 800a5be:	3201      	adds	r2, #1
 800a5c0:	7830      	ldrb	r0, [r6, #0]
 800a5c2:	f7ff ff93 	bl	800a4ec <__hexdig_fun>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d1f8      	bne.n	800a5bc <__gethex+0xa6>
 800a5ca:	b10c      	cbz	r4, 800a5d0 <__gethex+0xba>
 800a5cc:	1ba4      	subs	r4, r4, r6
 800a5ce:	00a4      	lsls	r4, r4, #2
 800a5d0:	7833      	ldrb	r3, [r6, #0]
 800a5d2:	2b50      	cmp	r3, #80	; 0x50
 800a5d4:	d001      	beq.n	800a5da <__gethex+0xc4>
 800a5d6:	2b70      	cmp	r3, #112	; 0x70
 800a5d8:	d140      	bne.n	800a65c <__gethex+0x146>
 800a5da:	7873      	ldrb	r3, [r6, #1]
 800a5dc:	2b2b      	cmp	r3, #43	; 0x2b
 800a5de:	d031      	beq.n	800a644 <__gethex+0x12e>
 800a5e0:	2b2d      	cmp	r3, #45	; 0x2d
 800a5e2:	d033      	beq.n	800a64c <__gethex+0x136>
 800a5e4:	1c71      	adds	r1, r6, #1
 800a5e6:	f04f 0900 	mov.w	r9, #0
 800a5ea:	7808      	ldrb	r0, [r1, #0]
 800a5ec:	f7ff ff7e 	bl	800a4ec <__hexdig_fun>
 800a5f0:	1e43      	subs	r3, r0, #1
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	2b18      	cmp	r3, #24
 800a5f6:	d831      	bhi.n	800a65c <__gethex+0x146>
 800a5f8:	f1a0 0210 	sub.w	r2, r0, #16
 800a5fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a600:	f7ff ff74 	bl	800a4ec <__hexdig_fun>
 800a604:	1e43      	subs	r3, r0, #1
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b18      	cmp	r3, #24
 800a60a:	d922      	bls.n	800a652 <__gethex+0x13c>
 800a60c:	f1b9 0f00 	cmp.w	r9, #0
 800a610:	d000      	beq.n	800a614 <__gethex+0xfe>
 800a612:	4252      	negs	r2, r2
 800a614:	4414      	add	r4, r2
 800a616:	f8ca 1000 	str.w	r1, [sl]
 800a61a:	b30d      	cbz	r5, 800a660 <__gethex+0x14a>
 800a61c:	f1bb 0f00 	cmp.w	fp, #0
 800a620:	bf0c      	ite	eq
 800a622:	2706      	moveq	r7, #6
 800a624:	2700      	movne	r7, #0
 800a626:	4638      	mov	r0, r7
 800a628:	b00b      	add	sp, #44	; 0x2c
 800a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62e:	f10b 0b01 	add.w	fp, fp, #1
 800a632:	e78a      	b.n	800a54a <__gethex+0x34>
 800a634:	2500      	movs	r5, #0
 800a636:	462c      	mov	r4, r5
 800a638:	e7ae      	b.n	800a598 <__gethex+0x82>
 800a63a:	463e      	mov	r6, r7
 800a63c:	2501      	movs	r5, #1
 800a63e:	e7c7      	b.n	800a5d0 <__gethex+0xba>
 800a640:	4604      	mov	r4, r0
 800a642:	e7fb      	b.n	800a63c <__gethex+0x126>
 800a644:	f04f 0900 	mov.w	r9, #0
 800a648:	1cb1      	adds	r1, r6, #2
 800a64a:	e7ce      	b.n	800a5ea <__gethex+0xd4>
 800a64c:	f04f 0901 	mov.w	r9, #1
 800a650:	e7fa      	b.n	800a648 <__gethex+0x132>
 800a652:	230a      	movs	r3, #10
 800a654:	fb03 0202 	mla	r2, r3, r2, r0
 800a658:	3a10      	subs	r2, #16
 800a65a:	e7cf      	b.n	800a5fc <__gethex+0xe6>
 800a65c:	4631      	mov	r1, r6
 800a65e:	e7da      	b.n	800a616 <__gethex+0x100>
 800a660:	1bf3      	subs	r3, r6, r7
 800a662:	3b01      	subs	r3, #1
 800a664:	4629      	mov	r1, r5
 800a666:	2b07      	cmp	r3, #7
 800a668:	dc49      	bgt.n	800a6fe <__gethex+0x1e8>
 800a66a:	9802      	ldr	r0, [sp, #8]
 800a66c:	f000 fa59 	bl	800ab22 <_Balloc>
 800a670:	9b01      	ldr	r3, [sp, #4]
 800a672:	f100 0914 	add.w	r9, r0, #20
 800a676:	f04f 0b00 	mov.w	fp, #0
 800a67a:	f1c3 0301 	rsb	r3, r3, #1
 800a67e:	4605      	mov	r5, r0
 800a680:	f8cd 9010 	str.w	r9, [sp, #16]
 800a684:	46da      	mov	sl, fp
 800a686:	9308      	str	r3, [sp, #32]
 800a688:	42b7      	cmp	r7, r6
 800a68a:	d33b      	bcc.n	800a704 <__gethex+0x1ee>
 800a68c:	9804      	ldr	r0, [sp, #16]
 800a68e:	f840 ab04 	str.w	sl, [r0], #4
 800a692:	eba0 0009 	sub.w	r0, r0, r9
 800a696:	1080      	asrs	r0, r0, #2
 800a698:	6128      	str	r0, [r5, #16]
 800a69a:	0147      	lsls	r7, r0, #5
 800a69c:	4650      	mov	r0, sl
 800a69e:	f000 fb04 	bl	800acaa <__hi0bits>
 800a6a2:	f8d8 6000 	ldr.w	r6, [r8]
 800a6a6:	1a3f      	subs	r7, r7, r0
 800a6a8:	42b7      	cmp	r7, r6
 800a6aa:	dd64      	ble.n	800a776 <__gethex+0x260>
 800a6ac:	1bbf      	subs	r7, r7, r6
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	f000 fe13 	bl	800b2dc <__any_on>
 800a6b6:	4682      	mov	sl, r0
 800a6b8:	b178      	cbz	r0, 800a6da <__gethex+0x1c4>
 800a6ba:	1e7b      	subs	r3, r7, #1
 800a6bc:	1159      	asrs	r1, r3, #5
 800a6be:	f003 021f 	and.w	r2, r3, #31
 800a6c2:	f04f 0a01 	mov.w	sl, #1
 800a6c6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a6ca:	fa0a f202 	lsl.w	r2, sl, r2
 800a6ce:	420a      	tst	r2, r1
 800a6d0:	d003      	beq.n	800a6da <__gethex+0x1c4>
 800a6d2:	4553      	cmp	r3, sl
 800a6d4:	dc46      	bgt.n	800a764 <__gethex+0x24e>
 800a6d6:	f04f 0a02 	mov.w	sl, #2
 800a6da:	4639      	mov	r1, r7
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f7ff fecb 	bl	800a478 <rshift>
 800a6e2:	443c      	add	r4, r7
 800a6e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6e8:	42a3      	cmp	r3, r4
 800a6ea:	da52      	bge.n	800a792 <__gethex+0x27c>
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	9802      	ldr	r0, [sp, #8]
 800a6f0:	f000 fa4b 	bl	800ab8a <_Bfree>
 800a6f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	6013      	str	r3, [r2, #0]
 800a6fa:	27a3      	movs	r7, #163	; 0xa3
 800a6fc:	e793      	b.n	800a626 <__gethex+0x110>
 800a6fe:	3101      	adds	r1, #1
 800a700:	105b      	asrs	r3, r3, #1
 800a702:	e7b0      	b.n	800a666 <__gethex+0x150>
 800a704:	1e73      	subs	r3, r6, #1
 800a706:	9305      	str	r3, [sp, #20]
 800a708:	9a07      	ldr	r2, [sp, #28]
 800a70a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a70e:	4293      	cmp	r3, r2
 800a710:	d018      	beq.n	800a744 <__gethex+0x22e>
 800a712:	f1bb 0f20 	cmp.w	fp, #32
 800a716:	d107      	bne.n	800a728 <__gethex+0x212>
 800a718:	9b04      	ldr	r3, [sp, #16]
 800a71a:	f8c3 a000 	str.w	sl, [r3]
 800a71e:	3304      	adds	r3, #4
 800a720:	f04f 0a00 	mov.w	sl, #0
 800a724:	9304      	str	r3, [sp, #16]
 800a726:	46d3      	mov	fp, sl
 800a728:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a72c:	f7ff fede 	bl	800a4ec <__hexdig_fun>
 800a730:	f000 000f 	and.w	r0, r0, #15
 800a734:	fa00 f00b 	lsl.w	r0, r0, fp
 800a738:	ea4a 0a00 	orr.w	sl, sl, r0
 800a73c:	f10b 0b04 	add.w	fp, fp, #4
 800a740:	9b05      	ldr	r3, [sp, #20]
 800a742:	e00d      	b.n	800a760 <__gethex+0x24a>
 800a744:	9b05      	ldr	r3, [sp, #20]
 800a746:	9a08      	ldr	r2, [sp, #32]
 800a748:	4413      	add	r3, r2
 800a74a:	42bb      	cmp	r3, r7
 800a74c:	d3e1      	bcc.n	800a712 <__gethex+0x1fc>
 800a74e:	4618      	mov	r0, r3
 800a750:	9a01      	ldr	r2, [sp, #4]
 800a752:	9903      	ldr	r1, [sp, #12]
 800a754:	9309      	str	r3, [sp, #36]	; 0x24
 800a756:	f000 ff43 	bl	800b5e0 <strncmp>
 800a75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d1d8      	bne.n	800a712 <__gethex+0x1fc>
 800a760:	461e      	mov	r6, r3
 800a762:	e791      	b.n	800a688 <__gethex+0x172>
 800a764:	1eb9      	subs	r1, r7, #2
 800a766:	4628      	mov	r0, r5
 800a768:	f000 fdb8 	bl	800b2dc <__any_on>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d0b2      	beq.n	800a6d6 <__gethex+0x1c0>
 800a770:	f04f 0a03 	mov.w	sl, #3
 800a774:	e7b1      	b.n	800a6da <__gethex+0x1c4>
 800a776:	da09      	bge.n	800a78c <__gethex+0x276>
 800a778:	1bf7      	subs	r7, r6, r7
 800a77a:	4629      	mov	r1, r5
 800a77c:	463a      	mov	r2, r7
 800a77e:	9802      	ldr	r0, [sp, #8]
 800a780:	f000 fbce 	bl	800af20 <__lshift>
 800a784:	1be4      	subs	r4, r4, r7
 800a786:	4605      	mov	r5, r0
 800a788:	f100 0914 	add.w	r9, r0, #20
 800a78c:	f04f 0a00 	mov.w	sl, #0
 800a790:	e7a8      	b.n	800a6e4 <__gethex+0x1ce>
 800a792:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a796:	42a0      	cmp	r0, r4
 800a798:	dd6a      	ble.n	800a870 <__gethex+0x35a>
 800a79a:	1b04      	subs	r4, r0, r4
 800a79c:	42a6      	cmp	r6, r4
 800a79e:	dc2e      	bgt.n	800a7fe <__gethex+0x2e8>
 800a7a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d022      	beq.n	800a7ee <__gethex+0x2d8>
 800a7a8:	2b03      	cmp	r3, #3
 800a7aa:	d024      	beq.n	800a7f6 <__gethex+0x2e0>
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d115      	bne.n	800a7dc <__gethex+0x2c6>
 800a7b0:	42a6      	cmp	r6, r4
 800a7b2:	d113      	bne.n	800a7dc <__gethex+0x2c6>
 800a7b4:	2e01      	cmp	r6, #1
 800a7b6:	dc0b      	bgt.n	800a7d0 <__gethex+0x2ba>
 800a7b8:	9a06      	ldr	r2, [sp, #24]
 800a7ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	612b      	str	r3, [r5, #16]
 800a7c4:	f8c9 3000 	str.w	r3, [r9]
 800a7c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7ca:	2762      	movs	r7, #98	; 0x62
 800a7cc:	601d      	str	r5, [r3, #0]
 800a7ce:	e72a      	b.n	800a626 <__gethex+0x110>
 800a7d0:	1e71      	subs	r1, r6, #1
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f000 fd82 	bl	800b2dc <__any_on>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d1ed      	bne.n	800a7b8 <__gethex+0x2a2>
 800a7dc:	4629      	mov	r1, r5
 800a7de:	9802      	ldr	r0, [sp, #8]
 800a7e0:	f000 f9d3 	bl	800ab8a <_Bfree>
 800a7e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	6013      	str	r3, [r2, #0]
 800a7ea:	2750      	movs	r7, #80	; 0x50
 800a7ec:	e71b      	b.n	800a626 <__gethex+0x110>
 800a7ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d0e1      	beq.n	800a7b8 <__gethex+0x2a2>
 800a7f4:	e7f2      	b.n	800a7dc <__gethex+0x2c6>
 800a7f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1dd      	bne.n	800a7b8 <__gethex+0x2a2>
 800a7fc:	e7ee      	b.n	800a7dc <__gethex+0x2c6>
 800a7fe:	1e67      	subs	r7, r4, #1
 800a800:	f1ba 0f00 	cmp.w	sl, #0
 800a804:	d131      	bne.n	800a86a <__gethex+0x354>
 800a806:	b127      	cbz	r7, 800a812 <__gethex+0x2fc>
 800a808:	4639      	mov	r1, r7
 800a80a:	4628      	mov	r0, r5
 800a80c:	f000 fd66 	bl	800b2dc <__any_on>
 800a810:	4682      	mov	sl, r0
 800a812:	117a      	asrs	r2, r7, #5
 800a814:	2301      	movs	r3, #1
 800a816:	f007 071f 	and.w	r7, r7, #31
 800a81a:	fa03 f707 	lsl.w	r7, r3, r7
 800a81e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a822:	4621      	mov	r1, r4
 800a824:	421f      	tst	r7, r3
 800a826:	4628      	mov	r0, r5
 800a828:	bf18      	it	ne
 800a82a:	f04a 0a02 	orrne.w	sl, sl, #2
 800a82e:	1b36      	subs	r6, r6, r4
 800a830:	f7ff fe22 	bl	800a478 <rshift>
 800a834:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a838:	2702      	movs	r7, #2
 800a83a:	f1ba 0f00 	cmp.w	sl, #0
 800a83e:	d048      	beq.n	800a8d2 <__gethex+0x3bc>
 800a840:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a844:	2b02      	cmp	r3, #2
 800a846:	d015      	beq.n	800a874 <__gethex+0x35e>
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d017      	beq.n	800a87c <__gethex+0x366>
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d109      	bne.n	800a864 <__gethex+0x34e>
 800a850:	f01a 0f02 	tst.w	sl, #2
 800a854:	d006      	beq.n	800a864 <__gethex+0x34e>
 800a856:	f8d9 3000 	ldr.w	r3, [r9]
 800a85a:	ea4a 0a03 	orr.w	sl, sl, r3
 800a85e:	f01a 0f01 	tst.w	sl, #1
 800a862:	d10e      	bne.n	800a882 <__gethex+0x36c>
 800a864:	f047 0710 	orr.w	r7, r7, #16
 800a868:	e033      	b.n	800a8d2 <__gethex+0x3bc>
 800a86a:	f04f 0a01 	mov.w	sl, #1
 800a86e:	e7d0      	b.n	800a812 <__gethex+0x2fc>
 800a870:	2701      	movs	r7, #1
 800a872:	e7e2      	b.n	800a83a <__gethex+0x324>
 800a874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a876:	f1c3 0301 	rsb	r3, r3, #1
 800a87a:	9315      	str	r3, [sp, #84]	; 0x54
 800a87c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0f0      	beq.n	800a864 <__gethex+0x34e>
 800a882:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a886:	f105 0314 	add.w	r3, r5, #20
 800a88a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a88e:	eb03 010a 	add.w	r1, r3, sl
 800a892:	f04f 0c00 	mov.w	ip, #0
 800a896:	4618      	mov	r0, r3
 800a898:	f853 2b04 	ldr.w	r2, [r3], #4
 800a89c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a8a0:	d01c      	beq.n	800a8dc <__gethex+0x3c6>
 800a8a2:	3201      	adds	r2, #1
 800a8a4:	6002      	str	r2, [r0, #0]
 800a8a6:	2f02      	cmp	r7, #2
 800a8a8:	f105 0314 	add.w	r3, r5, #20
 800a8ac:	d138      	bne.n	800a920 <__gethex+0x40a>
 800a8ae:	f8d8 2000 	ldr.w	r2, [r8]
 800a8b2:	3a01      	subs	r2, #1
 800a8b4:	42b2      	cmp	r2, r6
 800a8b6:	d10a      	bne.n	800a8ce <__gethex+0x3b8>
 800a8b8:	1171      	asrs	r1, r6, #5
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f006 061f 	and.w	r6, r6, #31
 800a8c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8c4:	fa02 f606 	lsl.w	r6, r2, r6
 800a8c8:	421e      	tst	r6, r3
 800a8ca:	bf18      	it	ne
 800a8cc:	4617      	movne	r7, r2
 800a8ce:	f047 0720 	orr.w	r7, r7, #32
 800a8d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8d4:	601d      	str	r5, [r3, #0]
 800a8d6:	9b06      	ldr	r3, [sp, #24]
 800a8d8:	601c      	str	r4, [r3, #0]
 800a8da:	e6a4      	b.n	800a626 <__gethex+0x110>
 800a8dc:	4299      	cmp	r1, r3
 800a8de:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8e2:	d8d8      	bhi.n	800a896 <__gethex+0x380>
 800a8e4:	68ab      	ldr	r3, [r5, #8]
 800a8e6:	4599      	cmp	r9, r3
 800a8e8:	db12      	blt.n	800a910 <__gethex+0x3fa>
 800a8ea:	6869      	ldr	r1, [r5, #4]
 800a8ec:	9802      	ldr	r0, [sp, #8]
 800a8ee:	3101      	adds	r1, #1
 800a8f0:	f000 f917 	bl	800ab22 <_Balloc>
 800a8f4:	692a      	ldr	r2, [r5, #16]
 800a8f6:	3202      	adds	r2, #2
 800a8f8:	f105 010c 	add.w	r1, r5, #12
 800a8fc:	4683      	mov	fp, r0
 800a8fe:	0092      	lsls	r2, r2, #2
 800a900:	300c      	adds	r0, #12
 800a902:	f000 f901 	bl	800ab08 <memcpy>
 800a906:	4629      	mov	r1, r5
 800a908:	9802      	ldr	r0, [sp, #8]
 800a90a:	f000 f93e 	bl	800ab8a <_Bfree>
 800a90e:	465d      	mov	r5, fp
 800a910:	692b      	ldr	r3, [r5, #16]
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a918:	612a      	str	r2, [r5, #16]
 800a91a:	2201      	movs	r2, #1
 800a91c:	615a      	str	r2, [r3, #20]
 800a91e:	e7c2      	b.n	800a8a6 <__gethex+0x390>
 800a920:	692a      	ldr	r2, [r5, #16]
 800a922:	454a      	cmp	r2, r9
 800a924:	dd0b      	ble.n	800a93e <__gethex+0x428>
 800a926:	2101      	movs	r1, #1
 800a928:	4628      	mov	r0, r5
 800a92a:	f7ff fda5 	bl	800a478 <rshift>
 800a92e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a932:	3401      	adds	r4, #1
 800a934:	42a3      	cmp	r3, r4
 800a936:	f6ff aed9 	blt.w	800a6ec <__gethex+0x1d6>
 800a93a:	2701      	movs	r7, #1
 800a93c:	e7c7      	b.n	800a8ce <__gethex+0x3b8>
 800a93e:	f016 061f 	ands.w	r6, r6, #31
 800a942:	d0fa      	beq.n	800a93a <__gethex+0x424>
 800a944:	449a      	add	sl, r3
 800a946:	f1c6 0620 	rsb	r6, r6, #32
 800a94a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a94e:	f000 f9ac 	bl	800acaa <__hi0bits>
 800a952:	42b0      	cmp	r0, r6
 800a954:	dbe7      	blt.n	800a926 <__gethex+0x410>
 800a956:	e7f0      	b.n	800a93a <__gethex+0x424>

0800a958 <L_shift>:
 800a958:	f1c2 0208 	rsb	r2, r2, #8
 800a95c:	0092      	lsls	r2, r2, #2
 800a95e:	b570      	push	{r4, r5, r6, lr}
 800a960:	f1c2 0620 	rsb	r6, r2, #32
 800a964:	6843      	ldr	r3, [r0, #4]
 800a966:	6804      	ldr	r4, [r0, #0]
 800a968:	fa03 f506 	lsl.w	r5, r3, r6
 800a96c:	432c      	orrs	r4, r5
 800a96e:	40d3      	lsrs	r3, r2
 800a970:	6004      	str	r4, [r0, #0]
 800a972:	f840 3f04 	str.w	r3, [r0, #4]!
 800a976:	4288      	cmp	r0, r1
 800a978:	d3f4      	bcc.n	800a964 <L_shift+0xc>
 800a97a:	bd70      	pop	{r4, r5, r6, pc}

0800a97c <__match>:
 800a97c:	b530      	push	{r4, r5, lr}
 800a97e:	6803      	ldr	r3, [r0, #0]
 800a980:	3301      	adds	r3, #1
 800a982:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a986:	b914      	cbnz	r4, 800a98e <__match+0x12>
 800a988:	6003      	str	r3, [r0, #0]
 800a98a:	2001      	movs	r0, #1
 800a98c:	bd30      	pop	{r4, r5, pc}
 800a98e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a992:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a996:	2d19      	cmp	r5, #25
 800a998:	bf98      	it	ls
 800a99a:	3220      	addls	r2, #32
 800a99c:	42a2      	cmp	r2, r4
 800a99e:	d0f0      	beq.n	800a982 <__match+0x6>
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	e7f3      	b.n	800a98c <__match+0x10>

0800a9a4 <__hexnan>:
 800a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a8:	680b      	ldr	r3, [r1, #0]
 800a9aa:	6801      	ldr	r1, [r0, #0]
 800a9ac:	115f      	asrs	r7, r3, #5
 800a9ae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a9b2:	f013 031f 	ands.w	r3, r3, #31
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	bf18      	it	ne
 800a9ba:	3704      	addne	r7, #4
 800a9bc:	2500      	movs	r5, #0
 800a9be:	1f3e      	subs	r6, r7, #4
 800a9c0:	4682      	mov	sl, r0
 800a9c2:	4690      	mov	r8, r2
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	f847 5c04 	str.w	r5, [r7, #-4]
 800a9ca:	46b1      	mov	r9, r6
 800a9cc:	4634      	mov	r4, r6
 800a9ce:	9502      	str	r5, [sp, #8]
 800a9d0:	46ab      	mov	fp, r5
 800a9d2:	784a      	ldrb	r2, [r1, #1]
 800a9d4:	1c4b      	adds	r3, r1, #1
 800a9d6:	9303      	str	r3, [sp, #12]
 800a9d8:	b342      	cbz	r2, 800aa2c <__hexnan+0x88>
 800a9da:	4610      	mov	r0, r2
 800a9dc:	9105      	str	r1, [sp, #20]
 800a9de:	9204      	str	r2, [sp, #16]
 800a9e0:	f7ff fd84 	bl	800a4ec <__hexdig_fun>
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	d143      	bne.n	800aa70 <__hexnan+0xcc>
 800a9e8:	9a04      	ldr	r2, [sp, #16]
 800a9ea:	9905      	ldr	r1, [sp, #20]
 800a9ec:	2a20      	cmp	r2, #32
 800a9ee:	d818      	bhi.n	800aa22 <__hexnan+0x7e>
 800a9f0:	9b02      	ldr	r3, [sp, #8]
 800a9f2:	459b      	cmp	fp, r3
 800a9f4:	dd13      	ble.n	800aa1e <__hexnan+0x7a>
 800a9f6:	454c      	cmp	r4, r9
 800a9f8:	d206      	bcs.n	800aa08 <__hexnan+0x64>
 800a9fa:	2d07      	cmp	r5, #7
 800a9fc:	dc04      	bgt.n	800aa08 <__hexnan+0x64>
 800a9fe:	462a      	mov	r2, r5
 800aa00:	4649      	mov	r1, r9
 800aa02:	4620      	mov	r0, r4
 800aa04:	f7ff ffa8 	bl	800a958 <L_shift>
 800aa08:	4544      	cmp	r4, r8
 800aa0a:	d944      	bls.n	800aa96 <__hexnan+0xf2>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f1a4 0904 	sub.w	r9, r4, #4
 800aa12:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa16:	f8cd b008 	str.w	fp, [sp, #8]
 800aa1a:	464c      	mov	r4, r9
 800aa1c:	461d      	mov	r5, r3
 800aa1e:	9903      	ldr	r1, [sp, #12]
 800aa20:	e7d7      	b.n	800a9d2 <__hexnan+0x2e>
 800aa22:	2a29      	cmp	r2, #41	; 0x29
 800aa24:	d14a      	bne.n	800aabc <__hexnan+0x118>
 800aa26:	3102      	adds	r1, #2
 800aa28:	f8ca 1000 	str.w	r1, [sl]
 800aa2c:	f1bb 0f00 	cmp.w	fp, #0
 800aa30:	d044      	beq.n	800aabc <__hexnan+0x118>
 800aa32:	454c      	cmp	r4, r9
 800aa34:	d206      	bcs.n	800aa44 <__hexnan+0xa0>
 800aa36:	2d07      	cmp	r5, #7
 800aa38:	dc04      	bgt.n	800aa44 <__hexnan+0xa0>
 800aa3a:	462a      	mov	r2, r5
 800aa3c:	4649      	mov	r1, r9
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f7ff ff8a 	bl	800a958 <L_shift>
 800aa44:	4544      	cmp	r4, r8
 800aa46:	d928      	bls.n	800aa9a <__hexnan+0xf6>
 800aa48:	4643      	mov	r3, r8
 800aa4a:	f854 2b04 	ldr.w	r2, [r4], #4
 800aa4e:	f843 2b04 	str.w	r2, [r3], #4
 800aa52:	42a6      	cmp	r6, r4
 800aa54:	d2f9      	bcs.n	800aa4a <__hexnan+0xa6>
 800aa56:	2200      	movs	r2, #0
 800aa58:	f843 2b04 	str.w	r2, [r3], #4
 800aa5c:	429e      	cmp	r6, r3
 800aa5e:	d2fb      	bcs.n	800aa58 <__hexnan+0xb4>
 800aa60:	6833      	ldr	r3, [r6, #0]
 800aa62:	b91b      	cbnz	r3, 800aa6c <__hexnan+0xc8>
 800aa64:	4546      	cmp	r6, r8
 800aa66:	d127      	bne.n	800aab8 <__hexnan+0x114>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	6033      	str	r3, [r6, #0]
 800aa6c:	2005      	movs	r0, #5
 800aa6e:	e026      	b.n	800aabe <__hexnan+0x11a>
 800aa70:	3501      	adds	r5, #1
 800aa72:	2d08      	cmp	r5, #8
 800aa74:	f10b 0b01 	add.w	fp, fp, #1
 800aa78:	dd06      	ble.n	800aa88 <__hexnan+0xe4>
 800aa7a:	4544      	cmp	r4, r8
 800aa7c:	d9cf      	bls.n	800aa1e <__hexnan+0x7a>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa84:	2501      	movs	r5, #1
 800aa86:	3c04      	subs	r4, #4
 800aa88:	6822      	ldr	r2, [r4, #0]
 800aa8a:	f000 000f 	and.w	r0, r0, #15
 800aa8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa92:	6020      	str	r0, [r4, #0]
 800aa94:	e7c3      	b.n	800aa1e <__hexnan+0x7a>
 800aa96:	2508      	movs	r5, #8
 800aa98:	e7c1      	b.n	800aa1e <__hexnan+0x7a>
 800aa9a:	9b01      	ldr	r3, [sp, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d0df      	beq.n	800aa60 <__hexnan+0xbc>
 800aaa0:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa4:	f1c3 0320 	rsb	r3, r3, #32
 800aaa8:	fa22 f303 	lsr.w	r3, r2, r3
 800aaac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800aab0:	401a      	ands	r2, r3
 800aab2:	f847 2c04 	str.w	r2, [r7, #-4]
 800aab6:	e7d3      	b.n	800aa60 <__hexnan+0xbc>
 800aab8:	3e04      	subs	r6, #4
 800aaba:	e7d1      	b.n	800aa60 <__hexnan+0xbc>
 800aabc:	2004      	movs	r0, #4
 800aabe:	b007      	add	sp, #28
 800aac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aac4 <__localeconv_l>:
 800aac4:	30f0      	adds	r0, #240	; 0xf0
 800aac6:	4770      	bx	lr

0800aac8 <_localeconv_r>:
 800aac8:	4b04      	ldr	r3, [pc, #16]	; (800aadc <_localeconv_r+0x14>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	6a18      	ldr	r0, [r3, #32]
 800aace:	4b04      	ldr	r3, [pc, #16]	; (800aae0 <_localeconv_r+0x18>)
 800aad0:	2800      	cmp	r0, #0
 800aad2:	bf08      	it	eq
 800aad4:	4618      	moveq	r0, r3
 800aad6:	30f0      	adds	r0, #240	; 0xf0
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	20000184 	.word	0x20000184
 800aae0:	200001e8 	.word	0x200001e8

0800aae4 <__ascii_mbtowc>:
 800aae4:	b082      	sub	sp, #8
 800aae6:	b901      	cbnz	r1, 800aaea <__ascii_mbtowc+0x6>
 800aae8:	a901      	add	r1, sp, #4
 800aaea:	b142      	cbz	r2, 800aafe <__ascii_mbtowc+0x1a>
 800aaec:	b14b      	cbz	r3, 800ab02 <__ascii_mbtowc+0x1e>
 800aaee:	7813      	ldrb	r3, [r2, #0]
 800aaf0:	600b      	str	r3, [r1, #0]
 800aaf2:	7812      	ldrb	r2, [r2, #0]
 800aaf4:	1c10      	adds	r0, r2, #0
 800aaf6:	bf18      	it	ne
 800aaf8:	2001      	movne	r0, #1
 800aafa:	b002      	add	sp, #8
 800aafc:	4770      	bx	lr
 800aafe:	4610      	mov	r0, r2
 800ab00:	e7fb      	b.n	800aafa <__ascii_mbtowc+0x16>
 800ab02:	f06f 0001 	mvn.w	r0, #1
 800ab06:	e7f8      	b.n	800aafa <__ascii_mbtowc+0x16>

0800ab08 <memcpy>:
 800ab08:	b510      	push	{r4, lr}
 800ab0a:	1e43      	subs	r3, r0, #1
 800ab0c:	440a      	add	r2, r1
 800ab0e:	4291      	cmp	r1, r2
 800ab10:	d100      	bne.n	800ab14 <memcpy+0xc>
 800ab12:	bd10      	pop	{r4, pc}
 800ab14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab1c:	e7f7      	b.n	800ab0e <memcpy+0x6>

0800ab1e <__malloc_lock>:
 800ab1e:	4770      	bx	lr

0800ab20 <__malloc_unlock>:
 800ab20:	4770      	bx	lr

0800ab22 <_Balloc>:
 800ab22:	b570      	push	{r4, r5, r6, lr}
 800ab24:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ab26:	4604      	mov	r4, r0
 800ab28:	460e      	mov	r6, r1
 800ab2a:	b93d      	cbnz	r5, 800ab3c <_Balloc+0x1a>
 800ab2c:	2010      	movs	r0, #16
 800ab2e:	f7fd fad9 	bl	80080e4 <malloc>
 800ab32:	6260      	str	r0, [r4, #36]	; 0x24
 800ab34:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab38:	6005      	str	r5, [r0, #0]
 800ab3a:	60c5      	str	r5, [r0, #12]
 800ab3c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ab3e:	68eb      	ldr	r3, [r5, #12]
 800ab40:	b183      	cbz	r3, 800ab64 <_Balloc+0x42>
 800ab42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ab4a:	b9b8      	cbnz	r0, 800ab7c <_Balloc+0x5a>
 800ab4c:	2101      	movs	r1, #1
 800ab4e:	fa01 f506 	lsl.w	r5, r1, r6
 800ab52:	1d6a      	adds	r2, r5, #5
 800ab54:	0092      	lsls	r2, r2, #2
 800ab56:	4620      	mov	r0, r4
 800ab58:	f000 fbe1 	bl	800b31e <_calloc_r>
 800ab5c:	b160      	cbz	r0, 800ab78 <_Balloc+0x56>
 800ab5e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ab62:	e00e      	b.n	800ab82 <_Balloc+0x60>
 800ab64:	2221      	movs	r2, #33	; 0x21
 800ab66:	2104      	movs	r1, #4
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f000 fbd8 	bl	800b31e <_calloc_r>
 800ab6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab70:	60e8      	str	r0, [r5, #12]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1e4      	bne.n	800ab42 <_Balloc+0x20>
 800ab78:	2000      	movs	r0, #0
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}
 800ab7c:	6802      	ldr	r2, [r0, #0]
 800ab7e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ab82:	2300      	movs	r3, #0
 800ab84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab88:	e7f7      	b.n	800ab7a <_Balloc+0x58>

0800ab8a <_Bfree>:
 800ab8a:	b570      	push	{r4, r5, r6, lr}
 800ab8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ab8e:	4606      	mov	r6, r0
 800ab90:	460d      	mov	r5, r1
 800ab92:	b93c      	cbnz	r4, 800aba4 <_Bfree+0x1a>
 800ab94:	2010      	movs	r0, #16
 800ab96:	f7fd faa5 	bl	80080e4 <malloc>
 800ab9a:	6270      	str	r0, [r6, #36]	; 0x24
 800ab9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aba0:	6004      	str	r4, [r0, #0]
 800aba2:	60c4      	str	r4, [r0, #12]
 800aba4:	b13d      	cbz	r5, 800abb6 <_Bfree+0x2c>
 800aba6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aba8:	686a      	ldr	r2, [r5, #4]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abb0:	6029      	str	r1, [r5, #0]
 800abb2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800abb6:	bd70      	pop	{r4, r5, r6, pc}

0800abb8 <__multadd>:
 800abb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abbc:	690d      	ldr	r5, [r1, #16]
 800abbe:	461f      	mov	r7, r3
 800abc0:	4606      	mov	r6, r0
 800abc2:	460c      	mov	r4, r1
 800abc4:	f101 0c14 	add.w	ip, r1, #20
 800abc8:	2300      	movs	r3, #0
 800abca:	f8dc 0000 	ldr.w	r0, [ip]
 800abce:	b281      	uxth	r1, r0
 800abd0:	fb02 7101 	mla	r1, r2, r1, r7
 800abd4:	0c0f      	lsrs	r7, r1, #16
 800abd6:	0c00      	lsrs	r0, r0, #16
 800abd8:	fb02 7000 	mla	r0, r2, r0, r7
 800abdc:	b289      	uxth	r1, r1
 800abde:	3301      	adds	r3, #1
 800abe0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800abe4:	429d      	cmp	r5, r3
 800abe6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800abea:	f84c 1b04 	str.w	r1, [ip], #4
 800abee:	dcec      	bgt.n	800abca <__multadd+0x12>
 800abf0:	b1d7      	cbz	r7, 800ac28 <__multadd+0x70>
 800abf2:	68a3      	ldr	r3, [r4, #8]
 800abf4:	42ab      	cmp	r3, r5
 800abf6:	dc12      	bgt.n	800ac1e <__multadd+0x66>
 800abf8:	6861      	ldr	r1, [r4, #4]
 800abfa:	4630      	mov	r0, r6
 800abfc:	3101      	adds	r1, #1
 800abfe:	f7ff ff90 	bl	800ab22 <_Balloc>
 800ac02:	6922      	ldr	r2, [r4, #16]
 800ac04:	3202      	adds	r2, #2
 800ac06:	f104 010c 	add.w	r1, r4, #12
 800ac0a:	4680      	mov	r8, r0
 800ac0c:	0092      	lsls	r2, r2, #2
 800ac0e:	300c      	adds	r0, #12
 800ac10:	f7ff ff7a 	bl	800ab08 <memcpy>
 800ac14:	4621      	mov	r1, r4
 800ac16:	4630      	mov	r0, r6
 800ac18:	f7ff ffb7 	bl	800ab8a <_Bfree>
 800ac1c:	4644      	mov	r4, r8
 800ac1e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac22:	3501      	adds	r5, #1
 800ac24:	615f      	str	r7, [r3, #20]
 800ac26:	6125      	str	r5, [r4, #16]
 800ac28:	4620      	mov	r0, r4
 800ac2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ac2e <__s2b>:
 800ac2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac32:	460c      	mov	r4, r1
 800ac34:	4615      	mov	r5, r2
 800ac36:	461f      	mov	r7, r3
 800ac38:	2209      	movs	r2, #9
 800ac3a:	3308      	adds	r3, #8
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac42:	2100      	movs	r1, #0
 800ac44:	2201      	movs	r2, #1
 800ac46:	429a      	cmp	r2, r3
 800ac48:	db20      	blt.n	800ac8c <__s2b+0x5e>
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7ff ff69 	bl	800ab22 <_Balloc>
 800ac50:	9b08      	ldr	r3, [sp, #32]
 800ac52:	6143      	str	r3, [r0, #20]
 800ac54:	2d09      	cmp	r5, #9
 800ac56:	f04f 0301 	mov.w	r3, #1
 800ac5a:	6103      	str	r3, [r0, #16]
 800ac5c:	dd19      	ble.n	800ac92 <__s2b+0x64>
 800ac5e:	f104 0809 	add.w	r8, r4, #9
 800ac62:	46c1      	mov	r9, r8
 800ac64:	442c      	add	r4, r5
 800ac66:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ac6a:	4601      	mov	r1, r0
 800ac6c:	3b30      	subs	r3, #48	; 0x30
 800ac6e:	220a      	movs	r2, #10
 800ac70:	4630      	mov	r0, r6
 800ac72:	f7ff ffa1 	bl	800abb8 <__multadd>
 800ac76:	45a1      	cmp	r9, r4
 800ac78:	d1f5      	bne.n	800ac66 <__s2b+0x38>
 800ac7a:	eb08 0405 	add.w	r4, r8, r5
 800ac7e:	3c08      	subs	r4, #8
 800ac80:	1b2d      	subs	r5, r5, r4
 800ac82:	1963      	adds	r3, r4, r5
 800ac84:	42bb      	cmp	r3, r7
 800ac86:	db07      	blt.n	800ac98 <__s2b+0x6a>
 800ac88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac8c:	0052      	lsls	r2, r2, #1
 800ac8e:	3101      	adds	r1, #1
 800ac90:	e7d9      	b.n	800ac46 <__s2b+0x18>
 800ac92:	340a      	adds	r4, #10
 800ac94:	2509      	movs	r5, #9
 800ac96:	e7f3      	b.n	800ac80 <__s2b+0x52>
 800ac98:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac9c:	4601      	mov	r1, r0
 800ac9e:	3b30      	subs	r3, #48	; 0x30
 800aca0:	220a      	movs	r2, #10
 800aca2:	4630      	mov	r0, r6
 800aca4:	f7ff ff88 	bl	800abb8 <__multadd>
 800aca8:	e7eb      	b.n	800ac82 <__s2b+0x54>

0800acaa <__hi0bits>:
 800acaa:	0c02      	lsrs	r2, r0, #16
 800acac:	0412      	lsls	r2, r2, #16
 800acae:	4603      	mov	r3, r0
 800acb0:	b9b2      	cbnz	r2, 800ace0 <__hi0bits+0x36>
 800acb2:	0403      	lsls	r3, r0, #16
 800acb4:	2010      	movs	r0, #16
 800acb6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800acba:	bf04      	itt	eq
 800acbc:	021b      	lsleq	r3, r3, #8
 800acbe:	3008      	addeq	r0, #8
 800acc0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800acc4:	bf04      	itt	eq
 800acc6:	011b      	lsleq	r3, r3, #4
 800acc8:	3004      	addeq	r0, #4
 800acca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800acce:	bf04      	itt	eq
 800acd0:	009b      	lsleq	r3, r3, #2
 800acd2:	3002      	addeq	r0, #2
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	db06      	blt.n	800ace6 <__hi0bits+0x3c>
 800acd8:	005b      	lsls	r3, r3, #1
 800acda:	d503      	bpl.n	800ace4 <__hi0bits+0x3a>
 800acdc:	3001      	adds	r0, #1
 800acde:	4770      	bx	lr
 800ace0:	2000      	movs	r0, #0
 800ace2:	e7e8      	b.n	800acb6 <__hi0bits+0xc>
 800ace4:	2020      	movs	r0, #32
 800ace6:	4770      	bx	lr

0800ace8 <__lo0bits>:
 800ace8:	6803      	ldr	r3, [r0, #0]
 800acea:	f013 0207 	ands.w	r2, r3, #7
 800acee:	4601      	mov	r1, r0
 800acf0:	d00b      	beq.n	800ad0a <__lo0bits+0x22>
 800acf2:	07da      	lsls	r2, r3, #31
 800acf4:	d423      	bmi.n	800ad3e <__lo0bits+0x56>
 800acf6:	0798      	lsls	r0, r3, #30
 800acf8:	bf49      	itett	mi
 800acfa:	085b      	lsrmi	r3, r3, #1
 800acfc:	089b      	lsrpl	r3, r3, #2
 800acfe:	2001      	movmi	r0, #1
 800ad00:	600b      	strmi	r3, [r1, #0]
 800ad02:	bf5c      	itt	pl
 800ad04:	600b      	strpl	r3, [r1, #0]
 800ad06:	2002      	movpl	r0, #2
 800ad08:	4770      	bx	lr
 800ad0a:	b298      	uxth	r0, r3
 800ad0c:	b9a8      	cbnz	r0, 800ad3a <__lo0bits+0x52>
 800ad0e:	0c1b      	lsrs	r3, r3, #16
 800ad10:	2010      	movs	r0, #16
 800ad12:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ad16:	bf04      	itt	eq
 800ad18:	0a1b      	lsreq	r3, r3, #8
 800ad1a:	3008      	addeq	r0, #8
 800ad1c:	071a      	lsls	r2, r3, #28
 800ad1e:	bf04      	itt	eq
 800ad20:	091b      	lsreq	r3, r3, #4
 800ad22:	3004      	addeq	r0, #4
 800ad24:	079a      	lsls	r2, r3, #30
 800ad26:	bf04      	itt	eq
 800ad28:	089b      	lsreq	r3, r3, #2
 800ad2a:	3002      	addeq	r0, #2
 800ad2c:	07da      	lsls	r2, r3, #31
 800ad2e:	d402      	bmi.n	800ad36 <__lo0bits+0x4e>
 800ad30:	085b      	lsrs	r3, r3, #1
 800ad32:	d006      	beq.n	800ad42 <__lo0bits+0x5a>
 800ad34:	3001      	adds	r0, #1
 800ad36:	600b      	str	r3, [r1, #0]
 800ad38:	4770      	bx	lr
 800ad3a:	4610      	mov	r0, r2
 800ad3c:	e7e9      	b.n	800ad12 <__lo0bits+0x2a>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	4770      	bx	lr
 800ad42:	2020      	movs	r0, #32
 800ad44:	4770      	bx	lr

0800ad46 <__i2b>:
 800ad46:	b510      	push	{r4, lr}
 800ad48:	460c      	mov	r4, r1
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	f7ff fee9 	bl	800ab22 <_Balloc>
 800ad50:	2201      	movs	r2, #1
 800ad52:	6144      	str	r4, [r0, #20]
 800ad54:	6102      	str	r2, [r0, #16]
 800ad56:	bd10      	pop	{r4, pc}

0800ad58 <__multiply>:
 800ad58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	4614      	mov	r4, r2
 800ad5e:	690a      	ldr	r2, [r1, #16]
 800ad60:	6923      	ldr	r3, [r4, #16]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	bfb8      	it	lt
 800ad66:	460b      	movlt	r3, r1
 800ad68:	4688      	mov	r8, r1
 800ad6a:	bfbc      	itt	lt
 800ad6c:	46a0      	movlt	r8, r4
 800ad6e:	461c      	movlt	r4, r3
 800ad70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad78:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad80:	eb07 0609 	add.w	r6, r7, r9
 800ad84:	42b3      	cmp	r3, r6
 800ad86:	bfb8      	it	lt
 800ad88:	3101      	addlt	r1, #1
 800ad8a:	f7ff feca 	bl	800ab22 <_Balloc>
 800ad8e:	f100 0514 	add.w	r5, r0, #20
 800ad92:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ad96:	462b      	mov	r3, r5
 800ad98:	2200      	movs	r2, #0
 800ad9a:	4573      	cmp	r3, lr
 800ad9c:	d316      	bcc.n	800adcc <__multiply+0x74>
 800ad9e:	f104 0214 	add.w	r2, r4, #20
 800ada2:	f108 0114 	add.w	r1, r8, #20
 800ada6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800adaa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	9b00      	ldr	r3, [sp, #0]
 800adb2:	9201      	str	r2, [sp, #4]
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d80c      	bhi.n	800add2 <__multiply+0x7a>
 800adb8:	2e00      	cmp	r6, #0
 800adba:	dd03      	ble.n	800adc4 <__multiply+0x6c>
 800adbc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d05d      	beq.n	800ae80 <__multiply+0x128>
 800adc4:	6106      	str	r6, [r0, #16]
 800adc6:	b003      	add	sp, #12
 800adc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adcc:	f843 2b04 	str.w	r2, [r3], #4
 800add0:	e7e3      	b.n	800ad9a <__multiply+0x42>
 800add2:	f8b2 b000 	ldrh.w	fp, [r2]
 800add6:	f1bb 0f00 	cmp.w	fp, #0
 800adda:	d023      	beq.n	800ae24 <__multiply+0xcc>
 800addc:	4689      	mov	r9, r1
 800adde:	46ac      	mov	ip, r5
 800ade0:	f04f 0800 	mov.w	r8, #0
 800ade4:	f859 4b04 	ldr.w	r4, [r9], #4
 800ade8:	f8dc a000 	ldr.w	sl, [ip]
 800adec:	b2a3      	uxth	r3, r4
 800adee:	fa1f fa8a 	uxth.w	sl, sl
 800adf2:	fb0b a303 	mla	r3, fp, r3, sl
 800adf6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800adfa:	f8dc 4000 	ldr.w	r4, [ip]
 800adfe:	4443      	add	r3, r8
 800ae00:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ae04:	fb0b 840a 	mla	r4, fp, sl, r8
 800ae08:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ae0c:	46e2      	mov	sl, ip
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ae14:	454f      	cmp	r7, r9
 800ae16:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ae1a:	f84a 3b04 	str.w	r3, [sl], #4
 800ae1e:	d82b      	bhi.n	800ae78 <__multiply+0x120>
 800ae20:	f8cc 8004 	str.w	r8, [ip, #4]
 800ae24:	9b01      	ldr	r3, [sp, #4]
 800ae26:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ae2a:	3204      	adds	r2, #4
 800ae2c:	f1ba 0f00 	cmp.w	sl, #0
 800ae30:	d020      	beq.n	800ae74 <__multiply+0x11c>
 800ae32:	682b      	ldr	r3, [r5, #0]
 800ae34:	4689      	mov	r9, r1
 800ae36:	46a8      	mov	r8, r5
 800ae38:	f04f 0b00 	mov.w	fp, #0
 800ae3c:	f8b9 c000 	ldrh.w	ip, [r9]
 800ae40:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ae44:	fb0a 440c 	mla	r4, sl, ip, r4
 800ae48:	445c      	add	r4, fp
 800ae4a:	46c4      	mov	ip, r8
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ae52:	f84c 3b04 	str.w	r3, [ip], #4
 800ae56:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae5a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ae5e:	0c1b      	lsrs	r3, r3, #16
 800ae60:	fb0a b303 	mla	r3, sl, r3, fp
 800ae64:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ae68:	454f      	cmp	r7, r9
 800ae6a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ae6e:	d805      	bhi.n	800ae7c <__multiply+0x124>
 800ae70:	f8c8 3004 	str.w	r3, [r8, #4]
 800ae74:	3504      	adds	r5, #4
 800ae76:	e79b      	b.n	800adb0 <__multiply+0x58>
 800ae78:	46d4      	mov	ip, sl
 800ae7a:	e7b3      	b.n	800ade4 <__multiply+0x8c>
 800ae7c:	46e0      	mov	r8, ip
 800ae7e:	e7dd      	b.n	800ae3c <__multiply+0xe4>
 800ae80:	3e01      	subs	r6, #1
 800ae82:	e799      	b.n	800adb8 <__multiply+0x60>

0800ae84 <__pow5mult>:
 800ae84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae88:	4615      	mov	r5, r2
 800ae8a:	f012 0203 	ands.w	r2, r2, #3
 800ae8e:	4606      	mov	r6, r0
 800ae90:	460f      	mov	r7, r1
 800ae92:	d007      	beq.n	800aea4 <__pow5mult+0x20>
 800ae94:	3a01      	subs	r2, #1
 800ae96:	4c21      	ldr	r4, [pc, #132]	; (800af1c <__pow5mult+0x98>)
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae9e:	f7ff fe8b 	bl	800abb8 <__multadd>
 800aea2:	4607      	mov	r7, r0
 800aea4:	10ad      	asrs	r5, r5, #2
 800aea6:	d035      	beq.n	800af14 <__pow5mult+0x90>
 800aea8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aeaa:	b93c      	cbnz	r4, 800aebc <__pow5mult+0x38>
 800aeac:	2010      	movs	r0, #16
 800aeae:	f7fd f919 	bl	80080e4 <malloc>
 800aeb2:	6270      	str	r0, [r6, #36]	; 0x24
 800aeb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aeb8:	6004      	str	r4, [r0, #0]
 800aeba:	60c4      	str	r4, [r0, #12]
 800aebc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aec0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aec4:	b94c      	cbnz	r4, 800aeda <__pow5mult+0x56>
 800aec6:	f240 2171 	movw	r1, #625	; 0x271
 800aeca:	4630      	mov	r0, r6
 800aecc:	f7ff ff3b 	bl	800ad46 <__i2b>
 800aed0:	2300      	movs	r3, #0
 800aed2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aed6:	4604      	mov	r4, r0
 800aed8:	6003      	str	r3, [r0, #0]
 800aeda:	f04f 0800 	mov.w	r8, #0
 800aede:	07eb      	lsls	r3, r5, #31
 800aee0:	d50a      	bpl.n	800aef8 <__pow5mult+0x74>
 800aee2:	4639      	mov	r1, r7
 800aee4:	4622      	mov	r2, r4
 800aee6:	4630      	mov	r0, r6
 800aee8:	f7ff ff36 	bl	800ad58 <__multiply>
 800aeec:	4639      	mov	r1, r7
 800aeee:	4681      	mov	r9, r0
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7ff fe4a 	bl	800ab8a <_Bfree>
 800aef6:	464f      	mov	r7, r9
 800aef8:	106d      	asrs	r5, r5, #1
 800aefa:	d00b      	beq.n	800af14 <__pow5mult+0x90>
 800aefc:	6820      	ldr	r0, [r4, #0]
 800aefe:	b938      	cbnz	r0, 800af10 <__pow5mult+0x8c>
 800af00:	4622      	mov	r2, r4
 800af02:	4621      	mov	r1, r4
 800af04:	4630      	mov	r0, r6
 800af06:	f7ff ff27 	bl	800ad58 <__multiply>
 800af0a:	6020      	str	r0, [r4, #0]
 800af0c:	f8c0 8000 	str.w	r8, [r0]
 800af10:	4604      	mov	r4, r0
 800af12:	e7e4      	b.n	800aede <__pow5mult+0x5a>
 800af14:	4638      	mov	r0, r7
 800af16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af1a:	bf00      	nop
 800af1c:	0800b8b0 	.word	0x0800b8b0

0800af20 <__lshift>:
 800af20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af24:	460c      	mov	r4, r1
 800af26:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af2a:	6923      	ldr	r3, [r4, #16]
 800af2c:	6849      	ldr	r1, [r1, #4]
 800af2e:	eb0a 0903 	add.w	r9, sl, r3
 800af32:	68a3      	ldr	r3, [r4, #8]
 800af34:	4607      	mov	r7, r0
 800af36:	4616      	mov	r6, r2
 800af38:	f109 0501 	add.w	r5, r9, #1
 800af3c:	42ab      	cmp	r3, r5
 800af3e:	db32      	blt.n	800afa6 <__lshift+0x86>
 800af40:	4638      	mov	r0, r7
 800af42:	f7ff fdee 	bl	800ab22 <_Balloc>
 800af46:	2300      	movs	r3, #0
 800af48:	4680      	mov	r8, r0
 800af4a:	f100 0114 	add.w	r1, r0, #20
 800af4e:	461a      	mov	r2, r3
 800af50:	4553      	cmp	r3, sl
 800af52:	db2b      	blt.n	800afac <__lshift+0x8c>
 800af54:	6920      	ldr	r0, [r4, #16]
 800af56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af5a:	f104 0314 	add.w	r3, r4, #20
 800af5e:	f016 021f 	ands.w	r2, r6, #31
 800af62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af6a:	d025      	beq.n	800afb8 <__lshift+0x98>
 800af6c:	f1c2 0e20 	rsb	lr, r2, #32
 800af70:	2000      	movs	r0, #0
 800af72:	681e      	ldr	r6, [r3, #0]
 800af74:	468a      	mov	sl, r1
 800af76:	4096      	lsls	r6, r2
 800af78:	4330      	orrs	r0, r6
 800af7a:	f84a 0b04 	str.w	r0, [sl], #4
 800af7e:	f853 0b04 	ldr.w	r0, [r3], #4
 800af82:	459c      	cmp	ip, r3
 800af84:	fa20 f00e 	lsr.w	r0, r0, lr
 800af88:	d814      	bhi.n	800afb4 <__lshift+0x94>
 800af8a:	6048      	str	r0, [r1, #4]
 800af8c:	b108      	cbz	r0, 800af92 <__lshift+0x72>
 800af8e:	f109 0502 	add.w	r5, r9, #2
 800af92:	3d01      	subs	r5, #1
 800af94:	4638      	mov	r0, r7
 800af96:	f8c8 5010 	str.w	r5, [r8, #16]
 800af9a:	4621      	mov	r1, r4
 800af9c:	f7ff fdf5 	bl	800ab8a <_Bfree>
 800afa0:	4640      	mov	r0, r8
 800afa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa6:	3101      	adds	r1, #1
 800afa8:	005b      	lsls	r3, r3, #1
 800afaa:	e7c7      	b.n	800af3c <__lshift+0x1c>
 800afac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800afb0:	3301      	adds	r3, #1
 800afb2:	e7cd      	b.n	800af50 <__lshift+0x30>
 800afb4:	4651      	mov	r1, sl
 800afb6:	e7dc      	b.n	800af72 <__lshift+0x52>
 800afb8:	3904      	subs	r1, #4
 800afba:	f853 2b04 	ldr.w	r2, [r3], #4
 800afbe:	f841 2f04 	str.w	r2, [r1, #4]!
 800afc2:	459c      	cmp	ip, r3
 800afc4:	d8f9      	bhi.n	800afba <__lshift+0x9a>
 800afc6:	e7e4      	b.n	800af92 <__lshift+0x72>

0800afc8 <__mcmp>:
 800afc8:	6903      	ldr	r3, [r0, #16]
 800afca:	690a      	ldr	r2, [r1, #16]
 800afcc:	1a9b      	subs	r3, r3, r2
 800afce:	b530      	push	{r4, r5, lr}
 800afd0:	d10c      	bne.n	800afec <__mcmp+0x24>
 800afd2:	0092      	lsls	r2, r2, #2
 800afd4:	3014      	adds	r0, #20
 800afd6:	3114      	adds	r1, #20
 800afd8:	1884      	adds	r4, r0, r2
 800afda:	4411      	add	r1, r2
 800afdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800afe0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800afe4:	4295      	cmp	r5, r2
 800afe6:	d003      	beq.n	800aff0 <__mcmp+0x28>
 800afe8:	d305      	bcc.n	800aff6 <__mcmp+0x2e>
 800afea:	2301      	movs	r3, #1
 800afec:	4618      	mov	r0, r3
 800afee:	bd30      	pop	{r4, r5, pc}
 800aff0:	42a0      	cmp	r0, r4
 800aff2:	d3f3      	bcc.n	800afdc <__mcmp+0x14>
 800aff4:	e7fa      	b.n	800afec <__mcmp+0x24>
 800aff6:	f04f 33ff 	mov.w	r3, #4294967295
 800affa:	e7f7      	b.n	800afec <__mcmp+0x24>

0800affc <__mdiff>:
 800affc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b000:	460d      	mov	r5, r1
 800b002:	4607      	mov	r7, r0
 800b004:	4611      	mov	r1, r2
 800b006:	4628      	mov	r0, r5
 800b008:	4614      	mov	r4, r2
 800b00a:	f7ff ffdd 	bl	800afc8 <__mcmp>
 800b00e:	1e06      	subs	r6, r0, #0
 800b010:	d108      	bne.n	800b024 <__mdiff+0x28>
 800b012:	4631      	mov	r1, r6
 800b014:	4638      	mov	r0, r7
 800b016:	f7ff fd84 	bl	800ab22 <_Balloc>
 800b01a:	2301      	movs	r3, #1
 800b01c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b024:	bfa4      	itt	ge
 800b026:	4623      	movge	r3, r4
 800b028:	462c      	movge	r4, r5
 800b02a:	4638      	mov	r0, r7
 800b02c:	6861      	ldr	r1, [r4, #4]
 800b02e:	bfa6      	itte	ge
 800b030:	461d      	movge	r5, r3
 800b032:	2600      	movge	r6, #0
 800b034:	2601      	movlt	r6, #1
 800b036:	f7ff fd74 	bl	800ab22 <_Balloc>
 800b03a:	692b      	ldr	r3, [r5, #16]
 800b03c:	60c6      	str	r6, [r0, #12]
 800b03e:	6926      	ldr	r6, [r4, #16]
 800b040:	f105 0914 	add.w	r9, r5, #20
 800b044:	f104 0214 	add.w	r2, r4, #20
 800b048:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b04c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b050:	f100 0514 	add.w	r5, r0, #20
 800b054:	f04f 0e00 	mov.w	lr, #0
 800b058:	f852 ab04 	ldr.w	sl, [r2], #4
 800b05c:	f859 4b04 	ldr.w	r4, [r9], #4
 800b060:	fa1e f18a 	uxtah	r1, lr, sl
 800b064:	b2a3      	uxth	r3, r4
 800b066:	1ac9      	subs	r1, r1, r3
 800b068:	0c23      	lsrs	r3, r4, #16
 800b06a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b06e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b072:	b289      	uxth	r1, r1
 800b074:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b078:	45c8      	cmp	r8, r9
 800b07a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b07e:	4694      	mov	ip, r2
 800b080:	f845 3b04 	str.w	r3, [r5], #4
 800b084:	d8e8      	bhi.n	800b058 <__mdiff+0x5c>
 800b086:	45bc      	cmp	ip, r7
 800b088:	d304      	bcc.n	800b094 <__mdiff+0x98>
 800b08a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b08e:	b183      	cbz	r3, 800b0b2 <__mdiff+0xb6>
 800b090:	6106      	str	r6, [r0, #16]
 800b092:	e7c5      	b.n	800b020 <__mdiff+0x24>
 800b094:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b098:	fa1e f381 	uxtah	r3, lr, r1
 800b09c:	141a      	asrs	r2, r3, #16
 800b09e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b0ac:	f845 3b04 	str.w	r3, [r5], #4
 800b0b0:	e7e9      	b.n	800b086 <__mdiff+0x8a>
 800b0b2:	3e01      	subs	r6, #1
 800b0b4:	e7e9      	b.n	800b08a <__mdiff+0x8e>
	...

0800b0b8 <__ulp>:
 800b0b8:	4b12      	ldr	r3, [pc, #72]	; (800b104 <__ulp+0x4c>)
 800b0ba:	ee10 2a90 	vmov	r2, s1
 800b0be:	401a      	ands	r2, r3
 800b0c0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dd04      	ble.n	800b0d2 <__ulp+0x1a>
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	ec41 0b10 	vmov	d0, r0, r1
 800b0d0:	4770      	bx	lr
 800b0d2:	425b      	negs	r3, r3
 800b0d4:	151b      	asrs	r3, r3, #20
 800b0d6:	2b13      	cmp	r3, #19
 800b0d8:	f04f 0000 	mov.w	r0, #0
 800b0dc:	f04f 0100 	mov.w	r1, #0
 800b0e0:	dc04      	bgt.n	800b0ec <__ulp+0x34>
 800b0e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b0e6:	fa42 f103 	asr.w	r1, r2, r3
 800b0ea:	e7ef      	b.n	800b0cc <__ulp+0x14>
 800b0ec:	3b14      	subs	r3, #20
 800b0ee:	2b1e      	cmp	r3, #30
 800b0f0:	f04f 0201 	mov.w	r2, #1
 800b0f4:	bfda      	itte	le
 800b0f6:	f1c3 031f 	rsble	r3, r3, #31
 800b0fa:	fa02 f303 	lslle.w	r3, r2, r3
 800b0fe:	4613      	movgt	r3, r2
 800b100:	4618      	mov	r0, r3
 800b102:	e7e3      	b.n	800b0cc <__ulp+0x14>
 800b104:	7ff00000 	.word	0x7ff00000

0800b108 <__b2d>:
 800b108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10a:	6905      	ldr	r5, [r0, #16]
 800b10c:	f100 0714 	add.w	r7, r0, #20
 800b110:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b114:	1f2e      	subs	r6, r5, #4
 800b116:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b11a:	4620      	mov	r0, r4
 800b11c:	f7ff fdc5 	bl	800acaa <__hi0bits>
 800b120:	f1c0 0320 	rsb	r3, r0, #32
 800b124:	280a      	cmp	r0, #10
 800b126:	600b      	str	r3, [r1, #0]
 800b128:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b1a0 <__b2d+0x98>
 800b12c:	dc14      	bgt.n	800b158 <__b2d+0x50>
 800b12e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b132:	fa24 f10e 	lsr.w	r1, r4, lr
 800b136:	42b7      	cmp	r7, r6
 800b138:	ea41 030c 	orr.w	r3, r1, ip
 800b13c:	bf34      	ite	cc
 800b13e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b142:	2100      	movcs	r1, #0
 800b144:	3015      	adds	r0, #21
 800b146:	fa04 f000 	lsl.w	r0, r4, r0
 800b14a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b14e:	ea40 0201 	orr.w	r2, r0, r1
 800b152:	ec43 2b10 	vmov	d0, r2, r3
 800b156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b158:	42b7      	cmp	r7, r6
 800b15a:	bf3a      	itte	cc
 800b15c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b160:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b164:	2100      	movcs	r1, #0
 800b166:	380b      	subs	r0, #11
 800b168:	d015      	beq.n	800b196 <__b2d+0x8e>
 800b16a:	4084      	lsls	r4, r0
 800b16c:	f1c0 0520 	rsb	r5, r0, #32
 800b170:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b174:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b178:	42be      	cmp	r6, r7
 800b17a:	fa21 fc05 	lsr.w	ip, r1, r5
 800b17e:	ea44 030c 	orr.w	r3, r4, ip
 800b182:	bf8c      	ite	hi
 800b184:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b188:	2400      	movls	r4, #0
 800b18a:	fa01 f000 	lsl.w	r0, r1, r0
 800b18e:	40ec      	lsrs	r4, r5
 800b190:	ea40 0204 	orr.w	r2, r0, r4
 800b194:	e7dd      	b.n	800b152 <__b2d+0x4a>
 800b196:	ea44 030c 	orr.w	r3, r4, ip
 800b19a:	460a      	mov	r2, r1
 800b19c:	e7d9      	b.n	800b152 <__b2d+0x4a>
 800b19e:	bf00      	nop
 800b1a0:	3ff00000 	.word	0x3ff00000

0800b1a4 <__d2b>:
 800b1a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1a8:	460e      	mov	r6, r1
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	ec59 8b10 	vmov	r8, r9, d0
 800b1b0:	4615      	mov	r5, r2
 800b1b2:	f7ff fcb6 	bl	800ab22 <_Balloc>
 800b1b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b1ba:	4607      	mov	r7, r0
 800b1bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1c0:	bb34      	cbnz	r4, 800b210 <__d2b+0x6c>
 800b1c2:	9301      	str	r3, [sp, #4]
 800b1c4:	f1b8 0300 	subs.w	r3, r8, #0
 800b1c8:	d027      	beq.n	800b21a <__d2b+0x76>
 800b1ca:	a802      	add	r0, sp, #8
 800b1cc:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b1d0:	f7ff fd8a 	bl	800ace8 <__lo0bits>
 800b1d4:	9900      	ldr	r1, [sp, #0]
 800b1d6:	b1f0      	cbz	r0, 800b216 <__d2b+0x72>
 800b1d8:	9a01      	ldr	r2, [sp, #4]
 800b1da:	f1c0 0320 	rsb	r3, r0, #32
 800b1de:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e2:	430b      	orrs	r3, r1
 800b1e4:	40c2      	lsrs	r2, r0
 800b1e6:	617b      	str	r3, [r7, #20]
 800b1e8:	9201      	str	r2, [sp, #4]
 800b1ea:	9b01      	ldr	r3, [sp, #4]
 800b1ec:	61bb      	str	r3, [r7, #24]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	bf14      	ite	ne
 800b1f2:	2102      	movne	r1, #2
 800b1f4:	2101      	moveq	r1, #1
 800b1f6:	6139      	str	r1, [r7, #16]
 800b1f8:	b1c4      	cbz	r4, 800b22c <__d2b+0x88>
 800b1fa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b1fe:	4404      	add	r4, r0
 800b200:	6034      	str	r4, [r6, #0]
 800b202:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b206:	6028      	str	r0, [r5, #0]
 800b208:	4638      	mov	r0, r7
 800b20a:	b003      	add	sp, #12
 800b20c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b214:	e7d5      	b.n	800b1c2 <__d2b+0x1e>
 800b216:	6179      	str	r1, [r7, #20]
 800b218:	e7e7      	b.n	800b1ea <__d2b+0x46>
 800b21a:	a801      	add	r0, sp, #4
 800b21c:	f7ff fd64 	bl	800ace8 <__lo0bits>
 800b220:	9b01      	ldr	r3, [sp, #4]
 800b222:	617b      	str	r3, [r7, #20]
 800b224:	2101      	movs	r1, #1
 800b226:	6139      	str	r1, [r7, #16]
 800b228:	3020      	adds	r0, #32
 800b22a:	e7e5      	b.n	800b1f8 <__d2b+0x54>
 800b22c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b230:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b234:	6030      	str	r0, [r6, #0]
 800b236:	6918      	ldr	r0, [r3, #16]
 800b238:	f7ff fd37 	bl	800acaa <__hi0bits>
 800b23c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b240:	e7e1      	b.n	800b206 <__d2b+0x62>

0800b242 <__ratio>:
 800b242:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b246:	4688      	mov	r8, r1
 800b248:	4669      	mov	r1, sp
 800b24a:	4681      	mov	r9, r0
 800b24c:	f7ff ff5c 	bl	800b108 <__b2d>
 800b250:	a901      	add	r1, sp, #4
 800b252:	4640      	mov	r0, r8
 800b254:	ec57 6b10 	vmov	r6, r7, d0
 800b258:	f7ff ff56 	bl	800b108 <__b2d>
 800b25c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b260:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b264:	eba3 0c02 	sub.w	ip, r3, r2
 800b268:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b26c:	1a9b      	subs	r3, r3, r2
 800b26e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b272:	ec5b ab10 	vmov	sl, fp, d0
 800b276:	2b00      	cmp	r3, #0
 800b278:	bfce      	itee	gt
 800b27a:	463a      	movgt	r2, r7
 800b27c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b280:	465a      	movle	r2, fp
 800b282:	4659      	mov	r1, fp
 800b284:	463d      	mov	r5, r7
 800b286:	bfd4      	ite	le
 800b288:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b28c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b290:	4630      	mov	r0, r6
 800b292:	ee10 2a10 	vmov	r2, s0
 800b296:	460b      	mov	r3, r1
 800b298:	4629      	mov	r1, r5
 800b29a:	f7f5 fad7 	bl	800084c <__aeabi_ddiv>
 800b29e:	ec41 0b10 	vmov	d0, r0, r1
 800b2a2:	b003      	add	sp, #12
 800b2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2a8 <__copybits>:
 800b2a8:	3901      	subs	r1, #1
 800b2aa:	b510      	push	{r4, lr}
 800b2ac:	1149      	asrs	r1, r1, #5
 800b2ae:	6914      	ldr	r4, [r2, #16]
 800b2b0:	3101      	adds	r1, #1
 800b2b2:	f102 0314 	add.w	r3, r2, #20
 800b2b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b2ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b2be:	42a3      	cmp	r3, r4
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	d303      	bcc.n	800b2cc <__copybits+0x24>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	428a      	cmp	r2, r1
 800b2c8:	d305      	bcc.n	800b2d6 <__copybits+0x2e>
 800b2ca:	bd10      	pop	{r4, pc}
 800b2cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2d0:	f840 2b04 	str.w	r2, [r0], #4
 800b2d4:	e7f3      	b.n	800b2be <__copybits+0x16>
 800b2d6:	f842 3b04 	str.w	r3, [r2], #4
 800b2da:	e7f4      	b.n	800b2c6 <__copybits+0x1e>

0800b2dc <__any_on>:
 800b2dc:	f100 0214 	add.w	r2, r0, #20
 800b2e0:	6900      	ldr	r0, [r0, #16]
 800b2e2:	114b      	asrs	r3, r1, #5
 800b2e4:	4298      	cmp	r0, r3
 800b2e6:	b510      	push	{r4, lr}
 800b2e8:	db11      	blt.n	800b30e <__any_on+0x32>
 800b2ea:	dd0a      	ble.n	800b302 <__any_on+0x26>
 800b2ec:	f011 011f 	ands.w	r1, r1, #31
 800b2f0:	d007      	beq.n	800b302 <__any_on+0x26>
 800b2f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b2f6:	fa24 f001 	lsr.w	r0, r4, r1
 800b2fa:	fa00 f101 	lsl.w	r1, r0, r1
 800b2fe:	428c      	cmp	r4, r1
 800b300:	d10b      	bne.n	800b31a <__any_on+0x3e>
 800b302:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b306:	4293      	cmp	r3, r2
 800b308:	d803      	bhi.n	800b312 <__any_on+0x36>
 800b30a:	2000      	movs	r0, #0
 800b30c:	bd10      	pop	{r4, pc}
 800b30e:	4603      	mov	r3, r0
 800b310:	e7f7      	b.n	800b302 <__any_on+0x26>
 800b312:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b316:	2900      	cmp	r1, #0
 800b318:	d0f5      	beq.n	800b306 <__any_on+0x2a>
 800b31a:	2001      	movs	r0, #1
 800b31c:	e7f6      	b.n	800b30c <__any_on+0x30>

0800b31e <_calloc_r>:
 800b31e:	b538      	push	{r3, r4, r5, lr}
 800b320:	fb02 f401 	mul.w	r4, r2, r1
 800b324:	4621      	mov	r1, r4
 800b326:	f7fc ff43 	bl	80081b0 <_malloc_r>
 800b32a:	4605      	mov	r5, r0
 800b32c:	b118      	cbz	r0, 800b336 <_calloc_r+0x18>
 800b32e:	4622      	mov	r2, r4
 800b330:	2100      	movs	r1, #0
 800b332:	f7fc fee7 	bl	8008104 <memset>
 800b336:	4628      	mov	r0, r5
 800b338:	bd38      	pop	{r3, r4, r5, pc}

0800b33a <__ssputs_r>:
 800b33a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b33e:	688e      	ldr	r6, [r1, #8]
 800b340:	429e      	cmp	r6, r3
 800b342:	4682      	mov	sl, r0
 800b344:	460c      	mov	r4, r1
 800b346:	4690      	mov	r8, r2
 800b348:	4699      	mov	r9, r3
 800b34a:	d837      	bhi.n	800b3bc <__ssputs_r+0x82>
 800b34c:	898a      	ldrh	r2, [r1, #12]
 800b34e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b352:	d031      	beq.n	800b3b8 <__ssputs_r+0x7e>
 800b354:	6825      	ldr	r5, [r4, #0]
 800b356:	6909      	ldr	r1, [r1, #16]
 800b358:	1a6f      	subs	r7, r5, r1
 800b35a:	6965      	ldr	r5, [r4, #20]
 800b35c:	2302      	movs	r3, #2
 800b35e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b362:	fb95 f5f3 	sdiv	r5, r5, r3
 800b366:	f109 0301 	add.w	r3, r9, #1
 800b36a:	443b      	add	r3, r7
 800b36c:	429d      	cmp	r5, r3
 800b36e:	bf38      	it	cc
 800b370:	461d      	movcc	r5, r3
 800b372:	0553      	lsls	r3, r2, #21
 800b374:	d530      	bpl.n	800b3d8 <__ssputs_r+0x9e>
 800b376:	4629      	mov	r1, r5
 800b378:	f7fc ff1a 	bl	80081b0 <_malloc_r>
 800b37c:	4606      	mov	r6, r0
 800b37e:	b950      	cbnz	r0, 800b396 <__ssputs_r+0x5c>
 800b380:	230c      	movs	r3, #12
 800b382:	f8ca 3000 	str.w	r3, [sl]
 800b386:	89a3      	ldrh	r3, [r4, #12]
 800b388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b38c:	81a3      	strh	r3, [r4, #12]
 800b38e:	f04f 30ff 	mov.w	r0, #4294967295
 800b392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b396:	463a      	mov	r2, r7
 800b398:	6921      	ldr	r1, [r4, #16]
 800b39a:	f7ff fbb5 	bl	800ab08 <memcpy>
 800b39e:	89a3      	ldrh	r3, [r4, #12]
 800b3a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3a8:	81a3      	strh	r3, [r4, #12]
 800b3aa:	6126      	str	r6, [r4, #16]
 800b3ac:	6165      	str	r5, [r4, #20]
 800b3ae:	443e      	add	r6, r7
 800b3b0:	1bed      	subs	r5, r5, r7
 800b3b2:	6026      	str	r6, [r4, #0]
 800b3b4:	60a5      	str	r5, [r4, #8]
 800b3b6:	464e      	mov	r6, r9
 800b3b8:	454e      	cmp	r6, r9
 800b3ba:	d900      	bls.n	800b3be <__ssputs_r+0x84>
 800b3bc:	464e      	mov	r6, r9
 800b3be:	4632      	mov	r2, r6
 800b3c0:	4641      	mov	r1, r8
 800b3c2:	6820      	ldr	r0, [r4, #0]
 800b3c4:	f000 f92b 	bl	800b61e <memmove>
 800b3c8:	68a3      	ldr	r3, [r4, #8]
 800b3ca:	1b9b      	subs	r3, r3, r6
 800b3cc:	60a3      	str	r3, [r4, #8]
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	441e      	add	r6, r3
 800b3d2:	6026      	str	r6, [r4, #0]
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	e7dc      	b.n	800b392 <__ssputs_r+0x58>
 800b3d8:	462a      	mov	r2, r5
 800b3da:	f000 f939 	bl	800b650 <_realloc_r>
 800b3de:	4606      	mov	r6, r0
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d1e2      	bne.n	800b3aa <__ssputs_r+0x70>
 800b3e4:	6921      	ldr	r1, [r4, #16]
 800b3e6:	4650      	mov	r0, sl
 800b3e8:	f7fc fe94 	bl	8008114 <_free_r>
 800b3ec:	e7c8      	b.n	800b380 <__ssputs_r+0x46>
	...

0800b3f0 <_svfiprintf_r>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	461d      	mov	r5, r3
 800b3f6:	898b      	ldrh	r3, [r1, #12]
 800b3f8:	061f      	lsls	r7, r3, #24
 800b3fa:	b09d      	sub	sp, #116	; 0x74
 800b3fc:	4680      	mov	r8, r0
 800b3fe:	460c      	mov	r4, r1
 800b400:	4616      	mov	r6, r2
 800b402:	d50f      	bpl.n	800b424 <_svfiprintf_r+0x34>
 800b404:	690b      	ldr	r3, [r1, #16]
 800b406:	b96b      	cbnz	r3, 800b424 <_svfiprintf_r+0x34>
 800b408:	2140      	movs	r1, #64	; 0x40
 800b40a:	f7fc fed1 	bl	80081b0 <_malloc_r>
 800b40e:	6020      	str	r0, [r4, #0]
 800b410:	6120      	str	r0, [r4, #16]
 800b412:	b928      	cbnz	r0, 800b420 <_svfiprintf_r+0x30>
 800b414:	230c      	movs	r3, #12
 800b416:	f8c8 3000 	str.w	r3, [r8]
 800b41a:	f04f 30ff 	mov.w	r0, #4294967295
 800b41e:	e0c8      	b.n	800b5b2 <_svfiprintf_r+0x1c2>
 800b420:	2340      	movs	r3, #64	; 0x40
 800b422:	6163      	str	r3, [r4, #20]
 800b424:	2300      	movs	r3, #0
 800b426:	9309      	str	r3, [sp, #36]	; 0x24
 800b428:	2320      	movs	r3, #32
 800b42a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b42e:	2330      	movs	r3, #48	; 0x30
 800b430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b434:	9503      	str	r5, [sp, #12]
 800b436:	f04f 0b01 	mov.w	fp, #1
 800b43a:	4637      	mov	r7, r6
 800b43c:	463d      	mov	r5, r7
 800b43e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b442:	b10b      	cbz	r3, 800b448 <_svfiprintf_r+0x58>
 800b444:	2b25      	cmp	r3, #37	; 0x25
 800b446:	d13e      	bne.n	800b4c6 <_svfiprintf_r+0xd6>
 800b448:	ebb7 0a06 	subs.w	sl, r7, r6
 800b44c:	d00b      	beq.n	800b466 <_svfiprintf_r+0x76>
 800b44e:	4653      	mov	r3, sl
 800b450:	4632      	mov	r2, r6
 800b452:	4621      	mov	r1, r4
 800b454:	4640      	mov	r0, r8
 800b456:	f7ff ff70 	bl	800b33a <__ssputs_r>
 800b45a:	3001      	adds	r0, #1
 800b45c:	f000 80a4 	beq.w	800b5a8 <_svfiprintf_r+0x1b8>
 800b460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b462:	4453      	add	r3, sl
 800b464:	9309      	str	r3, [sp, #36]	; 0x24
 800b466:	783b      	ldrb	r3, [r7, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f000 809d 	beq.w	800b5a8 <_svfiprintf_r+0x1b8>
 800b46e:	2300      	movs	r3, #0
 800b470:	f04f 32ff 	mov.w	r2, #4294967295
 800b474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b478:	9304      	str	r3, [sp, #16]
 800b47a:	9307      	str	r3, [sp, #28]
 800b47c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b480:	931a      	str	r3, [sp, #104]	; 0x68
 800b482:	462f      	mov	r7, r5
 800b484:	2205      	movs	r2, #5
 800b486:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b48a:	4850      	ldr	r0, [pc, #320]	; (800b5cc <_svfiprintf_r+0x1dc>)
 800b48c:	f7f4 fea8 	bl	80001e0 <memchr>
 800b490:	9b04      	ldr	r3, [sp, #16]
 800b492:	b9d0      	cbnz	r0, 800b4ca <_svfiprintf_r+0xda>
 800b494:	06d9      	lsls	r1, r3, #27
 800b496:	bf44      	itt	mi
 800b498:	2220      	movmi	r2, #32
 800b49a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b49e:	071a      	lsls	r2, r3, #28
 800b4a0:	bf44      	itt	mi
 800b4a2:	222b      	movmi	r2, #43	; 0x2b
 800b4a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4a8:	782a      	ldrb	r2, [r5, #0]
 800b4aa:	2a2a      	cmp	r2, #42	; 0x2a
 800b4ac:	d015      	beq.n	800b4da <_svfiprintf_r+0xea>
 800b4ae:	9a07      	ldr	r2, [sp, #28]
 800b4b0:	462f      	mov	r7, r5
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	250a      	movs	r5, #10
 800b4b6:	4639      	mov	r1, r7
 800b4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4bc:	3b30      	subs	r3, #48	; 0x30
 800b4be:	2b09      	cmp	r3, #9
 800b4c0:	d94d      	bls.n	800b55e <_svfiprintf_r+0x16e>
 800b4c2:	b1b8      	cbz	r0, 800b4f4 <_svfiprintf_r+0x104>
 800b4c4:	e00f      	b.n	800b4e6 <_svfiprintf_r+0xf6>
 800b4c6:	462f      	mov	r7, r5
 800b4c8:	e7b8      	b.n	800b43c <_svfiprintf_r+0x4c>
 800b4ca:	4a40      	ldr	r2, [pc, #256]	; (800b5cc <_svfiprintf_r+0x1dc>)
 800b4cc:	1a80      	subs	r0, r0, r2
 800b4ce:	fa0b f000 	lsl.w	r0, fp, r0
 800b4d2:	4318      	orrs	r0, r3
 800b4d4:	9004      	str	r0, [sp, #16]
 800b4d6:	463d      	mov	r5, r7
 800b4d8:	e7d3      	b.n	800b482 <_svfiprintf_r+0x92>
 800b4da:	9a03      	ldr	r2, [sp, #12]
 800b4dc:	1d11      	adds	r1, r2, #4
 800b4de:	6812      	ldr	r2, [r2, #0]
 800b4e0:	9103      	str	r1, [sp, #12]
 800b4e2:	2a00      	cmp	r2, #0
 800b4e4:	db01      	blt.n	800b4ea <_svfiprintf_r+0xfa>
 800b4e6:	9207      	str	r2, [sp, #28]
 800b4e8:	e004      	b.n	800b4f4 <_svfiprintf_r+0x104>
 800b4ea:	4252      	negs	r2, r2
 800b4ec:	f043 0302 	orr.w	r3, r3, #2
 800b4f0:	9207      	str	r2, [sp, #28]
 800b4f2:	9304      	str	r3, [sp, #16]
 800b4f4:	783b      	ldrb	r3, [r7, #0]
 800b4f6:	2b2e      	cmp	r3, #46	; 0x2e
 800b4f8:	d10c      	bne.n	800b514 <_svfiprintf_r+0x124>
 800b4fa:	787b      	ldrb	r3, [r7, #1]
 800b4fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b4fe:	d133      	bne.n	800b568 <_svfiprintf_r+0x178>
 800b500:	9b03      	ldr	r3, [sp, #12]
 800b502:	1d1a      	adds	r2, r3, #4
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	9203      	str	r2, [sp, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	bfb8      	it	lt
 800b50c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b510:	3702      	adds	r7, #2
 800b512:	9305      	str	r3, [sp, #20]
 800b514:	4d2e      	ldr	r5, [pc, #184]	; (800b5d0 <_svfiprintf_r+0x1e0>)
 800b516:	7839      	ldrb	r1, [r7, #0]
 800b518:	2203      	movs	r2, #3
 800b51a:	4628      	mov	r0, r5
 800b51c:	f7f4 fe60 	bl	80001e0 <memchr>
 800b520:	b138      	cbz	r0, 800b532 <_svfiprintf_r+0x142>
 800b522:	2340      	movs	r3, #64	; 0x40
 800b524:	1b40      	subs	r0, r0, r5
 800b526:	fa03 f000 	lsl.w	r0, r3, r0
 800b52a:	9b04      	ldr	r3, [sp, #16]
 800b52c:	4303      	orrs	r3, r0
 800b52e:	3701      	adds	r7, #1
 800b530:	9304      	str	r3, [sp, #16]
 800b532:	7839      	ldrb	r1, [r7, #0]
 800b534:	4827      	ldr	r0, [pc, #156]	; (800b5d4 <_svfiprintf_r+0x1e4>)
 800b536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b53a:	2206      	movs	r2, #6
 800b53c:	1c7e      	adds	r6, r7, #1
 800b53e:	f7f4 fe4f 	bl	80001e0 <memchr>
 800b542:	2800      	cmp	r0, #0
 800b544:	d038      	beq.n	800b5b8 <_svfiprintf_r+0x1c8>
 800b546:	4b24      	ldr	r3, [pc, #144]	; (800b5d8 <_svfiprintf_r+0x1e8>)
 800b548:	bb13      	cbnz	r3, 800b590 <_svfiprintf_r+0x1a0>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	3307      	adds	r3, #7
 800b54e:	f023 0307 	bic.w	r3, r3, #7
 800b552:	3308      	adds	r3, #8
 800b554:	9303      	str	r3, [sp, #12]
 800b556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b558:	444b      	add	r3, r9
 800b55a:	9309      	str	r3, [sp, #36]	; 0x24
 800b55c:	e76d      	b.n	800b43a <_svfiprintf_r+0x4a>
 800b55e:	fb05 3202 	mla	r2, r5, r2, r3
 800b562:	2001      	movs	r0, #1
 800b564:	460f      	mov	r7, r1
 800b566:	e7a6      	b.n	800b4b6 <_svfiprintf_r+0xc6>
 800b568:	2300      	movs	r3, #0
 800b56a:	3701      	adds	r7, #1
 800b56c:	9305      	str	r3, [sp, #20]
 800b56e:	4619      	mov	r1, r3
 800b570:	250a      	movs	r5, #10
 800b572:	4638      	mov	r0, r7
 800b574:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b578:	3a30      	subs	r2, #48	; 0x30
 800b57a:	2a09      	cmp	r2, #9
 800b57c:	d903      	bls.n	800b586 <_svfiprintf_r+0x196>
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d0c8      	beq.n	800b514 <_svfiprintf_r+0x124>
 800b582:	9105      	str	r1, [sp, #20]
 800b584:	e7c6      	b.n	800b514 <_svfiprintf_r+0x124>
 800b586:	fb05 2101 	mla	r1, r5, r1, r2
 800b58a:	2301      	movs	r3, #1
 800b58c:	4607      	mov	r7, r0
 800b58e:	e7f0      	b.n	800b572 <_svfiprintf_r+0x182>
 800b590:	ab03      	add	r3, sp, #12
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	4622      	mov	r2, r4
 800b596:	4b11      	ldr	r3, [pc, #68]	; (800b5dc <_svfiprintf_r+0x1ec>)
 800b598:	a904      	add	r1, sp, #16
 800b59a:	4640      	mov	r0, r8
 800b59c:	f7fc fef6 	bl	800838c <_printf_float>
 800b5a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b5a4:	4681      	mov	r9, r0
 800b5a6:	d1d6      	bne.n	800b556 <_svfiprintf_r+0x166>
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	065b      	lsls	r3, r3, #25
 800b5ac:	f53f af35 	bmi.w	800b41a <_svfiprintf_r+0x2a>
 800b5b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5b2:	b01d      	add	sp, #116	; 0x74
 800b5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b8:	ab03      	add	r3, sp, #12
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	4622      	mov	r2, r4
 800b5be:	4b07      	ldr	r3, [pc, #28]	; (800b5dc <_svfiprintf_r+0x1ec>)
 800b5c0:	a904      	add	r1, sp, #16
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	f7fd f998 	bl	80088f8 <_printf_i>
 800b5c8:	e7ea      	b.n	800b5a0 <_svfiprintf_r+0x1b0>
 800b5ca:	bf00      	nop
 800b5cc:	0800b8bc 	.word	0x0800b8bc
 800b5d0:	0800b8c2 	.word	0x0800b8c2
 800b5d4:	0800b8c6 	.word	0x0800b8c6
 800b5d8:	0800838d 	.word	0x0800838d
 800b5dc:	0800b33b 	.word	0x0800b33b

0800b5e0 <strncmp>:
 800b5e0:	b510      	push	{r4, lr}
 800b5e2:	b16a      	cbz	r2, 800b600 <strncmp+0x20>
 800b5e4:	3901      	subs	r1, #1
 800b5e6:	1884      	adds	r4, r0, r2
 800b5e8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b5ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d103      	bne.n	800b5fc <strncmp+0x1c>
 800b5f4:	42a0      	cmp	r0, r4
 800b5f6:	d001      	beq.n	800b5fc <strncmp+0x1c>
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1f5      	bne.n	800b5e8 <strncmp+0x8>
 800b5fc:	1a98      	subs	r0, r3, r2
 800b5fe:	bd10      	pop	{r4, pc}
 800b600:	4610      	mov	r0, r2
 800b602:	e7fc      	b.n	800b5fe <strncmp+0x1e>

0800b604 <__ascii_wctomb>:
 800b604:	b149      	cbz	r1, 800b61a <__ascii_wctomb+0x16>
 800b606:	2aff      	cmp	r2, #255	; 0xff
 800b608:	bf85      	ittet	hi
 800b60a:	238a      	movhi	r3, #138	; 0x8a
 800b60c:	6003      	strhi	r3, [r0, #0]
 800b60e:	700a      	strbls	r2, [r1, #0]
 800b610:	f04f 30ff 	movhi.w	r0, #4294967295
 800b614:	bf98      	it	ls
 800b616:	2001      	movls	r0, #1
 800b618:	4770      	bx	lr
 800b61a:	4608      	mov	r0, r1
 800b61c:	4770      	bx	lr

0800b61e <memmove>:
 800b61e:	4288      	cmp	r0, r1
 800b620:	b510      	push	{r4, lr}
 800b622:	eb01 0302 	add.w	r3, r1, r2
 800b626:	d807      	bhi.n	800b638 <memmove+0x1a>
 800b628:	1e42      	subs	r2, r0, #1
 800b62a:	4299      	cmp	r1, r3
 800b62c:	d00a      	beq.n	800b644 <memmove+0x26>
 800b62e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b632:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b636:	e7f8      	b.n	800b62a <memmove+0xc>
 800b638:	4283      	cmp	r3, r0
 800b63a:	d9f5      	bls.n	800b628 <memmove+0xa>
 800b63c:	1881      	adds	r1, r0, r2
 800b63e:	1ad2      	subs	r2, r2, r3
 800b640:	42d3      	cmn	r3, r2
 800b642:	d100      	bne.n	800b646 <memmove+0x28>
 800b644:	bd10      	pop	{r4, pc}
 800b646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b64a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b64e:	e7f7      	b.n	800b640 <memmove+0x22>

0800b650 <_realloc_r>:
 800b650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b652:	4607      	mov	r7, r0
 800b654:	4614      	mov	r4, r2
 800b656:	460e      	mov	r6, r1
 800b658:	b921      	cbnz	r1, 800b664 <_realloc_r+0x14>
 800b65a:	4611      	mov	r1, r2
 800b65c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b660:	f7fc bda6 	b.w	80081b0 <_malloc_r>
 800b664:	b922      	cbnz	r2, 800b670 <_realloc_r+0x20>
 800b666:	f7fc fd55 	bl	8008114 <_free_r>
 800b66a:	4625      	mov	r5, r4
 800b66c:	4628      	mov	r0, r5
 800b66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b670:	f000 f814 	bl	800b69c <_malloc_usable_size_r>
 800b674:	42a0      	cmp	r0, r4
 800b676:	d20f      	bcs.n	800b698 <_realloc_r+0x48>
 800b678:	4621      	mov	r1, r4
 800b67a:	4638      	mov	r0, r7
 800b67c:	f7fc fd98 	bl	80081b0 <_malloc_r>
 800b680:	4605      	mov	r5, r0
 800b682:	2800      	cmp	r0, #0
 800b684:	d0f2      	beq.n	800b66c <_realloc_r+0x1c>
 800b686:	4631      	mov	r1, r6
 800b688:	4622      	mov	r2, r4
 800b68a:	f7ff fa3d 	bl	800ab08 <memcpy>
 800b68e:	4631      	mov	r1, r6
 800b690:	4638      	mov	r0, r7
 800b692:	f7fc fd3f 	bl	8008114 <_free_r>
 800b696:	e7e9      	b.n	800b66c <_realloc_r+0x1c>
 800b698:	4635      	mov	r5, r6
 800b69a:	e7e7      	b.n	800b66c <_realloc_r+0x1c>

0800b69c <_malloc_usable_size_r>:
 800b69c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6a0:	1f18      	subs	r0, r3, #4
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	bfbc      	itt	lt
 800b6a6:	580b      	ldrlt	r3, [r1, r0]
 800b6a8:	18c0      	addlt	r0, r0, r3
 800b6aa:	4770      	bx	lr

0800b6ac <_init>:
 800b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ae:	bf00      	nop
 800b6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6b2:	bc08      	pop	{r3}
 800b6b4:	469e      	mov	lr, r3
 800b6b6:	4770      	bx	lr

0800b6b8 <_fini>:
 800b6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ba:	bf00      	nop
 800b6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6be:	bc08      	pop	{r3}
 800b6c0:	469e      	mov	lr, r3
 800b6c2:	4770      	bx	lr
